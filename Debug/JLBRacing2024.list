
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018548  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08018748  08018748  00028748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018af0  08018af0  000300e8  2**0
                  CONTENTS
  4 .ARM          00000008  08018af0  08018af0  00028af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018af8  08018af8  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018af8  08018af8  00028af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018afc  08018afc  00028afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08018b00  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003910  200000e8  08018be8  000300e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200039f8  08018be8  000339f8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003011e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049399  00000000  00000000  00030161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000078fa  00000000  00000000  000794fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003388  00000000  00000000  00080df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000027bf  00000000  00000000  00084180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000381f2  00000000  00000000  0008693f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003bafb  00000000  00000000  000beb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00160afb  00000000  00000000  000fa62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ee2c  00000000  00000000  0025b128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00269f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000e8 	.word	0x200000e8
 800021c:	00000000 	.word	0x00000000
 8000220:	08018730 	.word	0x08018730

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000ec 	.word	0x200000ec
 800023c:	08018730 	.word	0x08018730

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b982 	b.w	8000ef8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d146      	bne.n	8000caa <__udivmoddi4+0x9e>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d95e      	bls.n	8000ce0 <__udivmoddi4+0xd4>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	409c      	lsls	r4, r3
 8000c34:	fa20 f202 	lsr.w	r2, r0, r2
 8000c38:	4317      	orrs	r7, r2
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x5e>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x5c>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f200 8134 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000c68:	4639      	mov	r1, r7
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	fb00 f505 	mul.w	r5, r0, r5
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x88>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x86>
 8000c8c:	42a5      	cmp	r5, r4
 8000c8e:	f200 8119 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000c92:	4610      	mov	r0, r2
 8000c94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c98:	1b64      	subs	r4, r4, r5
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11e      	cbz	r6, 8000ca6 <__udivmoddi4+0x9a>
 8000c9e:	40dc      	lsrs	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0xb4>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	f000 80fc 	beq.w	8000eac <__udivmoddi4+0x2a0>
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc0:	fab3 f183 	clz	r1, r3
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	d14c      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	f0c0 80f2 	bcc.w	8000eb2 <__udivmoddi4+0x2a6>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f240 80ef 	bls.w	8000eb2 <__udivmoddi4+0x2a6>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d0e5      	beq.n	8000ca6 <__udivmoddi4+0x9a>
 8000cda:	e9c6 4700 	strd	r4, r7, [r6]
 8000cde:	e7e2      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xd8>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f382 	clz	r3, r2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f040 809f 	bne.w	8000e2c <__udivmoddi4+0x220>
 8000cee:	1a8a      	subs	r2, r1, r2
 8000cf0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb2 f5fe 	udiv	r5, r2, lr
 8000cfe:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d08:	fb07 f005 	mul.w	r0, r7, r5
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d90f      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d10:	eb1c 0202 	adds.w	r2, ip, r2
 8000d14:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d18:	bf2c      	ite	cs
 8000d1a:	f04f 0901 	movcs.w	r9, #1
 8000d1e:	f04f 0900 	movcc.w	r9, #0
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d903      	bls.n	8000d2e <__udivmoddi4+0x122>
 8000d26:	f1b9 0f00 	cmp.w	r9, #0
 8000d2a:	f000 80ce 	beq.w	8000eca <__udivmoddi4+0x2be>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d38:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d44:	42a7      	cmp	r7, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	42a7      	cmp	r7, r4
 8000d54:	f200 80b3 	bhi.w	8000ebe <__udivmoddi4+0x2b2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	1be4      	subs	r4, r4, r7
 8000d5c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d60:	e79c      	b.n	8000c9c <__udivmoddi4+0x90>
 8000d62:	f1c1 0420 	rsb	r4, r1, #32
 8000d66:	408b      	lsls	r3, r1
 8000d68:	fa05 fc01 	lsl.w	ip, r5, r1
 8000d6c:	fa22 f704 	lsr.w	r7, r2, r4
 8000d70:	40e5      	lsrs	r5, r4
 8000d72:	408a      	lsls	r2, r1
 8000d74:	431f      	orrs	r7, r3
 8000d76:	fa20 f304 	lsr.w	r3, r0, r4
 8000d7a:	4088      	lsls	r0, r1
 8000d7c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d80:	ea43 030c 	orr.w	r3, r3, ip
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb5 fef8 	udiv	lr, r5, r8
 8000d90:	fb08 551e 	mls	r5, r8, lr, r5
 8000d94:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000d98:	fb0e f90c 	mul.w	r9, lr, ip
 8000d9c:	45a9      	cmp	r9, r5
 8000d9e:	d90e      	bls.n	8000dbe <__udivmoddi4+0x1b2>
 8000da0:	197d      	adds	r5, r7, r5
 8000da2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0b01 	movcs.w	fp, #1
 8000dac:	f04f 0b00 	movcc.w	fp, #0
 8000db0:	45a9      	cmp	r9, r5
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000db4:	f1bb 0f00 	cmp.w	fp, #0
 8000db8:	f000 808d 	beq.w	8000ed6 <__udivmoddi4+0x2ca>
 8000dbc:	46d6      	mov	lr, sl
 8000dbe:	eba5 0509 	sub.w	r5, r5, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb5 f3f8 	udiv	r3, r5, r8
 8000dca:	fb08 5513 	mls	r5, r8, r3, r5
 8000dce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dd6:	45ac      	cmp	ip, r5
 8000dd8:	d906      	bls.n	8000de8 <__udivmoddi4+0x1dc>
 8000dda:	197d      	adds	r5, r7, r5
 8000ddc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000de0:	d201      	bcs.n	8000de6 <__udivmoddi4+0x1da>
 8000de2:	45ac      	cmp	ip, r5
 8000de4:	d87e      	bhi.n	8000ee4 <__udivmoddi4+0x2d8>
 8000de6:	4643      	mov	r3, r8
 8000de8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000dec:	eba5 050c 	sub.w	r5, r5, ip
 8000df0:	fba3 9802 	umull	r9, r8, r3, r2
 8000df4:	4545      	cmp	r5, r8
 8000df6:	46ce      	mov	lr, r9
 8000df8:	46c4      	mov	ip, r8
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x1f6>
 8000dfc:	d106      	bne.n	8000e0c <__udivmoddi4+0x200>
 8000dfe:	4548      	cmp	r0, r9
 8000e00:	d204      	bcs.n	8000e0c <__udivmoddi4+0x200>
 8000e02:	3b01      	subs	r3, #1
 8000e04:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e08:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d06f      	beq.n	8000ef0 <__udivmoddi4+0x2e4>
 8000e10:	ebb0 020e 	subs.w	r2, r0, lr
 8000e14:	eb65 050c 	sbc.w	r5, r5, ip
 8000e18:	40ca      	lsrs	r2, r1
 8000e1a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e1e:	40cd      	lsrs	r5, r1
 8000e20:	4618      	mov	r0, r3
 8000e22:	4314      	orrs	r4, r2
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 4500 	strd	r4, r5, [r6]
 8000e2a:	e73c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	f1c3 0220 	rsb	r2, r3, #32
 8000e34:	4099      	lsls	r1, r3
 8000e36:	409c      	lsls	r4, r3
 8000e38:	40d5      	lsrs	r5, r2
 8000e3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000e42:	fa1f f78c 	uxth.w	r7, ip
 8000e46:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e50:	0c11      	lsrs	r1, r2, #16
 8000e52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e56:	fb00 f507 	mul.w	r5, r0, r7
 8000e5a:	428d      	cmp	r5, r1
 8000e5c:	d90e      	bls.n	8000e7c <__udivmoddi4+0x270>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0901 	movcs.w	r9, #1
 8000e6c:	f04f 0900 	movcc.w	r9, #0
 8000e70:	428d      	cmp	r5, r1
 8000e72:	d902      	bls.n	8000e7a <__udivmoddi4+0x26e>
 8000e74:	f1b9 0f00 	cmp.w	r9, #0
 8000e78:	d031      	beq.n	8000ede <__udivmoddi4+0x2d2>
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	1b49      	subs	r1, r1, r5
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	fbb1 f5fe 	udiv	r5, r1, lr
 8000e84:	fb0e 1115 	mls	r1, lr, r5, r1
 8000e88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e8c:	fb05 f107 	mul.w	r1, r5, r7
 8000e90:	4291      	cmp	r1, r2
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x298>
 8000e94:	eb1c 0202 	adds.w	r2, ip, r2
 8000e98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9c:	d201      	bcs.n	8000ea2 <__udivmoddi4+0x296>
 8000e9e:	4291      	cmp	r1, r2
 8000ea0:	d823      	bhi.n	8000eea <__udivmoddi4+0x2de>
 8000ea2:	4645      	mov	r5, r8
 8000ea4:	1a52      	subs	r2, r2, r1
 8000ea6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eaa:	e726      	b.n	8000cfa <__udivmoddi4+0xee>
 8000eac:	4631      	mov	r1, r6
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e6f9      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000eb2:	1a84      	subs	r4, r0, r2
 8000eb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4617      	mov	r7, r2
 8000ebc:	e70b      	b.n	8000cd6 <__udivmoddi4+0xca>
 8000ebe:	4464      	add	r4, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74a      	b.n	8000d5a <__udivmoddi4+0x14e>
 8000ec4:	4464      	add	r4, ip
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	e6e4      	b.n	8000c94 <__udivmoddi4+0x88>
 8000eca:	3d02      	subs	r5, #2
 8000ecc:	4462      	add	r2, ip
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	3902      	subs	r1, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e6c9      	b.n	8000c6a <__udivmoddi4+0x5e>
 8000ed6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eda:	443d      	add	r5, r7
 8000edc:	e76f      	b.n	8000dbe <__udivmoddi4+0x1b2>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	e7cb      	b.n	8000e7c <__udivmoddi4+0x270>
 8000ee4:	3b02      	subs	r3, #2
 8000ee6:	443d      	add	r5, r7
 8000ee8:	e77e      	b.n	8000de8 <__udivmoddi4+0x1dc>
 8000eea:	3d02      	subs	r5, #2
 8000eec:	4462      	add	r2, ip
 8000eee:	e7d9      	b.n	8000ea4 <__udivmoddi4+0x298>
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	e6d7      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f0c:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f16:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f20:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f2a:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[3];
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f34:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f3e:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f48:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f52:	81da      	strh	r2, [r3, #14]

	vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f014 f8d5 	bl	8015108 <vTaskResume>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000104 	.word	0x20000104
 8000f6c:	20000124 	.word	0x20000124
 8000f70:	2000025c 	.word	0x2000025c

08000f74 <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8000f7a:	4b91      	ldr	r3, [pc, #580]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000f7c:	895b      	ldrh	r3, [r3, #10]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f86:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f96:	4b8d      	ldr	r3, [pc, #564]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000f98:	edc3 7a00 	vstr	s15, [r3]
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8000f9c:	4b88      	ldr	r3, [pc, #544]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000f9e:	89db      	ldrh	r3, [r3, #14]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fa8:	eddf 6a86 	vldr	s13, [pc, #536]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb8:	4b84      	ldr	r3, [pc, #528]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000fba:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 8000fbe:	4b80      	ldr	r3, [pc, #512]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000fc0:	891b      	ldrh	r3, [r3, #8]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fca:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fda:	4b7c      	ldr	r3, [pc, #496]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000fdc:	edc3 7a02 	vstr	s15, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 8000fe0:	4b77      	ldr	r3, [pc, #476]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000fe2:	88db      	ldrh	r3, [r3, #6]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fec:	eddf 6a75 	vldr	s13, [pc, #468]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff4:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffc:	4b73      	ldr	r3, [pc, #460]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000ffe:	edc3 7a03 	vstr	s15, [r3, #12]

	for(i = 0; i < 1; ++i)
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e0a1      	b.n	800114c <_Z18DistanceSensorTaskv+0x1d8>
	{
		float x = distance_sensor.voltage_long[i];
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a70      	ldr	r2, [pc, #448]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	603b      	str	r3, [r7, #0]
		distance_sensor.distance_long[i] = 0.0f;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a6d      	ldr	r2, [pc, #436]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001018:	3304      	adds	r3, #4
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8001024:	2300      	movs	r3, #0
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	e03a      	b.n	80010a0 <_Z18DistanceSensorTaskv+0x12c>
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	f1c3 0305 	rsb	r3, r3, #5
 8001030:	4618      	mov	r0, r3
 8001032:	ed97 0a00 	vldr	s0, [r7]
 8001036:	f000 f8d1 	bl	80011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800103a:	ec55 4b10 	vmov	r4, r5, d0
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	4a63      	ldr	r2, [pc, #396]	; (80011d0 <_Z18DistanceSensorTaskv+0x25c>)
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa6f 	bl	800052c <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4620      	mov	r0, r4
 8001054:	4629      	mov	r1, r5
 8001056:	f7ff fac1 	bl	80005dc <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4614      	mov	r4, r2
 8001060:	461d      	mov	r5, r3
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4a59      	ldr	r2, [pc, #356]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001066:	3304      	adds	r3, #4
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa5c 	bl	800052c <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff f8f8 	bl	8000270 <__adddf3>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	79fc      	ldrb	r4, [r7, #7]
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fd57 	bl	8000b3c <__aeabi_d2f>
 800108e:	4602      	mov	r2, r0
 8001090:	494e      	ldr	r1, [pc, #312]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001092:	1d23      	adds	r3, r4, #4
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	3301      	adds	r3, #1
 800109e:	71bb      	strb	r3, [r7, #6]
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	d9c1      	bls.n	800102a <_Z18DistanceSensorTaskv+0xb6>
		}

		distance_sensor.distance_short[i] = 0.0f;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4a48      	ldr	r2, [pc, #288]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80010aa:	3306      	adds	r3, #6
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
		x = distance_sensor.voltage_short[i];
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a44      	ldr	r2, [pc, #272]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80010ba:	3302      	adds	r3, #2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	603b      	str	r3, [r7, #0]
		for(j = 0; j < 6; ++j)
 80010c4:	2300      	movs	r3, #0
 80010c6:	71bb      	strb	r3, [r7, #6]
 80010c8:	e03a      	b.n	8001140 <_Z18DistanceSensorTaskv+0x1cc>
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	f1c3 0305 	rsb	r3, r3, #5
 80010d0:	4618      	mov	r0, r3
 80010d2:	ed97 0a00 	vldr	s0, [r7]
 80010d6:	f000 f881 	bl	80011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010da:	ec55 4b10 	vmov	r4, r5, d0
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	4a3c      	ldr	r2, [pc, #240]	; (80011d4 <_Z18DistanceSensorTaskv+0x260>)
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa1f 	bl	800052c <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff fa71 	bl	80005dc <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a31      	ldr	r2, [pc, #196]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001106:	3306      	adds	r3, #6
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa0c 	bl	800052c <__aeabi_f2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4620      	mov	r0, r4
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff f8a8 	bl	8000270 <__adddf3>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	79fc      	ldrb	r4, [r7, #7]
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd07 	bl	8000b3c <__aeabi_d2f>
 800112e:	4602      	mov	r2, r0
 8001130:	4926      	ldr	r1, [pc, #152]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001132:	1da3      	adds	r3, r4, #6
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	3301      	adds	r3, #1
 800113e:	71bb      	strb	r3, [r7, #6]
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	2b05      	cmp	r3, #5
 8001144:	d9c1      	bls.n	80010ca <_Z18DistanceSensorTaskv+0x156>
	for(i = 0; i < 1; ++i)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	3301      	adds	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f43f af5a 	beq.w	8001008 <_Z18DistanceSensorTaskv+0x94>
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001156:	edd3 7a06 	vldr	s15, [r3, #24]
 800115a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800115e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	da09      	bge.n	800117c <_Z18DistanceSensorTaskv+0x208>
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800116a:	edd3 7a07 	vldr	s15, [r3, #28]
 800116e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117a:	db04      	blt.n	8001186 <_Z18DistanceSensorTaskv+0x212>
	{
		//distance_sensor.distance = (distance_sensor.distance_long[0] + distance_sensor.distance_long[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_long[0];
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	e003      	b.n	800118e <_Z18DistanceSensorTaskv+0x21a>
	}
	else
	{
		//distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_short[0];
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800118c:	6213      	str	r3, [r2, #32]
	}

	distance_sensor.distance -= 7.0f;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001190:	edd3 7a08 	vldr	s15, [r3, #32]
 8001194:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001198:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800119e:	edc3 7a08 	vstr	s15, [r3, #32]
	distance_sensor.distance /= 100.0f;
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80011a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80011a8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80011d8 <_Z18DistanceSensorTaskv+0x264>
 80011ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80011b2:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000124 	.word	0x20000124
 80011c4:	45800000 	.word	0x45800000
 80011c8:	40533333 	.word	0x40533333
 80011cc:	20000134 	.word	0x20000134
 80011d0:	20000018 	.word	0x20000018
 80011d4:	20000000 	.word	0x20000000
 80011d8:	42c80000 	.word	0x42c80000

080011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80011e6:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff f99f 	bl	800052c <__aeabi_f2d>
 80011ee:	4604      	mov	r4, r0
 80011f0:	460d      	mov	r5, r1
 80011f2:	6838      	ldr	r0, [r7, #0]
 80011f4:	f7ff f988 	bl	8000508 <__aeabi_i2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ec43 2b11 	vmov	d1, r2, r3
 8001200:	ec45 4b10 	vmov	d0, r4, r5
 8001204:	f015 fb88 	bl	8016918 <pow>
 8001208:	eeb0 7a40 	vmov.f32	s14, s0
 800120c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001210:	eeb0 0a47 	vmov.f32	s0, s14
 8001214:	eef0 0a67 	vmov.f32	s1, s15
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001220 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>:

encoder_instance enc_instance_mot;
extern TIM_HandleTypeDef htim3;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if (!first_time)
 8001232:	4b38      	ldr	r3, [pc, #224]	; (8001314 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x28>
	{
		encoder_value->velocity = 0;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e05c      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
	}
	else
	{
		if (temp_counter == encoder_value->last_counter_value)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	429a      	cmp	r2, r3
 8001250:	d103      	bne.n	800125a <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x3a>
		{
			encoder_value->velocity = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	801a      	strh	r2, [r3, #0]
 8001258:	e053      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
		}
		else if (temp_counter > encoder_value->last_counter_value)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d927      	bls.n	80012b4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x94>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b10      	cmp	r3, #16
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d010      	beq.n	800129e <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x7e>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	b29a      	uxth	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	b29b      	uxth	r3, r3
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	b29b      	uxth	r3, r3
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	b21a      	sxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e031      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	801a      	strh	r2, [r3, #0]
 80012b2:	e026      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b10      	cmp	r3, #16
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00a      	beq.n	80012e2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xc2>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	801a      	strh	r2, [r3, #0]
 80012e0:	e00f      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000164 	.word	0x20000164

08001318 <_Z12Encoder_TaskPv>:

void Encoder_Task(void * argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	811a      	strh	r2, [r3, #8]
	uint8_t index = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8001330:	f014 f82a 	bl	8015388 <xTaskGetTickCount>
 8001334:	4603      	mov	r3, r0
 8001336:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		update_encoder(&enc_instance_mot, &htim3);
 8001338:	491e      	ldr	r1, [pc, #120]	; (80013b4 <_Z12Encoder_TaskPv+0x9c>)
 800133a:	481f      	ldr	r0, [pc, #124]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 800133c:	f7ff ff70 	bl	8001220 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>
		velocity_values[index++] = enc_instance_mot.velocity;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001342:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	1c59      	adds	r1, r3, #1
 800134a:	75f9      	strb	r1, [r7, #23]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3318      	adds	r3, #24
 8001350:	443b      	add	r3, r7
 8001352:	f823 2c0c 	strh.w	r2, [r3, #-12]

		if(index == 5)
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b05      	cmp	r3, #5
 800135a:	d101      	bne.n	8001360 <_Z12Encoder_TaskPv+0x48>
		{
			index = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]
		}

		enc_instance_mot.rpm = 0.0f;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 8001368:	2300      	movs	r3, #0
 800136a:	75bb      	strb	r3, [r7, #22]
 800136c:	e018      	b.n	80013a0 <_Z12Encoder_TaskPv+0x88>
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001370:	ed93 7a02 	vldr	s14, [r3, #8]
 8001374:	7dbb      	ldrb	r3, [r7, #22]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	3318      	adds	r3, #24
 800137a:	443b      	add	r3, r7
 800137c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001388:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800138c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001396:	edc3 7a02 	vstr	s15, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 800139a:	7dbb      	ldrb	r3, [r7, #22]
 800139c:	3301      	adds	r3, #1
 800139e:	75bb      	strb	r3, [r7, #22]
 80013a0:	7dbb      	ldrb	r3, [r7, #22]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d9e3      	bls.n	800136e <_Z12Encoder_TaskPv+0x56>
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	2101      	movs	r1, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f013 fd9b 	bl	8014ee8 <vTaskDelayUntil>
		update_encoder(&enc_instance_mot, &htim3);
 80013b2:	e7c1      	b.n	8001338 <_Z12Encoder_TaskPv+0x20>
 80013b4:	200006e8 	.word	0x200006e8
 80013b8:	20000158 	.word	0x20000158

080013bc <_Z15readByteFromIMUh>:
extern I2C_HandleTypeDef hi2c1;
uint8_t IMU_initialized = 0u;
IMU_signals_s imu = {0};

uint8_t readByteFromIMU(uint8_t address)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	2364      	movs	r3, #100	; 0x64
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	21d6      	movs	r1, #214	; 0xd6
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <_Z15readByteFromIMUh+0x3c>)
 80013d6:	f00b f885 	bl	800c4e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 80013da:	f107 020f 	add.w	r2, r7, #15
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	21d7      	movs	r1, #215	; 0xd7
 80013e6:	4804      	ldr	r0, [pc, #16]	; (80013f8 <_Z15readByteFromIMUh+0x3c>)
 80013e8:	f00b f970 	bl	800c6cc <HAL_I2C_Master_Receive>
	return ret;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000338 	.word	0x20000338
 80013fc:	00000000 	.word	0x00000000

08001400 <_Z8IMU_Taskv>:
uint8_t test_data[6] = {0u};

void IMU_Task()
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af02      	add	r7, sp, #8
	if(IMU_initialized == 0u)
 8001406:	4b78      	ldr	r3, [pc, #480]	; (80015e8 <_Z8IMU_Taskv+0x1e8>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d13f      	bne.n	800148e <_Z8IMU_Taskv+0x8e>
	{
		uint8_t whoami = 0u;
 800140e:	2300      	movs	r3, #0
 8001410:	72bb      	strb	r3, [r7, #10]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 8001412:	230f      	movs	r3, #15
 8001414:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 8001416:	f107 0209 	add.w	r2, r7, #9
 800141a:	2364      	movs	r3, #100	; 0x64
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	21d6      	movs	r1, #214	; 0xd6
 8001422:	4872      	ldr	r0, [pc, #456]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 8001424:	f00b f85e 	bl	800c4e4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 8001428:	f107 020a 	add.w	r2, r7, #10
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	21d7      	movs	r1, #215	; 0xd7
 8001434:	486d      	ldr	r0, [pc, #436]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 8001436:	f00b f949 	bl	800c6cc <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 800143a:	7abb      	ldrb	r3, [r7, #10]
 800143c:	2b6a      	cmp	r3, #106	; 0x6a
 800143e:	f040 80c8 	bne.w	80015d2 <_Z8IMU_Taskv+0x1d2>
		{
			return;
		}

		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x60};
 8001442:	f246 0310 	movw	r3, #24592	; 0x6010
 8001446:	80bb      	strh	r3, [r7, #4]
		//HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);

		pData[0] = CTRL2_G_ADDR;
 8001448:	2311      	movs	r3, #17
 800144a:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 800144c:	1d3a      	adds	r2, r7, #4
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2302      	movs	r3, #2
 8001454:	21d6      	movs	r1, #214	; 0xd6
 8001456:	4865      	ldr	r0, [pc, #404]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 8001458:	f00b f844 	bl	800c4e4 <HAL_I2C_Master_Transmit>

		uint8_t ctrl3c = readByteFromIMU(0x12);
 800145c:	2012      	movs	r0, #18
 800145e:	f7ff ffad 	bl	80013bc <_Z15readByteFromIMUh>
 8001462:	4603      	mov	r3, r0
 8001464:	72fb      	strb	r3, [r7, #11]
		ctrl3c = ctrl3c & (~0x04);
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	72fb      	strb	r3, [r7, #11]
		pData[0] = 0x12;
 800146e:	2312      	movs	r3, #18
 8001470:	713b      	strb	r3, [r7, #4]
		pData[1] = ctrl3c;
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8001476:	1d3a      	adds	r2, r7, #4
 8001478:	2364      	movs	r3, #100	; 0x64
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2302      	movs	r3, #2
 800147e:	21d6      	movs	r1, #214	; 0xd6
 8001480:	485a      	ldr	r0, [pc, #360]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 8001482:	f00b f82f 	bl	800c4e4 <HAL_I2C_Master_Transmit>

		IMU_initialized = 1u;
 8001486:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <_Z8IMU_Taskv+0x1e8>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e0a2      	b.n	80015d4 <_Z8IMU_Taskv+0x1d4>
	}
	else
	{
		uint8_t status = 0u;
 800148e:	2300      	movs	r3, #0
 8001490:	70fb      	strb	r3, [r7, #3]
		uint8_t status_reg = STATUS_REG;
 8001492:	231e      	movs	r3, #30
 8001494:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 8001496:	1cba      	adds	r2, r7, #2
 8001498:	2364      	movs	r3, #100	; 0x64
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	21d6      	movs	r1, #214	; 0xd6
 80014a0:	4852      	ldr	r0, [pc, #328]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 80014a2:	f00b f81f 	bl	800c4e4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 80014a6:	1cfa      	adds	r2, r7, #3
 80014a8:	2364      	movs	r3, #100	; 0x64
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	21d7      	movs	r1, #215	; 0xd7
 80014b0:	484e      	ldr	r0, [pc, #312]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 80014b2:	f00b f90b 	bl	800c6cc <HAL_I2C_Master_Receive>

		//Accelerometer new data available
		if((status & 0x01) == 1u)
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d053      	beq.n	8001568 <_Z8IMU_Taskv+0x168>
		{
			uint8_t tmp_low, tmp_high;
			tmp_low = readByteFromIMU(OUTX_L_XL);
 80014c0:	2028      	movs	r0, #40	; 0x28
 80014c2:	f7ff ff7b 	bl	80013bc <_Z15readByteFromIMUh>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTX_H_XL);
 80014ca:	2029      	movs	r0, #41	; 0x29
 80014cc:	f7ff ff76 	bl	80013bc <_Z15readByteFromIMUh>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73bb      	strb	r3, [r7, #14]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b21a      	sxth	r2, r3
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ea:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80015f0 <_Z8IMU_Taskv+0x1f0>
 80014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f2:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <_Z8IMU_Taskv+0x1f4>)
 80014f4:	edc3 7a00 	vstr	s15, [r3]

			tmp_low = readByteFromIMU(OUTY_L_XL);
 80014f8:	202a      	movs	r0, #42	; 0x2a
 80014fa:	f7ff ff5f 	bl	80013bc <_Z15readByteFromIMUh>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTY_L_XL);
 8001502:	202a      	movs	r0, #42	; 0x2a
 8001504:	f7ff ff5a 	bl	80013bc <_Z15readByteFromIMUh>
 8001508:	4603      	mov	r3, r0
 800150a:	73bb      	strb	r3, [r7, #14]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001522:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80015f0 <_Z8IMU_Taskv+0x1f0>
 8001526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <_Z8IMU_Taskv+0x1f4>)
 800152c:	edc3 7a01 	vstr	s15, [r3, #4]

			tmp_low = readByteFromIMU(OUTZ_L_XL);
 8001530:	202c      	movs	r0, #44	; 0x2c
 8001532:	f7ff ff43 	bl	80013bc <_Z15readByteFromIMUh>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTZ_L_XL);
 800153a:	202c      	movs	r0, #44	; 0x2c
 800153c:	f7ff ff3e 	bl	80013bc <_Z15readByteFromIMUh>
 8001540:	4603      	mov	r3, r0
 8001542:	73bb      	strb	r3, [r7, #14]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21b      	sxth	r3, r3
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80015f0 <_Z8IMU_Taskv+0x1f0>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <_Z8IMU_Taskv+0x1f4>)
 8001564:	edc3 7a02 	vstr	s15, [r3, #8]

		}
		//Gyroscope new data available
		if((status & 0x02) == 2u)
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d030      	beq.n	80015d4 <_Z8IMU_Taskv+0x1d4>
		{
			uint8_t tmp_low, tmp_high;

			tmp_low = readByteFromIMU(OUTZ_L_G);
 8001572:	2026      	movs	r0, #38	; 0x26
 8001574:	f7ff ff22 	bl	80013bc <_Z15readByteFromIMUh>
 8001578:	4603      	mov	r3, r0
 800157a:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTZ_H_G);
 800157c:	2027      	movs	r0, #39	; 0x27
 800157e:	f7ff ff1d 	bl	80013bc <_Z15readByteFromIMUh>
 8001582:	4603      	mov	r3, r0
 8001584:	733b      	strb	r3, [r7, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453;
 8001586:	7b3b      	ldrb	r3, [r7, #12]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21b      	sxth	r3, r3
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80015f8 <_Z8IMU_Taskv+0x1f8>
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80015fc <_Z8IMU_Taskv+0x1fc>
 80015a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ac:	ee16 0a90 	vmov	r0, s13
 80015b0:	f7fe ffbc 	bl	800052c <__aeabi_f2d>
 80015b4:	a30a      	add	r3, pc, #40	; (adr r3, 80015e0 <_Z8IMU_Taskv+0x1e0>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f80f 	bl	80005dc <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fab9 	bl	8000b3c <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <_Z8IMU_Taskv+0x1f4>)
 80015ce:	60d3      	str	r3, [r2, #12]
 80015d0:	e000      	b.n	80015d4 <_Z8IMU_Taskv+0x1d4>
			return;
 80015d2:	bf00      	nop
			//tmp_high = readByteFromIMU(OUTY_H_G);
			//imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY;

		}
	}
}
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	00de4c51 	.word	0x00de4c51
 80015e4:	3f91df33 	.word	0x3f91df33
 80015e8:	20000165 	.word	0x20000165
 80015ec:	20000338 	.word	0x20000338
 80015f0:	3d79db23 	.word	0x3d79db23
 80015f4:	20000168 	.word	0x20000168
 80015f8:	407423e2 	.word	0x407423e2
 80015fc:	447a0000 	.word	0x447a0000

08001600 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:
uint16_t infra_adc_values_test[32];
uint8_t infra_adc_data[32*2];

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
	uint8_t i;
	uint8_t data = 0x11 << num;
 800160e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001612:	2211      	movs	r2, #17
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	75bb      	strb	r3, [r7, #22]

	for(i = 0; i < 4; ++i)
 800161c:	2300      	movs	r3, #0
 800161e:	75fb      	strb	r3, [r7, #23]
 8001620:	e00a      	b.n	8001638 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x38>
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001622:	f107 0116 	add.w	r1, r7, #22
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	2201      	movs	r2, #1
 800162c:	4821      	ldr	r0, [pc, #132]	; (80016b4 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0xb4>)
 800162e:	f00d fd2e 	bl	800f08e <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	3301      	adds	r3, #1
 8001636:	75fb      	strb	r3, [r7, #23]
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d9f1      	bls.n	8001622 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x22>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4619      	mov	r1, r3
 800164a:	f00a fe89 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3304      	adds	r3, #4
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3302      	adds	r3, #2
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	4619      	mov	r1, r3
 800165e:	f00a fe7f 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	4619      	mov	r1, r3
 800166e:	f00a fe77 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3304      	adds	r3, #4
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	3302      	adds	r3, #2
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	4619      	mov	r1, r3
 8001682:	f00a fe6d 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	f00a fe65 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3302      	adds	r3, #2
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	4619      	mov	r1, r3
 80016a6:	f00a fe5b 	bl	800c360 <HAL_GPIO_WritePin>

}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200005d4 	.word	0x200005d4

080016b8 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4619      	mov	r1, r3
 80016d2:	f00a fe45 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3304      	adds	r3, #4
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	3302      	adds	r3, #2
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	2201      	movs	r2, #1
 80016e4:	4619      	mov	r1, r3
 80016e6:	f00a fe3b 	bl	800c360 <HAL_GPIO_WritePin>
	uint8_t i;
	for (i = 0; i < 4; ++i)
 80016ea:	2300      	movs	r3, #0
 80016ec:	75fb      	strb	r3, [r7, #23]
 80016ee:	e011      	b.n	8001714 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x5c>
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	6a3a      	ldr	r2, [r7, #32]
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 80016fe:	f107 0116 	add.w	r1, r7, #22
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	2201      	movs	r2, #1
 8001708:	482d      	ldr	r0, [pc, #180]	; (80017c0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 800170a:	f00d fcc0 	bl	800f08e <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	3301      	adds	r3, #1
 8001712:	75fb      	strb	r3, [r7, #23]
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d9ea      	bls.n	80016f0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x38>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	4619      	mov	r1, r3
 8001726:	f00a fe1b 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	2200      	movs	r2, #0
 8001734:	4619      	mov	r1, r3
 8001736:	f00a fe13 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	f00a fe0b 	bl	800c360 <HAL_GPIO_WritePin>
	for (i = 0; i < 4; ++i)
 800174a:	2300      	movs	r3, #0
 800174c:	75fb      	strb	r3, [r7, #23]
 800174e:	e011      	b.n	8001774 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xbc>
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 800175e:	f107 0115 	add.w	r1, r7, #21
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	2201      	movs	r2, #1
 8001768:	4815      	ldr	r0, [pc, #84]	; (80017c0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 800176a:	f00d fc90 	bl	800f08e <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	3301      	adds	r3, #1
 8001772:	75fb      	strb	r3, [r7, #23]
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d9ea      	bls.n	8001750 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x98>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3304      	adds	r3, #4
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3302      	adds	r3, #2
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	2201      	movs	r2, #1
 8001788:	4619      	mov	r1, r3
 800178a:	f00a fde9 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3304      	adds	r3, #4
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	3302      	adds	r3, #2
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	f00a fddf 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3304      	adds	r3, #4
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	3302      	adds	r3, #2
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	4619      	mov	r1, r3
 80017b2:	f00a fdd5 	bl	800c360 <HAL_GPIO_WritePin>
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200005d4 	.word	0x200005d4

080017c4 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>:


void TurnOffInfraLEDs(GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2])
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4619      	mov	r1, r3
 80017da:	f00a fdc1 	bl	800c360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3304      	adds	r3, #4
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	3302      	adds	r3, #2
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	2201      	movs	r2, #1
 80017ec:	4619      	mov	r1, r3
 80017ee:	f00a fdb7 	bl	800c360 <HAL_GPIO_WritePin>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <_Z14LineSensorTaskv>:
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
	}

}
void LineSensorTask(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	; 0x38
 8001800:	af02      	add	r7, sp, #8
		HAL_GPIO_WritePin(rear_adc_cs_ports[i], rear_adc_cs_pins[i], GPIO_PIN_SET);
	}


#else
	uint8_t j,k = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int8_t i;
	for(i = 0; i < 4; ++i)
 8001808:	2300      	movs	r3, #0
 800180a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800180e:	e0b5      	b.n	800197c <_Z14LineSensorTaskv+0x180>
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, i);
 8001810:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	4bbf      	ldr	r3, [pc, #764]	; (8001b14 <_Z14LineSensorTaskv+0x318>)
 8001818:	4abf      	ldr	r2, [pc, #764]	; (8001b18 <_Z14LineSensorTaskv+0x31c>)
 800181a:	49be      	ldr	r1, [pc, #760]	; (8001b14 <_Z14LineSensorTaskv+0x318>)
 800181c:	48bf      	ldr	r0, [pc, #764]	; (8001b1c <_Z14LineSensorTaskv+0x320>)
 800181e:	f7ff feef 	bl	8001600 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>
		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8001822:	4bbf      	ldr	r3, [pc, #764]	; (8001b20 <_Z14LineSensorTaskv+0x324>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	61bb      	str	r3, [r7, #24]
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 800182a:	bf00      	nop
 800182c:	4bbc      	ldr	r3, [pc, #752]	; (8001b20 <_Z14LineSensorTaskv+0x324>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b95      	cmp	r3, #149	; 0x95
 8001838:	bf94      	ite	ls
 800183a:	2301      	movls	r3, #1
 800183c:	2300      	movhi	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f3      	bne.n	800182c <_Z14LineSensorTaskv+0x30>

		for(j = 0; j < 4; ++j)
 8001844:	2300      	movs	r3, #0
 8001846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800184a:	e088      	b.n	800195e <_Z14LineSensorTaskv+0x162>
		{
			uint8_t tmp[2] = {0, 0};
 800184c:	2300      	movs	r3, #0
 800184e:	82bb      	strh	r3, [r7, #20]
			uint8_t adc_ic_values[16];
			HAL_GPIO_WritePin(rear_adc_cs_ports[j], rear_adc_cs_pins[j], GPIO_PIN_RESET);
 8001850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001854:	4ab3      	ldr	r2, [pc, #716]	; (8001b24 <_Z14LineSensorTaskv+0x328>)
 8001856:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800185a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800185e:	4ab2      	ldr	r2, [pc, #712]	; (8001b28 <_Z14LineSensorTaskv+0x32c>)
 8001860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	f00a fd7a 	bl	800c360 <HAL_GPIO_WritePin>
			for(k = 0; k < 8; ++k)
 800186c:	2300      	movs	r3, #0
 800186e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001872:	e01c      	b.n	80018ae <_Z14LineSensorTaskv+0xb2>
			{
				tmp[0] = k << 3u;
 8001874:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	753b      	strb	r3, [r7, #20]
				HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 800187e:	f107 0114 	add.w	r1, r7, #20
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	2202      	movs	r2, #2
 8001888:	48a8      	ldr	r0, [pc, #672]	; (8001b2c <_Z14LineSensorTaskv+0x330>)
 800188a:	f00d fc00 	bl	800f08e <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &adc_ic_values[k*2], 2, HAL_MAX_DELAY);
 800188e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	1d3a      	adds	r2, r7, #4
 8001896:	18d1      	adds	r1, r2, r3
 8001898:	f04f 33ff 	mov.w	r3, #4294967295
 800189c:	2202      	movs	r2, #2
 800189e:	48a3      	ldr	r0, [pc, #652]	; (8001b2c <_Z14LineSensorTaskv+0x330>)
 80018a0:	f00d fd63 	bl	800f36a <HAL_SPI_Receive>
			for(k = 0; k < 8; ++k)
 80018a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80018a8:	3301      	adds	r3, #1
 80018aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80018ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80018b2:	2b07      	cmp	r3, #7
 80018b4:	d9de      	bls.n	8001874 <_Z14LineSensorTaskv+0x78>
			}
			HAL_GPIO_WritePin(rear_adc_cs_ports[j], rear_adc_cs_pins[j], GPIO_PIN_SET);
 80018b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018ba:	4a9a      	ldr	r2, [pc, #616]	; (8001b24 <_Z14LineSensorTaskv+0x328>)
 80018bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018c4:	4a98      	ldr	r2, [pc, #608]	; (8001b28 <_Z14LineSensorTaskv+0x32c>)
 80018c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4619      	mov	r1, r3
 80018ce:	f00a fd47 	bl	800c360 <HAL_GPIO_WritePin>

			// i = id of LED, j = id of ic, adc_ic_values conotaint the 8 adc values from one ic
			ls_data.adc_values_r[j*8 + i] = (uint16_t)(adc_ic_values[i*2] << 8u) | (adc_ic_values[i*2+1]);
 80018d2:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	3330      	adds	r3, #48	; 0x30
 80018da:	443b      	add	r3, r7
 80018dc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	b299      	uxth	r1, r3
 80018e6:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	3301      	adds	r3, #1
 80018ee:	3330      	adds	r3, #48	; 0x30
 80018f0:	443b      	add	r3, r7
 80018f2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018fc:	00d8      	lsls	r0, r3, #3
 80018fe:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001902:	4403      	add	r3, r0
 8001904:	430a      	orrs	r2, r1
 8001906:	b291      	uxth	r1, r2
 8001908:	4a89      	ldr	r2, [pc, #548]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 800190a:	3320      	adds	r3, #32
 800190c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_r[j*8 + i + 4] = (uint16_t)(adc_ic_values[(i*2) + 8] << 8u) | (adc_ic_values[(i*2) + 8 + 1]);
 8001910:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001914:	3304      	adds	r3, #4
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	3330      	adds	r3, #48	; 0x30
 800191a:	443b      	add	r3, r7
 800191c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001920:	b29b      	uxth	r3, r3
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b299      	uxth	r1, r3
 8001926:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800192a:	3304      	adds	r3, #4
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	3301      	adds	r3, #1
 8001930:	3330      	adds	r3, #48	; 0x30
 8001932:	443b      	add	r3, r7
 8001934:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001938:	b29a      	uxth	r2, r3
 800193a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800193e:	00d8      	lsls	r0, r3, #3
 8001940:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001944:	4403      	add	r3, r0
 8001946:	3304      	adds	r3, #4
 8001948:	430a      	orrs	r2, r1
 800194a:	b291      	uxth	r1, r2
 800194c:	4a78      	ldr	r2, [pc, #480]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 800194e:	3320      	adds	r3, #32
 8001950:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j = 0; j < 4; ++j)
 8001954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001958:	3301      	adds	r3, #1
 800195a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800195e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001962:	2b03      	cmp	r3, #3
 8001964:	f67f af72 	bls.w	800184c <_Z14LineSensorTaskv+0x50>
		}

		TurnOffInfraLEDs(infra_oe_ports, infra_le_pins);
 8001968:	496a      	ldr	r1, [pc, #424]	; (8001b14 <_Z14LineSensorTaskv+0x318>)
 800196a:	486b      	ldr	r0, [pc, #428]	; (8001b18 <_Z14LineSensorTaskv+0x31c>)
 800196c:	f7ff ff2a 	bl	80017c4 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>
	for(i = 0; i < 4; ++i)
 8001970:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001974:	3301      	adds	r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800197c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001980:	2b03      	cmp	r3, #3
 8001982:	f77f af45 	ble.w	8001810 <_Z14LineSensorTaskv+0x14>
	}
	TurnOffInfraLEDs(led_oe_ports, led_oe_pins);
 8001986:	496b      	ldr	r1, [pc, #428]	; (8001b34 <_Z14LineSensorTaskv+0x338>)
 8001988:	486b      	ldr	r0, [pc, #428]	; (8001b38 <_Z14LineSensorTaskv+0x33c>)
 800198a:	f7ff ff1b 	bl	80017c4 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>

	float denominator_f = 0.0f;
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
	float denominator_r = 0.0f;
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t led_front = 0u;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
	uint32_t led_rear = 0u;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
	for(i = 2; i <= 31; ++i)
 80019a2:	2302      	movs	r3, #2
 80019a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80019a8:	e08d      	b.n	8001ac6 <_Z14LineSensorTaskv+0x2ca>
	{
		ls_data.position_front += (float)((i - 16 + 0.5f) * ls_data.adc_values_f[i-1]);
 80019aa:	4b61      	ldr	r3, [pc, #388]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 80019ac:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80019b0:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80019b4:	3b10      	subs	r3, #16
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019be:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80019c2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80019c6:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80019ca:	3b01      	subs	r3, #1
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 80019ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e2:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 80019e4:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		ls_data.position_rear += (float)((i - 16 + 0.5f) * ls_data.adc_values_r[i-1]);
 80019e8:	4b51      	ldr	r3, [pc, #324]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 80019ea:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80019ee:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80019f2:	3b10      	subs	r3, #16
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001a00:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001a04:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4a49      	ldr	r2, [pc, #292]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 8001a0c:	3320      	adds	r3, #32
 8001a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a22:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 8001a24:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		denominator_f += (float)(ls_data.adc_values_f[i-1]);
 8001a28:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	4a40      	ldr	r2, [pc, #256]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 8001a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		denominator_r += (float)(ls_data.adc_values_r[i-1]);
 8001a48:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	4a38      	ldr	r2, [pc, #224]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 8001a50:	3320      	adds	r3, #32
 8001a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		if(ls_data.adc_values_f[i-1] > 1400)
 8001a6a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	4a2f      	ldr	r2, [pc, #188]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 8001a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a76:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001a7a:	d909      	bls.n	8001a90 <_Z14LineSensorTaskv+0x294>
		{
			led_front |= 1 << (i-2);
 8001a7c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001a80:	3b02      	subs	r3, #2
 8001a82:	2201      	movs	r2, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	623b      	str	r3, [r7, #32]
		}

		if(ls_data.adc_values_r[i-1] > 1400)
 8001a90:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001a94:	3b01      	subs	r3, #1
 8001a96:	4a26      	ldr	r2, [pc, #152]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 8001a98:	3320      	adds	r3, #32
 8001a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a9e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001aa2:	d90a      	bls.n	8001aba <_Z14LineSensorTaskv+0x2be>
		{
			led_rear |= 0x70000000 >> (i-2);
 8001aa4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001aa8:	3b02      	subs	r3, #2
 8001aaa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001aae:	fa42 f303 	asr.w	r3, r2, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61fb      	str	r3, [r7, #28]
	for(i = 2; i <= 31; ++i)
 8001aba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001ac6:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001aca:	2b1f      	cmp	r3, #31
 8001acc:	f77f af6d 	ble.w	80019aa <_Z14LineSensorTaskv+0x1ae>
		}
	}

	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, led_front, led_rear);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <_Z14LineSensorTaskv+0x338>)
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <_Z14LineSensorTaskv+0x33c>)
 8001adc:	4917      	ldr	r1, [pc, #92]	; (8001b3c <_Z14LineSensorTaskv+0x340>)
 8001ade:	4818      	ldr	r0, [pc, #96]	; (8001b40 <_Z14LineSensorTaskv+0x344>)
 8001ae0:	f7ff fdea 	bl	80016b8 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>

	ls_data.position_front /= denominator_f;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 8001ae6:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001aea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 8001af4:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	ls_data.position_rear /= denominator_r;
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 8001afa:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001afe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <_Z14LineSensorTaskv+0x334>)
 8001b08:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84


#endif
}
 8001b0c:	bf00      	nop
 8001b0e:	3730      	adds	r7, #48	; 0x30
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000050 	.word	0x20000050
 8001b18:	20000054 	.word	0x20000054
 8001b1c:	20000048 	.word	0x20000048
 8001b20:	20000780 	.word	0x20000780
 8001b24:	20000030 	.word	0x20000030
 8001b28:	20000040 	.word	0x20000040
 8001b2c:	20000570 	.word	0x20000570
 8001b30:	20000180 	.word	0x20000180
 8001b34:	20000070 	.word	0x20000070
 8001b38:	20000068 	.word	0x20000068
 8001b3c:	20000064 	.word	0x20000064
 8001b40:	2000005c 	.word	0x2000005c

08001b44 <_Z16MotorControlTaskv>:
extern TIM_HandleTypeDef htim5;

float pi_integral_error = 0;

void MotorControlTask()
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	4835      	ldr	r0, [pc, #212]	; (8001c24 <_Z16MotorControlTaskv+0xe0>)
 8001b50:	f00a fc06 	bl	800c360 <HAL_GPIO_WritePin>
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <_Z16MotorControlTaskv+0xe4>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b60:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001c2c <_Z16MotorControlTaskv+0xe8>
 8001b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b68:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001c30 <_Z16MotorControlTaskv+0xec>
 8001b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b70:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b78:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <_Z16MotorControlTaskv+0xf0>)
 8001b7a:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <_Z16MotorControlTaskv+0xe4>)
 8001b80:	885b      	ldrh	r3, [r3, #2]
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b8a:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001c2c <_Z16MotorControlTaskv+0xe8>
 8001b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b92:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001c30 <_Z16MotorControlTaskv+0xec>
 8001b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001c38 <_Z16MotorControlTaskv+0xf4>
 8001b9e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ba2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001c3c <_Z16MotorControlTaskv+0xf8>
 8001ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <_Z16MotorControlTaskv+0xf0>)
 8001bac:	edc3 7a01 	vstr	s15, [r3, #4]

	float pi_error = motorcontrol.target_velocity - motorcontrol.actual_velocity;
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <_Z16MotorControlTaskv+0xf0>)
 8001bb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <_Z16MotorControlTaskv+0xf0>)
 8001bb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc0:	edc7 7a03 	vstr	s15, [r7, #12]
	float pi_proportional_error = pi_error * SPEED_CONTROLER_KP;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	60bb      	str	r3, [r7, #8]
	pi_integral_error = pi_error * SPEED_CONTROLLER_KI / MOTOR_CONTROL_TASK_FREQ;
 8001bc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bcc:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001c40 <_Z16MotorControlTaskv+0xfc>
 8001bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <_Z16MotorControlTaskv+0x100>)
 8001bd6:	edc3 7a00 	vstr	s15, [r3]

	//float duty_cycle = pi_integral_error + pi_proportional_error;
	float duty_cycle = 0.6f;
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <_Z16MotorControlTaskv+0x104>)
 8001bdc:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, duty_cycle * PWM_COUNTER_PREIOD);
 8001bde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001c4c <_Z16MotorControlTaskv+0x108>
 8001be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <_Z16MotorControlTaskv+0x10c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf2:	ee17 2a90 	vmov	r2, s15
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (duty_cycle * PWM_COUNTER_PREIOD));
 8001bf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bfc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c4c <_Z16MotorControlTaskv+0x108>
 8001c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c04:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001c4c <_Z16MotorControlTaskv+0x108>
 8001c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <_Z16MotorControlTaskv+0x10c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c14:	ee17 2a90 	vmov	r2, s15
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	42021400 	.word	0x42021400
 8001c28:	20000124 	.word	0x20000124
 8001c2c:	45800000 	.word	0x45800000
 8001c30:	40533333 	.word	0x40533333
 8001c34:	20000208 	.word	0x20000208
 8001c38:	3fd47ae1 	.word	0x3fd47ae1
 8001c3c:	3c0ce704 	.word	0x3c0ce704
 8001c40:	43480000 	.word	0x43480000
 8001c44:	2000021c 	.word	0x2000021c
 8001c48:	3f19999a 	.word	0x3f19999a
 8001c4c:	44e54000 	.word	0x44e54000
 8001c50:	20000734 	.word	0x20000734

08001c54 <_Z10Radio_Initv>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 8001c58:	220c      	movs	r2, #12
 8001c5a:	4903      	ldr	r1, [pc, #12]	; (8001c68 <_Z10Radio_Initv+0x14>)
 8001c5c:	4803      	ldr	r0, [pc, #12]	; (8001c6c <_Z10Radio_Initv+0x18>)
 8001c5e:	f00f ff53 	bl	8011b08 <HAL_UART_Receive_IT>

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000220 	.word	0x20000220
 8001c6c:	20000420 	.word	0x20000420

08001c70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 8001c78:	220c      	movs	r2, #12
 8001c7a:	4922      	ldr	r1, [pc, #136]	; (8001d04 <HAL_UART_RxCpltCallback+0x94>)
 8001c7c:	4822      	ldr	r0, [pc, #136]	; (8001d08 <HAL_UART_RxCpltCallback+0x98>)
 8001c7e:	f00f ff43 	bl	8011b08 <HAL_UART_Receive_IT>
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	e009      	b.n	8001c9c <HAL_UART_RxCpltCallback+0x2c>
    {
    	if(radio_rxBuffer[i] == '\r')
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <HAL_UART_RxCpltCallback+0x94>)
 8001c8c:	5cd3      	ldrb	r3, [r2, r3]
 8001c8e:	2b0d      	cmp	r3, #13
 8001c90:	d101      	bne.n	8001c96 <HAL_UART_RxCpltCallback+0x26>
    	{
    		length = i;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b0b      	cmp	r3, #11
 8001ca0:	d9f2      	bls.n	8001c88 <HAL_UART_RxCpltCallback+0x18>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 8001ca2:	7bbb      	ldrb	r3, [r7, #14]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d103      	bne.n	8001cb0 <HAL_UART_RxCpltCallback+0x40>
    {
    	countdown_value = radio_rxBuffer[0];
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_UART_RxCpltCallback+0x94>)
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_UART_RxCpltCallback+0x9c>)
 8001cae:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 8001cb0:	7bbb      	ldrb	r3, [r7, #14]
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d115      	bne.n	8001ce2 <HAL_UART_RxCpltCallback+0x72>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 8001cb6:	4913      	ldr	r1, [pc, #76]	; (8001d04 <HAL_UART_RxCpltCallback+0x94>)
 8001cb8:	4815      	ldr	r0, [pc, #84]	; (8001d10 <HAL_UART_RxCpltCallback+0xa0>)
 8001cba:	f7fe fac1 	bl	8000240 <strcmp>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d103      	bne.n	8001ccc <HAL_UART_RxCpltCallback+0x5c>
    	{
    		flood_active = true;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_UART_RxCpltCallback+0xa4>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e010      	b.n	8001cee <HAL_UART_RxCpltCallback+0x7e>
    	}
    	else
    	{
    		sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_UART_RxCpltCallback+0xa8>)
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_UART_RxCpltCallback+0xac>)
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_UART_RxCpltCallback+0xb0>)
 8001cd6:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <HAL_UART_RxCpltCallback+0xb4>)
 8001cd8:	4913      	ldr	r1, [pc, #76]	; (8001d28 <HAL_UART_RxCpltCallback+0xb8>)
 8001cda:	480a      	ldr	r0, [pc, #40]	; (8001d04 <HAL_UART_RxCpltCallback+0x94>)
 8001cdc:	f015 ff32 	bl	8017b44 <siscanf>
 8001ce0:	e005      	b.n	8001cee <HAL_UART_RxCpltCallback+0x7e>
    	}
    }

    else
    {
    	flood_counter++;
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_UART_RxCpltCallback+0xbc>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_UART_RxCpltCallback+0xbc>)
 8001cec:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_UART_RxCpltCallback+0xbc>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b0a      	cmp	r3, #10
 8001cf4:	d902      	bls.n	8001cfc <HAL_UART_RxCpltCallback+0x8c>
    {
    	flood_active = false;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_UART_RxCpltCallback+0xa4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
    }

}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000220 	.word	0x20000220
 8001d08:	20000420 	.word	0x20000420
 8001d0c:	20000074 	.word	0x20000074
 8001d10:	08018748 	.word	0x08018748
 8001d14:	2000022c 	.word	0x2000022c
 8001d18:	20000234 	.word	0x20000234
 8001d1c:	20000230 	.word	0x20000230
 8001d20:	2000022f 	.word	0x2000022f
 8001d24:	2000022e 	.word	0x2000022e
 8001d28:	08018750 	.word	0x08018750
 8001d2c:	2000022d 	.word	0x2000022d

08001d30 <_Z16SetSteeringAnglef>:
#include "main.h"

extern TIM_HandleTypeDef htim8;
/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = SERVO_NULL + ((angle)/ 90.0f * SERVO_RANGE);
 8001d3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d3e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001d74 <_Z16SetSteeringAnglef+0x44>
 8001d42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d46:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001d78 <_Z16SetSteeringAnglef+0x48>
 8001d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001d78 <_Z16SetSteeringAnglef+0x48>
 8001d52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d5a:	ee17 3a90 	vmov	r3, s15
 8001d5e:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <_Z16SetSteeringAnglef+0x4c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	89fa      	ldrh	r2, [r7, #14]
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	42b40000 	.word	0x42b40000
 8001d78:	44bb8000 	.word	0x44bb8000
 8001d7c:	200007cc 	.word	0x200007cc

08001d80 <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	2300      	movs	r3, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db6:	d205      	bcs.n	8001dc4 <_ZSt16__deque_buf_sizej+0x1c>
 8001db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	e000      	b.n	8001dc6 <_ZSt16__deque_buf_sizej+0x1e>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 fd6f 	bl	80058c0 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_ZN3jlb8OdometryC1Efff>:
        float meas_ang_vel_z = 0.0f;
        float meas_lin_acc_x = 0.0f;
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f)
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001df8:	edc7 0a01 	vstr	s1, [r7, #4]
 8001dfc:	ed87 1a00 	vstr	s2, [r7]
            : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	ed97 0a00 	vldr	s0, [r7]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f851 	bl	8001ec8 <_ZN3jlb8Odometry15normalize_angleEf>
 8001e26:	eef0 7a40 	vmov.f32	s15, s0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	edc3 7a04 	vstr	s15, [r3, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	61da      	str	r2, [r3, #28]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3330      	adds	r3, #48	; 0x30
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ffb0 	bl	8001dd2 <_ZNSt5dequeIfSaIfEEC1Ev>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3358      	adds	r3, #88	; 0x58
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ffab 	bl	8001dd2 <_ZNSt5dequeIfSaIfEEC1Ev>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e98:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7fe fb45 	bl	800052c <__aeabi_f2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	ed97 1b00 	vldr	d1, [r7]
 8001eaa:	ec43 2b10 	vmov	d0, r2, r3
 8001eae:	f014 fd05 	bl	80168bc <fmod>
 8001eb2:	eeb0 7a40 	vmov.f32	s14, s0
 8001eb6:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001eba:	eeb0 0a47 	vmov.f32	s0, s14
 8001ebe:	eef0 0a67 	vmov.f32	s1, s15
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZN3jlb8Odometry15normalize_angleEf>:
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
        }

        float normalize_angle(float angle)
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 8001ed4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001f30 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 8001ed8:	ed97 0a00 	vldr	s0, [r7]
 8001edc:	f7ff ffd7 	bl	8001e8e <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ee0:	ec53 2b10 	vmov	r2, r3, d0
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7fe fe28 	bl	8000b3c <__aeabi_d2f>
 8001eec:	4603      	mov	r3, r0
 8001eee:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f)
 8001ef0:	edd7 7a00 	vldr	s15, [r7]
 8001ef4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	d50f      	bpl.n	8001f1e <_ZN3jlb8Odometry15normalize_angleEf+0x56>
            {
                angle += 2.0f * M_PI;
 8001efe:	6838      	ldr	r0, [r7, #0]
 8001f00:	f7fe fb14 	bl	800052c <__aeabi_f2d>
 8001f04:	a30a      	add	r3, pc, #40	; (adr r3, 8001f30 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe f9b1 	bl	8000270 <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fe11 	bl	8000b3c <__aeabi_d2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	603b      	str	r3, [r7, #0]
            }
            return angle;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	ee07 3a90 	vmov	s15, r3
        }
 8001f24:	eeb0 0a67 	vmov.f32	s0, s15
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	54442d18 	.word	0x54442d18
 8001f34:	401921fb 	.word	0x401921fb

08001f38 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fccd 	bl	80058e2 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ffeb 	bl	8001f38 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZN3jlb10ControllerC1ENS_9DirectionE>:
        std::vector<float> line_positions_rear;

        Direction direction = Direction::STRAIGHT;
        Mission mission = Mission::LABYRINTH;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} {}
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2210      	movs	r2, #16
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3360      	adds	r3, #96	; 0x60
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ffcb 	bl	8001f52 <_ZNSt6vectorIfSaIfEEC1Ev>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	336c      	adds	r3, #108	; 0x6c
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ffc6 	bl	8001f52 <_ZNSt6vectorIfSaIfEEC1Ev>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	679a      	str	r2, [r3, #120]	; 0x78
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	67da      	str	r2, [r3, #124]	; 0x7c
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateE>:
                const Controller &controller;
                const ASState &as_state;

#ifdef STM32
                // TODO: initialize UDPClient for STM32
                SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_) : odometry(odometry_), controller(controller_), as_state(as_state_)
 8001ffa:	b480      	push	{r7}
 8001ffc:	b085      	sub	sp, #20
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
                {
                }
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f003 fc8b 	bl	8005952 <_ZNSaIN3jlb4EdgeEED1Ev>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	f003 fc6e 	bl	8005932 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ffeb 	bl	8002046 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_ZN3jlb4NodeC1Ecff>:
        char name;
        float x;
        float y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	460b      	mov	r3, r1
 8002084:	ed87 0a01 	vstr	s0, [r7, #4]
 8002088:	edc7 0a00 	vstr	s1, [r7]
 800208c:	72fb      	strb	r3, [r7, #11]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	7afa      	ldrb	r2, [r7, #11]
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	330c      	adds	r3, #12
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ffdb 	bl	8002060 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	330c      	adds	r3, #12
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fc6f 	bl	80059a4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3308      	adds	r3, #8
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fcb9 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f)
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b08d      	sub	sp, #52	; 0x34
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6178      	str	r0, [r7, #20]
 80020f4:	60fa      	str	r2, [r7, #12]
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	ed87 0a01 	vstr	s0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	74fb      	strb	r3, [r7, #19]
        {
            edges.push_back(Edge{name_, direction_, prev_nodes_, weight_});
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f103 040c 	add.w	r4, r3, #12
 8002106:	7cfb      	ldrb	r3, [r7, #19]
 8002108:	763b      	strb	r3, [r7, #24]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	f107 0318 	add.w	r3, r7, #24
 8002112:	3308      	adds	r3, #8
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 fc5f 	bl	80059da <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002120:	f107 0318 	add.w	r3, r7, #24
 8002124:	4619      	mov	r1, r3
 8002126:	4620      	mov	r0, r4
 8002128:	f003 fcaf 	bl	8005a8a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ffcd 	bl	80020d0 <_ZN3jlb4EdgeD1Ev>
        }
 8002136:	bf00      	nop
 8002138:	3734      	adds	r7, #52	; 0x34
 800213a:	46bd      	mov	sp, r7
 800213c:	bd90      	pop	{r4, r7, pc}

0800213e <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fcaf 	bl	8005aac <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ffeb 	bl	800213e <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	0000      	movs	r0, r0
 8002174:	0000      	movs	r0, r0
	...

08002178 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 800217e:	af00      	add	r7, sp, #0
 8002180:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002184:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002188:	6018      	str	r0, [r3, #0]
        {
 800218a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800218e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ffdf 	bl	8002158 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 800219a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800219e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80021a2:	681c      	ldr	r4, [r3, #0]
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	eddf 0af3 	vldr	s1, [pc, #972]	; 8002578 <_ZN3jlb5GraphC1Ev+0x400>
 80021ac:	ed9f 0af3 	vldr	s0, [pc, #972]	; 800257c <_ZN3jlb5GraphC1Ev+0x404>
 80021b0:	2141      	movs	r1, #65	; 0x41
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff61 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 80021b8:	f107 0308 	add.w	r3, r7, #8
 80021bc:	4619      	mov	r1, r3
 80021be:	4620      	mov	r0, r4
 80021c0:	f003 fc84 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80021c4:	f107 0308 	add.w	r3, r7, #8
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff73 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 80021ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80021d2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80021d6:	681c      	ldr	r4, [r3, #0]
 80021d8:	f107 0320 	add.w	r3, r7, #32
 80021dc:	eddf 0aeb 	vldr	s1, [pc, #940]	; 800258c <_ZN3jlb5GraphC1Ev+0x414>
 80021e0:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 800257c <_ZN3jlb5GraphC1Ev+0x404>
 80021e4:	2142      	movs	r1, #66	; 0x42
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff47 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 80021ec:	f107 0320 	add.w	r3, r7, #32
 80021f0:	4619      	mov	r1, r3
 80021f2:	4620      	mov	r0, r4
 80021f4:	f003 fc6a 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff59 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 8002202:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002206:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800220a:	681c      	ldr	r4, [r3, #0]
 800220c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002210:	eddf 0adb 	vldr	s1, [pc, #876]	; 8002580 <_ZN3jlb5GraphC1Ev+0x408>
 8002214:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8002218:	2143      	movs	r1, #67	; 0x43
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff2d 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 8002220:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002224:	4619      	mov	r1, r3
 8002226:	4620      	mov	r0, r4
 8002228:	f003 fc50 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800222c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff3f 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 8002236:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800223a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800223e:	681c      	ldr	r4, [r3, #0]
 8002240:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002244:	eddf 0acf 	vldr	s1, [pc, #828]	; 8002584 <_ZN3jlb5GraphC1Ev+0x40c>
 8002248:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800224c:	2144      	movs	r1, #68	; 0x44
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ff13 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 8002254:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002258:	4619      	mov	r1, r3
 800225a:	4620      	mov	r0, r4
 800225c:	f003 fc36 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002260:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff25 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 800226a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800226e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002272:	681c      	ldr	r4, [r3, #0]
 8002274:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002278:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800227c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8002280:	2145      	movs	r1, #69	; 0x45
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fef9 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 8002288:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800228c:	4619      	mov	r1, r3
 800228e:	4620      	mov	r0, r4
 8002290:	f003 fc1c 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002294:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff0b 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 800229e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80022a2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80022a6:	681c      	ldr	r4, [r3, #0]
 80022a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022ac:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8002578 <_ZN3jlb5GraphC1Ev+0x400>
 80022b0:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 800258c <_ZN3jlb5GraphC1Ev+0x414>
 80022b4:	2146      	movs	r1, #70	; 0x46
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fedf 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 80022bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022c0:	4619      	mov	r1, r3
 80022c2:	4620      	mov	r0, r4
 80022c4:	f003 fc02 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80022c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fef1 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 80022d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80022d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80022da:	681c      	ldr	r4, [r3, #0]
 80022dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022e0:	eddf 0aaa 	vldr	s1, [pc, #680]	; 800258c <_ZN3jlb5GraphC1Ev+0x414>
 80022e4:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 800258c <_ZN3jlb5GraphC1Ev+0x414>
 80022e8:	2147      	movs	r1, #71	; 0x47
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fec5 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 80022f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022f4:	4619      	mov	r1, r3
 80022f6:	4620      	mov	r0, r4
 80022f8:	f003 fbe8 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80022fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fed7 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 8002306:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800230a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800230e:	681c      	ldr	r4, [r3, #0]
 8002310:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002314:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8002580 <_ZN3jlb5GraphC1Ev+0x408>
 8002318:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8002584 <_ZN3jlb5GraphC1Ev+0x40c>
 800231c:	2148      	movs	r1, #72	; 0x48
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff feab 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 8002324:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002328:	4619      	mov	r1, r3
 800232a:	4620      	mov	r0, r4
 800232c:	f003 fbce 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002330:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff febd 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 800233a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800233e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002342:	681c      	ldr	r4, [r3, #0]
 8002344:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002348:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8002584 <_ZN3jlb5GraphC1Ev+0x40c>
 800234c:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8002584 <_ZN3jlb5GraphC1Ev+0x40c>
 8002350:	2149      	movs	r1, #73	; 0x49
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fe91 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 8002358:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800235c:	4619      	mov	r1, r3
 800235e:	4620      	mov	r0, r4
 8002360:	f003 fbb4 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002364:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fea3 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 800236e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002372:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002376:	681c      	ldr	r4, [r3, #0]
 8002378:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800237c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8002380:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8002584 <_ZN3jlb5GraphC1Ev+0x40c>
 8002384:	214a      	movs	r1, #74	; 0x4a
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fe77 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 800238c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002390:	4619      	mov	r1, r3
 8002392:	4620      	mov	r0, r4
 8002394:	f003 fb9a 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002398:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fe89 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 80023a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80023a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80023aa:	681c      	ldr	r4, [r3, #0]
 80023ac:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023b0:	eddf 0a71 	vldr	s1, [pc, #452]	; 8002578 <_ZN3jlb5GraphC1Ev+0x400>
 80023b4:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8002578 <_ZN3jlb5GraphC1Ev+0x400>
 80023b8:	214b      	movs	r1, #75	; 0x4b
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fe5d 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 80023c0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023c4:	4619      	mov	r1, r3
 80023c6:	4620      	mov	r0, r4
 80023c8:	f003 fb80 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80023cc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fe6f 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 80023d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80023da:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80023de:	681c      	ldr	r4, [r3, #0]
 80023e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023e4:	eddf 0a69 	vldr	s1, [pc, #420]	; 800258c <_ZN3jlb5GraphC1Ev+0x414>
 80023e8:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8002578 <_ZN3jlb5GraphC1Ev+0x400>
 80023ec:	214c      	movs	r1, #76	; 0x4c
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fe43 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 80023f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023f8:	4619      	mov	r1, r3
 80023fa:	4620      	mov	r0, r4
 80023fc:	f003 fb66 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002400:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fe55 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 800240a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800240e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002412:	681c      	ldr	r4, [r3, #0]
 8002414:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002418:	eddf 0a59 	vldr	s1, [pc, #356]	; 8002580 <_ZN3jlb5GraphC1Ev+0x408>
 800241c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8002580 <_ZN3jlb5GraphC1Ev+0x408>
 8002420:	214d      	movs	r1, #77	; 0x4d
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fe29 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 8002428:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800242c:	4619      	mov	r1, r3
 800242e:	4620      	mov	r0, r4
 8002430:	f003 fb4c 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002434:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fe3b 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 800243e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002442:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002446:	681c      	ldr	r4, [r3, #0]
 8002448:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800244c:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8002584 <_ZN3jlb5GraphC1Ev+0x40c>
 8002450:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8002580 <_ZN3jlb5GraphC1Ev+0x408>
 8002454:	214e      	movs	r1, #78	; 0x4e
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fe0f 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 800245c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002460:	4619      	mov	r1, r3
 8002462:	4620      	mov	r0, r4
 8002464:	f003 fb32 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002468:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe21 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 8002472:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002476:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800247a:	681c      	ldr	r4, [r3, #0]
 800247c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002480:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8002484:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8002580 <_ZN3jlb5GraphC1Ev+0x408>
 8002488:	214f      	movs	r1, #79	; 0x4f
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fdf5 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 8002490:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002494:	4619      	mov	r1, r3
 8002496:	4620      	mov	r0, r4
 8002498:	f003 fb18 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800249c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fe07 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 80024a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80024aa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80024ae:	681c      	ldr	r4, [r3, #0]
 80024b0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80024b4:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80024b8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80024bc:	2150      	movs	r1, #80	; 0x50
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fddb 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 80024c4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80024c8:	4619      	mov	r1, r3
 80024ca:	4620      	mov	r0, r4
 80024cc:	f003 fafe 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80024d0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fded 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 80024da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80024de:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80024e2:	681c      	ldr	r4, [r3, #0]
 80024e4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80024e8:	eddf 0a25 	vldr	s1, [pc, #148]	; 8002580 <_ZN3jlb5GraphC1Ev+0x408>
 80024ec:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80024f0:	2151      	movs	r1, #81	; 0x51
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fdc1 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 80024f8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80024fc:	4619      	mov	r1, r3
 80024fe:	4620      	mov	r0, r4
 8002500:	f003 fae4 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002504:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fdd3 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 800250e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002512:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002516:	681c      	ldr	r4, [r3, #0]
 8002518:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800251c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8002578 <_ZN3jlb5GraphC1Ev+0x400>
 8002520:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002524:	2152      	movs	r1, #82	; 0x52
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fda7 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 800252c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002530:	4619      	mov	r1, r3
 8002532:	4620      	mov	r0, r4
 8002534:	f003 faca 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002538:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fdb9 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 8002542:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002546:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800254a:	681c      	ldr	r4, [r3, #0]
 800254c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002550:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002584 <_ZN3jlb5GraphC1Ev+0x40c>
 8002554:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002558:	2153      	movs	r1, #83	; 0x53
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fd8d 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 8002560:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002564:	4619      	mov	r1, r3
 8002566:	4620      	mov	r0, r4
 8002568:	f003 fab0 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800256c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fd9f 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
 8002576:	e011      	b.n	800259c <_ZN3jlb5GraphC1Ev+0x424>
 8002578:	40866667 	.word	0x40866667
 800257c:	40d33334 	.word	0x40d33334
 8002580:	40666667 	.word	0x40666667
 8002584:	4099999a 	.word	0x4099999a
 8002588:	40d33334 	.word	0x40d33334
 800258c:	40accccd 	.word	0x40accccd
 8002590:	4019999a 	.word	0x4019999a
 8002594:	40866667 	.word	0x40866667
 8002598:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 800259c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80025a0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025a4:	681c      	ldr	r4, [r3, #0]
 80025a6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80025aa:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 800258c <_ZN3jlb5GraphC1Ev+0x414>
 80025ae:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80025b2:	2154      	movs	r1, #84	; 0x54
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fd60 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 80025ba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80025be:	4619      	mov	r1, r3
 80025c0:	4620      	mov	r0, r4
 80025c2:	f003 fa83 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80025c6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fd72 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 80025d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80025d4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025d8:	681c      	ldr	r4, [r3, #0]
 80025da:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80025de:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 8002588 <_ZN3jlb5GraphC1Ev+0x410>
 80025e2:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80025e6:	2155      	movs	r1, #85	; 0x55
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fd46 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 80025ee:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80025f2:	4619      	mov	r1, r3
 80025f4:	4620      	mov	r0, r4
 80025f6:	f003 fa69 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80025fa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fd58 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 8002604:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002608:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800260c:	681c      	ldr	r4, [r3, #0]
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 8002594 <_ZN3jlb5GraphC1Ev+0x41c>
 8002616:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 8002590 <_ZN3jlb5GraphC1Ev+0x418>
 800261a:	2156      	movs	r1, #86	; 0x56
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fd2c 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	4619      	mov	r1, r3
 8002628:	4620      	mov	r0, r4
 800262a:	f003 fa4f 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fd3e 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 8002638:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800263c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002640:	681c      	ldr	r4, [r3, #0]
 8002642:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002646:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 800258c <_ZN3jlb5GraphC1Ev+0x414>
 800264a:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8002590 <_ZN3jlb5GraphC1Ev+0x418>
 800264e:	2157      	movs	r1, #87	; 0x57
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd12 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 8002656:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800265a:	4619      	mov	r1, r3
 800265c:	4620      	mov	r0, r4
 800265e:	f003 fa35 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002662:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fd24 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 800266c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002670:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002674:	681c      	ldr	r4, [r3, #0]
 8002676:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800267a:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 8002594 <_ZN3jlb5GraphC1Ev+0x41c>
 800267e:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 8002598 <_ZN3jlb5GraphC1Ev+0x420>
 8002682:	2158      	movs	r1, #88	; 0x58
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fcf8 	bl	800207a <_ZN3jlb4NodeC1Ecff>
 800268a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800268e:	4619      	mov	r1, r3
 8002690:	4620      	mov	r0, r4
 8002692:	f003 fa1b 	bl	8005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002696:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fd0a 	bl	80020b4 <_ZN3jlb4NodeD1Ev>

            const auto UNIT = SQUARE_LENGTH;
 80026a0:	4be9      	ldr	r3, [pc, #932]	; (8002a48 <_ZN3jlb5GraphC1Ev+0x8d0>)
 80026a2:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 80026a6:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 80026a8:	a3e5      	add	r3, pc, #916	; (adr r3, 8002a40 <_ZN3jlb5GraphC1Ev+0x8c8>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 80026b2:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 80026b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80026be:	2141      	movs	r1, #65	; 0x41
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	f002 ff7f 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80026c6:	4604      	mov	r4, r0
 80026c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026cc:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 80026d0:	4ade      	ldr	r2, [pc, #888]	; (8002a4c <_ZN3jlb5GraphC1Ev+0x8d4>)
 80026d2:	8812      	ldrh	r2, [r2, #0]
 80026d4:	801a      	strh	r2, [r3, #0]
 80026d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026da:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80026de:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026e8:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80026ec:	2202      	movs	r2, #2
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026f4:	4618      	mov	r0, r3
 80026f6:	f014 f8ce 	bl	8016896 <_ZNSaIcEC1Ev>
 80026fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026fe:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002702:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 8002706:	f507 7012 	add.w	r0, r7, #584	; 0x248
 800270a:	ca06      	ldmia	r2, {r1, r2}
 800270c:	f003 f9ef 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002710:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8002714:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8002a58 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002718:	2200      	movs	r2, #0
 800271a:	2143      	movs	r1, #67	; 0x43
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff fce5 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002722:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8002726:	4618      	mov	r0, r3
 8002728:	f003 f994 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 800272c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002730:	4618      	mov	r0, r3
 8002732:	f014 f8b2 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 8002736:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800273a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800273e:	2141      	movs	r1, #65	; 0x41
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	f002 ff3f 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002746:	4604      	mov	r4, r0
 8002748:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800274c:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8002750:	2243      	movs	r2, #67	; 0x43
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002758:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 800275c:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002766:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 800276a:	2201      	movs	r2, #1
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8002772:	4618      	mov	r0, r3
 8002774:	f014 f88f 	bl	8016896 <_ZNSaIcEC1Ev>
 8002778:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800277c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002780:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 8002784:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8002788:	ca06      	ldmia	r2, {r1, r2}
 800278a:	f003 f9b0 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800278e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8002792:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8002a50 <_ZN3jlb5GraphC1Ev+0x8d8>
 8002796:	2202      	movs	r2, #2
 8002798:	2142      	movs	r1, #66	; 0x42
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff fca6 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80027a0:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 f955 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80027aa:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80027ae:	4618      	mov	r0, r3
 80027b0:	f014 f873 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 80027b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027b8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80027bc:	2141      	movs	r1, #65	; 0x41
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	f002 ff00 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80027c4:	4604      	mov	r4, r0
 80027c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027ca:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 80027ce:	2243      	movs	r2, #67	; 0x43
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027d6:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80027da:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027e4:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80027e8:	2201      	movs	r2, #1
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80027f0:	4618      	mov	r0, r3
 80027f2:	f014 f850 	bl	8016896 <_ZNSaIcEC1Ev>
 80027f6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80027fa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80027fe:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 8002802:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8002806:	ca06      	ldmia	r2, {r1, r2}
 8002808:	f003 f971 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800280c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8002810:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8002a58 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002814:	2201      	movs	r2, #1
 8002816:	2144      	movs	r1, #68	; 0x44
 8002818:	4620      	mov	r0, r4
 800281a:	f7ff fc67 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800281e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8002822:	4618      	mov	r0, r3
 8002824:	f003 f916 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002828:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800282c:	4618      	mov	r0, r3
 800282e:	f014 f834 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 8002832:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002836:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800283a:	2142      	movs	r1, #66	; 0x42
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	f002 fec1 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002842:	4604      	mov	r4, r0
 8002844:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002848:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 800284c:	2245      	movs	r2, #69	; 0x45
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002854:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8002858:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002862:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8002866:	2201      	movs	r2, #1
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800286e:	4618      	mov	r0, r3
 8002870:	f014 f811 	bl	8016896 <_ZNSaIcEC1Ev>
 8002874:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8002878:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800287c:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 8002880:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 8002884:	ca06      	ldmia	r2, {r1, r2}
 8002886:	f003 f932 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800288a:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800288e:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8002a50 <_ZN3jlb5GraphC1Ev+0x8d8>
 8002892:	2202      	movs	r2, #2
 8002894:	2141      	movs	r1, #65	; 0x41
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff fc28 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800289c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 f8d7 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80028a6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80028aa:	4618      	mov	r0, r3
 80028ac:	f013 fff5 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 80028b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80028b4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80028b8:	2142      	movs	r1, #66	; 0x42
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	f002 fe82 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80028c0:	4604      	mov	r4, r0
 80028c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80028c6:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 80028ca:	4a62      	ldr	r2, [pc, #392]	; (8002a54 <_ZN3jlb5GraphC1Ev+0x8dc>)
 80028cc:	8812      	ldrh	r2, [r2, #0]
 80028ce:	801a      	strh	r2, [r3, #0]
 80028d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80028d4:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 80028d8:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80028e2:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 80028e6:	2202      	movs	r2, #2
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f013 ffd1 	bl	8016896 <_ZNSaIcEC1Ev>
 80028f4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028f8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80028fc:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8002900:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8002904:	ca06      	ldmia	r2, {r1, r2}
 8002906:	f003 f8f2 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800290a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800290e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8002a58 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002912:	2201      	movs	r2, #1
 8002914:	2145      	movs	r1, #69	; 0x45
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff fbe8 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800291c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002920:	4618      	mov	r0, r3
 8002922:	f003 f897 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002926:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800292a:	4618      	mov	r0, r3
 800292c:	f013 ffb5 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 8002930:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002934:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002938:	2142      	movs	r1, #66	; 0x42
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	f002 fe42 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002940:	4604      	mov	r4, r0
 8002942:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002946:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 800294a:	2245      	movs	r2, #69	; 0x45
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002952:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8002956:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002960:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8002964:	2201      	movs	r2, #1
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800296c:	4618      	mov	r0, r3
 800296e:	f013 ff92 	bl	8016896 <_ZNSaIcEC1Ev>
 8002972:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8002976:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800297a:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 800297e:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 8002982:	ca06      	ldmia	r2, {r1, r2}
 8002984:	f003 f8b3 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002988:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800298c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8002a58 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002990:	2200      	movs	r2, #0
 8002992:	2144      	movs	r1, #68	; 0x44
 8002994:	4620      	mov	r0, r4
 8002996:	f7ff fba9 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800299a:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 f858 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80029a4:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80029a8:	4618      	mov	r0, r3
 80029aa:	f013 ff76 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 80029ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80029b2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80029b6:	2143      	movs	r1, #67	; 0x43
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	f002 fe03 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80029be:	4604      	mov	r4, r0
 80029c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80029c4:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 80029c8:	2246      	movs	r2, #70	; 0x46
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80029d0:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 80029d4:	f507 7241 	add.w	r2, r7, #772	; 0x304
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80029de:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 80029e2:	2201      	movs	r2, #1
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80029ea:	4618      	mov	r0, r3
 80029ec:	f013 ff53 	bl	8016896 <_ZNSaIcEC1Ev>
 80029f0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80029f4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80029f8:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 80029fc:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8002a00:	ca06      	ldmia	r2, {r1, r2}
 8002a02:	f003 f874 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002a06:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002a0a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002a58 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2141      	movs	r1, #65	; 0x41
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7ff fb6a 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002a18:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f003 f819 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002a22:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002a26:	4618      	mov	r0, r3
 8002a28:	f013 ff37 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 8002a2c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a30:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002a34:	2143      	movs	r1, #67	; 0x43
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	f002 fdc4 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002a3c:	e00e      	b.n	8002a5c <_ZN3jlb5GraphC1Ev+0x8e4>
 8002a3e:	bf00      	nop
 8002a40:	460698c7 	.word	0x460698c7
 8002a44:	3fee28c7 	.word	0x3fee28c7
 8002a48:	3f19999a 	.word	0x3f19999a
 8002a4c:	08018768 	.word	0x08018768
 8002a50:	3f99999a 	.word	0x3f99999a
 8002a54:	0801876c 	.word	0x0801876c
 8002a58:	3f71463a 	.word	0x3f71463a
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a62:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8002a66:	2241      	movs	r2, #65	; 0x41
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a6e:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8002a72:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a7c:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8002a80:	2201      	movs	r2, #1
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f013 ff04 	bl	8016896 <_ZNSaIcEC1Ev>
 8002a8e:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8002a92:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002a96:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 8002a9a:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 8002a9e:	ca06      	ldmia	r2, {r1, r2}
 8002aa0:	f003 f825 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002aa4:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8002aa8:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 8002a58 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002aac:	2200      	movs	r2, #0
 8002aae:	2146      	movs	r1, #70	; 0x46
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7ff fb1b 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002ab6:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 ffca 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002ac0:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f013 fee8 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8002aca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ace:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002ad2:	2144      	movs	r1, #68	; 0x44
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	f002 fd75 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002ada:	4604      	mov	r4, r0
 8002adc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ae0:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8002ae4:	4ae5      	ldr	r2, [pc, #916]	; (8002e7c <_ZN3jlb5GraphC1Ev+0xd04>)
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	4611      	mov	r1, r2
 8002aea:	8019      	strh	r1, [r3, #0]
 8002aec:	3302      	adds	r3, #2
 8002aee:	0c12      	lsrs	r2, r2, #16
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002af6:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8002afa:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b04:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8002b08:	2203      	movs	r2, #3
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002b10:	4618      	mov	r0, r3
 8002b12:	f013 fec0 	bl	8016896 <_ZNSaIcEC1Ev>
 8002b16:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002b1a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002b1e:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 8002b22:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8002b26:	ca06      	ldmia	r2, {r1, r2}
 8002b28:	f002 ffe1 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002b2c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002b30:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8002e8c <_ZN3jlb5GraphC1Ev+0xd14>
 8002b34:	2200      	movs	r2, #0
 8002b36:	2141      	movs	r1, #65	; 0x41
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f7ff fad7 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002b3e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002b42:	4618      	mov	r0, r3
 8002b44:	f002 ff86 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002b48:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f013 fea4 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8002b52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b56:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002b5a:	2144      	movs	r1, #68	; 0x44
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	f002 fd31 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002b62:	4604      	mov	r4, r0
 8002b64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b68:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8002b6c:	4ac3      	ldr	r2, [pc, #780]	; (8002e7c <_ZN3jlb5GraphC1Ev+0xd04>)
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	4611      	mov	r1, r2
 8002b72:	8019      	strh	r1, [r3, #0]
 8002b74:	3302      	adds	r3, #2
 8002b76:	0c12      	lsrs	r2, r2, #16
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b7e:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8002b82:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b8c:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8002b90:	2203      	movs	r2, #3
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f013 fe7c 	bl	8016896 <_ZNSaIcEC1Ev>
 8002b9e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8002ba2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002ba6:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 8002baa:	f507 7051 	add.w	r0, r7, #836	; 0x344
 8002bae:	ca06      	ldmia	r2, {r1, r2}
 8002bb0:	f002 ff9d 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002bb4:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8002bb8:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8002e8c <_ZN3jlb5GraphC1Ev+0xd14>
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2142      	movs	r1, #66	; 0x42
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7ff fa93 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002bc6:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 ff42 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002bd0:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f013 fe60 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 8002bda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002bde:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002be2:	2144      	movs	r1, #68	; 0x44
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	f002 fced 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002bea:	4604      	mov	r4, r0
 8002bec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002bf0:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8002bf4:	4aa2      	ldr	r2, [pc, #648]	; (8002e80 <_ZN3jlb5GraphC1Ev+0xd08>)
 8002bf6:	8812      	ldrh	r2, [r2, #0]
 8002bf8:	801a      	strh	r2, [r3, #0]
 8002bfa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002bfe:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8002c02:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c0c:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8002c10:	2202      	movs	r2, #2
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f013 fe3c 	bl	8016896 <_ZNSaIcEC1Ev>
 8002c1e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002c22:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002c26:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 8002c2a:	f507 7058 	add.w	r0, r7, #864	; 0x360
 8002c2e:	ca06      	ldmia	r2, {r1, r2}
 8002c30:	f002 ff5d 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002c34:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8002c38:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8002e8c <_ZN3jlb5GraphC1Ev+0xd14>
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2147      	movs	r1, #71	; 0x47
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7ff fa53 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002c46:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f002 ff02 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002c50:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002c54:	4618      	mov	r0, r3
 8002c56:	f013 fe20 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 8002c5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c5e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002c62:	2144      	movs	r1, #68	; 0x44
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	f002 fcad 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c70:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 8002c74:	4a82      	ldr	r2, [pc, #520]	; (8002e80 <_ZN3jlb5GraphC1Ev+0xd08>)
 8002c76:	8812      	ldrh	r2, [r2, #0]
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c7e:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8002c82:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c8c:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8002c90:	2202      	movs	r2, #2
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f013 fdfc 	bl	8016896 <_ZNSaIcEC1Ev>
 8002c9e:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002ca2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002ca6:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 8002caa:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 8002cae:	ca06      	ldmia	r2, {r1, r2}
 8002cb0:	f002 ff1d 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002cb4:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002cb8:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8002e84 <_ZN3jlb5GraphC1Ev+0xd0c>
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	2149      	movs	r1, #73	; 0x49
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f7ff fa13 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002cc6:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fec2 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002cd0:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f013 fde0 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 8002cda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002cde:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002ce2:	2144      	movs	r1, #68	; 0x44
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	f002 fc6d 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002cea:	4604      	mov	r4, r0
 8002cec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002cf0:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8002cf4:	4a62      	ldr	r2, [pc, #392]	; (8002e80 <_ZN3jlb5GraphC1Ev+0xd08>)
 8002cf6:	8812      	ldrh	r2, [r2, #0]
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002cfe:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8002d02:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d0c:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8002d10:	2202      	movs	r2, #2
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f013 fdbc 	bl	8016896 <_ZNSaIcEC1Ev>
 8002d1e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002d22:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002d26:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 8002d2a:	f507 7066 	add.w	r0, r7, #920	; 0x398
 8002d2e:	ca06      	ldmia	r2, {r1, r2}
 8002d30:	f002 fedd 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002d34:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002d38:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8002e8c <_ZN3jlb5GraphC1Ev+0xd14>
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	2146      	movs	r1, #70	; 0x46
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff f9d3 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002d46:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 fe82 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002d50:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f013 fda0 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 8002d5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d5e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002d62:	2145      	movs	r1, #69	; 0x45
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	f002 fc2d 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d70:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8002d74:	4a44      	ldr	r2, [pc, #272]	; (8002e88 <_ZN3jlb5GraphC1Ev+0xd10>)
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	801a      	strh	r2, [r3, #0]
 8002d7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d7e:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8002d82:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d8c:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8002d90:	2202      	movs	r2, #2
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f013 fd7c 	bl	8016896 <_ZNSaIcEC1Ev>
 8002d9e:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8002da2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002da6:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 8002daa:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 8002dae:	ca06      	ldmia	r2, {r1, r2}
 8002db0:	f002 fe9d 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002db4:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8002db8:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8002e8c <_ZN3jlb5GraphC1Ev+0xd14>
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2142      	movs	r1, #66	; 0x42
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f7ff f993 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002dc6:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 fe42 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002dd0:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f013 fd60 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 8002dda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002dde:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002de2:	2145      	movs	r1, #69	; 0x45
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	f002 fbed 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002dea:	4604      	mov	r4, r0
 8002dec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002df0:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8002df4:	2242      	movs	r2, #66	; 0x42
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002dfc:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8002e00:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e0a:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8002e0e:	2201      	movs	r2, #1
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002e16:	4618      	mov	r0, r3
 8002e18:	f013 fd3d 	bl	8016896 <_ZNSaIcEC1Ev>
 8002e1c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002e20:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002e24:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8002e28:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 8002e2c:	ca06      	ldmia	r2, {r1, r2}
 8002e2e:	f002 fe5e 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002e32:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002e36:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002e84 <_ZN3jlb5GraphC1Ev+0xd0c>
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	214a      	movs	r1, #74	; 0x4a
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7ff f954 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002e44:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fe03 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002e4e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002e52:	4618      	mov	r0, r3
 8002e54:	f013 fd21 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 8002e58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e5c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002e60:	2145      	movs	r1, #69	; 0x45
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	f002 fbae 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002e68:	4604      	mov	r4, r0
 8002e6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e6e:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8002e72:	2242      	movs	r2, #66	; 0x42
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e7a:	e009      	b.n	8002e90 <_ZN3jlb5GraphC1Ev+0xd18>
 8002e7c:	08018770 	.word	0x08018770
 8002e80:	08018774 	.word	0x08018774
 8002e84:	3f99999a 	.word	0x3f99999a
 8002e88:	08018778 	.word	0x08018778
 8002e8c:	3f71463a 	.word	0x3f71463a
 8002e90:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8002e94:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e9e:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f013 fcf3 	bl	8016896 <_ZNSaIcEC1Ev>
 8002eb0:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8002eb4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002eb8:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 8002ebc:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8002ec0:	ca06      	ldmia	r2, {r1, r2}
 8002ec2:	f002 fe14 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002ec6:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002eca:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8002e8c <_ZN3jlb5GraphC1Ev+0xd14>
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2147      	movs	r1, #71	; 0x47
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f7ff f90a 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002ed8:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 fdb9 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002ee2:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f013 fcd7 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8002eec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ef0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002ef4:	2146      	movs	r1, #70	; 0x46
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	f002 fb64 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002efc:	4604      	mov	r4, r0
 8002efe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f02:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8002f06:	4ae4      	ldr	r2, [pc, #912]	; (8003298 <_ZN3jlb5GraphC1Ev+0x1120>)
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	8019      	strh	r1, [r3, #0]
 8002f0e:	3302      	adds	r3, #2
 8002f10:	0c12      	lsrs	r2, r2, #16
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f18:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8002f1c:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f26:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002f32:	4618      	mov	r0, r3
 8002f34:	f013 fcaf 	bl	8016896 <_ZNSaIcEC1Ev>
 8002f38:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002f3c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002f40:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 8002f44:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8002f48:	ca06      	ldmia	r2, {r1, r2}
 8002f4a:	f002 fdd0 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002f4e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002f52:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 800329c <_ZN3jlb5GraphC1Ev+0x1124>
 8002f56:	2201      	movs	r2, #1
 8002f58:	2143      	movs	r1, #67	; 0x43
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f7ff f8c6 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002f60:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002f64:	4618      	mov	r0, r3
 8002f66:	f002 fd75 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002f6a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f013 fc93 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 8002f74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f78:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002f7c:	2146      	movs	r1, #70	; 0x46
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	f002 fb20 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8002f84:	4604      	mov	r4, r0
 8002f86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f8a:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8002f8e:	4ac4      	ldr	r2, [pc, #784]	; (80032a0 <_ZN3jlb5GraphC1Ev+0x1128>)
 8002f90:	8812      	ldrh	r2, [r2, #0]
 8002f92:	801a      	strh	r2, [r3, #0]
 8002f94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f98:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8002f9c:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002fa6:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8002faa:	2202      	movs	r2, #2
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f013 fc6f 	bl	8016896 <_ZNSaIcEC1Ev>
 8002fb8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8002fbc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002fc0:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 8002fc4:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8002fc8:	ca06      	ldmia	r2, {r1, r2}
 8002fca:	f002 fd90 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002fce:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8002fd2:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800329c <_ZN3jlb5GraphC1Ev+0x1124>
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2144      	movs	r1, #68	; 0x44
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f7ff f886 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002fe0:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 fd35 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8002fea:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f013 fc53 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 8002ff4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ff8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002ffc:	2146      	movs	r1, #70	; 0x46
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	f002 fae0 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003004:	4604      	mov	r4, r0
 8003006:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800300a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800300e:	4aa4      	ldr	r2, [pc, #656]	; (80032a0 <_ZN3jlb5GraphC1Ev+0x1128>)
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003018:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800301c:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003026:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800302a:	2202      	movs	r2, #2
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8003032:	4618      	mov	r0, r3
 8003034:	f013 fc2f 	bl	8016896 <_ZNSaIcEC1Ev>
 8003038:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800303c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003040:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8003044:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8003048:	ca06      	ldmia	r2, {r1, r2}
 800304a:	f002 fd50 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800304e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003052:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80032a4 <_ZN3jlb5GraphC1Ev+0x112c>
 8003056:	2202      	movs	r2, #2
 8003058:	2147      	movs	r1, #71	; 0x47
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff f846 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003060:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003064:	4618      	mov	r0, r3
 8003066:	f002 fcf5 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 800306a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800306e:	4618      	mov	r0, r3
 8003070:	f013 fc13 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 8003074:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003078:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800307c:	2146      	movs	r1, #70	; 0x46
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	f002 faa0 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003084:	4604      	mov	r4, r0
 8003086:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800308a:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 800308e:	4a84      	ldr	r2, [pc, #528]	; (80032a0 <_ZN3jlb5GraphC1Ev+0x1128>)
 8003090:	8812      	ldrh	r2, [r2, #0]
 8003092:	801a      	strh	r2, [r3, #0]
 8003094:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003098:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800309c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80030a6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80030aa:	2202      	movs	r2, #2
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80030b2:	4618      	mov	r0, r3
 80030b4:	f013 fbef 	bl	8016896 <_ZNSaIcEC1Ev>
 80030b8:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80030bc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80030c0:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80030c4:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 80030c8:	ca06      	ldmia	r2, {r1, r2}
 80030ca:	f002 fd10 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80030ce:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80030d2:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800329c <_ZN3jlb5GraphC1Ev+0x1124>
 80030d6:	2201      	movs	r2, #1
 80030d8:	2149      	movs	r1, #73	; 0x49
 80030da:	4620      	mov	r0, r4
 80030dc:	f7ff f806 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80030e0:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 fcb5 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80030ea:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80030ee:	4618      	mov	r0, r3
 80030f0:	f013 fbd3 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 80030f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80030f8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80030fc:	2146      	movs	r1, #70	; 0x46
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	f002 fa60 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003104:	4604      	mov	r4, r0
 8003106:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800310a:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 800310e:	4a62      	ldr	r2, [pc, #392]	; (8003298 <_ZN3jlb5GraphC1Ev+0x1120>)
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4611      	mov	r1, r2
 8003114:	8019      	strh	r1, [r3, #0]
 8003116:	3302      	adds	r3, #2
 8003118:	0c12      	lsrs	r2, r2, #16
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003120:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8003124:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800312e:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8003132:	2203      	movs	r2, #3
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800313a:	4618      	mov	r0, r3
 800313c:	f013 fbab 	bl	8016896 <_ZNSaIcEC1Ev>
 8003140:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003144:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003148:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 800314c:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8003150:	ca06      	ldmia	r2, {r1, r2}
 8003152:	f002 fccc 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003156:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800315a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800329c <_ZN3jlb5GraphC1Ev+0x1124>
 800315e:	2200      	movs	r2, #0
 8003160:	2148      	movs	r1, #72	; 0x48
 8003162:	4620      	mov	r0, r4
 8003164:	f7fe ffc2 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003168:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800316c:	4618      	mov	r0, r3
 800316e:	f002 fc71 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003172:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003176:	4618      	mov	r0, r3
 8003178:	f013 fb8f 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 800317c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003180:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003184:	2147      	movs	r1, #71	; 0x47
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	f002 fa1c 	bl	80055c4 <_ZN3jlb5GraphixEc>
 800318c:	4604      	mov	r4, r0
 800318e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003192:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8003196:	4a44      	ldr	r2, [pc, #272]	; (80032a8 <_ZN3jlb5GraphC1Ev+0x1130>)
 8003198:	8812      	ldrh	r2, [r2, #0]
 800319a:	801a      	strh	r2, [r3, #0]
 800319c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80031a0:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 80031a4:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80031ae:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 80031b2:	2202      	movs	r2, #2
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80031ba:	4618      	mov	r0, r3
 80031bc:	f013 fb6b 	bl	8016896 <_ZNSaIcEC1Ev>
 80031c0:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80031c4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80031c8:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 80031cc:	f207 4094 	addw	r0, r7, #1172	; 0x494
 80031d0:	ca06      	ldmia	r2, {r1, r2}
 80031d2:	f002 fc8c 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80031d6:	f207 4394 	addw	r3, r7, #1172	; 0x494
 80031da:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80032a4 <_ZN3jlb5GraphC1Ev+0x112c>
 80031de:	2202      	movs	r2, #2
 80031e0:	2146      	movs	r1, #70	; 0x46
 80031e2:	4620      	mov	r0, r4
 80031e4:	f7fe ff82 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80031e8:	f207 4394 	addw	r3, r7, #1172	; 0x494
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 fc31 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80031f2:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80031f6:	4618      	mov	r0, r3
 80031f8:	f013 fb4f 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 80031fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003200:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003204:	2147      	movs	r1, #71	; 0x47
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	f002 f9dc 	bl	80055c4 <_ZN3jlb5GraphixEc>
 800320c:	4604      	mov	r4, r0
 800320e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003212:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8003216:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <_ZN3jlb5GraphC1Ev+0x1130>)
 8003218:	8812      	ldrh	r2, [r2, #0]
 800321a:	801a      	strh	r2, [r3, #0]
 800321c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003220:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8003224:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800322e:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8003232:	2202      	movs	r2, #2
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800323a:	4618      	mov	r0, r3
 800323c:	f013 fb2b 	bl	8016896 <_ZNSaIcEC1Ev>
 8003240:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8003244:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003248:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 800324c:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 8003250:	ca06      	ldmia	r2, {r1, r2}
 8003252:	f002 fc4c 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003256:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800325a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800329c <_ZN3jlb5GraphC1Ev+0x1124>
 800325e:	2201      	movs	r2, #1
 8003260:	2144      	movs	r1, #68	; 0x44
 8003262:	4620      	mov	r0, r4
 8003264:	f7fe ff42 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003268:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800326c:	4618      	mov	r0, r3
 800326e:	f002 fbf1 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003272:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8003276:	4618      	mov	r0, r3
 8003278:	f013 fb0f 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 800327c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003280:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003284:	2147      	movs	r1, #71	; 0x47
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	f002 f99c 	bl	80055c4 <_ZN3jlb5GraphixEc>
 800328c:	4604      	mov	r4, r0
 800328e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003292:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8003296:	e009      	b.n	80032ac <_ZN3jlb5GraphC1Ev+0x1134>
 8003298:	0801877c 	.word	0x0801877c
 800329c:	3f71463a 	.word	0x3f71463a
 80032a0:	08018780 	.word	0x08018780
 80032a4:	3f99999a 	.word	0x3f99999a
 80032a8:	08018784 	.word	0x08018784
 80032ac:	4ae6      	ldr	r2, [pc, #920]	; (8003648 <_ZN3jlb5GraphC1Ev+0x14d0>)
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	4611      	mov	r1, r2
 80032b2:	8019      	strh	r1, [r3, #0]
 80032b4:	3302      	adds	r3, #2
 80032b6:	0c12      	lsrs	r2, r2, #16
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80032be:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 80032c2:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80032cc:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 80032d0:	2203      	movs	r2, #3
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80032d8:	4618      	mov	r0, r3
 80032da:	f013 fadc 	bl	8016896 <_ZNSaIcEC1Ev>
 80032de:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80032e2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80032e6:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 80032ea:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 80032ee:	ca06      	ldmia	r2, {r1, r2}
 80032f0:	f002 fbfd 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80032f4:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80032f8:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 800364c <_ZN3jlb5GraphC1Ev+0x14d4>
 80032fc:	2200      	movs	r2, #0
 80032fe:	2145      	movs	r1, #69	; 0x45
 8003300:	4620      	mov	r0, r4
 8003302:	f7fe fef3 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003306:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800330a:	4618      	mov	r0, r3
 800330c:	f002 fba2 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003310:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8003314:	4618      	mov	r0, r3
 8003316:	f013 fac0 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 800331a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800331e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003322:	2147      	movs	r1, #71	; 0x47
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	f002 f94d 	bl	80055c4 <_ZN3jlb5GraphixEc>
 800332a:	4604      	mov	r4, r0
 800332c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003330:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8003334:	4ac4      	ldr	r2, [pc, #784]	; (8003648 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	4611      	mov	r1, r2
 800333a:	8019      	strh	r1, [r3, #0]
 800333c:	3302      	adds	r3, #2
 800333e:	0c12      	lsrs	r2, r2, #16
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003346:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 800334a:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003354:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8003358:	2203      	movs	r2, #3
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8003360:	4618      	mov	r0, r3
 8003362:	f013 fa98 	bl	8016896 <_ZNSaIcEC1Ev>
 8003366:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800336a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800336e:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 8003372:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 8003376:	ca06      	ldmia	r2, {r1, r2}
 8003378:	f002 fbb9 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800337c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8003380:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800364c <_ZN3jlb5GraphC1Ev+0x14d4>
 8003384:	2201      	movs	r2, #1
 8003386:	214a      	movs	r1, #74	; 0x4a
 8003388:	4620      	mov	r0, r4
 800338a:	f7fe feaf 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800338e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8003392:	4618      	mov	r0, r3
 8003394:	f002 fb5e 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003398:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800339c:	4618      	mov	r0, r3
 800339e:	f013 fa7c 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 80033a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80033a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80033aa:	2147      	movs	r1, #71	; 0x47
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	f002 f909 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80033b2:	4604      	mov	r4, r0
 80033b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80033b8:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 80033bc:	4aa4      	ldr	r2, [pc, #656]	; (8003650 <_ZN3jlb5GraphC1Ev+0x14d8>)
 80033be:	8812      	ldrh	r2, [r2, #0]
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80033c6:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80033ca:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80033d4:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80033d8:	2202      	movs	r2, #2
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80033e0:	4618      	mov	r0, r3
 80033e2:	f013 fa58 	bl	8016896 <_ZNSaIcEC1Ev>
 80033e6:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80033ea:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80033ee:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 80033f2:	f207 5004 	addw	r0, r7, #1284	; 0x504
 80033f6:	ca06      	ldmia	r2, {r1, r2}
 80033f8:	f002 fb79 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80033fc:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8003400:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800364c <_ZN3jlb5GraphC1Ev+0x14d4>
 8003404:	2200      	movs	r2, #0
 8003406:	2149      	movs	r1, #73	; 0x49
 8003408:	4620      	mov	r0, r4
 800340a:	f7fe fe6f 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800340e:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8003412:	4618      	mov	r0, r3
 8003414:	f002 fb1e 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003418:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800341c:	4618      	mov	r0, r3
 800341e:	f013 fa3c 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 8003422:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003426:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800342a:	2148      	movs	r1, #72	; 0x48
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	f002 f8c9 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003432:	4604      	mov	r4, r0
 8003434:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003438:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 800343c:	4a85      	ldr	r2, [pc, #532]	; (8003654 <_ZN3jlb5GraphC1Ev+0x14dc>)
 800343e:	8812      	ldrh	r2, [r2, #0]
 8003440:	801a      	strh	r2, [r3, #0]
 8003442:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003446:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 800344a:	f207 5234 	addw	r2, r7, #1332	; 0x534
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003454:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8003458:	2202      	movs	r2, #2
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003460:	4618      	mov	r0, r3
 8003462:	f013 fa18 	bl	8016896 <_ZNSaIcEC1Ev>
 8003466:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800346a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800346e:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 8003472:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8003476:	ca06      	ldmia	r2, {r1, r2}
 8003478:	f002 fb39 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800347c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8003480:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800364c <_ZN3jlb5GraphC1Ev+0x14d4>
 8003484:	2201      	movs	r2, #1
 8003486:	2146      	movs	r1, #70	; 0x46
 8003488:	4620      	mov	r0, r4
 800348a:	f7fe fe2f 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800348e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8003492:	4618      	mov	r0, r3
 8003494:	f002 fade 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003498:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800349c:	4618      	mov	r0, r3
 800349e:	f013 f9fc 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 80034a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80034a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80034aa:	2148      	movs	r1, #72	; 0x48
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	f002 f889 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80034b2:	4604      	mov	r4, r0
 80034b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80034b8:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 80034bc:	2246      	movs	r2, #70	; 0x46
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80034c4:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 80034c8:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80034d2:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 80034d6:	2201      	movs	r2, #1
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	f207 5354 	addw	r3, r7, #1364	; 0x554
 80034de:	4618      	mov	r0, r3
 80034e0:	f013 f9d9 	bl	8016896 <_ZNSaIcEC1Ev>
 80034e4:	f207 5354 	addw	r3, r7, #1364	; 0x554
 80034e8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80034ec:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 80034f0:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 80034f4:	ca06      	ldmia	r2, {r1, r2}
 80034f6:	f002 fafa 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80034fa:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 80034fe:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800364c <_ZN3jlb5GraphC1Ev+0x14d4>
 8003502:	2200      	movs	r2, #0
 8003504:	214b      	movs	r1, #75	; 0x4b
 8003506:	4620      	mov	r0, r4
 8003508:	f7fe fdf0 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800350c:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8003510:	4618      	mov	r0, r3
 8003512:	f002 fa9f 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003516:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800351a:	4618      	mov	r0, r3
 800351c:	f013 f9bd 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8003520:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003524:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003528:	2148      	movs	r1, #72	; 0x48
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	f002 f84a 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003530:	4604      	mov	r4, r0
 8003532:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003536:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 800353a:	2246      	movs	r2, #70	; 0x46
 800353c:	701a      	strb	r2, [r3, #0]
 800353e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003542:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8003546:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003550:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8003554:	2201      	movs	r2, #1
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800355c:	4618      	mov	r0, r3
 800355e:	f013 f99a 	bl	8016896 <_ZNSaIcEC1Ev>
 8003562:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8003566:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800356a:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 800356e:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 8003572:	ca06      	ldmia	r2, {r1, r2}
 8003574:	f002 fabb 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003578:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800357c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800365c <_ZN3jlb5GraphC1Ev+0x14e4>
 8003580:	2202      	movs	r2, #2
 8003582:	214d      	movs	r1, #77	; 0x4d
 8003584:	4620      	mov	r0, r4
 8003586:	f7fe fdb1 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800358a:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800358e:	4618      	mov	r0, r3
 8003590:	f002 fa60 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003594:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8003598:	4618      	mov	r0, r3
 800359a:	f013 f97e 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 800359e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80035a2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80035a6:	2149      	movs	r1, #73	; 0x49
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	f002 f80b 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80035ae:	4604      	mov	r4, r0
 80035b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80035b4:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 80035b8:	4a27      	ldr	r2, [pc, #156]	; (8003658 <_ZN3jlb5GraphC1Ev+0x14e0>)
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	4611      	mov	r1, r2
 80035be:	8019      	strh	r1, [r3, #0]
 80035c0:	3302      	adds	r3, #2
 80035c2:	0c12      	lsrs	r2, r2, #16
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80035ca:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 80035ce:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80035d8:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 80035dc:	2203      	movs	r2, #3
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 80035e4:	4618      	mov	r0, r3
 80035e6:	f013 f956 	bl	8016896 <_ZNSaIcEC1Ev>
 80035ea:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 80035ee:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80035f2:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 80035f6:	f207 5074 	addw	r0, r7, #1396	; 0x574
 80035fa:	ca06      	ldmia	r2, {r1, r2}
 80035fc:	f002 fa77 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003600:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8003604:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800364c <_ZN3jlb5GraphC1Ev+0x14d4>
 8003608:	2200      	movs	r2, #0
 800360a:	2146      	movs	r1, #70	; 0x46
 800360c:	4620      	mov	r0, r4
 800360e:	f7fe fd6d 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003612:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8003616:	4618      	mov	r0, r3
 8003618:	f002 fa1c 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 800361c:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8003620:	4618      	mov	r0, r3
 8003622:	f013 f93a 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 8003626:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800362a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800362e:	2149      	movs	r1, #73	; 0x49
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	f001 ffc7 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003636:	4604      	mov	r4, r0
 8003638:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800363c:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8003640:	4a05      	ldr	r2, [pc, #20]	; (8003658 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	4611      	mov	r1, r2
 8003646:	e00b      	b.n	8003660 <_ZN3jlb5GraphC1Ev+0x14e8>
 8003648:	08018788 	.word	0x08018788
 800364c:	3f71463a 	.word	0x3f71463a
 8003650:	08018784 	.word	0x08018784
 8003654:	0801878c 	.word	0x0801878c
 8003658:	08018790 	.word	0x08018790
 800365c:	3f99999a 	.word	0x3f99999a
 8003660:	8019      	strh	r1, [r3, #0]
 8003662:	3302      	adds	r3, #2
 8003664:	0c12      	lsrs	r2, r2, #16
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800366c:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8003670:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800367a:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 800367e:	2203      	movs	r2, #3
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8003686:	4618      	mov	r0, r3
 8003688:	f013 f905 	bl	8016896 <_ZNSaIcEC1Ev>
 800368c:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8003690:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003694:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 8003698:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 800369c:	ca06      	ldmia	r2, {r1, r2}
 800369e:	f002 fa26 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80036a2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80036a6:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 800365c <_ZN3jlb5GraphC1Ev+0x14e4>
 80036aa:	2202      	movs	r2, #2
 80036ac:	2144      	movs	r1, #68	; 0x44
 80036ae:	4620      	mov	r0, r4
 80036b0:	f7fe fd1c 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80036b4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80036b8:	4618      	mov	r0, r3
 80036ba:	f002 f9cb 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80036be:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80036c2:	4618      	mov	r0, r3
 80036c4:	f013 f8e9 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 80036c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80036cc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80036d0:	2149      	movs	r1, #73	; 0x49
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	f001 ff76 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80036d8:	4604      	mov	r4, r0
 80036da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80036de:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 80036e2:	4ae7      	ldr	r2, [pc, #924]	; (8003a80 <_ZN3jlb5GraphC1Ev+0x1908>)
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	4611      	mov	r1, r2
 80036e8:	8019      	strh	r1, [r3, #0]
 80036ea:	3302      	adds	r3, #2
 80036ec:	0c12      	lsrs	r2, r2, #16
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80036f4:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 80036f8:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003702:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8003706:	2203      	movs	r2, #3
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 800370e:	4618      	mov	r0, r3
 8003710:	f013 f8c1 	bl	8016896 <_ZNSaIcEC1Ev>
 8003714:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8003718:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800371c:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 8003720:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 8003724:	ca06      	ldmia	r2, {r1, r2}
 8003726:	f002 f9e2 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800372a:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 800372e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8003a84 <_ZN3jlb5GraphC1Ev+0x190c>
 8003732:	2201      	movs	r2, #1
 8003734:	2147      	movs	r1, #71	; 0x47
 8003736:	4620      	mov	r0, r4
 8003738:	f7fe fcd8 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800373c:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8003740:	4618      	mov	r0, r3
 8003742:	f002 f987 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003746:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 800374a:	4618      	mov	r0, r3
 800374c:	f013 f8a5 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8003750:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003754:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003758:	2149      	movs	r1, #73	; 0x49
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	f001 ff32 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003760:	4604      	mov	r4, r0
 8003762:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003766:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 800376a:	4ac7      	ldr	r2, [pc, #796]	; (8003a88 <_ZN3jlb5GraphC1Ev+0x1910>)
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	4611      	mov	r1, r2
 8003770:	8019      	strh	r1, [r3, #0]
 8003772:	3302      	adds	r3, #2
 8003774:	0c12      	lsrs	r2, r2, #16
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800377c:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8003780:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800378a:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 800378e:	2203      	movs	r2, #3
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8003796:	4618      	mov	r0, r3
 8003798:	f013 f87d 	bl	8016896 <_ZNSaIcEC1Ev>
 800379c:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80037a0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80037a4:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 80037a8:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 80037ac:	ca06      	ldmia	r2, {r1, r2}
 80037ae:	f002 f99e 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80037b2:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80037b6:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8003a84 <_ZN3jlb5GraphC1Ev+0x190c>
 80037ba:	2200      	movs	r2, #0
 80037bc:	214c      	movs	r1, #76	; 0x4c
 80037be:	4620      	mov	r0, r4
 80037c0:	f7fe fc94 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80037c4:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80037c8:	4618      	mov	r0, r3
 80037ca:	f002 f943 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80037ce:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f013 f861 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 80037d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80037dc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80037e0:	2149      	movs	r1, #73	; 0x49
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	f001 feee 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80037e8:	4604      	mov	r4, r0
 80037ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80037ee:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 80037f2:	4aa5      	ldr	r2, [pc, #660]	; (8003a88 <_ZN3jlb5GraphC1Ev+0x1910>)
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	4611      	mov	r1, r2
 80037f8:	8019      	strh	r1, [r3, #0]
 80037fa:	3302      	adds	r3, #2
 80037fc:	0c12      	lsrs	r2, r2, #16
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003804:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8003808:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003812:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8003816:	2203      	movs	r2, #3
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 800381e:	4618      	mov	r0, r3
 8003820:	f013 f839 	bl	8016896 <_ZNSaIcEC1Ev>
 8003824:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8003828:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800382c:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8003830:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 8003834:	ca06      	ldmia	r2, {r1, r2}
 8003836:	f002 f95a 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800383a:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 800383e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8003a8c <_ZN3jlb5GraphC1Ev+0x1914>
 8003842:	2202      	movs	r2, #2
 8003844:	214e      	movs	r1, #78	; 0x4e
 8003846:	4620      	mov	r0, r4
 8003848:	f7fe fc50 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800384c:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8003850:	4618      	mov	r0, r3
 8003852:	f002 f8ff 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003856:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 800385a:	4618      	mov	r0, r3
 800385c:	f013 f81d 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8003860:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003864:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003868:	2149      	movs	r1, #73	; 0x49
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	f001 feaa 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003870:	4604      	mov	r4, r0
 8003872:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003876:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 800387a:	4a83      	ldr	r2, [pc, #524]	; (8003a88 <_ZN3jlb5GraphC1Ev+0x1910>)
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	4611      	mov	r1, r2
 8003880:	8019      	strh	r1, [r3, #0]
 8003882:	3302      	adds	r3, #2
 8003884:	0c12      	lsrs	r2, r2, #16
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800388c:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8003890:	f207 6214 	addw	r2, r7, #1556	; 0x614
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800389a:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 800389e:	2203      	movs	r2, #3
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80038a6:	4618      	mov	r0, r3
 80038a8:	f012 fff5 	bl	8016896 <_ZNSaIcEC1Ev>
 80038ac:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80038b0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80038b4:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 80038b8:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 80038bc:	ca06      	ldmia	r2, {r1, r2}
 80038be:	f002 f916 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80038c2:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80038c6:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8003a84 <_ZN3jlb5GraphC1Ev+0x190c>
 80038ca:	2201      	movs	r2, #1
 80038cc:	214b      	movs	r1, #75	; 0x4b
 80038ce:	4620      	mov	r0, r4
 80038d0:	f7fe fc0c 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80038d4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80038d8:	4618      	mov	r0, r3
 80038da:	f002 f8bb 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80038de:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80038e2:	4618      	mov	r0, r3
 80038e4:	f012 ffd9 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 80038e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80038ec:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80038f0:	214a      	movs	r1, #74	; 0x4a
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	f001 fe66 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80038f8:	4604      	mov	r4, r0
 80038fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80038fe:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8003902:	224c      	movs	r2, #76	; 0x4c
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800390a:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800390e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003918:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800391c:	2201      	movs	r2, #1
 800391e:	605a      	str	r2, [r3, #4]
 8003920:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8003924:	4618      	mov	r0, r3
 8003926:	f012 ffb6 	bl	8016896 <_ZNSaIcEC1Ev>
 800392a:	f207 6334 	addw	r3, r7, #1588	; 0x634
 800392e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003932:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 8003936:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 800393a:	ca06      	ldmia	r2, {r1, r2}
 800393c:	f002 f8d7 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003940:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8003944:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8003a84 <_ZN3jlb5GraphC1Ev+0x190c>
 8003948:	2200      	movs	r2, #0
 800394a:	2147      	movs	r1, #71	; 0x47
 800394c:	4620      	mov	r0, r4
 800394e:	f7fe fbcd 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003952:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8003956:	4618      	mov	r0, r3
 8003958:	f002 f87c 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 800395c:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8003960:	4618      	mov	r0, r3
 8003962:	f012 ff9a 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 8003966:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800396a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800396e:	214a      	movs	r1, #74	; 0x4a
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	f001 fe27 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003976:	4604      	mov	r4, r0
 8003978:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800397c:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8003980:	224c      	movs	r2, #76	; 0x4c
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003988:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 800398c:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003996:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 800399a:	2201      	movs	r2, #1
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80039a2:	4618      	mov	r0, r3
 80039a4:	f012 ff77 	bl	8016896 <_ZNSaIcEC1Ev>
 80039a8:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80039ac:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80039b0:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 80039b4:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 80039b8:	ca06      	ldmia	r2, {r1, r2}
 80039ba:	f002 f898 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80039be:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80039c2:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8003a8c <_ZN3jlb5GraphC1Ev+0x1914>
 80039c6:	2202      	movs	r2, #2
 80039c8:	2145      	movs	r1, #69	; 0x45
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7fe fb8e 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80039d0:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80039d4:	4618      	mov	r0, r3
 80039d6:	f002 f83d 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80039da:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80039de:	4618      	mov	r0, r3
 80039e0:	f012 ff5b 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 80039e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80039e8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80039ec:	214a      	movs	r1, #74	; 0x4a
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	f001 fde8 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80039f4:	4604      	mov	r4, r0
 80039f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80039fa:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 80039fe:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <_ZN3jlb5GraphC1Ev+0x1918>)
 8003a00:	8812      	ldrh	r2, [r2, #0]
 8003a02:	801a      	strh	r2, [r3, #0]
 8003a04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a08:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8003a0c:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a16:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003a22:	4618      	mov	r0, r3
 8003a24:	f012 ff37 	bl	8016896 <_ZNSaIcEC1Ev>
 8003a28:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003a2c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003a30:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 8003a34:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8003a38:	ca06      	ldmia	r2, {r1, r2}
 8003a3a:	f002 f858 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003a3e:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8003a42:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003a84 <_ZN3jlb5GraphC1Ev+0x190c>
 8003a46:	2201      	movs	r2, #1
 8003a48:	214c      	movs	r1, #76	; 0x4c
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f7fe fb4e 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003a50:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 fffd 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003a5a:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f012 ff1b 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8003a64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a68:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003a6c:	214b      	movs	r1, #75	; 0x4b
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	f001 fda8 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003a74:	4604      	mov	r4, r0
 8003a76:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a7a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8003a7e:	e009      	b.n	8003a94 <_ZN3jlb5GraphC1Ev+0x191c>
 8003a80:	08018790 	.word	0x08018790
 8003a84:	3f71463a 	.word	0x3f71463a
 8003a88:	08018794 	.word	0x08018794
 8003a8c:	3f99999a 	.word	0x3f99999a
 8003a90:	08018798 	.word	0x08018798
 8003a94:	4ae4      	ldr	r2, [pc, #912]	; (8003e28 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	8019      	strh	r1, [r3, #0]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	0c12      	lsrs	r2, r2, #16
 8003aa0:	701a      	strb	r2, [r3, #0]
 8003aa2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003aa6:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8003aaa:	f207 6284 	addw	r2, r7, #1668	; 0x684
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ab4:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8003ab8:	2203      	movs	r2, #3
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f012 fee8 	bl	8016896 <_ZNSaIcEC1Ev>
 8003ac6:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8003aca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003ace:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 8003ad2:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8003ad6:	ca06      	ldmia	r2, {r1, r2}
 8003ad8:	f002 f809 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003adc:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003ae0:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8003e2c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	2148      	movs	r1, #72	; 0x48
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f7fe faff 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003aee:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 ffae 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003af8:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8003afc:	4618      	mov	r0, r3
 8003afe:	f012 fecc 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 8003b02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b06:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003b0a:	214b      	movs	r1, #75	; 0x4b
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	f001 fd59 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003b12:	4604      	mov	r4, r0
 8003b14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b18:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8003b1c:	4ac4      	ldr	r2, [pc, #784]	; (8003e30 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8003b1e:	8812      	ldrh	r2, [r2, #0]
 8003b20:	801a      	strh	r2, [r3, #0]
 8003b22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b26:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8003b2a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b34:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8003b38:	2202      	movs	r2, #2
 8003b3a:	605a      	str	r2, [r3, #4]
 8003b3c:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f012 fea8 	bl	8016896 <_ZNSaIcEC1Ev>
 8003b46:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8003b4a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003b4e:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 8003b52:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 8003b56:	ca06      	ldmia	r2, {r1, r2}
 8003b58:	f001 ffc9 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003b5c:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8003b60:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8003e2c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8003b64:	2200      	movs	r2, #0
 8003b66:	2149      	movs	r1, #73	; 0x49
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f7fe fabf 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003b6e:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 ff6e 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003b78:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f012 fe8c 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 8003b82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b86:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003b8a:	214b      	movs	r1, #75	; 0x4b
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	f001 fd19 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003b92:	4604      	mov	r4, r0
 8003b94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b98:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8003b9c:	4aa4      	ldr	r2, [pc, #656]	; (8003e30 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8003b9e:	8812      	ldrh	r2, [r2, #0]
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ba6:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8003baa:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003bb4:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8003bb8:	2202      	movs	r2, #2
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f012 fe68 	bl	8016896 <_ZNSaIcEC1Ev>
 8003bc6:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8003bca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003bce:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 8003bd2:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 8003bd6:	ca06      	ldmia	r2, {r1, r2}
 8003bd8:	f001 ff89 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003bdc:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003be0:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8003e34 <_ZN3jlb5GraphC1Ev+0x1cbc>
 8003be4:	2202      	movs	r2, #2
 8003be6:	214c      	movs	r1, #76	; 0x4c
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7fe fa7f 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003bee:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 ff2e 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003bf8:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f012 fe4c 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 8003c02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c06:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003c0a:	214b      	movs	r1, #75	; 0x4b
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	f001 fcd9 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003c12:	4604      	mov	r4, r0
 8003c14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c18:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8003c1c:	4a84      	ldr	r2, [pc, #528]	; (8003e30 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8003c1e:	8812      	ldrh	r2, [r2, #0]
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c26:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8003c2a:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c34:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8003c38:	2202      	movs	r2, #2
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8003c40:	4618      	mov	r0, r3
 8003c42:	f012 fe28 	bl	8016896 <_ZNSaIcEC1Ev>
 8003c46:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8003c4a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003c4e:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 8003c52:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 8003c56:	ca06      	ldmia	r2, {r1, r2}
 8003c58:	f001 ff49 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003c5c:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8003c60:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8003e2c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8003c64:	2201      	movs	r2, #1
 8003c66:	214e      	movs	r1, #78	; 0x4e
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f7fe fa3f 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003c6e:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f001 feee 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003c78:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f012 fe0c 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8003c82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c86:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003c8a:	214b      	movs	r1, #75	; 0x4b
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	f001 fc99 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003c92:	4604      	mov	r4, r0
 8003c94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c98:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8003c9c:	4a62      	ldr	r2, [pc, #392]	; (8003e28 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	8019      	strh	r1, [r3, #0]
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	0c12      	lsrs	r2, r2, #16
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003cae:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8003cb2:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003cbc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	605a      	str	r2, [r3, #4]
 8003cc4:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f012 fde4 	bl	8016896 <_ZNSaIcEC1Ev>
 8003cce:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8003cd2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003cd6:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 8003cda:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 8003cde:	ca06      	ldmia	r2, {r1, r2}
 8003ce0:	f001 ff05 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003ce4:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8003ce8:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8003e2c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8003cec:	2200      	movs	r2, #0
 8003cee:	214d      	movs	r1, #77	; 0x4d
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f7fe f9fb 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003cf6:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 feaa 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003d00:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8003d04:	4618      	mov	r0, r3
 8003d06:	f012 fdc8 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 8003d0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d0e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003d12:	214c      	movs	r1, #76	; 0x4c
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	f001 fc55 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d20:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8003d24:	4a44      	ldr	r2, [pc, #272]	; (8003e38 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8003d26:	8812      	ldrh	r2, [r2, #0]
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d2e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8003d32:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d3c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8003d40:	2202      	movs	r2, #2
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f012 fda4 	bl	8016896 <_ZNSaIcEC1Ev>
 8003d4e:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8003d52:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003d56:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 8003d5a:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 8003d5e:	ca06      	ldmia	r2, {r1, r2}
 8003d60:	f001 fec5 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003d64:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8003d68:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8003e34 <_ZN3jlb5GraphC1Ev+0x1cbc>
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	214b      	movs	r1, #75	; 0x4b
 8003d70:	4620      	mov	r0, r4
 8003d72:	f7fe f9bb 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003d76:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 fe6a 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003d80:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8003d84:	4618      	mov	r0, r3
 8003d86:	f012 fd88 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 8003d8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d8e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003d92:	214c      	movs	r1, #76	; 0x4c
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	f001 fc15 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003da0:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8003da4:	4a24      	ldr	r2, [pc, #144]	; (8003e38 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8003da6:	8812      	ldrh	r2, [r2, #0]
 8003da8:	801a      	strh	r2, [r3, #0]
 8003daa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003dae:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8003db2:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003dbc:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f012 fd64 	bl	8016896 <_ZNSaIcEC1Ev>
 8003dce:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8003dd2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003dd6:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 8003dda:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 8003dde:	ca06      	ldmia	r2, {r1, r2}
 8003de0:	f001 fe85 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003de4:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8003de8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003e2c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8003dec:	2201      	movs	r2, #1
 8003dee:	2149      	movs	r1, #73	; 0x49
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7fe f97b 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003df6:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f001 fe2a 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003e00:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8003e04:	4618      	mov	r0, r3
 8003e06:	f012 fd48 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8003e0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e0e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003e12:	214c      	movs	r1, #76	; 0x4c
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	f001 fbd5 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e20:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8003e24:	e00a      	b.n	8003e3c <_ZN3jlb5GraphC1Ev+0x1cc4>
 8003e26:	bf00      	nop
 8003e28:	0801879c 	.word	0x0801879c
 8003e2c:	3f71463a 	.word	0x3f71463a
 8003e30:	080187a0 	.word	0x080187a0
 8003e34:	3f99999a 	.word	0x3f99999a
 8003e38:	080187a4 	.word	0x080187a4
 8003e3c:	4ae4      	ldr	r2, [pc, #912]	; (80041d0 <_ZN3jlb5GraphC1Ev+0x2058>)
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	4611      	mov	r1, r2
 8003e42:	8019      	strh	r1, [r3, #0]
 8003e44:	3302      	adds	r3, #2
 8003e46:	0c12      	lsrs	r2, r2, #16
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e4e:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8003e52:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e5c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8003e60:	2203      	movs	r2, #3
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f012 fd14 	bl	8016896 <_ZNSaIcEC1Ev>
 8003e6e:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8003e72:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003e76:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 8003e7a:	f207 7034 	addw	r0, r7, #1844	; 0x734
 8003e7e:	ca06      	ldmia	r2, {r1, r2}
 8003e80:	f001 fe35 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003e84:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8003e88:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 80041d4 <_ZN3jlb5GraphC1Ev+0x205c>
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	214a      	movs	r1, #74	; 0x4a
 8003e90:	4620      	mov	r0, r4
 8003e92:	f7fe f92b 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003e96:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 fdda 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003ea0:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f012 fcf8 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8003eaa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003eae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003eb2:	214c      	movs	r1, #76	; 0x4c
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	f001 fb85 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003eba:	4604      	mov	r4, r0
 8003ebc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ec0:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8003ec4:	4ac2      	ldr	r2, [pc, #776]	; (80041d0 <_ZN3jlb5GraphC1Ev+0x2058>)
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	4611      	mov	r1, r2
 8003eca:	8019      	strh	r1, [r3, #0]
 8003ecc:	3302      	adds	r3, #2
 8003ece:	0c12      	lsrs	r2, r2, #16
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ed6:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8003eda:	f207 7264 	addw	r2, r7, #1892	; 0x764
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ee4:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8003ee8:	2203      	movs	r2, #3
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f012 fcd0 	bl	8016896 <_ZNSaIcEC1Ev>
 8003ef6:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8003efa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003efe:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8003f02:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 8003f06:	ca06      	ldmia	r2, {r1, r2}
 8003f08:	f001 fdf1 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003f0c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8003f10:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80041d4 <_ZN3jlb5GraphC1Ev+0x205c>
 8003f14:	2201      	movs	r2, #1
 8003f16:	214f      	movs	r1, #79	; 0x4f
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f7fe f8e7 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003f1e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 fd96 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003f28:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f012 fcb4 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 8003f32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f36:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003f3a:	214c      	movs	r1, #76	; 0x4c
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	f001 fb41 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003f42:	4604      	mov	r4, r0
 8003f44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f48:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8003f4c:	4aa2      	ldr	r2, [pc, #648]	; (80041d8 <_ZN3jlb5GraphC1Ev+0x2060>)
 8003f4e:	8812      	ldrh	r2, [r2, #0]
 8003f50:	801a      	strh	r2, [r3, #0]
 8003f52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f56:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8003f5a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f64:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8003f68:	2202      	movs	r2, #2
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8003f70:	4618      	mov	r0, r3
 8003f72:	f012 fc90 	bl	8016896 <_ZNSaIcEC1Ev>
 8003f76:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8003f7a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003f7e:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 8003f82:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 8003f86:	ca06      	ldmia	r2, {r1, r2}
 8003f88:	f001 fdb1 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003f8c:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8003f90:	ed9f 0a90 	vldr	s0, [pc, #576]	; 80041d4 <_ZN3jlb5GraphC1Ev+0x205c>
 8003f94:	2200      	movs	r2, #0
 8003f96:	214e      	movs	r1, #78	; 0x4e
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f7fe f8a7 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003f9e:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 fd56 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8003fa8:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8003fac:	4618      	mov	r0, r3
 8003fae:	f012 fc74 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 8003fb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003fb6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003fba:	214d      	movs	r1, #77	; 0x4d
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	f001 fb01 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003fc8:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003fcc:	4a83      	ldr	r2, [pc, #524]	; (80041dc <_ZN3jlb5GraphC1Ev+0x2064>)
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	8019      	strh	r1, [r3, #0]
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	0c12      	lsrs	r2, r2, #16
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003fde:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003fe2:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003fec:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f012 fc4c 	bl	8016896 <_ZNSaIcEC1Ev>
 8003ffe:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8004002:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004006:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 800400a:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 800400e:	ca06      	ldmia	r2, {r1, r2}
 8004010:	f001 fd6d 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004014:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8004018:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80041e0 <_ZN3jlb5GraphC1Ev+0x2068>
 800401c:	2202      	movs	r2, #2
 800401e:	2148      	movs	r1, #72	; 0x48
 8004020:	4620      	mov	r0, r4
 8004022:	f7fe f863 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004026:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 800402a:	4618      	mov	r0, r3
 800402c:	f001 fd12 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004030:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8004034:	4618      	mov	r0, r3
 8004036:	f012 fc30 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 800403a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800403e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004042:	214d      	movs	r1, #77	; 0x4d
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	f001 fabd 	bl	80055c4 <_ZN3jlb5GraphixEc>
 800404a:	4604      	mov	r4, r0
 800404c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004050:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8004054:	4a61      	ldr	r2, [pc, #388]	; (80041dc <_ZN3jlb5GraphC1Ev+0x2064>)
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	4611      	mov	r1, r2
 800405a:	8019      	strh	r1, [r3, #0]
 800405c:	3302      	adds	r3, #2
 800405e:	0c12      	lsrs	r2, r2, #16
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004066:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800406a:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004074:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8004078:	2203      	movs	r2, #3
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8004080:	4618      	mov	r0, r3
 8004082:	f012 fc08 	bl	8016896 <_ZNSaIcEC1Ev>
 8004086:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 800408a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800408e:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 8004092:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 8004096:	ca06      	ldmia	r2, {r1, r2}
 8004098:	f001 fd29 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800409c:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 80040a0:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80041d4 <_ZN3jlb5GraphC1Ev+0x205c>
 80040a4:	2201      	movs	r2, #1
 80040a6:	214b      	movs	r1, #75	; 0x4b
 80040a8:	4620      	mov	r0, r4
 80040aa:	f7fe f81f 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80040ae:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 fcce 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80040b8:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80040bc:	4618      	mov	r0, r3
 80040be:	f012 fbec 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 80040c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040c6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80040ca:	214d      	movs	r1, #77	; 0x4d
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	f001 fa79 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80040d2:	4604      	mov	r4, r0
 80040d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040d8:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80040dc:	4a41      	ldr	r2, [pc, #260]	; (80041e4 <_ZN3jlb5GraphC1Ev+0x206c>)
 80040de:	8812      	ldrh	r2, [r2, #0]
 80040e0:	801a      	strh	r2, [r3, #0]
 80040e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040e6:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80040ea:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040f4:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80040f8:	2202      	movs	r2, #2
 80040fa:	605a      	str	r2, [r3, #4]
 80040fc:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8004100:	4618      	mov	r0, r3
 8004102:	f012 fbc8 	bl	8016896 <_ZNSaIcEC1Ev>
 8004106:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800410a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800410e:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 8004112:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8004116:	ca06      	ldmia	r2, {r1, r2}
 8004118:	f001 fce9 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800411c:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8004120:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80041d4 <_ZN3jlb5GraphC1Ev+0x205c>
 8004124:	2200      	movs	r2, #0
 8004126:	2152      	movs	r1, #82	; 0x52
 8004128:	4620      	mov	r0, r4
 800412a:	f7fd ffdf 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800412e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8004132:	4618      	mov	r0, r3
 8004134:	f001 fc8e 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004138:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800413c:	4618      	mov	r0, r3
 800413e:	f012 fbac 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 8004142:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004146:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800414a:	214d      	movs	r1, #77	; 0x4d
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	f001 fa39 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004152:	4604      	mov	r4, r0
 8004154:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004158:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800415c:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <_ZN3jlb5GraphC1Ev+0x206c>)
 800415e:	8812      	ldrh	r2, [r2, #0]
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004166:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800416a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004174:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8004178:	2202      	movs	r2, #2
 800417a:	605a      	str	r2, [r3, #4]
 800417c:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8004180:	4618      	mov	r0, r3
 8004182:	f012 fb88 	bl	8016896 <_ZNSaIcEC1Ev>
 8004186:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 800418a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800418e:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8004192:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 8004196:	ca06      	ldmia	r2, {r1, r2}
 8004198:	f001 fca9 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800419c:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 80041a0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80041e8 <_ZN3jlb5GraphC1Ev+0x2070>
 80041a4:	2202      	movs	r2, #2
 80041a6:	2151      	movs	r1, #81	; 0x51
 80041a8:	4620      	mov	r0, r4
 80041aa:	f7fd ff9f 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80041ae:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fc4e 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80041b8:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80041bc:	4618      	mov	r0, r3
 80041be:	f012 fb6c 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 80041c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80041c6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80041ca:	214d      	movs	r1, #77	; 0x4d
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	e00d      	b.n	80041ec <_ZN3jlb5GraphC1Ev+0x2074>
 80041d0:	080187a8 	.word	0x080187a8
 80041d4:	3f71463a 	.word	0x3f71463a
 80041d8:	080187a4 	.word	0x080187a4
 80041dc:	080187ac 	.word	0x080187ac
 80041e0:	3f99999a 	.word	0x3f99999a
 80041e4:	080187b0 	.word	0x080187b0
 80041e8:	3f19999a 	.word	0x3f19999a
 80041ec:	f001 f9ea 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80041f0:	4604      	mov	r4, r0
 80041f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80041f6:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80041fa:	4ae5      	ldr	r2, [pc, #916]	; (8004590 <_ZN3jlb5GraphC1Ev+0x2418>)
 80041fc:	8812      	ldrh	r2, [r2, #0]
 80041fe:	801a      	strh	r2, [r3, #0]
 8004200:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004204:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8004208:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004212:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8004216:	2202      	movs	r2, #2
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800421e:	4618      	mov	r0, r3
 8004220:	f012 fb39 	bl	8016896 <_ZNSaIcEC1Ev>
 8004224:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004228:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800422c:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8004230:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 8004234:	ca06      	ldmia	r2, {r1, r2}
 8004236:	f001 fc5a 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800423a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800423e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8004594 <_ZN3jlb5GraphC1Ev+0x241c>
 8004242:	2201      	movs	r2, #1
 8004244:	2150      	movs	r1, #80	; 0x50
 8004246:	4620      	mov	r0, r4
 8004248:	f7fd ff50 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800424c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8004250:	4618      	mov	r0, r3
 8004252:	f001 fbff 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004256:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800425a:	4618      	mov	r0, r3
 800425c:	f012 fb1d 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8004260:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004264:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004268:	214e      	movs	r1, #78	; 0x4e
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	f001 f9aa 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004270:	4604      	mov	r4, r0
 8004272:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004276:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800427a:	4ac7      	ldr	r2, [pc, #796]	; (8004598 <_ZN3jlb5GraphC1Ev+0x2420>)
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	4611      	mov	r1, r2
 8004280:	8019      	strh	r1, [r3, #0]
 8004282:	3302      	adds	r3, #2
 8004284:	0c12      	lsrs	r2, r2, #16
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800428c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8004290:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800429a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800429e:	2203      	movs	r2, #3
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80042a6:	4618      	mov	r0, r3
 80042a8:	f012 faf5 	bl	8016896 <_ZNSaIcEC1Ev>
 80042ac:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80042b0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80042b4:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80042b8:	f607 0014 	addw	r0, r7, #2068	; 0x814
 80042bc:	ca06      	ldmia	r2, {r1, r2}
 80042be:	f001 fc16 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80042c2:	f607 0314 	addw	r3, r7, #2068	; 0x814
 80042c6:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8004594 <_ZN3jlb5GraphC1Ev+0x241c>
 80042ca:	2200      	movs	r2, #0
 80042cc:	214b      	movs	r1, #75	; 0x4b
 80042ce:	4620      	mov	r0, r4
 80042d0:	f7fd ff0c 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80042d4:	f607 0314 	addw	r3, r7, #2068	; 0x814
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 fbbb 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80042de:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80042e2:	4618      	mov	r0, r3
 80042e4:	f012 fad9 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 80042e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042ec:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80042f0:	214e      	movs	r1, #78	; 0x4e
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	f001 f966 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80042f8:	4604      	mov	r4, r0
 80042fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042fe:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8004302:	4aa5      	ldr	r2, [pc, #660]	; (8004598 <_ZN3jlb5GraphC1Ev+0x2420>)
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	4611      	mov	r1, r2
 8004308:	8019      	strh	r1, [r3, #0]
 800430a:	3302      	adds	r3, #2
 800430c:	0c12      	lsrs	r2, r2, #16
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004314:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8004318:	f607 0244 	addw	r2, r7, #2116	; 0x844
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004322:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8004326:	2203      	movs	r2, #3
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	f607 0348 	addw	r3, r7, #2120	; 0x848
 800432e:	4618      	mov	r0, r3
 8004330:	f012 fab1 	bl	8016896 <_ZNSaIcEC1Ev>
 8004334:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8004338:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800433c:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8004340:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 8004344:	ca06      	ldmia	r2, {r1, r2}
 8004346:	f001 fbd2 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800434a:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800434e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800459c <_ZN3jlb5GraphC1Ev+0x2424>
 8004352:	2202      	movs	r2, #2
 8004354:	2149      	movs	r1, #73	; 0x49
 8004356:	4620      	mov	r0, r4
 8004358:	f7fd fec8 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800435c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8004360:	4618      	mov	r0, r3
 8004362:	f001 fb77 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004366:	f607 0348 	addw	r3, r7, #2120	; 0x848
 800436a:	4618      	mov	r0, r3
 800436c:	f012 fa95 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8004370:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004374:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004378:	214e      	movs	r1, #78	; 0x4e
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	f001 f922 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004380:	4604      	mov	r4, r0
 8004382:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004386:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800438a:	4a83      	ldr	r2, [pc, #524]	; (8004598 <_ZN3jlb5GraphC1Ev+0x2420>)
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	4611      	mov	r1, r2
 8004390:	8019      	strh	r1, [r3, #0]
 8004392:	3302      	adds	r3, #2
 8004394:	0c12      	lsrs	r2, r2, #16
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800439c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80043a0:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043aa:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80043ae:	2203      	movs	r2, #3
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80043b6:	4618      	mov	r0, r3
 80043b8:	f012 fa6d 	bl	8016896 <_ZNSaIcEC1Ev>
 80043bc:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80043c0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80043c4:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 80043c8:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 80043cc:	ca06      	ldmia	r2, {r1, r2}
 80043ce:	f001 fb8e 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80043d2:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 80043d6:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8004594 <_ZN3jlb5GraphC1Ev+0x241c>
 80043da:	2201      	movs	r2, #1
 80043dc:	214c      	movs	r1, #76	; 0x4c
 80043de:	4620      	mov	r0, r4
 80043e0:	f7fd fe84 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80043e4:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 fb33 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80043ee:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80043f2:	4618      	mov	r0, r3
 80043f4:	f012 fa51 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 80043f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043fc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004400:	214e      	movs	r1, #78	; 0x4e
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	f001 f8de 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004408:	4604      	mov	r4, r0
 800440a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800440e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8004412:	4a63      	ldr	r2, [pc, #396]	; (80045a0 <_ZN3jlb5GraphC1Ev+0x2428>)
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	4611      	mov	r1, r2
 8004418:	8019      	strh	r1, [r3, #0]
 800441a:	3302      	adds	r3, #2
 800441c:	0c12      	lsrs	r2, r2, #16
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004424:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8004428:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004432:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8004436:	2203      	movs	r2, #3
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800443e:	4618      	mov	r0, r3
 8004440:	f012 fa29 	bl	8016896 <_ZNSaIcEC1Ev>
 8004444:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8004448:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800444c:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 8004450:	f607 0068 	addw	r0, r7, #2152	; 0x868
 8004454:	ca06      	ldmia	r2, {r1, r2}
 8004456:	f001 fb4a 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800445a:	f607 0368 	addw	r3, r7, #2152	; 0x868
 800445e:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8004594 <_ZN3jlb5GraphC1Ev+0x241c>
 8004462:	2200      	movs	r2, #0
 8004464:	2154      	movs	r1, #84	; 0x54
 8004466:	4620      	mov	r0, r4
 8004468:	f7fd fe40 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800446c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8004470:	4618      	mov	r0, r3
 8004472:	f001 faef 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004476:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800447a:	4618      	mov	r0, r3
 800447c:	f012 fa0d 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 8004480:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004484:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004488:	214e      	movs	r1, #78	; 0x4e
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	f001 f89a 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004490:	4604      	mov	r4, r0
 8004492:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004496:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800449a:	4a41      	ldr	r2, [pc, #260]	; (80045a0 <_ZN3jlb5GraphC1Ev+0x2428>)
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	4611      	mov	r1, r2
 80044a0:	8019      	strh	r1, [r3, #0]
 80044a2:	3302      	adds	r3, #2
 80044a4:	0c12      	lsrs	r2, r2, #16
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044ac:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80044b0:	f607 0298 	addw	r2, r7, #2200	; 0x898
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044ba:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80044be:	2203      	movs	r2, #3
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 80044c6:	4618      	mov	r0, r3
 80044c8:	f012 f9e5 	bl	8016896 <_ZNSaIcEC1Ev>
 80044cc:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 80044d0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80044d4:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80044d8:	f607 0084 	addw	r0, r7, #2180	; 0x884
 80044dc:	ca06      	ldmia	r2, {r1, r2}
 80044de:	f001 fb06 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80044e2:	f607 0384 	addw	r3, r7, #2180	; 0x884
 80044e6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80045a4 <_ZN3jlb5GraphC1Ev+0x242c>
 80044ea:	2202      	movs	r2, #2
 80044ec:	2153      	movs	r1, #83	; 0x53
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7fd fdfc 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80044f4:	f607 0384 	addw	r3, r7, #2180	; 0x884
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 faab 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80044fe:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8004502:	4618      	mov	r0, r3
 8004504:	f012 f9c9 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8004508:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800450c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004510:	214e      	movs	r1, #78	; 0x4e
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	f001 f856 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004518:	4604      	mov	r4, r0
 800451a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800451e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8004522:	4a1f      	ldr	r2, [pc, #124]	; (80045a0 <_ZN3jlb5GraphC1Ev+0x2428>)
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	4611      	mov	r1, r2
 8004528:	8019      	strh	r1, [r3, #0]
 800452a:	3302      	adds	r3, #2
 800452c:	0c12      	lsrs	r2, r2, #16
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004534:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8004538:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004542:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8004546:	2203      	movs	r2, #3
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 800454e:	4618      	mov	r0, r3
 8004550:	f012 f9a1 	bl	8016896 <_ZNSaIcEC1Ev>
 8004554:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8004558:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800455c:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 8004560:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 8004564:	ca06      	ldmia	r2, {r1, r2}
 8004566:	f001 fac2 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800456a:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800456e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8004594 <_ZN3jlb5GraphC1Ev+0x241c>
 8004572:	2201      	movs	r2, #1
 8004574:	2152      	movs	r1, #82	; 0x52
 8004576:	4620      	mov	r0, r4
 8004578:	f7fd fdb8 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800457c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fa67 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004586:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 800458a:	4618      	mov	r0, r3
 800458c:	e00c      	b.n	80045a8 <_ZN3jlb5GraphC1Ev+0x2430>
 800458e:	bf00      	nop
 8004590:	080187b0 	.word	0x080187b0
 8004594:	3f71463a 	.word	0x3f71463a
 8004598:	080187b4 	.word	0x080187b4
 800459c:	3f99999a 	.word	0x3f99999a
 80045a0:	080187b8 	.word	0x080187b8
 80045a4:	3f19999a 	.word	0x3f19999a
 80045a8:	f012 f977 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 80045ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045b0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80045b4:	214f      	movs	r1, #79	; 0x4f
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	f001 f804 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80045bc:	4604      	mov	r4, r0
 80045be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045c2:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80045c6:	4aeb      	ldr	r2, [pc, #940]	; (8004974 <_ZN3jlb5GraphC1Ev+0x27fc>)
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	4611      	mov	r1, r2
 80045cc:	8019      	strh	r1, [r3, #0]
 80045ce:	3302      	adds	r3, #2
 80045d0:	0c12      	lsrs	r2, r2, #16
 80045d2:	701a      	strb	r2, [r3, #0]
 80045d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045d8:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80045dc:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045e6:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80045ea:	2203      	movs	r2, #3
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 80045f2:	4618      	mov	r0, r3
 80045f4:	f012 f94f 	bl	8016896 <_ZNSaIcEC1Ev>
 80045f8:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 80045fc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004600:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8004604:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8004608:	ca06      	ldmia	r2, {r1, r2}
 800460a:	f001 fa70 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800460e:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8004612:	ed9f 0adc 	vldr	s0, [pc, #880]	; 8004984 <_ZN3jlb5GraphC1Ev+0x280c>
 8004616:	2200      	movs	r2, #0
 8004618:	214c      	movs	r1, #76	; 0x4c
 800461a:	4620      	mov	r0, r4
 800461c:	f7fd fd66 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004620:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fa15 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 800462a:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 800462e:	4618      	mov	r0, r3
 8004630:	f012 f933 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8004634:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004638:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800463c:	214f      	movs	r1, #79	; 0x4f
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	f000 ffc0 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004644:	4604      	mov	r4, r0
 8004646:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800464a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800464e:	224c      	movs	r2, #76	; 0x4c
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004656:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800465a:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004664:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8004668:	2201      	movs	r2, #1
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8004670:	4618      	mov	r0, r3
 8004672:	f012 f910 	bl	8016896 <_ZNSaIcEC1Ev>
 8004676:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800467a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800467e:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8004682:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 8004686:	ca06      	ldmia	r2, {r1, r2}
 8004688:	f001 fa31 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800468c:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8004690:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8004984 <_ZN3jlb5GraphC1Ev+0x280c>
 8004694:	2200      	movs	r2, #0
 8004696:	2155      	movs	r1, #85	; 0x55
 8004698:	4620      	mov	r0, r4
 800469a:	f7fd fd27 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800469e:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 f9d6 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80046a8:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f012 f8f4 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 80046b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80046ba:	214f      	movs	r1, #79	; 0x4f
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	f000 ff81 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80046c2:	4604      	mov	r4, r0
 80046c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046c8:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80046cc:	224c      	movs	r2, #76	; 0x4c
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046d4:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80046d8:	f607 1208 	addw	r2, r7, #2312	; 0x908
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046e2:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80046e6:	2201      	movs	r2, #1
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80046ee:	4618      	mov	r0, r3
 80046f0:	f012 f8d1 	bl	8016896 <_ZNSaIcEC1Ev>
 80046f4:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80046f8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80046fc:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8004700:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 8004704:	ca06      	ldmia	r2, {r1, r2}
 8004706:	f001 f9f2 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800470a:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 800470e:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8004978 <_ZN3jlb5GraphC1Ev+0x2800>
 8004712:	2202      	movs	r2, #2
 8004714:	2157      	movs	r1, #87	; 0x57
 8004716:	4620      	mov	r0, r4
 8004718:	f7fd fce8 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800471c:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8004720:	4618      	mov	r0, r3
 8004722:	f001 f997 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004726:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 800472a:	4618      	mov	r0, r3
 800472c:	f012 f8b5 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 8004730:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004734:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004738:	214f      	movs	r1, #79	; 0x4f
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	f000 ff42 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004740:	4604      	mov	r4, r0
 8004742:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004746:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800474a:	224c      	movs	r2, #76	; 0x4c
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004752:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004756:	f607 1224 	addw	r2, r7, #2340	; 0x924
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004760:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004764:	2201      	movs	r2, #1
 8004766:	605a      	str	r2, [r3, #4]
 8004768:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800476c:	4618      	mov	r0, r3
 800476e:	f012 f892 	bl	8016896 <_ZNSaIcEC1Ev>
 8004772:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8004776:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800477a:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 800477e:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 8004782:	ca06      	ldmia	r2, {r1, r2}
 8004784:	f001 f9b3 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004788:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800478c:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004984 <_ZN3jlb5GraphC1Ev+0x280c>
 8004790:	2201      	movs	r2, #1
 8004792:	2154      	movs	r1, #84	; 0x54
 8004794:	4620      	mov	r0, r4
 8004796:	f7fd fca9 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800479a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 f958 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80047a4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80047a8:	4618      	mov	r0, r3
 80047aa:	f012 f876 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 80047ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047b2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80047b6:	2150      	movs	r1, #80	; 0x50
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	f000 ff03 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80047be:	4604      	mov	r4, r0
 80047c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047c4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80047c8:	2250      	movs	r2, #80	; 0x50
 80047ca:	701a      	strb	r2, [r3, #0]
 80047cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047d0:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80047d4:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047de:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80047e2:	2201      	movs	r2, #1
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	f607 1344 	addw	r3, r7, #2372	; 0x944
 80047ea:	4618      	mov	r0, r3
 80047ec:	f012 f853 	bl	8016896 <_ZNSaIcEC1Ev>
 80047f0:	f607 1344 	addw	r3, r7, #2372	; 0x944
 80047f4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80047f8:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 80047fc:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8004800:	ca06      	ldmia	r2, {r1, r2}
 8004802:	f001 f974 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004806:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 800480a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8004984 <_ZN3jlb5GraphC1Ev+0x280c>
 800480e:	2200      	movs	r2, #0
 8004810:	214d      	movs	r1, #77	; 0x4d
 8004812:	4620      	mov	r0, r4
 8004814:	f7fd fc6a 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004818:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f919 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004822:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8004826:	4618      	mov	r0, r3
 8004828:	f012 f837 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 800482c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004830:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004834:	2150      	movs	r1, #80	; 0x50
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	f000 fec4 	bl	80055c4 <_ZN3jlb5GraphixEc>
 800483c:	4604      	mov	r4, r0
 800483e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004842:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8004846:	2250      	movs	r2, #80	; 0x50
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800484e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004852:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800485c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004860:	2201      	movs	r2, #1
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8004868:	4618      	mov	r0, r3
 800486a:	f012 f814 	bl	8016896 <_ZNSaIcEC1Ev>
 800486e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8004872:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004876:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 800487a:	f607 1048 	addw	r0, r7, #2376	; 0x948
 800487e:	ca06      	ldmia	r2, {r1, r2}
 8004880:	f001 f935 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004884:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8004888:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8004980 <_ZN3jlb5GraphC1Ev+0x2808>
 800488c:	2202      	movs	r2, #2
 800488e:	2151      	movs	r1, #81	; 0x51
 8004890:	4620      	mov	r0, r4
 8004892:	f7fd fc2b 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004896:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800489a:	4618      	mov	r0, r3
 800489c:	f001 f8da 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80048a0:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80048a4:	4618      	mov	r0, r3
 80048a6:	f011 fff8 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 80048aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80048b2:	2151      	movs	r1, #81	; 0x51
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f000 fe85 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80048ba:	4604      	mov	r4, r0
 80048bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048c0:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80048c4:	2252      	movs	r2, #82	; 0x52
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048cc:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80048d0:	f607 1278 	addw	r2, r7, #2424	; 0x978
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048da:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80048de:	2201      	movs	r2, #1
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 80048e6:	4618      	mov	r0, r3
 80048e8:	f011 ffd5 	bl	8016896 <_ZNSaIcEC1Ev>
 80048ec:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 80048f0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80048f4:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 80048f8:	f607 1064 	addw	r0, r7, #2404	; 0x964
 80048fc:	ca06      	ldmia	r2, {r1, r2}
 80048fe:	f001 f8f6 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004902:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8004906:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004980 <_ZN3jlb5GraphC1Ev+0x2808>
 800490a:	2202      	movs	r2, #2
 800490c:	2150      	movs	r1, #80	; 0x50
 800490e:	4620      	mov	r0, r4
 8004910:	f7fd fbec 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004914:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8004918:	4618      	mov	r0, r3
 800491a:	f001 f89b 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 800491e:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8004922:	4618      	mov	r0, r3
 8004924:	f011 ffb9 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 8004928:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800492c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004930:	2151      	movs	r1, #81	; 0x51
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	f000 fe46 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004938:	4604      	mov	r4, r0
 800493a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800493e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8004942:	4a0e      	ldr	r2, [pc, #56]	; (800497c <_ZN3jlb5GraphC1Ev+0x2804>)
 8004944:	8812      	ldrh	r2, [r2, #0]
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800494c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8004950:	f607 1294 	addw	r2, r7, #2452	; 0x994
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800495a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800495e:	2202      	movs	r2, #2
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8004966:	4618      	mov	r0, r3
 8004968:	f011 ff95 	bl	8016896 <_ZNSaIcEC1Ev>
 800496c:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8004970:	e00c      	b.n	800498c <_ZN3jlb5GraphC1Ev+0x2814>
 8004972:	bf00      	nop
 8004974:	080187bc 	.word	0x080187bc
 8004978:	3fc56fea 	.word	0x3fc56fea
 800497c:	080187c0 	.word	0x080187c0
 8004980:	3f19999a 	.word	0x3f19999a
 8004984:	3f71463a 	.word	0x3f71463a
 8004988:	401c518f 	.word	0x401c518f
 800498c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004990:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 8004994:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 8004998:	ca06      	ldmia	r2, {r1, r2}
 800499a:	f001 f8a8 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800499e:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80049a2:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8004980 <_ZN3jlb5GraphC1Ev+0x2808>
 80049a6:	2202      	movs	r2, #2
 80049a8:	214d      	movs	r1, #77	; 0x4d
 80049aa:	4620      	mov	r0, r4
 80049ac:	f7fd fb9e 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80049b0:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 f84d 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80049ba:	f607 1398 	addw	r3, r7, #2456	; 0x998
 80049be:	4618      	mov	r0, r3
 80049c0:	f011 ff6b 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 80049c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049c8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80049cc:	2151      	movs	r1, #81	; 0x51
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	f000 fdf8 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80049d4:	4604      	mov	r4, r0
 80049d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049da:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80049de:	2250      	movs	r2, #80	; 0x50
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049e6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80049ea:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049f4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80049f8:	2201      	movs	r2, #1
 80049fa:	605a      	str	r2, [r3, #4]
 80049fc:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8004a00:	4618      	mov	r0, r3
 8004a02:	f011 ff48 	bl	8016896 <_ZNSaIcEC1Ev>
 8004a06:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8004a0a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004a0e:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8004a12:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 8004a16:	ca06      	ldmia	r2, {r1, r2}
 8004a18:	f001 f869 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004a1c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8004a20:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 8004980 <_ZN3jlb5GraphC1Ev+0x2808>
 8004a24:	2202      	movs	r2, #2
 8004a26:	2152      	movs	r1, #82	; 0x52
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7fd fb5f 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004a2e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 f80e 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004a38:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f011 ff2c 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 8004a42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a46:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004a4a:	2151      	movs	r1, #81	; 0x51
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	f000 fdb9 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004a52:	4604      	mov	r4, r0
 8004a54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a58:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8004a5c:	224d      	movs	r2, #77	; 0x4d
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a64:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8004a68:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a72:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8004a76:	2201      	movs	r2, #1
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f011 ff09 	bl	8016896 <_ZNSaIcEC1Ev>
 8004a84:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8004a88:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004a8c:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8004a90:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 8004a94:	ca06      	ldmia	r2, {r1, r2}
 8004a96:	f001 f82a 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004a9a:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8004a9e:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 8004984 <_ZN3jlb5GraphC1Ev+0x280c>
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2156      	movs	r1, #86	; 0x56
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7fd fb20 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004aac:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 ffcf 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004ab6:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f011 feed 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8004ac0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ac4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ac8:	2151      	movs	r1, #81	; 0x51
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	f000 fd7a 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ad6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8004ada:	224d      	movs	r2, #77	; 0x4d
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ae2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8004ae6:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004af0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8004af4:	2201      	movs	r2, #1
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8004afc:	4618      	mov	r0, r3
 8004afe:	f011 feca 	bl	8016896 <_ZNSaIcEC1Ev>
 8004b02:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8004b06:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004b0a:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8004b0e:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 8004b12:	ca06      	ldmia	r2, {r1, r2}
 8004b14:	f000 ffeb 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004b18:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8004b1c:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8004988 <_ZN3jlb5GraphC1Ev+0x2810>
 8004b20:	2202      	movs	r2, #2
 8004b22:	2158      	movs	r1, #88	; 0x58
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7fd fae1 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004b2a:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 ff90 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004b34:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f011 feae 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 8004b3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b42:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b46:	2152      	movs	r1, #82	; 0x52
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	f000 fd3b 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004b4e:	4604      	mov	r4, r0
 8004b50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b54:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8004b58:	4ae6      	ldr	r2, [pc, #920]	; (8004ef4 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8004b5a:	8812      	ldrh	r2, [r2, #0]
 8004b5c:	801a      	strh	r2, [r3, #0]
 8004b5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b62:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004b66:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b70:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004b74:	2202      	movs	r2, #2
 8004b76:	605a      	str	r2, [r3, #4]
 8004b78:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f011 fe8a 	bl	8016896 <_ZNSaIcEC1Ev>
 8004b82:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8004b86:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004b8a:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8004b8e:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 8004b92:	ca06      	ldmia	r2, {r1, r2}
 8004b94:	f000 ffab 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004b98:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8004b9c:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8004ef8 <_ZN3jlb5GraphC1Ev+0x2d80>
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	2151      	movs	r1, #81	; 0x51
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f7fd faa1 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004baa:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 ff50 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004bb4:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f011 fe6e 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 8004bbe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bc2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004bc6:	2152      	movs	r1, #82	; 0x52
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	f000 fcfb 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004bce:	4604      	mov	r4, r0
 8004bd0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bd4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8004bd8:	4ac6      	ldr	r2, [pc, #792]	; (8004ef4 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8004bda:	8812      	ldrh	r2, [r2, #0]
 8004bdc:	801a      	strh	r2, [r3, #0]
 8004bde:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004be2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8004be6:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bf0:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	605a      	str	r2, [r3, #4]
 8004bf8:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f011 fe4a 	bl	8016896 <_ZNSaIcEC1Ev>
 8004c02:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8004c06:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004c0a:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8004c0e:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 8004c12:	ca06      	ldmia	r2, {r1, r2}
 8004c14:	f000 ff6b 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004c18:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8004c1c:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8004f04 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8004c20:	2201      	movs	r2, #1
 8004c22:	214d      	movs	r1, #77	; 0x4d
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7fd fa61 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004c2a:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 ff10 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004c34:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f011 fe2e 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 8004c3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c42:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004c46:	2152      	movs	r1, #82	; 0x52
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	f000 fcbb 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004c4e:	4604      	mov	r4, r0
 8004c50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c54:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8004c58:	4aa8      	ldr	r2, [pc, #672]	; (8004efc <_ZN3jlb5GraphC1Ev+0x2d84>)
 8004c5a:	8812      	ldrh	r2, [r2, #0]
 8004c5c:	801a      	strh	r2, [r3, #0]
 8004c5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c62:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8004c66:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c70:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8004c74:	2202      	movs	r2, #2
 8004c76:	605a      	str	r2, [r3, #4]
 8004c78:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f011 fe0a 	bl	8016896 <_ZNSaIcEC1Ev>
 8004c82:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004c86:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004c8a:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 8004c8e:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 8004c92:	ca06      	ldmia	r2, {r1, r2}
 8004c94:	f000 ff2b 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004c98:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8004c9c:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8004f04 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	214e      	movs	r1, #78	; 0x4e
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f7fd fa21 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004caa:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fed0 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004cb4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f011 fdee 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 8004cbe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cc2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004cc6:	2152      	movs	r1, #82	; 0x52
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f000 fc7b 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004cce:	4604      	mov	r4, r0
 8004cd0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cd4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8004cd8:	4a88      	ldr	r2, [pc, #544]	; (8004efc <_ZN3jlb5GraphC1Ev+0x2d84>)
 8004cda:	8812      	ldrh	r2, [r2, #0]
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ce2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8004ce6:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cf0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	605a      	str	r2, [r3, #4]
 8004cf8:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f011 fdca 	bl	8016896 <_ZNSaIcEC1Ev>
 8004d02:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8004d06:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004d0a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004d0e:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 8004d12:	ca06      	ldmia	r2, {r1, r2}
 8004d14:	f000 feeb 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004d18:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8004d1c:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8004ef8 <_ZN3jlb5GraphC1Ev+0x2d80>
 8004d20:	2202      	movs	r2, #2
 8004d22:	2153      	movs	r1, #83	; 0x53
 8004d24:	4620      	mov	r0, r4
 8004d26:	f7fd f9e1 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004d2a:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fe90 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004d34:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f011 fdae 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 8004d3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d42:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004d46:	2153      	movs	r1, #83	; 0x53
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	f000 fc3b 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d54:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8004d58:	2254      	movs	r2, #84	; 0x54
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d64:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d72:	2201      	movs	r2, #1
 8004d74:	605a      	str	r2, [r3, #4]
 8004d76:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f011 fd8b 	bl	8016896 <_ZNSaIcEC1Ev>
 8004d80:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004d84:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004d88:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8004d8c:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 8004d90:	ca06      	ldmia	r2, {r1, r2}
 8004d92:	f000 feac 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004d96:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8004d9a:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8004ef8 <_ZN3jlb5GraphC1Ev+0x2d80>
 8004d9e:	2202      	movs	r2, #2
 8004da0:	2152      	movs	r1, #82	; 0x52
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7fd f9a2 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004da8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fe51 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004db2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004db6:	4618      	mov	r0, r3
 8004db8:	f011 fd6f 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 8004dbc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dc0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004dc4:	2153      	movs	r1, #83	; 0x53
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	f000 fbfc 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004dcc:	4604      	mov	r4, r0
 8004dce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dd2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004dd6:	4a4a      	ldr	r2, [pc, #296]	; (8004f00 <_ZN3jlb5GraphC1Ev+0x2d88>)
 8004dd8:	8812      	ldrh	r2, [r2, #0]
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004de0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004de4:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004df2:	2202      	movs	r2, #2
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f011 fd4b 	bl	8016896 <_ZNSaIcEC1Ev>
 8004e00:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8004e04:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004e08:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 8004e0c:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 8004e10:	ca06      	ldmia	r2, {r1, r2}
 8004e12:	f000 fe6c 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004e16:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8004e1a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004ef8 <_ZN3jlb5GraphC1Ev+0x2d80>
 8004e1e:	2202      	movs	r2, #2
 8004e20:	214e      	movs	r1, #78	; 0x4e
 8004e22:	4620      	mov	r0, r4
 8004e24:	f7fd f962 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004e28:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fe11 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004e32:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8004e36:	4618      	mov	r0, r3
 8004e38:	f011 fd2f 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 8004e3c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e40:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e44:	2153      	movs	r1, #83	; 0x53
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	f000 fbbc 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e52:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004e56:	2252      	movs	r2, #82	; 0x52
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e5e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004e62:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e6c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004e70:	2201      	movs	r2, #1
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f011 fd0c 	bl	8016896 <_ZNSaIcEC1Ev>
 8004e7e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004e82:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004e86:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8004e8a:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 8004e8e:	ca06      	ldmia	r2, {r1, r2}
 8004e90:	f000 fe2d 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004e94:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004e98:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8004ef8 <_ZN3jlb5GraphC1Ev+0x2d80>
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	2154      	movs	r1, #84	; 0x54
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f7fd f923 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004ea6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fdd2 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004eb0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f011 fcf0 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 8004eba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ebe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ec2:	2153      	movs	r1, #83	; 0x53
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	f000 fb7d 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004eca:	4604      	mov	r4, r0
 8004ecc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ed0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004ed4:	224e      	movs	r2, #78	; 0x4e
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004edc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004ee0:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004eea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004eee:	2201      	movs	r2, #1
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	e009      	b.n	8004f08 <_ZN3jlb5GraphC1Ev+0x2d90>
 8004ef4:	080187c4 	.word	0x080187c4
 8004ef8:	3f19999a 	.word	0x3f19999a
 8004efc:	080187c8 	.word	0x080187c8
 8004f00:	080187cc 	.word	0x080187cc
 8004f04:	3f71463a 	.word	0x3f71463a
 8004f08:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f011 fcc2 	bl	8016896 <_ZNSaIcEC1Ev>
 8004f12:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8004f16:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004f1a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004f1e:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 8004f22:	ca06      	ldmia	r2, {r1, r2}
 8004f24:	f000 fde3 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004f28:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8004f2c:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 8004f04 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8004f30:	2200      	movs	r2, #0
 8004f32:	2157      	movs	r1, #87	; 0x57
 8004f34:	4620      	mov	r0, r4
 8004f36:	f7fd f8d9 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004f3a:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fd88 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004f44:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f011 fca6 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 8004f4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f52:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f56:	2153      	movs	r1, #83	; 0x53
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	f000 fb33 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004f5e:	4604      	mov	r4, r0
 8004f60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f64:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f68:	224e      	movs	r2, #78	; 0x4e
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f74:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f82:	2201      	movs	r2, #1
 8004f84:	605a      	str	r2, [r3, #4]
 8004f86:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f011 fc83 	bl	8016896 <_ZNSaIcEC1Ev>
 8004f90:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8004f94:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004f98:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8004f9c:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 8004fa0:	ca06      	ldmia	r2, {r1, r2}
 8004fa2:	f000 fda4 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004fa6:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8004faa:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 8004f04 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8004fae:	2201      	movs	r2, #1
 8004fb0:	2156      	movs	r1, #86	; 0x56
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f7fd f89a 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004fb8:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fd49 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8004fc2:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f011 fc67 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 8004fcc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fd0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004fd4:	2154      	movs	r1, #84	; 0x54
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	f000 faf4 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fe2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004fe6:	4ae9      	ldr	r2, [pc, #932]	; (800538c <_ZN3jlb5GraphC1Ev+0x3214>)
 8004fe8:	8812      	ldrh	r2, [r2, #0]
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ff0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ff4:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ffe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005002:	2202      	movs	r2, #2
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 800500a:	4618      	mov	r0, r3
 800500c:	f011 fc43 	bl	8016896 <_ZNSaIcEC1Ev>
 8005010:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8005014:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005018:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 800501c:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 8005020:	ca06      	ldmia	r2, {r1, r2}
 8005022:	f000 fd64 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005026:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 800502a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8005390 <_ZN3jlb5GraphC1Ev+0x3218>
 800502e:	2202      	movs	r2, #2
 8005030:	2153      	movs	r1, #83	; 0x53
 8005032:	4620      	mov	r0, r4
 8005034:	f7fd f85a 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005038:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fd09 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8005042:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8005046:	4618      	mov	r0, r3
 8005048:	f011 fc27 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 800504c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005050:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005054:	2154      	movs	r1, #84	; 0x54
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	f000 fab4 	bl	80055c4 <_ZN3jlb5GraphixEc>
 800505c:	4604      	mov	r4, r0
 800505e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005062:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005066:	4ac9      	ldr	r2, [pc, #804]	; (800538c <_ZN3jlb5GraphC1Ev+0x3214>)
 8005068:	8812      	ldrh	r2, [r2, #0]
 800506a:	801a      	strh	r2, [r3, #0]
 800506c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005070:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005074:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800507e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005082:	2202      	movs	r2, #2
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800508a:	4618      	mov	r0, r3
 800508c:	f011 fc03 	bl	8016896 <_ZNSaIcEC1Ev>
 8005090:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8005094:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005098:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800509c:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 80050a0:	ca06      	ldmia	r2, {r1, r2}
 80050a2:	f000 fd24 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80050a6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80050aa:	ed9f 0abd 	vldr	s0, [pc, #756]	; 80053a0 <_ZN3jlb5GraphC1Ev+0x3228>
 80050ae:	2201      	movs	r2, #1
 80050b0:	214e      	movs	r1, #78	; 0x4e
 80050b2:	4620      	mov	r0, r4
 80050b4:	f7fd f81a 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80050b8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fcc9 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80050c2:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80050c6:	4618      	mov	r0, r3
 80050c8:	f011 fbe7 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 80050cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050d0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80050d4:	2154      	movs	r1, #84	; 0x54
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	f000 fa74 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80050dc:	4604      	mov	r4, r0
 80050de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e6:	4aab      	ldr	r2, [pc, #684]	; (8005394 <_ZN3jlb5GraphC1Ev+0x321c>)
 80050e8:	8812      	ldrh	r2, [r2, #0]
 80050ea:	801a      	strh	r2, [r3, #0]
 80050ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050f0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80050f4:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005102:	2202      	movs	r2, #2
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 800510a:	4618      	mov	r0, r3
 800510c:	f011 fbc3 	bl	8016896 <_ZNSaIcEC1Ev>
 8005110:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8005114:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005118:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800511c:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 8005120:	ca06      	ldmia	r2, {r1, r2}
 8005122:	f000 fce4 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005126:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800512a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80053a0 <_ZN3jlb5GraphC1Ev+0x3228>
 800512e:	2200      	movs	r2, #0
 8005130:	214f      	movs	r1, #79	; 0x4f
 8005132:	4620      	mov	r0, r4
 8005134:	f7fc ffda 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005138:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fc89 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8005142:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8005146:	4618      	mov	r0, r3
 8005148:	f011 fba7 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 800514c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005150:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005154:	2154      	movs	r1, #84	; 0x54
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	f000 fa34 	bl	80055c4 <_ZN3jlb5GraphixEc>
 800515c:	4604      	mov	r4, r0
 800515e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005162:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005166:	4a8b      	ldr	r2, [pc, #556]	; (8005394 <_ZN3jlb5GraphC1Ev+0x321c>)
 8005168:	8812      	ldrh	r2, [r2, #0]
 800516a:	801a      	strh	r2, [r3, #0]
 800516c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005170:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005174:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800517e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005182:	2202      	movs	r2, #2
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800518a:	4618      	mov	r0, r3
 800518c:	f011 fb83 	bl	8016896 <_ZNSaIcEC1Ev>
 8005190:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8005194:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005198:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800519c:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 80051a0:	ca06      	ldmia	r2, {r1, r2}
 80051a2:	f000 fca4 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80051a6:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80051aa:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800539c <_ZN3jlb5GraphC1Ev+0x3224>
 80051ae:	2202      	movs	r2, #2
 80051b0:	2155      	movs	r1, #85	; 0x55
 80051b2:	4620      	mov	r0, r4
 80051b4:	f7fc ff9a 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80051b8:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fc49 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80051c2:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80051c6:	4618      	mov	r0, r3
 80051c8:	f011 fb67 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 80051cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051d0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80051d4:	2155      	movs	r1, #85	; 0x55
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	f000 f9f4 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80051dc:	4604      	mov	r4, r0
 80051de:	2355      	movs	r3, #85	; 0x55
 80051e0:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 80051e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051ec:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051fa:	2201      	movs	r2, #1
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8005202:	4618      	mov	r0, r3
 8005204:	f011 fb47 	bl	8016896 <_ZNSaIcEC1Ev>
 8005208:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 800520c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005210:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005214:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 8005218:	ca06      	ldmia	r2, {r1, r2}
 800521a:	f000 fc68 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800521e:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8005222:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800539c <_ZN3jlb5GraphC1Ev+0x3224>
 8005226:	2202      	movs	r2, #2
 8005228:	2154      	movs	r1, #84	; 0x54
 800522a:	4620      	mov	r0, r4
 800522c:	f7fc ff5e 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005230:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fc0d 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 800523a:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 800523e:	4618      	mov	r0, r3
 8005240:	f011 fb2b 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 8005244:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005248:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800524c:	2155      	movs	r1, #85	; 0x55
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	f000 f9b8 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8005254:	4604      	mov	r4, r0
 8005256:	2355      	movs	r3, #85	; 0x55
 8005258:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 800525c:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 8005260:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8005264:	2301      	movs	r3, #1
 8005266:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 800526a:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 800526e:	4618      	mov	r0, r3
 8005270:	f011 fb11 	bl	8016896 <_ZNSaIcEC1Ev>
 8005274:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8005278:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 800527c:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 8005280:	ca06      	ldmia	r2, {r1, r2}
 8005282:	f000 fc34 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005286:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800528a:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80053a0 <_ZN3jlb5GraphC1Ev+0x3228>
 800528e:	2201      	movs	r2, #1
 8005290:	214f      	movs	r1, #79	; 0x4f
 8005292:	4620      	mov	r0, r4
 8005294:	f7fc ff2a 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005298:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fbd9 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80052a2:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80052a6:	4618      	mov	r0, r3
 80052a8:	f011 faf7 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 80052ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052b0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80052b4:	2156      	movs	r1, #86	; 0x56
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	f000 f984 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80052bc:	4604      	mov	r4, r0
 80052be:	4b36      	ldr	r3, [pc, #216]	; (8005398 <_ZN3jlb5GraphC1Ev+0x3220>)
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 80052c6:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 80052ca:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 80052ce:	2302      	movs	r3, #2
 80052d0:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 80052d4:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 80052d8:	4618      	mov	r0, r3
 80052da:	f011 fadc 	bl	8016896 <_ZNSaIcEC1Ev>
 80052de:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 80052e2:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 80052e6:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80052ea:	ca06      	ldmia	r2, {r1, r2}
 80052ec:	f000 fbff 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80052f0:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 80052f4:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80053a0 <_ZN3jlb5GraphC1Ev+0x3228>
 80052f8:	2201      	movs	r2, #1
 80052fa:	2151      	movs	r1, #81	; 0x51
 80052fc:	4620      	mov	r0, r4
 80052fe:	f7fc fef5 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005302:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fba4 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 800530c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8005310:	4618      	mov	r0, r3
 8005312:	f011 fac2 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 8005316:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800531a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800531e:	2156      	movs	r1, #86	; 0x56
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	f000 f94f 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8005326:	4604      	mov	r4, r0
 8005328:	2351      	movs	r3, #81	; 0x51
 800532a:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 800532e:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 8005332:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 8005336:	2301      	movs	r3, #1
 8005338:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 800533c:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8005340:	4618      	mov	r0, r3
 8005342:	f011 faa8 	bl	8016896 <_ZNSaIcEC1Ev>
 8005346:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 800534a:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 800534e:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 8005352:	ca06      	ldmia	r2, {r1, r2}
 8005354:	f000 fbcb 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005358:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800535c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80053a0 <_ZN3jlb5GraphC1Ev+0x3228>
 8005360:	2200      	movs	r2, #0
 8005362:	2153      	movs	r1, #83	; 0x53
 8005364:	4620      	mov	r0, r4
 8005366:	f7fc fec1 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800536a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fb70 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8005374:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8005378:	4618      	mov	r0, r3
 800537a:	f011 fa8e 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 800537e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005382:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005386:	2156      	movs	r1, #86	; 0x56
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	e00b      	b.n	80053a4 <_ZN3jlb5GraphC1Ev+0x322c>
 800538c:	080187d0 	.word	0x080187d0
 8005390:	3f19999a 	.word	0x3f19999a
 8005394:	080187c4 	.word	0x080187c4
 8005398:	080187d4 	.word	0x080187d4
 800539c:	3f99999a 	.word	0x3f99999a
 80053a0:	3f71463a 	.word	0x3f71463a
 80053a4:	f000 f90e 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80053a8:	4604      	mov	r4, r0
 80053aa:	2351      	movs	r3, #81	; 0x51
 80053ac:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 80053b0:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 80053b4:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 80053b8:	2301      	movs	r3, #1
 80053ba:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 80053be:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 80053c2:	4618      	mov	r0, r3
 80053c4:	f011 fa67 	bl	8016896 <_ZNSaIcEC1Ev>
 80053c8:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 80053cc:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 80053d0:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 80053d4:	ca06      	ldmia	r2, {r1, r2}
 80053d6:	f000 fb8a 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80053da:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 80053de:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800539c <_ZN3jlb5GraphC1Ev+0x3224>
 80053e2:	2202      	movs	r2, #2
 80053e4:	2157      	movs	r1, #87	; 0x57
 80053e6:	4620      	mov	r0, r4
 80053e8:	f7fc fe80 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80053ec:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fb2f 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80053f6:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f011 fa4d 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8005400:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005404:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005408:	2157      	movs	r1, #87	; 0x57
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	f000 f8da 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8005410:	4604      	mov	r4, r0
 8005412:	234f      	movs	r3, #79	; 0x4f
 8005414:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 8005418:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 800541c:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8005420:	2301      	movs	r3, #1
 8005422:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 8005426:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800542a:	4618      	mov	r0, r3
 800542c:	f011 fa33 	bl	8016896 <_ZNSaIcEC1Ev>
 8005430:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8005434:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 8005438:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 800543c:	ca06      	ldmia	r2, {r1, r2}
 800543e:	f000 fb56 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005442:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8005446:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 800539c <_ZN3jlb5GraphC1Ev+0x3224>
 800544a:	2202      	movs	r2, #2
 800544c:	2156      	movs	r1, #86	; 0x56
 800544e:	4620      	mov	r0, r4
 8005450:	f7fc fe4c 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005454:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fafb 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 800545e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8005462:	4618      	mov	r0, r3
 8005464:	f011 fa19 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 8005468:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800546c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005470:	2157      	movs	r1, #87	; 0x57
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	f000 f8a6 	bl	80055c4 <_ZN3jlb5GraphixEc>
 8005478:	4604      	mov	r4, r0
 800547a:	234f      	movs	r3, #79	; 0x4f
 800547c:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 8005480:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8005484:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 8005488:	2301      	movs	r3, #1
 800548a:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 800548e:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8005492:	4618      	mov	r0, r3
 8005494:	f011 f9ff 	bl	8016896 <_ZNSaIcEC1Ev>
 8005498:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 800549c:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 80054a0:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 80054a4:	ca06      	ldmia	r2, {r1, r2}
 80054a6:	f000 fb22 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80054aa:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80054ae:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 80053a0 <_ZN3jlb5GraphC1Ev+0x3228>
 80054b2:	2201      	movs	r2, #1
 80054b4:	2153      	movs	r1, #83	; 0x53
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7fc fe18 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80054bc:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fac7 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 80054c6:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80054ca:	4618      	mov	r0, r3
 80054cc:	f011 f9e5 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 80054d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054d4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80054d8:	2157      	movs	r1, #87	; 0x57
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	f000 f872 	bl	80055c4 <_ZN3jlb5GraphixEc>
 80054e0:	4604      	mov	r4, r0
 80054e2:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <_ZN3jlb5GraphC1Ev+0x3440>)
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 80054ea:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 80054ee:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80054f2:	2302      	movs	r3, #2
 80054f4:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 80054f8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80054fc:	4618      	mov	r0, r3
 80054fe:	f011 f9ca 	bl	8016896 <_ZNSaIcEC1Ev>
 8005502:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8005506:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 800550a:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 800550e:	ca06      	ldmia	r2, {r1, r2}
 8005510:	f000 faed 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005514:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8005518:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80055bc <_ZN3jlb5GraphC1Ev+0x3444>
 800551c:	2202      	movs	r2, #2
 800551e:	214f      	movs	r1, #79	; 0x4f
 8005520:	4620      	mov	r0, r4
 8005522:	f7fc fde3 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005526:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fa92 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8005530:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8005534:	4618      	mov	r0, r3
 8005536:	f011 f9b0 	bl	801689a <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 800553a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800553e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005542:	2158      	movs	r1, #88	; 0x58
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	f000 f83d 	bl	80055c4 <_ZN3jlb5GraphixEc>
 800554a:	4604      	mov	r4, r0
 800554c:	2358      	movs	r3, #88	; 0x58
 800554e:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 8005552:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8005556:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 800555a:	2301      	movs	r3, #1
 800555c:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 8005560:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8005564:	4618      	mov	r0, r3
 8005566:	f011 f996 	bl	8016896 <_ZNSaIcEC1Ev>
 800556a:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 800556e:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 8005572:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 8005576:	ca06      	ldmia	r2, {r1, r2}
 8005578:	f000 fab9 	bl	8005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800557c:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8005580:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80055c0 <_ZN3jlb5GraphC1Ev+0x3448>
 8005584:	2202      	movs	r2, #2
 8005586:	2151      	movs	r1, #81	; 0x51
 8005588:	4620      	mov	r0, r4
 800558a:	f7fc fdaf 	bl	80020ec <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800558e:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fa5e 	bl	8005a54 <_ZNSt6vectorIcSaIcEED1Ev>
 8005598:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 800559c:	4618      	mov	r0, r3
 800559e:	f011 f97c 	bl	801689a <_ZNSaIcED1Ev>
        }
 80055a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd90      	pop	{r4, r7, pc}
 80055b6:	bf00      	nop
 80055b8:	080187d8 	.word	0x080187d8
 80055bc:	3fc56fea 	.word	0x3fc56fea
 80055c0:	401c518f 	.word	0x401c518f

080055c4 <_ZN3jlb5GraphixEc>:

        ~Graph() {}

        Node &operator[](char name)
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
            if (nodes.empty())
                throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X')
                throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	3b41      	subs	r3, #65	; 0x41
 80055d6:	4619      	mov	r1, r3
 80055d8:	4610      	mov	r0, r2
 80055da:	f000 faa9 	bl	8005b30 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 80055de:	4603      	mov	r3, r0
        }
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
        Controller controller;
        ASState as_state;
        Graph graph;
        SignalSender signal_sender = SignalSender(odometry, controller, as_state);

        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6178      	str	r0, [r7, #20]
 80055f0:	6139      	str	r1, [r7, #16]
 80055f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80055f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80055fa:	ed87 1a01 	vstr	s2, [r7, #4]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	ed97 1a01 	vldr	s2, [r7, #4]
 8005604:	edd7 0a02 	vldr	s1, [r7, #8]
 8005608:	ed97 0a03 	vldr	s0, [r7, #12]
 800560c:	4618      	mov	r0, r3
 800560e:	f7fc fbed 	bl	8001dec <_ZN3jlb8OdometryC1Efff>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	3384      	adds	r3, #132	; 0x84
 8005616:	6939      	ldr	r1, [r7, #16]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fc fca7 	bl	8001f6c <_ZN3jlb10ControllerC1ENS_9DirectionE>
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8005624:	4618      	mov	r0, r3
 8005626:	f7fc fda7 	bl	8002178 <_ZN3jlb5GraphC1Ev>
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8005630:	6979      	ldr	r1, [r7, #20]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800563e:	f7fc fcdc 	bl	8001ffa <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateE>
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2255      	movs	r2, #85	; 0x55
 800565e:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2255      	movs	r2, #85	; 0x55
 8005666:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <_Z19RegistrateUserTasksv>:
{ .name = "EncoderTask", .stack_size = 128 * 4, .priority = (osPriority_t) osPriorityRealtime2 };



void RegistrateUserTasks()
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 8005678:	4a0c      	ldr	r2, [pc, #48]	; (80056ac <_Z19RegistrateUserTasksv+0x38>)
 800567a:	2100      	movs	r1, #0
 800567c:	480c      	ldr	r0, [pc, #48]	; (80056b0 <_Z19RegistrateUserTasksv+0x3c>)
 800567e:	f00e fd11 	bl	80140a4 <osThreadNew>
 8005682:	4603      	mov	r3, r0
 8005684:	4a0b      	ldr	r2, [pc, #44]	; (80056b4 <_Z19RegistrateUserTasksv+0x40>)
 8005686:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8005688:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <_Z19RegistrateUserTasksv+0x44>)
 800568a:	2100      	movs	r1, #0
 800568c:	480b      	ldr	r0, [pc, #44]	; (80056bc <_Z19RegistrateUserTasksv+0x48>)
 800568e:	f00e fd09 	bl	80140a4 <osThreadNew>
 8005692:	4603      	mov	r3, r0
 8005694:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <_Z19RegistrateUserTasksv+0x4c>)
 8005696:	6013      	str	r3, [r2, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 8005698:	4a0a      	ldr	r2, [pc, #40]	; (80056c4 <_Z19RegistrateUserTasksv+0x50>)
 800569a:	2100      	movs	r1, #0
 800569c:	480a      	ldr	r0, [pc, #40]	; (80056c8 <_Z19RegistrateUserTasksv+0x54>)
 800569e:	f00e fd01 	bl	80140a4 <osThreadNew>
 80056a2:	4603      	mov	r3, r0
 80056a4:	4a09      	ldr	r2, [pc, #36]	; (80056cc <_Z19RegistrateUserTasksv+0x58>)
 80056a6:	6013      	str	r3, [r2, #0]

}
 80056a8:	bf00      	nop
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	0801887c 	.word	0x0801887c
 80056b0:	080056d1 	.word	0x080056d1
 80056b4:	20000258 	.word	0x20000258
 80056b8:	080188a0 	.word	0x080188a0
 80056bc:	08005701 	.word	0x08005701
 80056c0:	2000025c 	.word	0x2000025c
 80056c4:	080188c4 	.word	0x080188c4
 80056c8:	08001319 	.word	0x08001319
 80056cc:	20000260 	.word	0x20000260

080056d0 <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80056d8:	f00f fe56 	bl	8015388 <xTaskGetTickCount>
 80056dc:	4603      	mov	r3, r0
 80056de:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 80056e0:	2208      	movs	r2, #8
 80056e2:	4905      	ldr	r1, [pc, #20]	; (80056f8 <_Z7ADCTaskPv+0x28>)
 80056e4:	4805      	ldr	r0, [pc, #20]	; (80056fc <_Z7ADCTaskPv+0x2c>)
 80056e6:	f004 ff41 	bl	800a56c <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 80056ea:	f107 030c 	add.w	r3, r7, #12
 80056ee:	2105      	movs	r1, #5
 80056f0:	4618      	mov	r0, r3
 80056f2:	f00f fbf9 	bl	8014ee8 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 80056f6:	e7f3      	b.n	80056e0 <_Z7ADCTaskPv+0x10>
 80056f8:	20000104 	.word	0x20000104
 80056fc:	20000268 	.word	0x20000268

08005700 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8005706:	af00      	add	r7, sp, #0
 8005708:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800570c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8005710:	6018      	str	r0, [r3, #0]
	static uint8_t direction = 1u;
	static uint8_t index = 0u;
	uint8_t i;
	jlb::Logic logic;
 8005712:	f107 0308 	add.w	r3, r7, #8
 8005716:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8005888 <_Z8MainTaskPv+0x188>
 800571a:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8005888 <_Z8MainTaskPv+0x188>
 800571e:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8005888 <_Z8MainTaskPv+0x188>
 8005722:	2102      	movs	r1, #2
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff ff5f 	bl	80055e8 <_ZN3jlb5LogicC1ENS_9DirectionEfff>
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 800572a:	4b58      	ldr	r3, [pc, #352]	; (800588c <_Z8MainTaskPv+0x18c>)
 800572c:	899b      	ldrh	r3, [r3, #12]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005736:	eddf 6a56 	vldr	s13, [pc, #344]	; 8005890 <_Z8MainTaskPv+0x190>
 800573a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800573e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005894 <_Z8MainTaskPv+0x194>
 8005742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005746:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8005898 <_Z8MainTaskPv+0x198>
 800574a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800574e:	ee16 0a90 	vmov	r0, s13
 8005752:	f7fa feeb 	bl	800052c <__aeabi_f2d>
 8005756:	a34a      	add	r3, pc, #296	; (adr r3, 8005880 <_Z8MainTaskPv+0x180>)
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f7fa ff3e 	bl	80005dc <__aeabi_dmul>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4610      	mov	r0, r2
 8005766:	4619      	mov	r1, r3
 8005768:	f7fb f9e8 	bl	8000b3c <__aeabi_d2f>
 800576c:	4603      	mov	r3, r0
 800576e:	4a4b      	ldr	r2, [pc, #300]	; (800589c <_Z8MainTaskPv+0x19c>)
 8005770:	6013      	str	r3, [r2, #0]
		LineSensorTask();
 8005772:	f7fc f843 	bl	80017fc <_Z14LineSensorTaskv>
		MotorControlTask();
 8005776:	f7fc f9e5 	bl	8001b44 <_Z16MotorControlTaskv>
		IMU_Task();
 800577a:	f7fb fe41 	bl	8001400 <_Z8IMU_Taskv>
		DistanceSensorTask();
 800577e:	f7fb fbf9 	bl	8000f74 <_Z18DistanceSensorTaskv>

		rpm_averaging_array[index++] = enc_instance_mot.rpm;
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <_Z8MainTaskPv+0x1a0>)
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <_Z8MainTaskPv+0x1a4>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	b2c8      	uxtb	r0, r1
 800578e:	4945      	ldr	r1, [pc, #276]	; (80058a4 <_Z8MainTaskPv+0x1a4>)
 8005790:	7008      	strb	r0, [r1, #0]
 8005792:	4945      	ldr	r1, [pc, #276]	; (80058a8 <_Z8MainTaskPv+0x1a8>)
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	601a      	str	r2, [r3, #0]

		if(index == 5)
 800579a:	4b42      	ldr	r3, [pc, #264]	; (80058a4 <_Z8MainTaskPv+0x1a4>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b05      	cmp	r3, #5
 80057a0:	d102      	bne.n	80057a8 <_Z8MainTaskPv+0xa8>
		{
			index = 0;
 80057a2:	4b40      	ldr	r3, [pc, #256]	; (80058a4 <_Z8MainTaskPv+0x1a4>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
		}

		averaged_rpm = 0.0f;
 80057a8:	4b40      	ldr	r3, [pc, #256]	; (80058ac <_Z8MainTaskPv+0x1ac>)
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
		for(i = 0 ; i < 5; ++i)
 80057b0:	2300      	movs	r3, #0
 80057b2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80057b6:	e017      	b.n	80057e8 <_Z8MainTaskPv+0xe8>
		{
			averaged_rpm += rpm_averaging_array[i] / 5.0f;
 80057b8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80057bc:	4a3a      	ldr	r2, [pc, #232]	; (80058a8 <_Z8MainTaskPv+0x1a8>)
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	edd3 7a00 	vldr	s15, [r3]
 80057c6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80057ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80057ce:	4b37      	ldr	r3, [pc, #220]	; (80058ac <_Z8MainTaskPv+0x1ac>)
 80057d0:	edd3 7a00 	vldr	s15, [r3]
 80057d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057d8:	4b34      	ldr	r3, [pc, #208]	; (80058ac <_Z8MainTaskPv+0x1ac>)
 80057da:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0 ; i < 5; ++i)
 80057de:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80057e2:	3301      	adds	r3, #1
 80057e4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80057e8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d9e3      	bls.n	80057b8 <_Z8MainTaskPv+0xb8>
		}

		averaged_rpm *= -1.36f;
 80057f0:	4b2e      	ldr	r3, [pc, #184]	; (80058ac <_Z8MainTaskPv+0x1ac>)
 80057f2:	edd3 7a00 	vldr	s15, [r3]
 80057f6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80058b0 <_Z8MainTaskPv+0x1b0>
 80057fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057fe:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <_Z8MainTaskPv+0x1ac>)
 8005800:	edc3 7a00 	vstr	s15, [r3]

#ifdef TESTING
		SetSteeringAngle(0.0f);
 8005804:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8005888 <_Z8MainTaskPv+0x188>
 8005808:	f7fc fa92 	bl	8001d30 <_Z16SetSteeringAnglef>
		if(pwm_servo_test > 22.0f)
 800580c:	4b29      	ldr	r3, [pc, #164]	; (80058b4 <_Z8MainTaskPv+0x1b4>)
 800580e:	edd3 7a00 	vldr	s15, [r3]
 8005812:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8005816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800581a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581e:	dd03      	ble.n	8005828 <_Z8MainTaskPv+0x128>
		{
			direction = 0u;
 8005820:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <_Z8MainTaskPv+0x1b8>)
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	e00c      	b.n	8005842 <_Z8MainTaskPv+0x142>
		}
		else if(pwm_servo_test < -22.0f)
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <_Z8MainTaskPv+0x1b4>)
 800582a:	edd3 7a00 	vldr	s15, [r3]
 800582e:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 8005832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583a:	d502      	bpl.n	8005842 <_Z8MainTaskPv+0x142>
		{
			direction = 1u;
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <_Z8MainTaskPv+0x1b8>)
 800583e:	2201      	movs	r2, #1
 8005840:	701a      	strb	r2, [r3, #0]
		}
		if(direction == 1u)
 8005842:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <_Z8MainTaskPv+0x1b8>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d10a      	bne.n	8005860 <_Z8MainTaskPv+0x160>
		{
			pwm_servo_test+= 0.5f;
 800584a:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <_Z8MainTaskPv+0x1b4>)
 800584c:	edd3 7a00 	vldr	s15, [r3]
 8005850:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005854:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005858:	4b16      	ldr	r3, [pc, #88]	; (80058b4 <_Z8MainTaskPv+0x1b4>)
 800585a:	edc3 7a00 	vstr	s15, [r3]
 800585e:	e009      	b.n	8005874 <_Z8MainTaskPv+0x174>
		}
		else
		{
			pwm_servo_test-= 0.5f;
 8005860:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <_Z8MainTaskPv+0x1b4>)
 8005862:	edd3 7a00 	vldr	s15, [r3]
 8005866:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800586a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <_Z8MainTaskPv+0x1b4>)
 8005870:	edc3 7a00 	vstr	s15, [r3]
		MotorControlTask();

		logic.signal_sender.send_telemetry();

#endif
		vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
 8005874:	4b11      	ldr	r3, [pc, #68]	; (80058bc <_Z8MainTaskPv+0x1bc>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f00f fbb7 	bl	8014fec <vTaskSuspend>
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 800587e:	e754      	b.n	800572a <_Z8MainTaskPv+0x2a>
 8005880:	2cba732e 	.word	0x2cba732e
 8005884:	3ff0b626 	.word	0x3ff0b626
 8005888:	00000000 	.word	0x00000000
 800588c:	20000124 	.word	0x20000124
 8005890:	45800000 	.word	0x45800000
 8005894:	40533333 	.word	0x40533333
 8005898:	3e7df3b6 	.word	0x3e7df3b6
 800589c:	20000238 	.word	0x20000238
 80058a0:	20000158 	.word	0x20000158
 80058a4:	20000264 	.word	0x20000264
 80058a8:	2000023c 	.word	0x2000023c
 80058ac:	20000250 	.word	0x20000250
 80058b0:	bfae147b 	.word	0xbfae147b
 80058b4:	20000254 	.word	0x20000254
 80058b8:	20000075 	.word	0x20000075
 80058bc:	2000025c 	.word	0x2000025c

080058c0 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f95a 	bl	8005b84 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80058d0:	2100      	movs	r1, #0
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f966 	bl	8005ba4 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f9bd 	bl	8005c6a <_ZNSaIfEC1Ev>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f9c5 	bl	8005c82 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <_ZSt4copyIPKcPcET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8005902:	b590      	push	{r4, r7, lr}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f9cb 	bl	8005caa <_ZSt12__miter_baseIPKcET_S2_>
 8005914:	4604      	mov	r4, r0
 8005916:	68b8      	ldr	r0, [r7, #8]
 8005918:	f000 f9c7 	bl	8005caa <_ZSt12__miter_baseIPKcET_S2_>
 800591c:	4603      	mov	r3, r0
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	4619      	mov	r1, r3
 8005922:	4620      	mov	r0, r4
 8005924:	f000 f9cc 	bl	8005cc0 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 8005928:	4603      	mov	r3, r0
    }
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	bd90      	pop	{r4, r7, pc}

08005932 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f9e3 	bl	8005d06 <_ZNSaIN3jlb4EdgeEEC1Ev>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4618      	mov	r0, r3
 8005944:	f000 f9eb 	bl	8005d1e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <_ZNSaIN3jlb4EdgeEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	10db      	asrs	r3, r3, #3
 8005980:	4a07      	ldr	r2, [pc, #28]	; (80059a0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 8005982:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8005986:	461a      	mov	r2, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f9dc 	bl	8005d46 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4618      	mov	r0, r3
 8005992:	f7fc fb4c 	bl	800202e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	aaaaaaab 	.word	0xaaaaaaab

080059a4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80059a4:	b5b0      	push	{r4, r5, r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681c      	ldr	r4, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 f9d8 	bl	8005d6c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80059bc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80059be:	461a      	mov	r2, r3
 80059c0:	4629      	mov	r1, r5
 80059c2:	4620      	mov	r0, r4
 80059c4:	f000 f9dd 	bl	8005d82 <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff ffcc 	bl	8005968 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bdb0      	pop	{r4, r5, r7, pc}

080059da <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 80059da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80059e4:	687c      	ldr	r4, [r7, #4]
 80059e6:	6838      	ldr	r0, [r7, #0]
 80059e8:	f000 f9d9 	bl	8005d9e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80059ec:	4605      	mov	r5, r0
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 f9f1 	bl	8005dd8 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80059f6:	4602      	mov	r2, r0
 80059f8:	f107 030c 	add.w	r3, r7, #12
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 f9dc 	bl	8005dbc <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8005a04:	f107 030c 	add.w	r3, r7, #12
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f000 f9fa 	bl	8005e06 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 8005a12:	f107 030c 	add.w	r3, r7, #12
 8005a16:	4618      	mov	r0, r3
 8005a18:	f010 ff3f 	bl	801689a <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8005a1c:	6838      	ldr	r0, [r7, #0]
 8005a1e:	f000 fa1e 	bl	8005e5e <_ZNKSt6vectorIcSaIcEE5beginEv>
 8005a22:	4605      	mov	r5, r0
 8005a24:	6838      	ldr	r0, [r7, #0]
 8005a26:	f000 fa2a 	bl	8005e7e <_ZNKSt6vectorIcSaIcEE3endEv>
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fa34 	bl	8005ea0 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8005a38:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8005a3a:	4622      	mov	r2, r4
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 fa39 	bl	8005eb6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 8005a44:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	605a      	str	r2, [r3, #4]
      }
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a54 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8005a54:	b5b0      	push	{r4, r5, r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681c      	ldr	r4, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fa1a 	bl	8005ea0 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8005a6c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4629      	mov	r1, r5
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 fa30 	bl	8005ed8 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f9d7 	bl	8005e2e <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bdb0      	pop	{r4, r5, r7, pc}

08005a8a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8005a94:	6838      	ldr	r0, [r7, #0]
 8005a96:	f000 fa2d 	bl	8005ef4 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fa33 	bl	8005f0a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fa5b 	bl	8005f70 <_ZNSaIN3jlb4NodeEEC1Ev>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fa63 	bl	8005f88 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8005ad6:	6838      	ldr	r0, [r7, #0]
 8005ad8:	f000 fa96 	bl	8006008 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 8005adc:	4603      	mov	r3, r0
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa9c 	bl	800601e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 8005aee:	b5b0      	push	{r4, r5, r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	1d38      	adds	r0, r7, #4
 8005af8:	e880 0006 	stmia.w	r0, {r1, r2}
 8005afc:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fabe 	bl	8006084 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8005b08:	1d3b      	adds	r3, r7, #4
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fac9 	bl	80060a2 <_ZNKSt16initializer_listIcE5beginEv>
 8005b10:	4604      	mov	r4, r0
 8005b12:	1d3b      	adds	r3, r7, #4
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fad0 	bl	80060ba <_ZNKSt16initializer_listIcE3endEv>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	4621      	mov	r1, r4
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 faef 	bl	8006104 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bdb0      	pop	{r4, r5, r7, pc}

08005b30 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6819      	ldr	r1, [r3, #0]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	4613      	mov	r3, r2
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4413      	add	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	440b      	add	r3, r1
      }
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	10db      	asrs	r3, r3, #3
 8005b6c:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	aaaaaaab 	.word	0xaaaaaaab

08005b84 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f86c 	bl	8005c6a <_ZNSaIfEC1Ev>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 faed 	bl	8006174 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8005ba4:	b590      	push	{r4, r7, lr}
 8005ba6:	b089      	sub	sp, #36	; 0x24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8005bae:	2004      	movs	r0, #4
 8005bb0:	f7fc f8fa 	bl	8001da8 <_ZSt16__deque_buf_sizej>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8005bca:	f107 0210 	add.w	r2, r7, #16
 8005bce:	f107 030c 	add.w	r3, r7, #12
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fae6 	bl	80061a6 <_ZSt3maxIjERKT_S2_S2_>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 faf0 	bl	80061ce <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6859      	ldr	r1, [r3, #4]
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	1acb      	subs	r3, r1, r3
 8005c00:	085b      	lsrs	r3, r3, #1
 8005c02:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005c04:	4413      	add	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	4413      	add	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	69b9      	ldr	r1, [r7, #24]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 faf6 	bl	8006208 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	69b9      	ldr	r1, [r7, #24]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fb0b 	bl	800623e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f103 0218 	add.w	r2, r3, #24
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	3b04      	subs	r3, #4
 8005c32:	4619      	mov	r1, r3
 8005c34:	4610      	mov	r0, r2
 8005c36:	f000 fb02 	bl	800623e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8005c46:	2004      	movs	r0, #4
 8005c48:	f7fc f8ae 	bl	8001da8 <_ZSt16__deque_buf_sizej>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c54:	fb01 f202 	mul.w	r2, r1, r2
 8005c58:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	619a      	str	r2, [r3, #24]
    }
 8005c62:	bf00      	nop
 8005c64:	3724      	adds	r7, #36	; 0x24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd90      	pop	{r4, r7, pc}

08005c6a <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fb32 	bl	80062dc <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	609a      	str	r2, [r3, #8]
	{ }
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005cc0:	b5b0      	push	{r4, r5, r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fb10 	bl	80062f2 <_ZSt12__niter_baseIPKcET_S2_>
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	68b8      	ldr	r0, [r7, #8]
 8005cd6:	f000 fb0c 	bl	80062f2 <_ZSt12__niter_baseIPKcET_S2_>
 8005cda:	4605      	mov	r5, r0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fb12 	bl	8006308 <_ZSt12__niter_baseIPcET_S1_>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4629      	mov	r1, r5
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 fb17 	bl	800631e <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fb21 	bl	800633e <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8005cfc:	4603      	mov	r3, r0
    }
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bdb0      	pop	{r4, r5, r7, pc}

08005d06 <_ZNSaIN3jlb4EdgeEEC1Ev>:
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fb21 	bl	8006356 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	609a      	str	r2, [r3, #8]
	{ }
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
	if (__p)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fb04 	bl	800636c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 fb0a 	bl	80063aa <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fb03 	bl	80063d6 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4618      	mov	r0, r3
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f010 fd4f 	bl	801689a <_ZNSaIcED1Ev>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 faea 	bl	80063f0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 faf8 	bl	8006414 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8005e44:	461a      	mov	r2, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fafe 	bl	8006448 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff ffcd 	bl	8005dee <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	f107 030c 	add.w	r3, r7, #12
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fafd 	bl	800646e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	1d1a      	adds	r2, r3, #4
 8005e8a:	f107 030c 	add.w	r3, r7, #12
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 faec 	bl	800646e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fae0 	bl	800648e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fae3 	bl	80064b2 <_ZSt8_DestroyIPcEvT_S1_>
    }
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8005f0a:	b5b0      	push	{r4, r5, r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d012      	beq.n	8005f46 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005f20:	687c      	ldr	r4, [r7, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685d      	ldr	r5, [r3, #4]
 8005f26:	6838      	ldr	r0, [r7, #0]
 8005f28:	f000 fad9 	bl	80064de <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4629      	mov	r1, r5
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 fb35 	bl	80065a2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f103 0218 	add.w	r2, r3, #24
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	e00c      	b.n	8005f60 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fb3d 	bl	80065c6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	6838      	ldr	r0, [r7, #0]
 8005f50:	f000 fac5 	bl	80064de <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005f54:	4603      	mov	r3, r0
 8005f56:	461a      	mov	r2, r3
 8005f58:	4621      	mov	r1, r4
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fb44 	bl	80065e8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fbcb 	bl	80066fc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 8005f66:	4603      	mov	r3, r0
#endif
      }
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bdb0      	pop	{r4, r5, r7, pc}

08005f70 <_ZNSaIN3jlb4NodeEEC1Ev>:
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fbda 	bl	8006732 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	609a      	str	r2, [r3, #8]
	{ }
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
	if (__p)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fbbd 	bl	8006748 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 fbc3 	bl	8006786 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800601e:	b5b0      	push	{r4, r5, r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	429a      	cmp	r2, r3
 8006032:	d012      	beq.n	800605a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006034:	687c      	ldr	r4, [r7, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685d      	ldr	r5, [r3, #4]
 800603a:	6838      	ldr	r0, [r7, #0]
 800603c:	f000 fbb9 	bl	80067b2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006040:	4603      	mov	r3, r0
 8006042:	461a      	mov	r2, r3
 8006044:	4629      	mov	r1, r5
 8006046:	4620      	mov	r0, r4
 8006048:	f000 fbf5 	bl	8006836 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f103 0218 	add.w	r2, r3, #24
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	605a      	str	r2, [r3, #4]
 8006058:	e00c      	b.n	8006074 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fbfd 	bl	800685a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 8006060:	4604      	mov	r4, r0
 8006062:	6838      	ldr	r0, [r7, #0]
 8006064:	f000 fba5 	bl	80067b2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	4621      	mov	r1, r4
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fc04 	bl	800687c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fc95 	bl	80069a4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 800607a:	4603      	mov	r3, r0
      }
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bdb0      	pop	{r4, r5, r7, pc}

08006084 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 f9ac 	bl	80063f0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <_ZNKSt16initializer_listIcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <_ZNKSt16initializer_listIcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80060ba:	b590      	push	{r4, r7, lr}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff ffed 	bl	80060a2 <_ZNKSt16initializer_listIcE5beginEv>
 80060c8:	4604      	mov	r4, r0
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fc85 	bl	80069da <_ZNKSt16initializer_listIcE4sizeEv>
 80060d0:	4603      	mov	r3, r0
 80060d2:	4423      	add	r3, r4
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd90      	pop	{r4, r7, pc}

080060dc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80060dc:	b5b0      	push	{r4, r5, r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80060e6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80060e8:	1d3b      	adds	r3, r7, #4
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fc81 	bl	80069f2 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80060f0:	462a      	mov	r2, r5
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 fc86 	bl	8006a06 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80060fa:	4603      	mov	r3, r0
    }
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bdb0      	pop	{r4, r5, r7, pc}

08006104 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8006104:	b590      	push	{r4, r7, lr}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	68b8      	ldr	r0, [r7, #8]
 8006116:	f7ff ffe1 	bl	80060dc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800611a:	4603      	mov	r3, r0
 800611c:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800611e:	68fc      	ldr	r4, [r7, #12]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff febc 	bl	8005ea0 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8006128:	4603      	mov	r3, r0
 800612a:	4619      	mov	r1, r3
 800612c:	6978      	ldr	r0, [r7, #20]
 800612e:	f000 fc79 	bl	8006a24 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 8006132:	4603      	mov	r3, r0
 8006134:	4619      	mov	r1, r3
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fc9c 	bl	8006a74 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800613c:	4602      	mov	r2, r0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	441a      	add	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fea3 	bl	8005ea0 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800615a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800615c:	4622      	mov	r2, r4
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	68b8      	ldr	r0, [r7, #8]
 8006162:	f000 fc9b 	bl	8006a9c <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 8006166:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	605a      	str	r2, [r3, #4]
	}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	bd90      	pop	{r4, r7, pc}

08006174 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	605a      	str	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3308      	adds	r3, #8
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fc96 	bl	8006abe <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3318      	adds	r3, #24
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fc91 	bl	8006abe <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d201      	bcs.n	80061c0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	e000      	b.n	80061c2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80061c0:	687b      	ldr	r3, [r7, #4]
    }
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80061ce:	b590      	push	{r4, r7, lr}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80061d8:	f107 030c 	add.w	r3, r7, #12
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 f846 	bl	8006270 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80061e4:	f107 030c 	add.w	r3, r7, #12
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fc7e 	bl	8006aec <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 80061f0:	4604      	mov	r4, r0
 80061f2:	bf00      	nop
      }
 80061f4:	f107 030c 	add.w	r3, r7, #12
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 f84a 	bl	8006292 <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80061fe:	4623      	mov	r3, r4
      }
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	bd90      	pop	{r4, r7, pc}

08006208 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	e008      	b.n	800622c <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f844 	bl	80062a8 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8006220:	4602      	mov	r2, r0
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	3304      	adds	r3, #4
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	429a      	cmp	r2, r3
 8006232:	d3f2      	bcc.n	800621a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800623e:	b590      	push	{r4, r7, lr}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685c      	ldr	r4, [r3, #4]
 800625a:	f000 f837 	bl	80062cc <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800625e:	4603      	mov	r3, r0
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	18e2      	adds	r2, r4, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	609a      	str	r2, [r3, #8]
      }
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	bd90      	pop	{r4, r7, pc}

08006270 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800627a:	6838      	ldr	r0, [r7, #0]
 800627c:	f000 fc56 	bl	8006b2c <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006280:	4603      	mov	r3, r0
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fc5c 	bl	8006b42 <_ZNSaIPfEC1IfEERKSaIT_E>
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80062b0:	687c      	ldr	r4, [r7, #4]
 80062b2:	2004      	movs	r0, #4
 80062b4:	f7fb fd78 	bl	8001da8 <_ZSt16__deque_buf_sizej>
 80062b8:	4603      	mov	r3, r0
 80062ba:	4619      	mov	r1, r3
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 fc4d 	bl	8006b5c <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 80062c2:	4603      	mov	r3, r0
      }
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd90      	pop	{r4, r7, pc}

080062cc <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80062d0:	2004      	movs	r0, #4
 80062d2:	f7fb fd69 	bl	8001da8 <_ZSt16__deque_buf_sizej>
 80062d6:	4603      	mov	r3, r0
 80062d8:	4618      	mov	r0, r3
 80062da:	bd80      	pop	{r7, pc}

080062dc <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	68b9      	ldr	r1, [r7, #8]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fc34 	bl	8006b9c <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 8006334:	4603      	mov	r3, r0
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8006384:	f7fb fcfc 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 800638e:	69b8      	ldr	r0, [r7, #24]
 8006390:	f010 fa6c 	bl	801686c <_ZdlPv>
	    return;
 8006394:	e005      	b.n	80063a2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	  }
#endif
	__allocator_base<_Tp>::deallocate(__p, __n);
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	69f8      	ldr	r0, [r7, #28]
 800639c:	f000 ff92 	bl	80072c4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80063b4:	f7fb fce4 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc45 	bl	8006c50 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 80063c6:	e003      	b.n	80063d0 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fc40 	bl	8006c50 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f010 fa58 	bl	8016898 <_ZNSaIcEC1ERKS_>
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f010 fa4b 	bl	8016898 <_ZNSaIcEC1ERKS_>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fc3c 	bl	8006c82 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fb27 	bl	8006a74 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8006426:	4602      	mov	r2, r0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	441a      	add	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	609a      	str	r2, [r3, #8]
      }
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
	if (__p)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d005      	beq.n	8006466 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fbd6 	bl	8006c12 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800648e:	b580      	push	{r7, lr}
 8006490:	b086      	sub	sp, #24
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fc01 	bl	8006caa <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 80064a8:	4603      	mov	r3, r0
    }
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80064bc:	f7fb fc60 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fbfe 	bl	8006cca <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 80064ce:	e003      	b.n	80064d8 <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fc12 	bl	8006cfc <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	4611      	mov	r1, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fc04 	bl	8006d12 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	4611      	mov	r1, r2
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff ffe5 	bl	80064f4 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781a      	ldrb	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f103 0208 	add.w	r2, r3, #8
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	4619      	mov	r1, r3
 800655a:	4610      	mov	r0, r2
 800655c:	f7ff ffda 	bl	8006514 <_ZNSt6vectorIcSaIcEEC1EOS1_>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695a      	ldr	r2, [r3, #20]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	615a      	str	r2, [r3, #20]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006572:	b5b0      	push	{r4, r5, r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800657c:	6838      	ldr	r0, [r7, #0]
 800657e:	f7ff ffae 	bl	80064de <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006582:	4605      	mov	r5, r0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4619      	mov	r1, r3
 8006588:	2018      	movs	r0, #24
 800658a:	f7fb fc01 	bl	8001d90 <_ZnwjPv>
 800658e:	4604      	mov	r4, r0
 8006590:	4629      	mov	r1, r5
 8006592:	4620      	mov	r0, r4
 8006594:	f7ff ffce 	bl	8006534 <_ZN3jlb4EdgeC1EOS0_>
 8006598:	4623      	mov	r3, r4
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bdb0      	pop	{r4, r5, r7, pc}

080065a2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff ff95 	bl	80064de <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80065b4:	4603      	mov	r3, r0
 80065b6:	4619      	mov	r1, r3
 80065b8:	68b8      	ldr	r0, [r7, #8]
 80065ba:	f7ff ffda 	bl	8006572 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	1d1a      	adds	r2, r3, #4
 80065d2:	f107 030c 	add.w	r3, r7, #12
 80065d6:	4611      	mov	r1, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fbb5 	bl	8006d48 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80065e8:	b5b0      	push	{r4, r5, r7, lr}
 80065ea:	b08c      	sub	sp, #48	; 0x30
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80065f4:	4a3f      	ldr	r2, [pc, #252]	; (80066f4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 80065f6:	2101      	movs	r1, #1
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fbb5 	bl	8006d68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 80065fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fbf2 	bl	8006df6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 8006612:	4603      	mov	r3, r0
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	f107 0214 	add.w	r2, r7, #20
 800661a:	f107 0308 	add.w	r3, r7, #8
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fbf9 	bl	8006e18 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006626:	4603      	mov	r3, r0
 8006628:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fc0c 	bl	8006e4c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 8006634:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800663a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800663c:	6a3a      	ldr	r2, [r7, #32]
 800663e:	4613      	mov	r3, r2
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	4413      	add	r3, r2
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	189d      	adds	r5, r3, r2
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff ff46 	bl	80064de <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	4629      	mov	r1, r5
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff ffa2 	bl	80065a2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006662:	f107 0308 	add.w	r3, r7, #8
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fc18 	bl	8006e9c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800666c:	4603      	mov	r3, r0
 800666e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff fb7a 	bl	8005d6c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006678:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	4621      	mov	r1, r4
 800667e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006680:	f000 fbf8 	bl	8006e74 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006684:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	3318      	adds	r3, #24
 800668a:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800668c:	f107 0308 	add.w	r3, r7, #8
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fc03 	bl	8006e9c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006696:	4603      	mov	r3, r0
 8006698:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fb65 	bl	8005d6c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80066a2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 fbe3 	bl	8006e74 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80066ae:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80066b0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	10db      	asrs	r3, r3, #3
 80066bc:	4a0e      	ldr	r2, [pc, #56]	; (80066f8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 80066be:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 80066c2:	461a      	mov	r2, r3
 80066c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066c6:	f7ff fb3e 	bl	8005d46 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	69fa      	ldr	r2, [r7, #28]
 80066ce:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80066d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d8:	4613      	mov	r3, r2
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	4413      	add	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	461a      	mov	r2, r3
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	441a      	add	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	609a      	str	r2, [r3, #8]
    }
 80066ea:	bf00      	nop
 80066ec:	3730      	adds	r7, #48	; 0x30
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bdb0      	pop	{r4, r5, r7, pc}
 80066f2:	bf00      	nop
 80066f4:	080187fc 	.word	0x080187fc
 80066f8:	aaaaaaab 	.word	0xaaaaaaab

080066fc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff ff5e 	bl	80065c6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800670a:	4603      	mov	r3, r0
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	f107 030c 	add.w	r3, r7, #12
 8006712:	2101      	movs	r1, #1
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fbd8 	bl	8006eca <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 800671a:	4603      	mov	r3, r0
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	f107 0308 	add.w	r3, r7, #8
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fbed 	bl	8006f02 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 8006728:	4603      	mov	r3, r0
      }
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4618      	mov	r0, r3
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006760:	f7fb fb0e 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800676a:	69b8      	ldr	r0, [r7, #24]
 800676c:	f010 f87e 	bl	801686c <_ZdlPv>
	    return;
 8006770:	e005      	b.n	800677e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	69b9      	ldr	r1, [r7, #24]
 8006776:	69f8      	ldr	r0, [r7, #28]
 8006778:	f000 fe6e 	bl	8007458 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	3720      	adds	r7, #32
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8006790:	f7fb faf6 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fbbc 	bl	8006f1a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 80067a2:	e003      	b.n	80067ac <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fbb7 	bl	8006f1a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	609a      	str	r2, [r3, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f103 020c 	add.w	r2, r3, #12
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	4619      	mov	r1, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	f000 fba8 	bl	8006f4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006806:	b5b0      	push	{r4, r5, r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006810:	6838      	ldr	r0, [r7, #0]
 8006812:	f7ff ffce 	bl	80067b2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006816:	4605      	mov	r5, r0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4619      	mov	r1, r3
 800681c:	2018      	movs	r0, #24
 800681e:	f7fb fab7 	bl	8001d90 <_ZnwjPv>
 8006822:	4604      	mov	r4, r0
 8006824:	4629      	mov	r1, r5
 8006826:	4620      	mov	r0, r4
 8006828:	f7ff ffce 	bl	80067c8 <_ZN3jlb4NodeC1ERKS0_>
 800682c:	4623      	mov	r3, r4
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bdb0      	pop	{r4, r5, r7, pc}

08006836 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff ffb5 	bl	80067b2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006848:	4603      	mov	r3, r0
 800684a:	4619      	mov	r1, r3
 800684c:	68b8      	ldr	r0, [r7, #8]
 800684e:	f7ff ffda 	bl	8006806 <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	1d1a      	adds	r2, r3, #4
 8006866:	f107 030c 	add.w	r3, r7, #12
 800686a:	4611      	mov	r1, r2
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fbaa 	bl	8006fc6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800687c:	b5b0      	push	{r4, r5, r7, lr}
 800687e:	b08c      	sub	sp, #48	; 0x30
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006888:	4a44      	ldr	r2, [pc, #272]	; (800699c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 800688a:	2101      	movs	r1, #1
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fbaa 	bl	8006fe6 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 8006892:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 fbe7 	bl	8007074 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 80068a6:	4603      	mov	r3, r0
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	f107 0214 	add.w	r2, r7, #20
 80068ae:	f107 0308 	add.w	r3, r7, #8
 80068b2:	4611      	mov	r1, r2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fbed 	bl	8007094 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80068ba:	4603      	mov	r3, r0
 80068bc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fc00 	bl	80070c8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 80068c8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80068ce:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80068d0:	6a3a      	ldr	r2, [r7, #32]
 80068d2:	4613      	mov	r3, r2
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	4413      	add	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	189d      	adds	r5, r3, r2
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ff66 	bl	80067b2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80068e6:	4603      	mov	r3, r0
 80068e8:	461a      	mov	r2, r3
 80068ea:	4629      	mov	r1, r5
 80068ec:	4620      	mov	r0, r4
 80068ee:	f7ff ffa2 	bl	8006836 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80068f2:	2300      	movs	r3, #0
 80068f4:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 80068f6:	f107 0308 	add.w	r3, r7, #8
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fbf8 	bl	80070f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006900:	4603      	mov	r3, r0
 8006902:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fb65 	bl	8005fd6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800690c:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	4621      	mov	r1, r4
 8006912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006914:	f000 fbf7 	bl	8007106 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8006918:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	3318      	adds	r3, #24
 800691e:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 8006920:	f107 0308 	add.w	r3, r7, #8
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fbe3 	bl	80070f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800692a:	4603      	mov	r3, r0
 800692c:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fb50 	bl	8005fd6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006936:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fbe2 	bl	8007106 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8006942:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff fb45 	bl	8005fd6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800694c:	4603      	mov	r3, r0
 800694e:	461a      	mov	r2, r3
 8006950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006954:	f7ff fb4a 	bl	8005fec <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8006958:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	10db      	asrs	r3, r3, #3
 8006964:	4a0e      	ldr	r2, [pc, #56]	; (80069a0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 8006966:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800696a:	461a      	mov	r2, r3
 800696c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800696e:	f7ff fb1f 	bl	8005fb0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800697e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006980:	4613      	mov	r3, r2
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	4413      	add	r3, r2
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	461a      	mov	r2, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	441a      	add	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	609a      	str	r2, [r3, #8]
    }
 8006992:	bf00      	nop
 8006994:	3730      	adds	r7, #48	; 0x30
 8006996:	46bd      	mov	sp, r7
 8006998:	bdb0      	pop	{r4, r5, r7, pc}
 800699a:	bf00      	nop
 800699c:	080187fc 	.word	0x080187fc
 80069a0:	aaaaaaab 	.word	0xaaaaaaab

080069a4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff ff54 	bl	800685a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 80069b2:	4603      	mov	r3, r0
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	f107 030c 	add.w	r3, r7, #12
 80069ba:	2101      	movs	r1, #1
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fbbb 	bl	8007138 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 80069c2:	4603      	mov	r3, r0
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fbd0 	bl	8007170 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 80069d0:	4603      	mov	r3, r0
      }
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <_ZNKSt16initializer_listIcE4sizeEv>:
      size() const noexcept { return _M_len; }
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	1ad3      	subs	r3, r2, r3
    }
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8006a2e:	f107 030c 	add.w	r3, r7, #12
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f00f ff2f 	bl	8016898 <_ZNSaIcEC1ERKS_>
 8006a3a:	f107 030c 	add.w	r3, r7, #12
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fbae 	bl	80071a0 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 8006a44:	4602      	mov	r2, r0
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	bf8c      	ite	hi
 8006a4c:	2301      	movhi	r3, #1
 8006a4e:	2300      	movls	r3, #0
 8006a50:	b2dc      	uxtb	r4, r3
 8006a52:	f107 030c 	add.w	r3, r7, #12
 8006a56:	4618      	mov	r0, r3
 8006a58:	f00f ff1f 	bl	801689a <_ZNSaIcED1Ev>
 8006a5c:	2c00      	cmp	r4, #0
 8006a5e:	d002      	beq.n	8006a66 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8006a60:	4803      	ldr	r0, [pc, #12]	; (8006a70 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 8006a62:	f00f ff21 	bl	80168a8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8006a66:	687b      	ldr	r3, [r7, #4]
      }
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd90      	pop	{r4, r7, pc}
 8006a70:	08018818 	.word	0x08018818

08006a74 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d006      	beq.n	8006a92 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f8a4 	bl	8006bd6 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	e000      	b.n	8006a94 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 8006a92:	2300      	movs	r3, #0
      }
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fb90 	bl	80071d4 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	609a      	str	r2, [r3, #8]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	60da      	str	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8006afe:	f7fb f93f 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f00f feb1 	bl	8016874 <_Znwj>
 8006b12:	4603      	mov	r3, r0
 8006b14:	e006      	b.n	8006b24 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8006b16:	2200      	movs	r2, #0
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fdb0 	bl	8007680 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 8006b20:	4603      	mov	r3, r0
 8006b22:	bf00      	nop
      { return __a.allocate(__n); }
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fb53 	bl	80071f8 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8006b6e:	f7fb f907 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f00f fe79 	bl	8016874 <_Znwj>
 8006b82:	4603      	mov	r3, r0
 8006b84:	e006      	b.n	8006b94 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8006b86:	2200      	movs	r2, #0
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fdae 	bl	80076ec <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8006b90:	4603      	mov	r3, r0
 8006b92:	bf00      	nop
      { return __a.allocate(__n); }
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8006ba8:	f7fb f8ea 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d006      	beq.n	8006bc0 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 fb3d 	bl	8007236 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	e006      	b.n	8006bce <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fb58 	bl	800727a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	bf00      	nop
    }
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8006be8:	f7fb f8ca 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d004      	beq.n	8006bfc <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006bf2:	68b8      	ldr	r0, [r7, #8]
 8006bf4:	f00f fe3e 	bl	8016874 <_Znwj>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	e006      	b.n	8006c0a <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fda9 	bl	8007758 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 8006c06:	4603      	mov	r3, r0
 8006c08:	bf00      	nop
      { return __a.allocate(__n); }
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b088      	sub	sp, #32
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006c2a:	f7fb f8a9 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 8006c34:	69b8      	ldr	r0, [r7, #24]
 8006c36:	f00f fe19 	bl	801686c <_ZdlPv>
	    return;
 8006c3a:	e005      	b.n	8006c48 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	69b9      	ldr	r1, [r7, #24]
 8006c40:	69f8      	ldr	r0, [r7, #28]
 8006c42:	f000 fdab 	bl	800779c <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 8006c46:	bf00      	nop
 8006c48:	bf00      	nop
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006c5a:	e009      	b.n	8006c70 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fb43 	bl	80072e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8006c62:	4603      	mov	r3, r0
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fb4a 	bl	80072fe <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3318      	adds	r3, #24
 8006c6e:	607b      	str	r3, [r7, #4]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d1f1      	bne.n	8006c5c <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	605a      	str	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	609a      	str	r2, [r3, #8]
	{ }
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fb2a 	bl	8007314 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006cd4:	e009      	b.n	8006cea <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fae9 	bl	80072ae <_ZSt11__addressofIcEPT_RS0_>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fb30 	bl	8007344 <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d1f1      	bne.n	8006cd6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8006d12:	b590      	push	{r4, r7, lr}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8006d1c:	6838      	ldr	r0, [r7, #0]
 8006d1e:	f000 fb1c 	bl	800735a <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8006d22:	4603      	mov	r3, r0
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f00f fdb6 	bl	8016898 <_ZNSaIcEC1ERKS_>
 8006d2c:	687c      	ldr	r4, [r7, #4]
 8006d2e:	6838      	ldr	r0, [r7, #0]
 8006d30:	f000 fb13 	bl	800735a <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8006d34:	4603      	mov	r3, r0
 8006d36:	4619      	mov	r1, r3
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 fb19 	bl	8007370 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd90      	pop	{r4, r7, pc}

08006d48 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8006d68:	b590      	push	{r4, r7, lr}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 fb1e 	bl	80073b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7fe feeb 	bl	8005b58 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006d82:	4603      	mov	r3, r0
 8006d84:	1ae2      	subs	r2, r4, r3
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	bf34      	ite	cc
 8006d8c:	2301      	movcc	r3, #1
 8006d8e:	2300      	movcs	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f00f fd86 	bl	80168a8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7fe fedb 	bl	8005b58 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006da2:	4604      	mov	r4, r0
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7fe fed7 	bl	8005b58 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006daa:	4603      	mov	r3, r0
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	f107 0208 	add.w	r2, r7, #8
 8006db2:	f107 0310 	add.w	r3, r7, #16
 8006db6:	4611      	mov	r1, r2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff f9f4 	bl	80061a6 <_ZSt3maxIjERKT_S2_S2_>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4423      	add	r3, r4
 8006dc4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7fe fec6 	bl	8005b58 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d306      	bcc.n	8006de2 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 faee 	bl	80073b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d904      	bls.n	8006dec <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fae7 	bl	80073b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 8006de8:	4603      	mov	r3, r0
 8006dea:	e000      	b.n	8006dee <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 8006dec:	697b      	ldr	r3, [r7, #20]
      }
 8006dee:	4618      	mov	r0, r3
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd90      	pop	{r4, r7, pc}

08006df6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	4611      	mov	r1, r2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff ff9e 	bl	8006d48 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f83a 	bl	8006e9c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	681c      	ldr	r4, [r3, #0]
 8006e2c:	6838      	ldr	r0, [r7, #0]
 8006e2e:	f000 f835 	bl	8006e9c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006e32:	4603      	mov	r3, r0
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	1ae3      	subs	r3, r4, r3
 8006e38:	10db      	asrs	r3, r3, #3
 8006e3a:	4a03      	ldr	r2, [pc, #12]	; (8006e48 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 8006e3c:	fb02 f303 	mul.w	r3, r2, r3
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd90      	pop	{r4, r7, pc}
 8006e48:	aaaaaaab 	.word	0xaaaaaaab

08006e4c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d006      	beq.n	8006e6a <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fab9 	bl	80073d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 8006e66:	4603      	mov	r3, r0
 8006e68:	e000      	b.n	8006e6c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 8006e6a:	2300      	movs	r3, #0
      }
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006e82:	f88d 4000 	strb.w	r4, [sp]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 fac6 	bl	800741e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8006e92:	4603      	mov	r3, r0
      }
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd90      	pop	{r4, r7, pc}

08006e9c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8006ebc:	6838      	ldr	r0, [r7, #0]
 8006ebe:	f000 fac0 	bl	8007442 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6819      	ldr	r1, [r3, #0]
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	4613      	mov	r3, r2
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	4413      	add	r3, r2
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	425b      	negs	r3, r3
 8006ee4:	440b      	add	r3, r1
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	f107 020c 	add.w	r2, r7, #12
 8006eec:	f107 0308 	add.w	r3, r7, #8
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff ff28 	bl	8006d48 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006f24:	e009      	b.n	8006f3a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 faa8 	bl	800747c <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 faaf 	bl	8007492 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3318      	adds	r3, #24
 8006f38:	607b      	str	r3, [r7, #4]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d1f1      	bne.n	8006f26 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 8006f42:	bf00      	nop
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8006f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8006f56:	687c      	ldr	r4, [r7, #4]
 8006f58:	6838      	ldr	r0, [r7, #0]
 8006f5a:	f7fe fdfd 	bl	8005b58 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006f5e:	4605      	mov	r5, r0
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 faae 	bl	80074c4 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	f107 030c 	add.w	r3, r7, #12
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fa99 	bl	80074a8 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 faab 	bl	80074da <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 8006f84:	f107 030c 	add.w	r3, r7, #12
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fce2 	bl	8005952 <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8006f8e:	6838      	ldr	r0, [r7, #0]
 8006f90:	f000 fab7 	bl	8007502 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 8006f94:	4605      	mov	r5, r0
 8006f96:	6838      	ldr	r0, [r7, #0]
 8006f98:	f000 fac3 	bl	8007522 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe fee1 	bl	8005d6c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006faa:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8006fac:	4622      	mov	r2, r4
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f000 fac7 	bl	8007544 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 8006fb6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	605a      	str	r2, [r3, #4]
      }
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fc6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8006fe6:	b590      	push	{r4, r7, lr}
 8006fe8:	b087      	sub	sp, #28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fab7 	bl	8007566 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 fac4 	bl	8007588 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8007000:	4603      	mov	r3, r0
 8007002:	1ae2      	subs	r2, r4, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	429a      	cmp	r2, r3
 8007008:	bf34      	ite	cc
 800700a:	2301      	movcc	r3, #1
 800700c:	2300      	movcs	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f00f fc47 	bl	80168a8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fab4 	bl	8007588 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8007020:	4604      	mov	r4, r0
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 fab0 	bl	8007588 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8007028:	4603      	mov	r3, r0
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	f107 0208 	add.w	r2, r7, #8
 8007030:	f107 0310 	add.w	r3, r7, #16
 8007034:	4611      	mov	r1, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff f8b5 	bl	80061a6 <_ZSt3maxIjERKT_S2_S2_>
 800703c:	4603      	mov	r3, r0
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4423      	add	r3, r4
 8007042:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fa9f 	bl	8007588 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800704a:	4602      	mov	r2, r0
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	4293      	cmp	r3, r2
 8007050:	d306      	bcc.n	8007060 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fa87 	bl	8007566 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 8007058:	4602      	mov	r2, r0
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	4293      	cmp	r3, r2
 800705e:	d904      	bls.n	800706a <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 fa80 	bl	8007566 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 8007066:	4603      	mov	r3, r0
 8007068:	e000      	b.n	800706c <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800706a:	697b      	ldr	r3, [r7, #20]
      }
 800706c:	4618      	mov	r0, r3
 800706e:	371c      	adds	r7, #28
 8007070:	46bd      	mov	sp, r7
 8007072:	bd90      	pop	{r4, r7, pc}

08007074 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	f107 030c 	add.w	r3, r7, #12
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff ff9e 	bl	8006fc6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007094:	b590      	push	{r4, r7, lr}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f826 	bl	80070f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 80070a4:	4603      	mov	r3, r0
 80070a6:	681c      	ldr	r4, [r3, #0]
 80070a8:	6838      	ldr	r0, [r7, #0]
 80070aa:	f000 f821 	bl	80070f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 80070ae:	4603      	mov	r3, r0
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	1ae3      	subs	r3, r4, r3
 80070b4:	10db      	asrs	r3, r3, #3
 80070b6:	4a03      	ldr	r2, [pc, #12]	; (80070c4 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 80070b8:	fb02 f303 	mul.w	r3, r2, r3
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd90      	pop	{r4, r7, pc}
 80070c4:	aaaaaaab 	.word	0xaaaaaaab

080070c8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d006      	beq.n	80070e6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fa69 	bl	80075b4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 80070e2:	4603      	mov	r3, r0
 80070e4:	e000      	b.n	80070e8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 80070e6:	2300      	movs	r3, #0
      }
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8007106:	b590      	push	{r4, r7, lr}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	607a      	str	r2, [r7, #4]
 8007112:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 fa70 	bl	80075fa <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800711a:	4604      	mov	r4, r0
 800711c:	68b8      	ldr	r0, [r7, #8]
 800711e:	f000 fa6c 	bl	80075fa <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 8007122:	4601      	mov	r1, r0
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4620      	mov	r0, r4
 800712a:	f000 fa71 	bl	8007610 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 800712e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	bd90      	pop	{r4, r7, pc}

08007138 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6819      	ldr	r1, [r3, #0]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	4613      	mov	r3, r2
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	4413      	add	r3, r2
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	425b      	negs	r3, r3
 8007152:	440b      	add	r3, r1
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	f107 020c 	add.w	r2, r7, #12
 800715a:	f107 0308 	add.w	r3, r7, #8
 800715e:	4611      	mov	r1, r2
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff ff30 	bl	8006fc6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8007190:	f04f 33ff 	mov.w	r3, #4294967295
      }
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80071a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80071ac:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff ffea 	bl	8007188 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 80071b4:	4603      	mov	r3, r0
 80071b6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80071b8:	f107 0208 	add.w	r2, r7, #8
 80071bc:	f107 030c 	add.w	r3, r7, #12
 80071c0:	4611      	mov	r1, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f823 	bl	800720e <_ZSt3minIjERKT_S2_S2_>
 80071c8:	4603      	mov	r3, r0
 80071ca:	681b      	ldr	r3, [r3, #0]
      }
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80071e0:	2301      	movs	r3, #1
 80071e2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 fa2d 	bl	8007648 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 80071ee:	4603      	mov	r3, r0
    }
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4618      	mov	r0, r3
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d201      	bcs.n	8007228 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	e000      	b.n	800722a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007228:	687b      	ldr	r3, [r7, #4]
    }
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8007236:	b480      	push	{r7}
 8007238:	b087      	sub	sp, #28
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	e00c      	b.n	8007266 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3301      	adds	r3, #1
 800725e:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	3b01      	subs	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	dcef      	bgt.n	800724c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 800726c:	687b      	ldr	r3, [r7, #4]
	}
 800726e:	4618      	mov	r0, r3
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	461a      	mov	r2, r3
 8007298:	68f9      	ldr	r1, [r7, #12]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f010 fc80 	bl	8017ba0 <memmove>
	  return __result + _Num;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	4413      	add	r3, r2
	}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	4413      	add	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4619      	mov	r1, r3
 80072dc:	68b8      	ldr	r0, [r7, #8]
 80072de:	f00f fac7 	bl	8016870 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f89b 	bl	8007442 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8007314:	b590      	push	{r4, r7, lr}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 fa48 	bl	80077b6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 8007326:	4604      	mov	r4, r0
 8007328:	68b8      	ldr	r0, [r7, #8]
 800732a:	f000 fa44 	bl	80077b6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800732e:	4603      	mov	r3, r0
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4619      	mov	r1, r3
 8007334:	4620      	mov	r0, r4
 8007336:	f000 fa49 	bl	80077cc <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 800733a:	4603      	mov	r3, r0
    }
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	bd90      	pop	{r4, r7, pc}

08007344 <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fa60 	bl	8007812 <_ZSt10destroy_atIcEvPT_>
    }
 8007352:	bf00      	nop
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2200      	movs	r2, #0
 8007396:	609a      	str	r2, [r3, #8]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	605a      	str	r2, [r3, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 f87f 	bl	80074c4 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80073c6:	4603      	mov	r3, r0
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 fa3b 	bl	8007844 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 80073ce:	4603      	mov	r3, r0
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80073ea:	f7fa fcc9 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	4613      	mov	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4413      	add	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	4618      	mov	r0, r3
 8007400:	f00f fa38 	bl	8016874 <_Znwj>
 8007404:	4603      	mov	r3, r0
 8007406:	e006      	b.n	8007416 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8007408:	2200      	movs	r2, #0
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fb15 	bl	8007a3c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 8007412:	4603      	mov	r3, r0
 8007414:	bf00      	nop
      { return __a.allocate(__n); }
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 fa22 	bl	800787c <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8007438:	4603      	mov	r3, r0
      }
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fa fe40 	bl	80020d0 <_ZN3jlb4EdgeD1Ev>
    }
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4413      	add	r3, r2
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	4619      	mov	r1, r3
 8007470:	68b8      	ldr	r0, [r7, #8]
 8007472:	f00f f9fd 	bl	8016870 <_ZdlPvj>
      }
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f8c9 	bl	8007632 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f9fd 	bl	80078b6 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f9f0 	bl	80078d0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f9fe 	bl	80078f4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	f107 030c 	add.w	r3, r7, #12
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fa0c 	bl	8007930 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	1d1a      	adds	r2, r3, #4
 800752e:	f107 030c 	add.w	r3, r7, #12
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f000 f9fb 	bl	8007930 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f9fa 	bl	8007950 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800755c:	4603      	mov	r3, r0
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fa29 	bl	80079c8 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8007576:	4603      	mov	r3, r0
 8007578:	4618      	mov	r0, r3
 800757a:	f000 fa09 	bl	8007990 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 800757e:	4603      	mov	r3, r0
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	10db      	asrs	r3, r3, #3
 800759c:	4a04      	ldr	r2, [pc, #16]	; (80075b0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	4618      	mov	r0, r3
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	aaaaaaab 	.word	0xaaaaaaab

080075b4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80075c6:	f7fa fbdb 	bl	8001d80 <_ZSt21is_constant_evaluatedv>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	4613      	mov	r3, r2
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	4413      	add	r3, r2
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	4618      	mov	r0, r3
 80075dc:	f00f f94a 	bl	8016874 <_Znwj>
 80075e0:	4603      	mov	r3, r0
 80075e2:	e006      	b.n	80075f2 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80075e4:	2200      	movs	r2, #0
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 faf3 	bl	8007bd4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 80075ee:	4603      	mov	r3, r0
 80075f0:	bf00      	nop
      { return __a.allocate(__n); }
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f9db 	bl	80079de <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 8007628:	4603      	mov	r3, r0
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fa fd3a 	bl	80020b4 <_ZN3jlb4NodeD1Ev>
    }
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	68b9      	ldr	r1, [r7, #8]
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7fe f952 	bl	8005902 <_ZSt4copyIPKcPcET0_T_S4_S3_>
 800765e:	4603      	mov	r3, r0
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007670:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff ffeb 	bl	8007668 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 8007692:	4602      	mov	r2, r0
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4293      	cmp	r3, r2
 8007698:	bf8c      	ite	hi
 800769a:	2301      	movhi	r3, #1
 800769c:	2300      	movls	r3, #0
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bf14      	ite	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	2300      	moveq	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d007      	beq.n	80076be <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b4:	d301      	bcc.n	80076ba <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80076b6:	f00f f8f4 	bl	80168a2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80076ba:	f00f f8ef 	bl	801689c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4618      	mov	r0, r3
 80076c4:	f00f f8d6 	bl	8016874 <_Znwj>
 80076c8:	4603      	mov	r3, r0
 80076ca:	bf00      	nop
      }
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80076dc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f7ff ffeb 	bl	80076d4 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 80076fe:	4602      	mov	r2, r0
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4293      	cmp	r3, r2
 8007704:	bf8c      	ite	hi
 8007706:	2301      	movhi	r3, #1
 8007708:	2300      	movls	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	bf14      	ite	ne
 8007710:	2301      	movne	r3, #1
 8007712:	2300      	moveq	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d007      	beq.n	800772a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007720:	d301      	bcc.n	8007726 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8007722:	f00f f8be 	bl	80168a2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8007726:	f00f f8b9 	bl	801689c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4618      	mov	r0, r3
 8007730:	f00f f8a0 	bl	8016874 <_Znwj>
 8007734:	4603      	mov	r3, r0
 8007736:	bf00      	nop
      }
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007748:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f7ff ffeb 	bl	8007740 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 800776a:	4602      	mov	r2, r0
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4293      	cmp	r3, r2
 8007770:	bf8c      	ite	hi
 8007772:	2301      	movhi	r3, #1
 8007774:	2300      	movls	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	bf14      	ite	ne
 800777c:	2301      	movne	r3, #1
 800777e:	2300      	moveq	r3, #0
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8007786:	f00f f889 	bl	801689c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800778a:	68b8      	ldr	r0, [r7, #8]
 800778c:	f00f f872 	bl	8016874 <_Znwj>
 8007790:	4603      	mov	r3, r0
 8007792:	bf00      	nop
      }
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80077a8:	6879      	ldr	r1, [r7, #4]
 80077aa:	68b8      	ldr	r0, [r7, #8]
 80077ac:	f00f f860 	bl	8016870 <_ZdlPvj>
      }
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80077cc:	b5b0      	push	{r4, r5, r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f912 	bl	8007a02 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80077de:	4604      	mov	r4, r0
 80077e0:	68b8      	ldr	r0, [r7, #8]
 80077e2:	f000 f90e 	bl	8007a02 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80077e6:	4605      	mov	r5, r0
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fd8c 	bl	8006308 <_ZSt12__niter_baseIPcET_S1_>
 80077f0:	4603      	mov	r3, r0
 80077f2:	461a      	mov	r2, r3
 80077f4:	4629      	mov	r1, r5
 80077f6:	4620      	mov	r0, r4
 80077f8:	f7fe fd91 	bl	800631e <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 80077fc:	4602      	mov	r2, r0
 80077fe:	1d3b      	adds	r3, r7, #4
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fd9b 	bl	800633e <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8007808:	4603      	mov	r3, r0
    }
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bdb0      	pop	{r4, r5, r7, pc}

08007812 <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
    }
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
	...

08007828 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	0aaaaaaa 	.word	0x0aaaaaaa

08007844 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800784e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff ffe9 	bl	8007828 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 8007856:	4603      	mov	r3, r0
 8007858:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800785a:	f107 0208 	add.w	r2, r7, #8
 800785e:	f107 030c 	add.w	r3, r7, #12
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fcd2 	bl	800720e <_ZSt3minIjERKT_S2_S2_>
 800786a:	4603      	mov	r3, r0
 800786c:	681b      	ldr	r3, [r3, #0]
      }
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	05555555 	.word	0x05555555

0800787c <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800787c:	b5b0      	push	{r4, r5, r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f906 	bl	8007a9c <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8007890:	4604      	mov	r4, r0
 8007892:	68b8      	ldr	r0, [r7, #8]
 8007894:	f000 f902 	bl	8007a9c <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8007898:	4605      	mov	r5, r0
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f8fe 	bl	8007a9c <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 80078a0:	4602      	mov	r2, r0
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	4629      	mov	r1, r5
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 f903 	bl	8007ab2 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 80078ac:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bdb0      	pop	{r4, r5, r7, pc}

080078b6 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f91b 	bl	8007afe <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f90e 	bl	8007afe <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe fa1a 	bl	8005d1e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff faa3 	bl	8006e4c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 8007906:	4602      	mov	r2, r0
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6819      	ldr	r1, [r3, #0]
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	4613      	mov	r3, r2
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	4413      	add	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	18ca      	adds	r2, r1, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	609a      	str	r2, [r3, #8]
      }
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800795c:	2301      	movs	r3, #1
 800795e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	68b9      	ldr	r1, [r7, #8]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f8f4 	bl	8007b52 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 800796a:	4603      	mov	r3, r0
    }
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800797c:	4b03      	ldr	r3, [pc, #12]	; (800798c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	0aaaaaaa 	.word	0x0aaaaaaa

08007990 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8007998:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800799a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff ffe9 	bl	8007974 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 80079a2:	4603      	mov	r3, r0
 80079a4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80079a6:	f107 0208 	add.w	r2, r7, #8
 80079aa:	f107 030c 	add.w	r3, r7, #12
 80079ae:	4611      	mov	r1, r2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fc2c 	bl	800720e <_ZSt3minIjERKT_S2_S2_>
 80079b6:	4603      	mov	r3, r0
 80079b8:	681b      	ldr	r3, [r3, #0]
      }
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	05555555 	.word	0x05555555

080079c8 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4618      	mov	r0, r3
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80079de:	b580      	push	{r7, lr}
 80079e0:	b086      	sub	sp, #24
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80079ea:	2301      	movs	r3, #1
 80079ec:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f91e 	bl	8007c34 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 80079f8:	4603      	mov	r3, r0
    }
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8007a0a:	1d3b      	adds	r3, r7, #4
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f931 	bl	8007c74 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 8007a12:	4603      	mov	r3, r0
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007a28:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	05555555 	.word	0x05555555

08007a3c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff ffe9 	bl	8007a20 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4293      	cmp	r3, r2
 8007a54:	bf8c      	ite	hi
 8007a56:	2301      	movhi	r3, #1
 8007a58:	2300      	movls	r3, #0
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bf14      	ite	ne
 8007a60:	2301      	movne	r3, #1
 8007a62:	2300      	moveq	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4a0a      	ldr	r2, [pc, #40]	; (8007a98 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d901      	bls.n	8007a76 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8007a72:	f00e ff16 	bl	80168a2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8007a76:	f00e ff11 	bl	801689c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	4413      	add	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	4618      	mov	r0, r3
 8007a86:	f00e fef5 	bl	8016874 <_Znwj>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	bf00      	nop
      }
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	0aaaaaaa 	.word	0x0aaaaaaa

08007a9c <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8007ab2:	b590      	push	{r4, r7, lr}
 8007ab4:	b087      	sub	sp, #28
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	60b9      	str	r1, [r7, #8]
 8007abc:	607a      	str	r2, [r7, #4]
 8007abe:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8007ac4:	e012      	b.n	8007aec <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8007ac6:	6978      	ldr	r0, [r7, #20]
 8007ac8:	f7ff fc0e 	bl	80072e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8007acc:	4604      	mov	r4, r0
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff fc0a 	bl	80072e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 f8d5 	bl	8007c8a <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3318      	adds	r3, #24
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	3318      	adds	r3, #24
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d1e8      	bne.n	8007ac6 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 8007af4:	697b      	ldr	r3, [r7, #20]
    }
 8007af6:	4618      	mov	r0, r3
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd90      	pop	{r4, r7, pc}

08007afe <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f8d8 	bl	8007cc0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f103 0218 	add.w	r2, r3, #24
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
	return *this;
 8007b44:	687b      	ldr	r3, [r7, #4]
      }
 8007b46:	4618      	mov	r0, r3
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007b52:	b590      	push	{r4, r7, lr}
 8007b54:	b087      	sub	sp, #28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8007b62:	e015      	b.n	8007b90 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8007b64:	6978      	ldr	r0, [r7, #20]
 8007b66:	f7ff fbbf 	bl	80072e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	f107 030c 	add.w	r3, r7, #12
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 f8c9 	bl	8007d08 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 8007b76:	4603      	mov	r3, r0
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 f8ef 	bl	8007d5e <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007b80:	f107 030c 	add.w	r3, r7, #12
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff ffd3 	bl	8007b30 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	3318      	adds	r3, #24
 8007b8e:	617b      	str	r3, [r7, #20]
 8007b90:	f107 0208 	add.w	r2, r7, #8
 8007b94:	f107 030c 	add.w	r3, r7, #12
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 f89c 	bl	8007cd8 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f083 0301 	eor.w	r3, r3, #1
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1db      	bne.n	8007b64 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 8007bac:	697b      	ldr	r3, [r7, #20]
	}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd90      	pop	{r4, r7, pc}
	...

08007bb8 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007bc0:	4b03      	ldr	r3, [pc, #12]	; (8007bd0 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	05555555 	.word	0x05555555

08007bd4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff ffe9 	bl	8007bb8 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 8007be6:	4602      	mov	r2, r0
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4293      	cmp	r3, r2
 8007bec:	bf8c      	ite	hi
 8007bee:	2301      	movhi	r3, #1
 8007bf0:	2300      	movls	r3, #0
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bf14      	ite	ne
 8007bf8:	2301      	movne	r3, #1
 8007bfa:	2300      	moveq	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d007      	beq.n	8007c12 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4a0a      	ldr	r2, [pc, #40]	; (8007c30 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d901      	bls.n	8007c0e <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8007c0a:	f00e fe4a 	bl	80168a2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8007c0e:	f00e fe45 	bl	801689c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	4613      	mov	r3, r2
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	4413      	add	r3, r2
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f00e fe29 	bl	8016874 <_Znwj>
 8007c22:	4603      	mov	r3, r0
 8007c24:	bf00      	nop
      }
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	0aaaaaaa 	.word	0x0aaaaaaa

08007c34 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8007c44:	e00d      	b.n	8007c62 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8007c46:	6978      	ldr	r0, [r7, #20]
 8007c48:	f7ff fc18 	bl	800747c <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	68f9      	ldr	r1, [r7, #12]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 f89a 	bl	8007d8a <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3318      	adds	r3, #24
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	3318      	adds	r3, #24
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d1ed      	bne.n	8007c46 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 8007c6a:	697b      	ldr	r3, [r7, #20]
	}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8007c96:	68b8      	ldr	r0, [r7, #8]
 8007c98:	f7fe f92c 	bl	8005ef4 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	68f9      	ldr	r1, [r7, #12]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fe fc7d 	bl	80065a2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8007ca8:	68b8      	ldr	r0, [r7, #8]
 8007caa:	f7ff fb1d 	bl	80072e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff f8fd 	bl	8006eb2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007cd8:	b590      	push	{r4, r7, lr}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff ff19 	bl	8007b1a <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	681c      	ldr	r4, [r3, #0]
 8007cec:	6838      	ldr	r0, [r7, #0]
 8007cee:	f7ff ff14 	bl	8007b1a <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	429c      	cmp	r4, r3
 8007cf8:	bf0c      	ite	eq
 8007cfa:	2301      	moveq	r3, #1
 8007cfc:	2300      	movne	r3, #0
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd90      	pop	{r4, r7, pc}

08007d08 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f103 0208 	add.w	r2, r3, #8
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f7fd fe47 	bl	80059da <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	695a      	ldr	r2, [r3, #20]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	615a      	str	r2, [r3, #20]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8007d5e:	b590      	push	{r4, r7, lr}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8007d68:	6838      	ldr	r0, [r7, #0]
 8007d6a:	f000 f824 	bl	8007db6 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007d6e:	4604      	mov	r4, r0
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4619      	mov	r1, r3
 8007d74:	2018      	movs	r0, #24
 8007d76:	f7fa f80b 	bl	8001d90 <_ZnwjPv>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff ffce 	bl	8007d20 <_ZN3jlb4EdgeC1ERKS0_>
    }
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd90      	pop	{r4, r7, pc}

08007d8a <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8007d8a:	b590      	push	{r4, r7, lr}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8007d94:	6838      	ldr	r0, [r7, #0]
 8007d96:	f000 f819 	bl	8007dcc <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	2018      	movs	r0, #24
 8007da2:	f7f9 fff5 	bl	8001d90 <_ZnwjPv>
 8007da6:	4603      	mov	r3, r0
 8007da8:	4621      	mov	r1, r4
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fd0c 	bl	80067c8 <_ZN3jlb4NodeC1ERKS0_>
    }
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd90      	pop	{r4, r7, pc}

08007db6 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007dec:	4b08      	ldr	r3, [pc, #32]	; (8007e10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007df0:	4907      	ldr	r1, [pc, #28]	; (8007e10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007df8:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e02:	68fb      	ldr	r3, [r7, #12]
}
 8007e04:	bf00      	nop
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	40021000 	.word	0x40021000

08007e14 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8007e1c:	4b08      	ldr	r3, [pc, #32]	; (8007e40 <LL_APB1_GRP2_EnableClock+0x2c>)
 8007e1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e20:	4907      	ldr	r1, [pc, #28]	; (8007e40 <LL_APB1_GRP2_EnableClock+0x2c>)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8007e28:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <LL_APB1_GRP2_EnableClock+0x2c>)
 8007e2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e32:	68fb      	ldr	r3, [r7, #12]
}
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	40021000 	.word	0x40021000

08007e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e48:	f001 ffff 	bl	8009e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e4c:	f000 f858 	bl	8007f00 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e50:	f000 ffae 	bl	8008db0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8007e54:	f000 ff82 	bl	8008d5c <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 8007e58:	f000 fa58 	bl	800830c <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8007e5c:	f000 fb78 	bl	8008550 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 8007e60:	f000 ff18 	bl	8008c94 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 8007e64:	f000 ff4c 	bl	8008d00 <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 8007e68:	f000 fab2 	bl	80083d0 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 8007e6c:	f000 fbc4 	bl	80085f8 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8007e70:	f000 fc04 	bl	800867c <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 8007e74:	f000 fc44 	bl	8008700 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8007e78:	f000 fc84 	bl	8008784 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8007e7c:	f000 fd22 	bl	80088c4 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8007e80:	f000 fb06 	bl	8008490 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8007e84:	f000 f8ac 	bl	8007fe0 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 8007e88:	f000 fd7c 	bl	8008984 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 8007e8c:	f000 f9d2 	bl	8008234 <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 8007e90:	f000 fa1e 	bl	80082d0 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 8007e94:	f000 fe16 	bl	8008ac4 <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8007e98:	f000 fe54 	bl	8008b44 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 8007e9c:	f7f9 feda 	bl	8001c54 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4810      	ldr	r0, [pc, #64]	; (8007ee4 <main+0xa0>)
 8007ea4:	f008 f8e8 	bl	8010078 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	480f      	ldr	r0, [pc, #60]	; (8007ee8 <main+0xa4>)
 8007eac:	f008 f8e4 	bl	8010078 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8007eb0:	210c      	movs	r1, #12
 8007eb2:	480d      	ldr	r0, [pc, #52]	; (8007ee8 <main+0xa4>)
 8007eb4:	f008 f8e0 	bl	8010078 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8007eb8:	213c      	movs	r1, #60	; 0x3c
 8007eba:	480c      	ldr	r0, [pc, #48]	; (8007eec <main+0xa8>)
 8007ebc:	f008 fae9 	bl	8010492 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 8007ec0:	480b      	ldr	r0, [pc, #44]	; (8007ef0 <main+0xac>)
 8007ec2:	f007 ffa9 	bl	800fe18 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8007ec6:	f00c f8a3 	bl	8014010 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007eca:	4a0a      	ldr	r2, [pc, #40]	; (8007ef4 <main+0xb0>)
 8007ecc:	2100      	movs	r1, #0
 8007ece:	480a      	ldr	r0, [pc, #40]	; (8007ef8 <main+0xb4>)
 8007ed0:	f00c f8e8 	bl	80140a4 <osThreadNew>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	4a09      	ldr	r2, [pc, #36]	; (8007efc <main+0xb8>)
 8007ed8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 8007eda:	f7fd fbcb 	bl	8005674 <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8007ede:	f00c f8bb 	bl	8014058 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007ee2:	e7fe      	b.n	8007ee2 <main+0x9e>
 8007ee4:	200007cc 	.word	0x200007cc
 8007ee8:	20000734 	.word	0x20000734
 8007eec:	200006e8 	.word	0x200006e8
 8007ef0:	20000780 	.word	0x20000780
 8007ef4:	080188e8 	.word	0x080188e8
 8007ef8:	08009015 	.word	0x08009015
 8007efc:	20000b0c 	.word	0x20000b0c

08007f00 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b098      	sub	sp, #96	; 0x60
 8007f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f06:	f107 0318 	add.w	r3, r7, #24
 8007f0a:	2248      	movs	r2, #72	; 0x48
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f00f fe60 	bl	8017bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f14:	1d3b      	adds	r3, r7, #4
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	605a      	str	r2, [r3, #4]
 8007f1c:	609a      	str	r2, [r3, #8]
 8007f1e:	60da      	str	r2, [r3, #12]
 8007f20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8007f22:	2000      	movs	r0, #0
 8007f24:	f005 f944 	bl	800d1b0 <HAL_PWREx_ControlVoltageScaling>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bf14      	ite	ne
 8007f2e:	2301      	movne	r3, #1
 8007f30:	2300      	moveq	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8007f38:	f001 f88b 	bl	8009052 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007f3c:	f005 f91a 	bl	800d174 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007f40:	4b26      	ldr	r3, [pc, #152]	; (8007fdc <_Z18SystemClock_Configv+0xdc>)
 8007f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f46:	4a25      	ldr	r2, [pc, #148]	; (8007fdc <_Z18SystemClock_Configv+0xdc>)
 8007f48:	f023 0318 	bic.w	r3, r3, #24
 8007f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8007f50:	2334      	movs	r3, #52	; 0x34
 8007f52:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007f54:	2381      	movs	r3, #129	; 0x81
 8007f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007f60:	2300      	movs	r3, #0
 8007f62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007f64:	2360      	movs	r3, #96	; 0x60
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007f70:	2301      	movs	r3, #1
 8007f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8007f74:	2337      	movs	r3, #55	; 0x37
 8007f76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007f78:	2307      	movs	r3, #7
 8007f7a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007f80:	2302      	movs	r3, #2
 8007f82:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f84:	f107 0318 	add.w	r3, r7, #24
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f005 f9a1 	bl	800d2d0 <HAL_RCC_OscConfig>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bf14      	ite	ne
 8007f94:	2301      	movne	r3, #1
 8007f96:	2300      	moveq	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8007f9e:	f001 f858 	bl	8009052 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fa2:	230f      	movs	r3, #15
 8007fa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	2105      	movs	r1, #5
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f005 fe5e 	bl	800dc7c <HAL_RCC_ClockConfig>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	bf14      	ite	ne
 8007fc6:	2301      	movne	r3, #1
 8007fc8:	2300      	moveq	r3, #0
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8007fd0:	f001 f83f 	bl	8009052 <Error_Handler>
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	3760      	adds	r7, #96	; 0x60
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40021000 	.word	0x40021000

08007fe0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08a      	sub	sp, #40	; 0x28
 8007fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007fe6:	f107 031c 	add.w	r3, r7, #28
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	605a      	str	r2, [r3, #4]
 8007ff0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007ff2:	1d3b      	adds	r3, r7, #4
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
 8007ffc:	60da      	str	r2, [r3, #12]
 8007ffe:	611a      	str	r2, [r3, #16]
 8008000:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008002:	4b82      	ldr	r3, [pc, #520]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008004:	4a82      	ldr	r2, [pc, #520]	; (8008210 <_ZL12MX_ADC1_Initv+0x230>)
 8008006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008008:	4b80      	ldr	r3, [pc, #512]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 800800a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800800e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008010:	4b7e      	ldr	r3, [pc, #504]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008012:	2200      	movs	r2, #0
 8008014:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008016:	4b7d      	ldr	r3, [pc, #500]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008018:	2200      	movs	r2, #0
 800801a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800801c:	4b7b      	ldr	r3, [pc, #492]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 800801e:	2201      	movs	r2, #1
 8008020:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008022:	4b7a      	ldr	r3, [pc, #488]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008024:	2208      	movs	r2, #8
 8008026:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8008028:	4b78      	ldr	r3, [pc, #480]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 800802a:	2201      	movs	r2, #1
 800802c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800802e:	4b77      	ldr	r3, [pc, #476]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008030:	2200      	movs	r2, #0
 8008032:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8008034:	4b75      	ldr	r3, [pc, #468]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008036:	2208      	movs	r2, #8
 8008038:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800803a:	4b74      	ldr	r3, [pc, #464]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008042:	4b72      	ldr	r3, [pc, #456]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008044:	2200      	movs	r2, #0
 8008046:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008048:	4b70      	ldr	r3, [pc, #448]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 800804a:	2200      	movs	r2, #0
 800804c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800804e:	4b6f      	ldr	r3, [pc, #444]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008056:	4b6d      	ldr	r3, [pc, #436]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008058:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800805c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800805e:	4b6b      	ldr	r3, [pc, #428]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8008066:	4b69      	ldr	r3, [pc, #420]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008068:	2214      	movs	r2, #20
 800806a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 800806c:	4b67      	ldr	r3, [pc, #412]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 800806e:	22c0      	movs	r2, #192	; 0xc0
 8008070:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8008072:	4b66      	ldr	r3, [pc, #408]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008074:	2200      	movs	r2, #0
 8008076:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8008078:	4b64      	ldr	r3, [pc, #400]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 800807a:	2201      	movs	r2, #1
 800807c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800807e:	4863      	ldr	r0, [pc, #396]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008080:	f002 f928 	bl	800a2d4 <HAL_ADC_Init>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	bf14      	ite	ne
 800808a:	2301      	movne	r3, #1
 800808c:	2300      	moveq	r3, #0
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 8008094:	f000 ffdd 	bl	8009052 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008098:	2300      	movs	r3, #0
 800809a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800809c:	f107 031c 	add.w	r3, r7, #28
 80080a0:	4619      	mov	r1, r3
 80080a2:	485a      	ldr	r0, [pc, #360]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 80080a4:	f003 faaa 	bl	800b5fc <HAL_ADCEx_MultiModeConfigChannel>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	bf14      	ite	ne
 80080ae:	2301      	movne	r3, #1
 80080b0:	2300      	moveq	r3, #0
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 80080b8:	f000 ffcb 	bl	8009052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80080bc:	4b55      	ldr	r3, [pc, #340]	; (8008214 <_ZL12MX_ADC1_Initv+0x234>)
 80080be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80080c0:	2306      	movs	r3, #6
 80080c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80080c4:	2301      	movs	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80080c8:	237f      	movs	r3, #127	; 0x7f
 80080ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80080cc:	2304      	movs	r3, #4
 80080ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080d4:	1d3b      	adds	r3, r7, #4
 80080d6:	4619      	mov	r1, r3
 80080d8:	484c      	ldr	r0, [pc, #304]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 80080da:	f002 fd33 	bl	800ab44 <HAL_ADC_ConfigChannel>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bf14      	ite	ne
 80080e4:	2301      	movne	r3, #1
 80080e6:	2300      	moveq	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 80080ee:	f000 ffb0 	bl	8009052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80080f2:	4b49      	ldr	r3, [pc, #292]	; (8008218 <_ZL12MX_ADC1_Initv+0x238>)
 80080f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80080f6:	230c      	movs	r3, #12
 80080f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080fa:	1d3b      	adds	r3, r7, #4
 80080fc:	4619      	mov	r1, r3
 80080fe:	4843      	ldr	r0, [pc, #268]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008100:	f002 fd20 	bl	800ab44 <HAL_ADC_ConfigChannel>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	bf14      	ite	ne
 800810a:	2301      	movne	r3, #1
 800810c:	2300      	moveq	r3, #0
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 8008114:	f000 ff9d 	bl	8009052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008118:	4b40      	ldr	r3, [pc, #256]	; (800821c <_ZL12MX_ADC1_Initv+0x23c>)
 800811a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800811c:	2312      	movs	r3, #18
 800811e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008120:	1d3b      	adds	r3, r7, #4
 8008122:	4619      	mov	r1, r3
 8008124:	4839      	ldr	r0, [pc, #228]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008126:	f002 fd0d 	bl	800ab44 <HAL_ADC_ConfigChannel>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	bf14      	ite	ne
 8008130:	2301      	movne	r3, #1
 8008132:	2300      	moveq	r3, #0
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 800813a:	f000 ff8a 	bl	8009052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800813e:	4b38      	ldr	r3, [pc, #224]	; (8008220 <_ZL12MX_ADC1_Initv+0x240>)
 8008140:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008142:	2318      	movs	r3, #24
 8008144:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008146:	1d3b      	adds	r3, r7, #4
 8008148:	4619      	mov	r1, r3
 800814a:	4830      	ldr	r0, [pc, #192]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 800814c:	f002 fcfa 	bl	800ab44 <HAL_ADC_ConfigChannel>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	bf14      	ite	ne
 8008156:	2301      	movne	r3, #1
 8008158:	2300      	moveq	r3, #0
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 8008160:	f000 ff77 	bl	8009052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8008164:	4b2f      	ldr	r3, [pc, #188]	; (8008224 <_ZL12MX_ADC1_Initv+0x244>)
 8008166:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800816c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	4619      	mov	r1, r3
 8008172:	4826      	ldr	r0, [pc, #152]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 8008174:	f002 fce6 	bl	800ab44 <HAL_ADC_ConfigChannel>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	bf14      	ite	ne
 800817e:	2301      	movne	r3, #1
 8008180:	2300      	moveq	r3, #0
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 8008188:	f000 ff63 	bl	8009052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800818c:	4b26      	ldr	r3, [pc, #152]	; (8008228 <_ZL12MX_ADC1_Initv+0x248>)
 800818e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008190:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008194:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008196:	1d3b      	adds	r3, r7, #4
 8008198:	4619      	mov	r1, r3
 800819a:	481c      	ldr	r0, [pc, #112]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 800819c:	f002 fcd2 	bl	800ab44 <HAL_ADC_ConfigChannel>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bf14      	ite	ne
 80081a6:	2301      	movne	r3, #1
 80081a8:	2300      	moveq	r3, #0
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 80081b0:	f000 ff4f 	bl	8009052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80081b4:	4b1d      	ldr	r3, [pc, #116]	; (800822c <_ZL12MX_ADC1_Initv+0x24c>)
 80081b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80081b8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80081bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081be:	1d3b      	adds	r3, r7, #4
 80081c0:	4619      	mov	r1, r3
 80081c2:	4812      	ldr	r0, [pc, #72]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 80081c4:	f002 fcbe 	bl	800ab44 <HAL_ADC_ConfigChannel>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bf14      	ite	ne
 80081ce:	2301      	movne	r3, #1
 80081d0:	2300      	moveq	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 80081d8:	f000 ff3b 	bl	8009052 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80081dc:	4b14      	ldr	r3, [pc, #80]	; (8008230 <_ZL12MX_ADC1_Initv+0x250>)
 80081de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80081e0:	f44f 7389 	mov.w	r3, #274	; 0x112
 80081e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081e6:	1d3b      	adds	r3, r7, #4
 80081e8:	4619      	mov	r1, r3
 80081ea:	4808      	ldr	r0, [pc, #32]	; (800820c <_ZL12MX_ADC1_Initv+0x22c>)
 80081ec:	f002 fcaa 	bl	800ab44 <HAL_ADC_ConfigChannel>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bf14      	ite	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	2300      	moveq	r3, #0
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 8008200:	f000 ff27 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008204:	bf00      	nop
 8008206:	3728      	adds	r7, #40	; 0x28
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	20000268 	.word	0x20000268
 8008210:	42028000 	.word	0x42028000
 8008214:	04300002 	.word	0x04300002
 8008218:	08600004 	.word	0x08600004
 800821c:	0c900008 	.word	0x0c900008
 8008220:	1d500080 	.word	0x1d500080
 8008224:	21800100 	.word	0x21800100
 8008228:	25b00200 	.word	0x25b00200
 800822c:	32601000 	.word	0x32601000
 8008230:	43210000 	.word	0x43210000

08008234 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008238:	4b22      	ldr	r3, [pc, #136]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 800823a:	4a23      	ldr	r2, [pc, #140]	; (80082c8 <_ZL12MX_I2C1_Initv+0x94>)
 800823c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 800823e:	4b21      	ldr	r3, [pc, #132]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 8008240:	4a22      	ldr	r2, [pc, #136]	; (80082cc <_ZL12MX_I2C1_Initv+0x98>)
 8008242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008244:	4b1f      	ldr	r3, [pc, #124]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 8008246:	2200      	movs	r2, #0
 8008248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800824a:	4b1e      	ldr	r3, [pc, #120]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 800824c:	2201      	movs	r2, #1
 800824e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008250:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 8008252:	2200      	movs	r2, #0
 8008254:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008256:	4b1b      	ldr	r3, [pc, #108]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 8008258:	2200      	movs	r2, #0
 800825a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800825c:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 800825e:	2200      	movs	r2, #0
 8008260:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008262:	4b18      	ldr	r3, [pc, #96]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 8008264:	2200      	movs	r2, #0
 8008266:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008268:	4b16      	ldr	r3, [pc, #88]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 800826a:	2200      	movs	r2, #0
 800826c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800826e:	4815      	ldr	r0, [pc, #84]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 8008270:	f004 f8a8 	bl	800c3c4 <HAL_I2C_Init>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf14      	ite	ne
 800827a:	2301      	movne	r3, #1
 800827c:	2300      	moveq	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8008284:	f000 fee5 	bl	8009052 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008288:	2100      	movs	r1, #0
 800828a:	480e      	ldr	r0, [pc, #56]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 800828c:	f004 fda6 	bl	800cddc <HAL_I2CEx_ConfigAnalogFilter>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	bf14      	ite	ne
 8008296:	2301      	movne	r3, #1
 8008298:	2300      	moveq	r3, #0
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80082a0:	f000 fed7 	bl	8009052 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80082a4:	2100      	movs	r1, #0
 80082a6:	4807      	ldr	r0, [pc, #28]	; (80082c4 <_ZL12MX_I2C1_Initv+0x90>)
 80082a8:	f004 fde3 	bl	800ce72 <HAL_I2CEx_ConfigDigitalFilter>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bf14      	ite	ne
 80082b2:	2301      	movne	r3, #1
 80082b4:	2300      	moveq	r3, #0
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80082bc:	f000 fec9 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80082c0:	bf00      	nop
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	20000338 	.word	0x20000338
 80082c8:	40005400 	.word	0x40005400
 80082cc:	60514452 	.word	0x60514452

080082d0 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80082d4:	2000      	movs	r0, #0
 80082d6:	f004 fe19 	bl	800cf0c <HAL_ICACHE_ConfigAssociativityMode>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bf14      	ite	ne
 80082e0:	2301      	movne	r3, #1
 80082e2:	2300      	moveq	r3, #0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 80082ea:	f000 feb2 	bl	8009052 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80082ee:	f004 fe2d 	bl	800cf4c <HAL_ICACHE_Enable>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	bf14      	ite	ne
 80082f8:	2301      	movne	r3, #1
 80082fa:	2300      	moveq	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 8008302:	f000 fea6 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8008306:	bf00      	nop
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008310:	4b2c      	ldr	r3, [pc, #176]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008312:	4a2d      	ldr	r2, [pc, #180]	; (80083c8 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8008314:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8008316:	4b2b      	ldr	r3, [pc, #172]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008318:	4a2c      	ldr	r2, [pc, #176]	; (80083cc <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 800831a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800831c:	4b29      	ldr	r3, [pc, #164]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800831e:	2200      	movs	r2, #0
 8008320:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008322:	4b28      	ldr	r3, [pc, #160]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008324:	2200      	movs	r2, #0
 8008326:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008328:	4b26      	ldr	r3, [pc, #152]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800832a:	2200      	movs	r2, #0
 800832c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800832e:	4b25      	ldr	r3, [pc, #148]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008330:	220c      	movs	r2, #12
 8008332:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008334:	4b23      	ldr	r3, [pc, #140]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008336:	2200      	movs	r2, #0
 8008338:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800833a:	4b22      	ldr	r3, [pc, #136]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800833c:	2200      	movs	r2, #0
 800833e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008340:	4b20      	ldr	r3, [pc, #128]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008342:	2200      	movs	r2, #0
 8008344:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008346:	4b1f      	ldr	r3, [pc, #124]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008348:	2200      	movs	r2, #0
 800834a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800834c:	4b1d      	ldr	r3, [pc, #116]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800834e:	2200      	movs	r2, #0
 8008350:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008352:	481c      	ldr	r0, [pc, #112]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008354:	f009 fb88 	bl	8011a68 <HAL_UART_Init>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	bf14      	ite	ne
 800835e:	2301      	movne	r3, #1
 8008360:	2300      	moveq	r3, #0
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 8008368:	f000 fe73 	bl	8009052 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800836c:	2100      	movs	r1, #0
 800836e:	4815      	ldr	r0, [pc, #84]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008370:	f00b fb4b 	bl	8013a0a <HAL_UARTEx_SetTxFifoThreshold>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	bf14      	ite	ne
 800837a:	2301      	movne	r3, #1
 800837c:	2300      	moveq	r3, #0
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8008384:	f000 fe65 	bl	8009052 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008388:	2100      	movs	r1, #0
 800838a:	480e      	ldr	r0, [pc, #56]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800838c:	f00b fb7b 	bl	8013a86 <HAL_UARTEx_SetRxFifoThreshold>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	bf14      	ite	ne
 8008396:	2301      	movne	r3, #1
 8008398:	2300      	moveq	r3, #0
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 80083a0:	f000 fe57 	bl	8009052 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80083a4:	4807      	ldr	r0, [pc, #28]	; (80083c4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80083a6:	f00b faf7 	bl	8013998 <HAL_UARTEx_DisableFifoMode>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bf14      	ite	ne
 80083b0:	2301      	movne	r3, #1
 80083b2:	2300      	moveq	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 80083ba:	f000 fe4a 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80083be:	bf00      	nop
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	2000038c 	.word	0x2000038c
 80083c8:	40008000 	.word	0x40008000
 80083cc:	00033324 	.word	0x00033324

080083d0 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80083d4:	4b2c      	ldr	r3, [pc, #176]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 80083d6:	4a2d      	ldr	r2, [pc, #180]	; (800848c <_ZL13MX_UART4_Initv+0xbc>)
 80083d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80083da:	4b2b      	ldr	r3, [pc, #172]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 80083dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80083e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80083e2:	4b29      	ldr	r3, [pc, #164]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80083e8:	4b27      	ldr	r3, [pc, #156]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80083ee:	4b26      	ldr	r3, [pc, #152]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 80083f4:	4b24      	ldr	r3, [pc, #144]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 80083f6:	2204      	movs	r2, #4
 80083f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083fa:	4b23      	ldr	r3, [pc, #140]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008400:	4b21      	ldr	r3, [pc, #132]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 8008402:	2200      	movs	r2, #0
 8008404:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008406:	4b20      	ldr	r3, [pc, #128]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 8008408:	2200      	movs	r2, #0
 800840a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800840c:	4b1e      	ldr	r3, [pc, #120]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 800840e:	2200      	movs	r2, #0
 8008410:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008412:	4b1d      	ldr	r3, [pc, #116]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 8008414:	2200      	movs	r2, #0
 8008416:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8008418:	481b      	ldr	r0, [pc, #108]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 800841a:	f009 fb25 	bl	8011a68 <HAL_UART_Init>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	bf14      	ite	ne
 8008424:	2301      	movne	r3, #1
 8008426:	2300      	moveq	r3, #0
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 800842e:	f000 fe10 	bl	8009052 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008432:	2100      	movs	r1, #0
 8008434:	4814      	ldr	r0, [pc, #80]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 8008436:	f00b fae8 	bl	8013a0a <HAL_UARTEx_SetTxFifoThreshold>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	bf14      	ite	ne
 8008440:	2301      	movne	r3, #1
 8008442:	2300      	moveq	r3, #0
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 800844a:	f000 fe02 	bl	8009052 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800844e:	2100      	movs	r1, #0
 8008450:	480d      	ldr	r0, [pc, #52]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 8008452:	f00b fb18 	bl	8013a86 <HAL_UARTEx_SetRxFifoThreshold>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	bf14      	ite	ne
 800845c:	2301      	movne	r3, #1
 800845e:	2300      	moveq	r3, #0
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 8008466:	f000 fdf4 	bl	8009052 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800846a:	4807      	ldr	r0, [pc, #28]	; (8008488 <_ZL13MX_UART4_Initv+0xb8>)
 800846c:	f00b fa94 	bl	8013998 <HAL_UARTEx_DisableFifoMode>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	bf14      	ite	ne
 8008476:	2301      	movne	r3, #1
 8008478:	2300      	moveq	r3, #0
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 8008480:	f000 fde7 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8008484:	bf00      	nop
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20000420 	.word	0x20000420
 800848c:	40004c00 	.word	0x40004c00

08008490 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008494:	4b2c      	ldr	r3, [pc, #176]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8008496:	4a2d      	ldr	r2, [pc, #180]	; (800854c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8008498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800849a:	4b2b      	ldr	r3, [pc, #172]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800849c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80084a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80084a2:	4b29      	ldr	r3, [pc, #164]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80084a8:	4b27      	ldr	r3, [pc, #156]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80084ae:	4b26      	ldr	r3, [pc, #152]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80084b4:	4b24      	ldr	r3, [pc, #144]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084b6:	220c      	movs	r2, #12
 80084b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80084ba:	4b23      	ldr	r3, [pc, #140]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084bc:	2200      	movs	r2, #0
 80084be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80084c0:	4b21      	ldr	r3, [pc, #132]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80084c6:	4b20      	ldr	r3, [pc, #128]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80084cc:	4b1e      	ldr	r3, [pc, #120]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80084d2:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80084d8:	481b      	ldr	r0, [pc, #108]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084da:	f009 fac5 	bl	8011a68 <HAL_UART_Init>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	bf14      	ite	ne
 80084e4:	2301      	movne	r3, #1
 80084e6:	2300      	moveq	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80084ee:	f000 fdb0 	bl	8009052 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80084f2:	2100      	movs	r1, #0
 80084f4:	4814      	ldr	r0, [pc, #80]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80084f6:	f00b fa88 	bl	8013a0a <HAL_UARTEx_SetTxFifoThreshold>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bf14      	ite	ne
 8008500:	2301      	movne	r3, #1
 8008502:	2300      	moveq	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800850a:	f000 fda2 	bl	8009052 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800850e:	2100      	movs	r1, #0
 8008510:	480d      	ldr	r0, [pc, #52]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8008512:	f00b fab8 	bl	8013a86 <HAL_UARTEx_SetRxFifoThreshold>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	bf14      	ite	ne
 800851c:	2301      	movne	r3, #1
 800851e:	2300      	moveq	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8008526:	f000 fd94 	bl	8009052 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800852a:	4807      	ldr	r0, [pc, #28]	; (8008548 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800852c:	f00b fa34 	bl	8013998 <HAL_UARTEx_DisableFifoMode>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	bf14      	ite	ne
 8008536:	2301      	movne	r3, #1
 8008538:	2300      	moveq	r3, #0
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8008540:	f000 fd87 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008544:	bf00      	nop
 8008546:	bd80      	pop	{r7, pc}
 8008548:	200004b4 	.word	0x200004b4
 800854c:	40004400 	.word	0x40004400

08008550 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8008556:	463b      	mov	r3, r7
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	605a      	str	r2, [r3, #4]
 800855e:	609a      	str	r2, [r3, #8]
 8008560:	60da      	str	r2, [r3, #12]
 8008562:	611a      	str	r2, [r3, #16]
 8008564:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008566:	4b22      	ldr	r3, [pc, #136]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 8008568:	4a22      	ldr	r2, [pc, #136]	; (80085f4 <_ZL11MX_RTC_Initv+0xa4>)
 800856a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800856c:	4b20      	ldr	r3, [pc, #128]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 800856e:	2200      	movs	r2, #0
 8008570:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008572:	4b1f      	ldr	r3, [pc, #124]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 8008574:	227f      	movs	r2, #127	; 0x7f
 8008576:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 800857a:	22ff      	movs	r2, #255	; 0xff
 800857c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800857e:	4b1c      	ldr	r3, [pc, #112]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 8008580:	2200      	movs	r2, #0
 8008582:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008584:	4b1a      	ldr	r3, [pc, #104]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 8008586:	2200      	movs	r2, #0
 8008588:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800858a:	4b19      	ldr	r3, [pc, #100]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 800858c:	2200      	movs	r2, #0
 800858e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008590:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 8008592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008596:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8008598:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 800859a:	2200      	movs	r2, #0
 800859c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800859e:	4814      	ldr	r0, [pc, #80]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 80085a0:	f006 fb98 	bl	800ecd4 <HAL_RTC_Init>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	bf14      	ite	ne
 80085aa:	2301      	movne	r3, #1
 80085ac:	2300      	moveq	r3, #0
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 80085b4:	f000 fd4d 	bl	8009052 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80085b8:	2300      	movs	r3, #0
 80085ba:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80085c8:	463b      	mov	r3, r7
 80085ca:	4619      	mov	r1, r3
 80085cc:	4808      	ldr	r0, [pc, #32]	; (80085f0 <_ZL11MX_RTC_Initv+0xa0>)
 80085ce:	f006 fc8f 	bl	800eef0 <HAL_RTCEx_PrivilegeModeSet>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bf14      	ite	ne
 80085d8:	2301      	movne	r3, #1
 80085da:	2300      	moveq	r3, #0
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 80085e2:	f000 fd36 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80085e6:	bf00      	nop
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000548 	.word	0x20000548
 80085f4:	40002800 	.word	0x40002800

080085f8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80085fc:	4b1d      	ldr	r3, [pc, #116]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 80085fe:	4a1e      	ldr	r2, [pc, #120]	; (8008678 <_ZL12MX_SPI1_Initv+0x80>)
 8008600:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008602:	4b1c      	ldr	r3, [pc, #112]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 8008604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008608:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800860a:	4b1a      	ldr	r3, [pc, #104]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 800860c:	2200      	movs	r2, #0
 800860e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008610:	4b18      	ldr	r3, [pc, #96]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 8008612:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008616:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008618:	4b16      	ldr	r3, [pc, #88]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 800861a:	2200      	movs	r2, #0
 800861c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800861e:	4b15      	ldr	r3, [pc, #84]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 8008620:	2200      	movs	r2, #0
 8008622:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008624:	4b13      	ldr	r3, [pc, #76]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 8008626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800862a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800862c:	4b11      	ldr	r3, [pc, #68]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 800862e:	2228      	movs	r2, #40	; 0x28
 8008630:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008632:	4b10      	ldr	r3, [pc, #64]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 8008634:	2200      	movs	r2, #0
 8008636:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008638:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 800863a:	2200      	movs	r2, #0
 800863c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800863e:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 8008640:	2200      	movs	r2, #0
 8008642:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008644:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 8008646:	2207      	movs	r2, #7
 8008648:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800864a:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 800864c:	2200      	movs	r2, #0
 800864e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008650:	4b08      	ldr	r3, [pc, #32]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 8008652:	2208      	movs	r2, #8
 8008654:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008656:	4807      	ldr	r0, [pc, #28]	; (8008674 <_ZL12MX_SPI1_Initv+0x7c>)
 8008658:	f006 fc76 	bl	800ef48 <HAL_SPI_Init>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	bf14      	ite	ne
 8008662:	2301      	movne	r3, #1
 8008664:	2300      	moveq	r3, #0
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 800866c:	f000 fcf1 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008670:	bf00      	nop
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20000570 	.word	0x20000570
 8008678:	40013000 	.word	0x40013000

0800867c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008680:	4b1d      	ldr	r3, [pc, #116]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 8008682:	4a1e      	ldr	r2, [pc, #120]	; (80086fc <_ZL12MX_SPI2_Initv+0x80>)
 8008684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008686:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 8008688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800868c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800868e:	4b1a      	ldr	r3, [pc, #104]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 8008690:	2200      	movs	r2, #0
 8008692:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008694:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 8008696:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800869a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800869c:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 800869e:	2200      	movs	r2, #0
 80086a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80086a2:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80086a8:	4b13      	ldr	r3, [pc, #76]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 80086aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80086b0:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 80086b2:	2218      	movs	r2, #24
 80086b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 80086b8:	2280      	movs	r2, #128	; 0x80
 80086ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80086bc:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 80086be:	2200      	movs	r2, #0
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086c2:	4b0d      	ldr	r3, [pc, #52]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80086c8:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 80086ca:	2207      	movs	r2, #7
 80086cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80086ce:	4b0a      	ldr	r3, [pc, #40]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80086d4:	4b08      	ldr	r3, [pc, #32]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 80086d6:	2208      	movs	r2, #8
 80086d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80086da:	4807      	ldr	r0, [pc, #28]	; (80086f8 <_ZL12MX_SPI2_Initv+0x7c>)
 80086dc:	f006 fc34 	bl	800ef48 <HAL_SPI_Init>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bf14      	ite	ne
 80086e6:	2301      	movne	r3, #1
 80086e8:	2300      	moveq	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 80086f0:	f000 fcaf 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80086f4:	bf00      	nop
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	200005d4 	.word	0x200005d4
 80086fc:	40003800 	.word	0x40003800

08008700 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8008704:	4b1d      	ldr	r3, [pc, #116]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 8008706:	4a1e      	ldr	r2, [pc, #120]	; (8008780 <_ZL12MX_SPI3_Initv+0x80>)
 8008708:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800870a:	4b1c      	ldr	r3, [pc, #112]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 800870c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008710:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008712:	4b1a      	ldr	r3, [pc, #104]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 8008714:	2200      	movs	r2, #0
 8008716:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008718:	4b18      	ldr	r3, [pc, #96]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 800871a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800871e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008720:	4b16      	ldr	r3, [pc, #88]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 8008722:	2200      	movs	r2, #0
 8008724:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008726:	4b15      	ldr	r3, [pc, #84]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 8008728:	2200      	movs	r2, #0
 800872a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800872c:	4b13      	ldr	r3, [pc, #76]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 800872e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008732:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008734:	4b11      	ldr	r3, [pc, #68]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 8008736:	2218      	movs	r2, #24
 8008738:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800873a:	4b10      	ldr	r3, [pc, #64]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 800873c:	2200      	movs	r2, #0
 800873e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008740:	4b0e      	ldr	r3, [pc, #56]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 8008742:	2200      	movs	r2, #0
 8008744:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008746:	4b0d      	ldr	r3, [pc, #52]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 8008748:	2200      	movs	r2, #0
 800874a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800874c:	4b0b      	ldr	r3, [pc, #44]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 800874e:	2207      	movs	r2, #7
 8008750:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008752:	4b0a      	ldr	r3, [pc, #40]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 8008754:	2200      	movs	r2, #0
 8008756:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008758:	4b08      	ldr	r3, [pc, #32]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 800875a:	2208      	movs	r2, #8
 800875c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800875e:	4807      	ldr	r0, [pc, #28]	; (800877c <_ZL12MX_SPI3_Initv+0x7c>)
 8008760:	f006 fbf2 	bl	800ef48 <HAL_SPI_Init>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	bf14      	ite	ne
 800876a:	2301      	movne	r3, #1
 800876c:	2300      	moveq	r3, #0
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 8008774:	f000 fc6d 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008778:	bf00      	nop
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20000638 	.word	0x20000638
 8008780:	40003c00 	.word	0x40003c00

08008784 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08c      	sub	sp, #48	; 0x30
 8008788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800878a:	f107 0320 	add.w	r3, r7, #32
 800878e:	2200      	movs	r2, #0
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	605a      	str	r2, [r3, #4]
 8008794:	609a      	str	r2, [r3, #8]
 8008796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008798:	f107 0314 	add.w	r3, r7, #20
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	605a      	str	r2, [r3, #4]
 80087a2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80087a4:	1d3b      	adds	r3, r7, #4
 80087a6:	2200      	movs	r2, #0
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	605a      	str	r2, [r3, #4]
 80087ac:	609a      	str	r2, [r3, #8]
 80087ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80087b0:	4b42      	ldr	r3, [pc, #264]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 80087b2:	4a43      	ldr	r2, [pc, #268]	; (80088c0 <_ZL12MX_TIM1_Initv+0x13c>)
 80087b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 80087b6:	4b41      	ldr	r3, [pc, #260]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 80087b8:	226e      	movs	r2, #110	; 0x6e
 80087ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087bc:	4b3f      	ldr	r3, [pc, #252]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 80087be:	2200      	movs	r2, #0
 80087c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80087c2:	4b3e      	ldr	r3, [pc, #248]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 80087c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087ca:	4b3c      	ldr	r3, [pc, #240]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80087d0:	4b3a      	ldr	r3, [pc, #232]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80087d6:	4b39      	ldr	r3, [pc, #228]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 80087d8:	2280      	movs	r2, #128	; 0x80
 80087da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80087dc:	4837      	ldr	r0, [pc, #220]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 80087de:	f007 fac3 	bl	800fd68 <HAL_TIM_Base_Init>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bf14      	ite	ne
 80087e8:	2301      	movne	r3, #1
 80087ea:	2300      	moveq	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 80087f2:	f000 fc2e 	bl	8009052 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80087fc:	f107 0320 	add.w	r3, r7, #32
 8008800:	4619      	mov	r1, r3
 8008802:	482e      	ldr	r0, [pc, #184]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 8008804:	f008 f9a2 	bl	8010b4c <HAL_TIM_ConfigClockSource>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	bf14      	ite	ne
 800880e:	2301      	movne	r3, #1
 8008810:	2300      	moveq	r3, #0
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 8008818:	f000 fc1b 	bl	8009052 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800881c:	4827      	ldr	r0, [pc, #156]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 800881e:	f007 fd31 	bl	8010284 <HAL_TIM_IC_Init>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	bf14      	ite	ne
 8008828:	2301      	movne	r3, #1
 800882a:	2300      	moveq	r3, #0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8008832:	f000 fc0e 	bl	8009052 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800883a:	2300      	movs	r3, #0
 800883c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800883e:	2300      	movs	r3, #0
 8008840:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008842:	f107 0314 	add.w	r3, r7, #20
 8008846:	4619      	mov	r1, r3
 8008848:	481c      	ldr	r0, [pc, #112]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 800884a:	f008 ffc7 	bl	80117dc <HAL_TIMEx_MasterConfigSynchronization>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	bf14      	ite	ne
 8008854:	2301      	movne	r3, #1
 8008856:	2300      	moveq	r3, #0
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 800885e:	f000 fbf8 	bl	8009052 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008862:	2300      	movs	r3, #0
 8008864:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008866:	2301      	movs	r3, #1
 8008868:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8008872:	1d3b      	adds	r3, r7, #4
 8008874:	2208      	movs	r2, #8
 8008876:	4619      	mov	r1, r3
 8008878:	4810      	ldr	r0, [pc, #64]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 800887a:	f007 ffb7 	bl	80107ec <HAL_TIM_IC_ConfigChannel>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	bf14      	ite	ne
 8008884:	2301      	movne	r3, #1
 8008886:	2300      	moveq	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 800888e:	f000 fbe0 	bl	8009052 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8008892:	1d3b      	adds	r3, r7, #4
 8008894:	220c      	movs	r2, #12
 8008896:	4619      	mov	r1, r3
 8008898:	4808      	ldr	r0, [pc, #32]	; (80088bc <_ZL12MX_TIM1_Initv+0x138>)
 800889a:	f007 ffa7 	bl	80107ec <HAL_TIM_IC_ConfigChannel>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bf14      	ite	ne
 80088a4:	2301      	movne	r3, #1
 80088a6:	2300      	moveq	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 80088ae:	f000 fbd0 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80088b2:	bf00      	nop
 80088b4:	3730      	adds	r7, #48	; 0x30
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	2000069c 	.word	0x2000069c
 80088c0:	40012c00 	.word	0x40012c00

080088c4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08c      	sub	sp, #48	; 0x30
 80088c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80088ca:	f107 030c 	add.w	r3, r7, #12
 80088ce:	2224      	movs	r2, #36	; 0x24
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f00f f97e 	bl	8017bd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088d8:	463b      	mov	r3, r7
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	605a      	str	r2, [r3, #4]
 80088e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80088e2:	4b26      	ldr	r3, [pc, #152]	; (800897c <_ZL12MX_TIM3_Initv+0xb8>)
 80088e4:	4a26      	ldr	r2, [pc, #152]	; (8008980 <_ZL12MX_TIM3_Initv+0xbc>)
 80088e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80088e8:	4b24      	ldr	r3, [pc, #144]	; (800897c <_ZL12MX_TIM3_Initv+0xb8>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088ee:	4b23      	ldr	r3, [pc, #140]	; (800897c <_ZL12MX_TIM3_Initv+0xb8>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80088f4:	4b21      	ldr	r3, [pc, #132]	; (800897c <_ZL12MX_TIM3_Initv+0xb8>)
 80088f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088fc:	4b1f      	ldr	r3, [pc, #124]	; (800897c <_ZL12MX_TIM3_Initv+0xb8>)
 80088fe:	2200      	movs	r2, #0
 8008900:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008902:	4b1e      	ldr	r3, [pc, #120]	; (800897c <_ZL12MX_TIM3_Initv+0xb8>)
 8008904:	2200      	movs	r2, #0
 8008906:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008908:	2303      	movs	r3, #3
 800890a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800890c:	2300      	movs	r3, #0
 800890e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008910:	2301      	movs	r3, #1
 8008912:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008914:	2300      	movs	r3, #0
 8008916:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800891c:	2300      	movs	r3, #0
 800891e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008920:	2301      	movs	r3, #1
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008924:	2300      	movs	r3, #0
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800892c:	f107 030c 	add.w	r3, r7, #12
 8008930:	4619      	mov	r1, r3
 8008932:	4812      	ldr	r0, [pc, #72]	; (800897c <_ZL12MX_TIM3_Initv+0xb8>)
 8008934:	f007 fd07 	bl	8010346 <HAL_TIM_Encoder_Init>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	bf14      	ite	ne
 800893e:	2301      	movne	r3, #1
 8008940:	2300      	moveq	r3, #0
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8008948:	f000 fb83 	bl	8009052 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800894c:	2300      	movs	r3, #0
 800894e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008950:	2300      	movs	r3, #0
 8008952:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008954:	463b      	mov	r3, r7
 8008956:	4619      	mov	r1, r3
 8008958:	4808      	ldr	r0, [pc, #32]	; (800897c <_ZL12MX_TIM3_Initv+0xb8>)
 800895a:	f008 ff3f 	bl	80117dc <HAL_TIMEx_MasterConfigSynchronization>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	bf14      	ite	ne
 8008964:	2301      	movne	r3, #1
 8008966:	2300      	moveq	r3, #0
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 800896e:	f000 fb70 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008972:	bf00      	nop
 8008974:	3730      	adds	r7, #48	; 0x30
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	200006e8 	.word	0x200006e8
 8008980:	40000400 	.word	0x40000400

08008984 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08e      	sub	sp, #56	; 0x38
 8008988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800898a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	605a      	str	r2, [r3, #4]
 8008994:	609a      	str	r2, [r3, #8]
 8008996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008998:	f107 031c 	add.w	r3, r7, #28
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	605a      	str	r2, [r3, #4]
 80089a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80089a4:	463b      	mov	r3, r7
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	605a      	str	r2, [r3, #4]
 80089ac:	609a      	str	r2, [r3, #8]
 80089ae:	60da      	str	r2, [r3, #12]
 80089b0:	611a      	str	r2, [r3, #16]
 80089b2:	615a      	str	r2, [r3, #20]
 80089b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80089b6:	4b41      	ldr	r3, [pc, #260]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 80089b8:	4a41      	ldr	r2, [pc, #260]	; (8008ac0 <_ZL12MX_TIM5_Initv+0x13c>)
 80089ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80089bc:	4b3f      	ldr	r3, [pc, #252]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 80089be:	2200      	movs	r2, #0
 80089c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80089c2:	4b3e      	ldr	r3, [pc, #248]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 80089c4:	2220      	movs	r2, #32
 80089c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 80089c8:	4b3c      	ldr	r3, [pc, #240]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 80089ca:	f240 722a 	movw	r2, #1834	; 0x72a
 80089ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089d0:	4b3a      	ldr	r3, [pc, #232]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80089d6:	4b39      	ldr	r3, [pc, #228]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 80089d8:	2280      	movs	r2, #128	; 0x80
 80089da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80089dc:	4837      	ldr	r0, [pc, #220]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 80089de:	f007 f9c3 	bl	800fd68 <HAL_TIM_Base_Init>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	bf14      	ite	ne
 80089e8:	2301      	movne	r3, #1
 80089ea:	2300      	moveq	r3, #0
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 80089f2:	f000 fb2e 	bl	8009052 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80089f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80089fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a00:	4619      	mov	r1, r3
 8008a02:	482e      	ldr	r0, [pc, #184]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 8008a04:	f008 f8a2 	bl	8010b4c <HAL_TIM_ConfigClockSource>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	bf14      	ite	ne
 8008a0e:	2301      	movne	r3, #1
 8008a10:	2300      	moveq	r3, #0
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8008a18:	f000 fb1b 	bl	8009052 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8008a1c:	4827      	ldr	r0, [pc, #156]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 8008a1e:	f007 fad3 	bl	800ffc8 <HAL_TIM_PWM_Init>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	bf14      	ite	ne
 8008a28:	2301      	movne	r3, #1
 8008a2a:	2300      	moveq	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 8008a32:	f000 fb0e 	bl	8009052 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008a3e:	f107 031c 	add.w	r3, r7, #28
 8008a42:	4619      	mov	r1, r3
 8008a44:	481d      	ldr	r0, [pc, #116]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 8008a46:	f008 fec9 	bl	80117dc <HAL_TIMEx_MasterConfigSynchronization>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	bf14      	ite	ne
 8008a50:	2301      	movne	r3, #1
 8008a52:	2300      	moveq	r3, #0
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8008a5a:	f000 fafa 	bl	8009052 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008a5e:	2360      	movs	r3, #96	; 0x60
 8008a60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008a6e:	463b      	mov	r3, r7
 8008a70:	2200      	movs	r2, #0
 8008a72:	4619      	mov	r1, r3
 8008a74:	4811      	ldr	r0, [pc, #68]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 8008a76:	f007 ff55 	bl	8010924 <HAL_TIM_PWM_ConfigChannel>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bf14      	ite	ne
 8008a80:	2301      	movne	r3, #1
 8008a82:	2300      	moveq	r3, #0
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8008a8a:	f000 fae2 	bl	8009052 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008a8e:	463b      	mov	r3, r7
 8008a90:	220c      	movs	r2, #12
 8008a92:	4619      	mov	r1, r3
 8008a94:	4809      	ldr	r0, [pc, #36]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 8008a96:	f007 ff45 	bl	8010924 <HAL_TIM_PWM_ConfigChannel>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	bf14      	ite	ne
 8008aa0:	2301      	movne	r3, #1
 8008aa2:	2300      	moveq	r3, #0
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 8008aaa:	f000 fad2 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8008aae:	4803      	ldr	r0, [pc, #12]	; (8008abc <_ZL12MX_TIM5_Initv+0x138>)
 8008ab0:	f000 ff24 	bl	80098fc <HAL_TIM_MspPostInit>

}
 8008ab4:	bf00      	nop
 8008ab6:	3738      	adds	r7, #56	; 0x38
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20000734 	.word	0x20000734
 8008ac0:	40000c00 	.word	0x40000c00

08008ac4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008aca:	1d3b      	adds	r3, r7, #4
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	605a      	str	r2, [r3, #4]
 8008ad2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8008ad4:	4b19      	ldr	r3, [pc, #100]	; (8008b3c <_ZL12MX_TIM6_Initv+0x78>)
 8008ad6:	4a1a      	ldr	r2, [pc, #104]	; (8008b40 <_ZL12MX_TIM6_Initv+0x7c>)
 8008ad8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 8008ada:	4b18      	ldr	r3, [pc, #96]	; (8008b3c <_ZL12MX_TIM6_Initv+0x78>)
 8008adc:	226e      	movs	r2, #110	; 0x6e
 8008ade:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ae0:	4b16      	ldr	r3, [pc, #88]	; (8008b3c <_ZL12MX_TIM6_Initv+0x78>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8008ae6:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <_ZL12MX_TIM6_Initv+0x78>)
 8008ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008aee:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <_ZL12MX_TIM6_Initv+0x78>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008af4:	4811      	ldr	r0, [pc, #68]	; (8008b3c <_ZL12MX_TIM6_Initv+0x78>)
 8008af6:	f007 f937 	bl	800fd68 <HAL_TIM_Base_Init>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	bf14      	ite	ne
 8008b00:	2301      	movne	r3, #1
 8008b02:	2300      	moveq	r3, #0
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8008b0a:	f000 faa2 	bl	8009052 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008b16:	1d3b      	adds	r3, r7, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4808      	ldr	r0, [pc, #32]	; (8008b3c <_ZL12MX_TIM6_Initv+0x78>)
 8008b1c:	f008 fe5e 	bl	80117dc <HAL_TIMEx_MasterConfigSynchronization>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	bf14      	ite	ne
 8008b26:	2301      	movne	r3, #1
 8008b28:	2300      	moveq	r3, #0
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8008b30:	f000 fa8f 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008b34:	bf00      	nop
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20000780 	.word	0x20000780
 8008b40:	40001000 	.word	0x40001000

08008b44 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b098      	sub	sp, #96	; 0x60
 8008b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	605a      	str	r2, [r3, #4]
 8008b54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008b56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	605a      	str	r2, [r3, #4]
 8008b60:	609a      	str	r2, [r3, #8]
 8008b62:	60da      	str	r2, [r3, #12]
 8008b64:	611a      	str	r2, [r3, #16]
 8008b66:	615a      	str	r2, [r3, #20]
 8008b68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008b6a:	1d3b      	adds	r3, r7, #4
 8008b6c:	2234      	movs	r2, #52	; 0x34
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f00f f82f 	bl	8017bd4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008b76:	4b45      	ldr	r3, [pc, #276]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008b78:	4a45      	ldr	r2, [pc, #276]	; (8008c90 <_ZL12MX_TIM8_Initv+0x14c>)
 8008b7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 110;
 8008b7c:	4b43      	ldr	r3, [pc, #268]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008b7e:	226e      	movs	r2, #110	; 0x6e
 8008b80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b82:	4b42      	ldr	r3, [pc, #264]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 8008b88:	4b40      	ldr	r3, [pc, #256]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008b8a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008b8e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b90:	4b3e      	ldr	r3, [pc, #248]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008b96:	4b3d      	ldr	r3, [pc, #244]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b9c:	4b3b      	ldr	r3, [pc, #236]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8008ba2:	483a      	ldr	r0, [pc, #232]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008ba4:	f007 fa10 	bl	800ffc8 <HAL_TIM_PWM_Init>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bf14      	ite	ne
 8008bae:	2301      	movne	r3, #1
 8008bb0:	2300      	moveq	r3, #0
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 8008bb8:	f000 fa4b 	bl	8009052 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008bc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008bcc:	4619      	mov	r1, r3
 8008bce:	482f      	ldr	r0, [pc, #188]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008bd0:	f008 fe04 	bl	80117dc <HAL_TIMEx_MasterConfigSynchronization>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bf14      	ite	ne
 8008bda:	2301      	movne	r3, #1
 8008bdc:	2300      	moveq	r3, #0
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 8008be4:	f000 fa35 	bl	8009052 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008be8:	2360      	movs	r3, #96	; 0x60
 8008bea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008c00:	2300      	movs	r3, #0
 8008c02:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008c04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	481f      	ldr	r0, [pc, #124]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008c0e:	f007 fe89 	bl	8010924 <HAL_TIM_PWM_ConfigChannel>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bf14      	ite	ne
 8008c18:	2301      	movne	r3, #1
 8008c1a:	2300      	moveq	r3, #0
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 8008c22:	f000 fa16 	bl	8009052 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008c26:	2300      	movs	r3, #0
 8008c28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008c36:	2300      	movs	r3, #0
 8008c38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008c44:	2300      	movs	r3, #0
 8008c46:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c50:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008c56:	2300      	movs	r3, #0
 8008c58:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008c5e:	1d3b      	adds	r3, r7, #4
 8008c60:	4619      	mov	r1, r3
 8008c62:	480a      	ldr	r0, [pc, #40]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008c64:	f008 fe42 	bl	80118ec <HAL_TIMEx_ConfigBreakDeadTime>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	bf14      	ite	ne
 8008c6e:	2301      	movne	r3, #1
 8008c70:	2300      	moveq	r3, #0
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <_ZL12MX_TIM8_Initv+0x138>
  {
    Error_Handler();
 8008c78:	f000 f9eb 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8008c7c:	4803      	ldr	r0, [pc, #12]	; (8008c8c <_ZL12MX_TIM8_Initv+0x148>)
 8008c7e:	f000 fe3d 	bl	80098fc <HAL_TIM_MspPostInit>

}
 8008c82:	bf00      	nop
 8008c84:	3760      	adds	r7, #96	; 0x60
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200007cc 	.word	0x200007cc
 8008c90:	40013400 	.word	0x40013400

08008c94 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	605a      	str	r2, [r3, #4]
 8008ca2:	609a      	str	r2, [r3, #8]
 8008ca4:	60da      	str	r2, [r3, #12]
 8008ca6:	611a      	str	r2, [r3, #16]
 8008ca8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8008caa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008cae:	f7ff f8b1 	bl	8007e14 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8008cb2:	2002      	movs	r0, #2
 8008cb4:	f7ff f896 	bl	8007de4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8008cb8:	2001      	movs	r0, #1
 8008cba:	f7ff f893 	bl	8007de4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8008cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cc2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ccc:	463b      	mov	r3, r7
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4809      	ldr	r0, [pc, #36]	; (8008cf8 <_ZL13MX_UCPD1_Initv+0x64>)
 8008cd2:	f00b f8b0 	bl	8013e36 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8008cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cda:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ce4:	463b      	mov	r3, r7
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4804      	ldr	r0, [pc, #16]	; (8008cfc <_ZL13MX_UCPD1_Initv+0x68>)
 8008cea:	f00b f8a4 	bl	8013e36 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8008cee:	bf00      	nop
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	42020400 	.word	0x42020400
 8008cfc:	42020000 	.word	0x42020000

08008d00 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8008d04:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8008d06:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <_ZL15MX_USB_PCD_Initv+0x58>)
 8008d08:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008d0a:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8008d0c:	2208      	movs	r2, #8
 8008d0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008d10:	4b10      	ldr	r3, [pc, #64]	; (8008d54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8008d12:	2202      	movs	r2, #2
 8008d14:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d16:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8008d18:	2202      	movs	r2, #2
 8008d1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008d1c:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008d22:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008d28:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008d2e:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008d34:	4807      	ldr	r0, [pc, #28]	; (8008d54 <_ZL15MX_USB_PCD_Initv+0x54>)
 8008d36:	f004 f919 	bl	800cf6c <HAL_PCD_Init>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	bf14      	ite	ne
 8008d40:	2301      	movne	r3, #1
 8008d42:	2300      	moveq	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8008d4a:	f000 f982 	bl	8009052 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8008d4e:	bf00      	nop
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000818 	.word	0x20000818
 8008d58:	4000d400 	.word	0x4000d400

08008d5c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <_ZL11MX_DMA_Initv+0x50>)
 8008d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d66:	4a11      	ldr	r2, [pc, #68]	; (8008dac <_ZL11MX_DMA_Initv+0x50>)
 8008d68:	f043 0304 	orr.w	r3, r3, #4
 8008d6c:	6493      	str	r3, [r2, #72]	; 0x48
 8008d6e:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <_ZL11MX_DMA_Initv+0x50>)
 8008d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d72:	f003 0304 	and.w	r3, r3, #4
 8008d76:	607b      	str	r3, [r7, #4]
 8008d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008d7a:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <_ZL11MX_DMA_Initv+0x50>)
 8008d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7e:	4a0b      	ldr	r2, [pc, #44]	; (8008dac <_ZL11MX_DMA_Initv+0x50>)
 8008d80:	f043 0301 	orr.w	r3, r3, #1
 8008d84:	6493      	str	r3, [r2, #72]	; 0x48
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <_ZL11MX_DMA_Initv+0x50>)
 8008d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8008d92:	2200      	movs	r2, #0
 8008d94:	2105      	movs	r1, #5
 8008d96:	201d      	movs	r0, #29
 8008d98:	f002 fd8c 	bl	800b8b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008d9c:	201d      	movs	r0, #29
 8008d9e:	f002 fda3 	bl	800b8e8 <HAL_NVIC_EnableIRQ>

}
 8008da2:	bf00      	nop
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	40021000 	.word	0x40021000

08008db0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08c      	sub	sp, #48	; 0x30
 8008db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008db6:	f107 031c 	add.w	r3, r7, #28
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	605a      	str	r2, [r3, #4]
 8008dc0:	609a      	str	r2, [r3, #8]
 8008dc2:	60da      	str	r2, [r3, #12]
 8008dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008dc6:	4b8b      	ldr	r3, [pc, #556]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dca:	4a8a      	ldr	r2, [pc, #552]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008dcc:	f043 0310 	orr.w	r3, r3, #16
 8008dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dd2:	4b88      	ldr	r3, [pc, #544]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd6:	f003 0310 	and.w	r3, r3, #16
 8008dda:	61bb      	str	r3, [r7, #24]
 8008ddc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008dde:	4b85      	ldr	r3, [pc, #532]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de2:	4a84      	ldr	r2, [pc, #528]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008de4:	f043 0304 	orr.w	r3, r3, #4
 8008de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dea:	4b82      	ldr	r3, [pc, #520]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	617b      	str	r3, [r7, #20]
 8008df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008df6:	4b7f      	ldr	r3, [pc, #508]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dfa:	4a7e      	ldr	r2, [pc, #504]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008dfc:	f043 0320 	orr.w	r3, r3, #32
 8008e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e02:	4b7c      	ldr	r3, [pc, #496]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e0e:	4b79      	ldr	r3, [pc, #484]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e12:	4a78      	ldr	r2, [pc, #480]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e14:	f043 0301 	orr.w	r3, r3, #1
 8008e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e1a:	4b76      	ldr	r3, [pc, #472]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e26:	4b73      	ldr	r3, [pc, #460]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2a:	4a72      	ldr	r2, [pc, #456]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e2c:	f043 0302 	orr.w	r3, r3, #2
 8008e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e32:	4b70      	ldr	r3, [pc, #448]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	60bb      	str	r3, [r7, #8]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e3e:	4b6d      	ldr	r3, [pc, #436]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e42:	4a6c      	ldr	r2, [pc, #432]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e44:	f043 0308 	orr.w	r3, r3, #8
 8008e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e4a:	4b6a      	ldr	r3, [pc, #424]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4e:	f003 0308 	and.w	r3, r3, #8
 8008e52:	607b      	str	r3, [r7, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e56:	4b67      	ldr	r3, [pc, #412]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5a:	4a66      	ldr	r2, [pc, #408]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e62:	4b64      	ldr	r3, [pc, #400]	; (8008ff4 <_ZL12MX_GPIO_Initv+0x244>)
 8008e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8008e6e:	f004 f9fb 	bl	800d268 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 8008e72:	2200      	movs	r2, #0
 8008e74:	f24e 0108 	movw	r1, #57352	; 0xe008
 8008e78:	485f      	ldr	r0, [pc, #380]	; (8008ff8 <_ZL12MX_GPIO_Initv+0x248>)
 8008e7a:	f003 fa71 	bl	800c360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8008e7e:	2200      	movs	r2, #0
 8008e80:	21a4      	movs	r1, #164	; 0xa4
 8008e82:	485e      	ldr	r0, [pc, #376]	; (8008ffc <_ZL12MX_GPIO_Initv+0x24c>)
 8008e84:	f003 fa6c 	bl	800c360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f64f 7187 	movw	r1, #65415	; 0xff87
 8008e8e:	485c      	ldr	r0, [pc, #368]	; (8009000 <_ZL12MX_GPIO_Initv+0x250>)
 8008e90:	f003 fa66 	bl	800c360 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8008e94:	2200      	movs	r2, #0
 8008e96:	2180      	movs	r1, #128	; 0x80
 8008e98:	485a      	ldr	r0, [pc, #360]	; (8009004 <_ZL12MX_GPIO_Initv+0x254>)
 8008e9a:	f003 fa61 	bl	800c360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ea4:	4858      	ldr	r0, [pc, #352]	; (8009008 <_ZL12MX_GPIO_Initv+0x258>)
 8008ea6:	f003 fa5b 	bl	800c360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8008eb0:	4856      	ldr	r0, [pc, #344]	; (800900c <_ZL12MX_GPIO_Initv+0x25c>)
 8008eb2:	f003 fa55 	bl	800c360 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 8008eb6:	2308      	movs	r3, #8
 8008eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8008ec6:	f107 031c 	add.w	r3, r7, #28
 8008eca:	4619      	mov	r1, r3
 8008ecc:	484a      	ldr	r0, [pc, #296]	; (8008ff8 <_ZL12MX_GPIO_Initv+0x248>)
 8008ece:	f003 f8c7 	bl	800c060 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 8008ed2:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8008ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008ee0:	f107 031c 	add.w	r3, r7, #28
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4844      	ldr	r0, [pc, #272]	; (8008ff8 <_ZL12MX_GPIO_Initv+0x248>)
 8008ee8:	f003 f8ba 	bl	800c060 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 8008eec:	23a4      	movs	r3, #164	; 0xa4
 8008eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008efc:	f107 031c 	add.w	r3, r7, #28
 8008f00:	4619      	mov	r1, r3
 8008f02:	483e      	ldr	r0, [pc, #248]	; (8008ffc <_ZL12MX_GPIO_Initv+0x24c>)
 8008f04:	f003 f8ac 	bl	800c060 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 8008f08:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8008f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f12:	2300      	movs	r3, #0
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f16:	2300      	movs	r3, #0
 8008f18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008f1a:	f107 031c 	add.w	r3, r7, #28
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4835      	ldr	r0, [pc, #212]	; (8008ff8 <_ZL12MX_GPIO_Initv+0x248>)
 8008f22:	f003 f89d 	bl	800c060 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 8008f26:	f643 6301 	movw	r3, #15873	; 0x3e01
 8008f2a:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f30:	2300      	movs	r3, #0
 8008f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008f34:	f107 031c 	add.w	r3, r7, #28
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4835      	ldr	r0, [pc, #212]	; (8009010 <_ZL12MX_GPIO_Initv+0x260>)
 8008f3c:	f003 f890 	bl	800c060 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8008f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008f46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8008f50:	f107 031c 	add.w	r3, r7, #28
 8008f54:	4619      	mov	r1, r3
 8008f56:	4829      	ldr	r0, [pc, #164]	; (8008ffc <_ZL12MX_GPIO_Initv+0x24c>)
 8008f58:	f003 f882 	bl	800c060 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8008f5c:	f64f 7387 	movw	r3, #65415	; 0xff87
 8008f60:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f62:	2301      	movs	r3, #1
 8008f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f6e:	f107 031c 	add.w	r3, r7, #28
 8008f72:	4619      	mov	r1, r3
 8008f74:	4822      	ldr	r0, [pc, #136]	; (8009000 <_ZL12MX_GPIO_Initv+0x250>)
 8008f76:	f003 f873 	bl	800c060 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 8008f7a:	2370      	movs	r3, #112	; 0x70
 8008f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008f86:	f107 031c 	add.w	r3, r7, #28
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	481f      	ldr	r0, [pc, #124]	; (800900c <_ZL12MX_GPIO_Initv+0x25c>)
 8008f8e:	f003 f867 	bl	800c060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8008f92:	2380      	movs	r3, #128	; 0x80
 8008f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f96:	2301      	movs	r3, #1
 8008f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8008fa2:	f107 031c 	add.w	r3, r7, #28
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4816      	ldr	r0, [pc, #88]	; (8009004 <_ZL12MX_GPIO_Initv+0x254>)
 8008faa:	f003 f859 	bl	800c060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8008fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8008fc0:	f107 031c 	add.w	r3, r7, #28
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4810      	ldr	r0, [pc, #64]	; (8009008 <_ZL12MX_GPIO_Initv+0x258>)
 8008fc8:	f003 f84a 	bl	800c060 <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8008fcc:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 8008fd0:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008fde:	f107 031c 	add.w	r3, r7, #28
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4809      	ldr	r0, [pc, #36]	; (800900c <_ZL12MX_GPIO_Initv+0x25c>)
 8008fe6:	f003 f83b 	bl	800c060 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008fea:	bf00      	nop
 8008fec:	3730      	adds	r7, #48	; 0x30
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	40021000 	.word	0x40021000
 8008ff8:	42021400 	.word	0x42021400
 8008ffc:	42020400 	.word	0x42020400
 8009000:	42020c00 	.word	0x42020c00
 8009004:	42020800 	.word	0x42020800
 8009008:	42020000 	.word	0x42020000
 800900c:	42021800 	.word	0x42021800
 8009010:	42021000 	.word	0x42021000

08009014 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800901c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009020:	4803      	ldr	r0, [pc, #12]	; (8009030 <_Z16StartDefaultTaskPv+0x1c>)
 8009022:	f003 f9b5 	bl	800c390 <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 8009026:	2064      	movs	r0, #100	; 0x64
 8009028:	f00b ffbc 	bl	8014fa4 <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800902c:	e7f6      	b.n	800901c <_Z16StartDefaultTaskPv+0x8>
 800902e:	bf00      	nop
 8009030:	42020000 	.word	0x42020000

08009034 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009044:	d101      	bne.n	800904a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009046:	f000 ff1b 	bl	8009e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009052:	b480      	push	{r7}
 8009054:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009056:	b672      	cpsid	i
}
 8009058:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800905a:	e7fe      	b.n	800905a <Error_Handler+0x8>

0800905c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009062:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <HAL_MspInit+0x4c>)
 8009064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009066:	4a10      	ldr	r2, [pc, #64]	; (80090a8 <HAL_MspInit+0x4c>)
 8009068:	f043 0301 	orr.w	r3, r3, #1
 800906c:	6613      	str	r3, [r2, #96]	; 0x60
 800906e:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <HAL_MspInit+0x4c>)
 8009070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	607b      	str	r3, [r7, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800907a:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <HAL_MspInit+0x4c>)
 800907c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800907e:	4a0a      	ldr	r2, [pc, #40]	; (80090a8 <HAL_MspInit+0x4c>)
 8009080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009084:	6593      	str	r3, [r2, #88]	; 0x58
 8009086:	4b08      	ldr	r3, [pc, #32]	; (80090a8 <HAL_MspInit+0x4c>)
 8009088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8009092:	2200      	movs	r2, #0
 8009094:	2107      	movs	r1, #7
 8009096:	f06f 0001 	mvn.w	r0, #1
 800909a:	f002 fc0b 	bl	800b8b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	40021000 	.word	0x40021000

080090ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08c      	sub	sp, #48	; 0x30
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090b4:	f107 031c 	add.w	r3, r7, #28
 80090b8:	2200      	movs	r2, #0
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	605a      	str	r2, [r3, #4]
 80090be:	609a      	str	r2, [r3, #8]
 80090c0:	60da      	str	r2, [r3, #12]
 80090c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a4b      	ldr	r2, [pc, #300]	; (80091f8 <HAL_ADC_MspInit+0x14c>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	f040 8090 	bne.w	80091f0 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80090d0:	4b4a      	ldr	r3, [pc, #296]	; (80091fc <HAL_ADC_MspInit+0x150>)
 80090d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d4:	4a49      	ldr	r2, [pc, #292]	; (80091fc <HAL_ADC_MspInit+0x150>)
 80090d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80090da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090dc:	4b47      	ldr	r3, [pc, #284]	; (80091fc <HAL_ADC_MspInit+0x150>)
 80090de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80090e8:	4b44      	ldr	r3, [pc, #272]	; (80091fc <HAL_ADC_MspInit+0x150>)
 80090ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ec:	4a43      	ldr	r2, [pc, #268]	; (80091fc <HAL_ADC_MspInit+0x150>)
 80090ee:	f043 0304 	orr.w	r3, r3, #4
 80090f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090f4:	4b41      	ldr	r3, [pc, #260]	; (80091fc <HAL_ADC_MspInit+0x150>)
 80090f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009100:	4b3e      	ldr	r3, [pc, #248]	; (80091fc <HAL_ADC_MspInit+0x150>)
 8009102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009104:	4a3d      	ldr	r2, [pc, #244]	; (80091fc <HAL_ADC_MspInit+0x150>)
 8009106:	f043 0301 	orr.w	r3, r3, #1
 800910a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800910c:	4b3b      	ldr	r3, [pc, #236]	; (80091fc <HAL_ADC_MspInit+0x150>)
 800910e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	613b      	str	r3, [r7, #16]
 8009116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009118:	4b38      	ldr	r3, [pc, #224]	; (80091fc <HAL_ADC_MspInit+0x150>)
 800911a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911c:	4a37      	ldr	r2, [pc, #220]	; (80091fc <HAL_ADC_MspInit+0x150>)
 800911e:	f043 0302 	orr.w	r3, r3, #2
 8009122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009124:	4b35      	ldr	r3, [pc, #212]	; (80091fc <HAL_ADC_MspInit+0x150>)
 8009126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 8009130:	230f      	movs	r3, #15
 8009132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009134:	2303      	movs	r3, #3
 8009136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009138:	2300      	movs	r3, #0
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800913c:	f107 031c 	add.w	r3, r7, #28
 8009140:	4619      	mov	r1, r3
 8009142:	482f      	ldr	r0, [pc, #188]	; (8009200 <HAL_ADC_MspInit+0x154>)
 8009144:	f002 ff8c 	bl	800c060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 8009148:	239c      	movs	r3, #156	; 0x9c
 800914a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800914c:	2303      	movs	r3, #3
 800914e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009150:	2300      	movs	r3, #0
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009154:	f107 031c 	add.w	r3, r7, #28
 8009158:	4619      	mov	r1, r3
 800915a:	482a      	ldr	r0, [pc, #168]	; (8009204 <HAL_ADC_MspInit+0x158>)
 800915c:	f002 ff80 	bl	800c060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 8009160:	2303      	movs	r3, #3
 8009162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009164:	2303      	movs	r3, #3
 8009166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009168:	2300      	movs	r3, #0
 800916a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800916c:	f107 031c 	add.w	r3, r7, #28
 8009170:	4619      	mov	r1, r3
 8009172:	4825      	ldr	r0, [pc, #148]	; (8009208 <HAL_ADC_MspInit+0x15c>)
 8009174:	f002 ff74 	bl	800c060 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8009178:	4b24      	ldr	r3, [pc, #144]	; (800920c <HAL_ADC_MspInit+0x160>)
 800917a:	4a25      	ldr	r2, [pc, #148]	; (8009210 <HAL_ADC_MspInit+0x164>)
 800917c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800917e:	4b23      	ldr	r3, [pc, #140]	; (800920c <HAL_ADC_MspInit+0x160>)
 8009180:	2205      	movs	r2, #5
 8009182:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009184:	4b21      	ldr	r3, [pc, #132]	; (800920c <HAL_ADC_MspInit+0x160>)
 8009186:	2200      	movs	r2, #0
 8009188:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800918a:	4b20      	ldr	r3, [pc, #128]	; (800920c <HAL_ADC_MspInit+0x160>)
 800918c:	2200      	movs	r2, #0
 800918e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009190:	4b1e      	ldr	r3, [pc, #120]	; (800920c <HAL_ADC_MspInit+0x160>)
 8009192:	2280      	movs	r2, #128	; 0x80
 8009194:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009196:	4b1d      	ldr	r3, [pc, #116]	; (800920c <HAL_ADC_MspInit+0x160>)
 8009198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800919c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800919e:	4b1b      	ldr	r3, [pc, #108]	; (800920c <HAL_ADC_MspInit+0x160>)
 80091a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80091a6:	4b19      	ldr	r3, [pc, #100]	; (800920c <HAL_ADC_MspInit+0x160>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80091ac:	4b17      	ldr	r3, [pc, #92]	; (800920c <HAL_ADC_MspInit+0x160>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80091b2:	4816      	ldr	r0, [pc, #88]	; (800920c <HAL_ADC_MspInit+0x160>)
 80091b4:	f002 fba6 	bl	800b904 <HAL_DMA_Init>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 80091be:	f7ff ff48 	bl	8009052 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80091c2:	2110      	movs	r1, #16
 80091c4:	4811      	ldr	r0, [pc, #68]	; (800920c <HAL_ADC_MspInit+0x160>)
 80091c6:	f002 fe7b 	bl	800bec0 <HAL_DMA_ConfigChannelAttributes>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 80091d0:	f7ff ff3f 	bl	8009052 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a0d      	ldr	r2, [pc, #52]	; (800920c <HAL_ADC_MspInit+0x160>)
 80091d8:	651a      	str	r2, [r3, #80]	; 0x50
 80091da:	4a0c      	ldr	r2, [pc, #48]	; (800920c <HAL_ADC_MspInit+0x160>)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80091e0:	2200      	movs	r2, #0
 80091e2:	2105      	movs	r1, #5
 80091e4:	2025      	movs	r0, #37	; 0x25
 80091e6:	f002 fb65 	bl	800b8b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80091ea:	2025      	movs	r0, #37	; 0x25
 80091ec:	f002 fb7c 	bl	800b8e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80091f0:	bf00      	nop
 80091f2:	3730      	adds	r7, #48	; 0x30
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	42028000 	.word	0x42028000
 80091fc:	40021000 	.word	0x40021000
 8009200:	42020800 	.word	0x42020800
 8009204:	42020000 	.word	0x42020000
 8009208:	42020400 	.word	0x42020400
 800920c:	200002d0 	.word	0x200002d0
 8009210:	40020008 	.word	0x40020008

08009214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b0ae      	sub	sp, #184	; 0xb8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800921c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	605a      	str	r2, [r3, #4]
 8009226:	609a      	str	r2, [r3, #8]
 8009228:	60da      	str	r2, [r3, #12]
 800922a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800922c:	f107 0310 	add.w	r3, r7, #16
 8009230:	2294      	movs	r2, #148	; 0x94
 8009232:	2100      	movs	r1, #0
 8009234:	4618      	mov	r0, r3
 8009236:	f00e fccd 	bl	8017bd4 <memset>
  if(hi2c->Instance==I2C1)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a21      	ldr	r2, [pc, #132]	; (80092c4 <HAL_I2C_MspInit+0xb0>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d13b      	bne.n	80092bc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009244:	2340      	movs	r3, #64	; 0x40
 8009246:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009248:	2300      	movs	r3, #0
 800924a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800924c:	f107 0310 	add.w	r3, r7, #16
 8009250:	4618      	mov	r0, r3
 8009252:	f005 f829 	bl	800e2a8 <HAL_RCCEx_PeriphCLKConfig>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800925c:	f7ff fef9 	bl	8009052 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009260:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <HAL_I2C_MspInit+0xb4>)
 8009262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009264:	4a18      	ldr	r2, [pc, #96]	; (80092c8 <HAL_I2C_MspInit+0xb4>)
 8009266:	f043 0302 	orr.w	r3, r3, #2
 800926a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800926c:	4b16      	ldr	r3, [pc, #88]	; (80092c8 <HAL_I2C_MspInit+0xb4>)
 800926e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009278:	f44f 7340 	mov.w	r3, #768	; 0x300
 800927c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009280:	2312      	movs	r3, #18
 8009282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009286:	2300      	movs	r3, #0
 8009288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800928c:	2300      	movs	r3, #0
 800928e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009292:	2304      	movs	r3, #4
 8009294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009298:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800929c:	4619      	mov	r1, r3
 800929e:	480b      	ldr	r0, [pc, #44]	; (80092cc <HAL_I2C_MspInit+0xb8>)
 80092a0:	f002 fede 	bl	800c060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80092a4:	4b08      	ldr	r3, [pc, #32]	; (80092c8 <HAL_I2C_MspInit+0xb4>)
 80092a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a8:	4a07      	ldr	r2, [pc, #28]	; (80092c8 <HAL_I2C_MspInit+0xb4>)
 80092aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092ae:	6593      	str	r3, [r2, #88]	; 0x58
 80092b0:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <HAL_I2C_MspInit+0xb4>)
 80092b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092b8:	60bb      	str	r3, [r7, #8]
 80092ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80092bc:	bf00      	nop
 80092be:	37b8      	adds	r7, #184	; 0xb8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	40005400 	.word	0x40005400
 80092c8:	40021000 	.word	0x40021000
 80092cc:	42020400 	.word	0x42020400

080092d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b0b2      	sub	sp, #200	; 0xc8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	605a      	str	r2, [r3, #4]
 80092e2:	609a      	str	r2, [r3, #8]
 80092e4:	60da      	str	r2, [r3, #12]
 80092e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80092e8:	f107 0320 	add.w	r3, r7, #32
 80092ec:	2294      	movs	r2, #148	; 0x94
 80092ee:	2100      	movs	r1, #0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f00e fc6f 	bl	8017bd4 <memset>
  if(huart->Instance==LPUART1)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a67      	ldr	r2, [pc, #412]	; (8009498 <HAL_UART_MspInit+0x1c8>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d13e      	bne.n	800937e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8009300:	2320      	movs	r3, #32
 8009302:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8009304:	2300      	movs	r3, #0
 8009306:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009308:	f107 0320 	add.w	r3, r7, #32
 800930c:	4618      	mov	r0, r3
 800930e:	f004 ffcb 	bl	800e2a8 <HAL_RCCEx_PeriphCLKConfig>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009318:	f7ff fe9b 	bl	8009052 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800931c:	4b5f      	ldr	r3, [pc, #380]	; (800949c <HAL_UART_MspInit+0x1cc>)
 800931e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009320:	4a5e      	ldr	r2, [pc, #376]	; (800949c <HAL_UART_MspInit+0x1cc>)
 8009322:	f043 0301 	orr.w	r3, r3, #1
 8009326:	65d3      	str	r3, [r2, #92]	; 0x5c
 8009328:	4b5c      	ldr	r3, [pc, #368]	; (800949c <HAL_UART_MspInit+0x1cc>)
 800932a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	61fb      	str	r3, [r7, #28]
 8009332:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009334:	4b59      	ldr	r3, [pc, #356]	; (800949c <HAL_UART_MspInit+0x1cc>)
 8009336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009338:	4a58      	ldr	r2, [pc, #352]	; (800949c <HAL_UART_MspInit+0x1cc>)
 800933a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800933e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009340:	4b56      	ldr	r3, [pc, #344]	; (800949c <HAL_UART_MspInit+0x1cc>)
 8009342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009348:	61bb      	str	r3, [r7, #24]
 800934a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800934c:	f003 ff8c 	bl	800d268 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8009350:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009358:	2302      	movs	r3, #2
 800935a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800935e:	2300      	movs	r3, #0
 8009360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009364:	2300      	movs	r3, #0
 8009366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800936a:	2308      	movs	r3, #8
 800936c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009370:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009374:	4619      	mov	r1, r3
 8009376:	484a      	ldr	r0, [pc, #296]	; (80094a0 <HAL_UART_MspInit+0x1d0>)
 8009378:	f002 fe72 	bl	800c060 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800937c:	e088      	b.n	8009490 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a48      	ldr	r2, [pc, #288]	; (80094a4 <HAL_UART_MspInit+0x1d4>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d143      	bne.n	8009410 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8009388:	2308      	movs	r3, #8
 800938a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800938c:	2300      	movs	r3, #0
 800938e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009390:	f107 0320 	add.w	r3, r7, #32
 8009394:	4618      	mov	r0, r3
 8009396:	f004 ff87 	bl	800e2a8 <HAL_RCCEx_PeriphCLKConfig>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80093a0:	f7ff fe57 	bl	8009052 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80093a4:	4b3d      	ldr	r3, [pc, #244]	; (800949c <HAL_UART_MspInit+0x1cc>)
 80093a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a8:	4a3c      	ldr	r2, [pc, #240]	; (800949c <HAL_UART_MspInit+0x1cc>)
 80093aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093ae:	6593      	str	r3, [r2, #88]	; 0x58
 80093b0:	4b3a      	ldr	r3, [pc, #232]	; (800949c <HAL_UART_MspInit+0x1cc>)
 80093b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093bc:	4b37      	ldr	r3, [pc, #220]	; (800949c <HAL_UART_MspInit+0x1cc>)
 80093be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c0:	4a36      	ldr	r2, [pc, #216]	; (800949c <HAL_UART_MspInit+0x1cc>)
 80093c2:	f043 0301 	orr.w	r3, r3, #1
 80093c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093c8:	4b34      	ldr	r3, [pc, #208]	; (800949c <HAL_UART_MspInit+0x1cc>)
 80093ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	613b      	str	r3, [r7, #16]
 80093d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80093d4:	2303      	movs	r3, #3
 80093d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093da:	2302      	movs	r3, #2
 80093dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093e0:	2300      	movs	r3, #0
 80093e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093e6:	2300      	movs	r3, #0
 80093e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80093ec:	2308      	movs	r3, #8
 80093ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80093f6:	4619      	mov	r1, r3
 80093f8:	482b      	ldr	r0, [pc, #172]	; (80094a8 <HAL_UART_MspInit+0x1d8>)
 80093fa:	f002 fe31 	bl	800c060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80093fe:	2200      	movs	r2, #0
 8009400:	2105      	movs	r1, #5
 8009402:	2040      	movs	r0, #64	; 0x40
 8009404:	f002 fa56 	bl	800b8b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8009408:	2040      	movs	r0, #64	; 0x40
 800940a:	f002 fa6d 	bl	800b8e8 <HAL_NVIC_EnableIRQ>
}
 800940e:	e03f      	b.n	8009490 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a25      	ldr	r2, [pc, #148]	; (80094ac <HAL_UART_MspInit+0x1dc>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d13a      	bne.n	8009490 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800941a:	2302      	movs	r3, #2
 800941c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800941e:	2300      	movs	r3, #0
 8009420:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009422:	f107 0320 	add.w	r3, r7, #32
 8009426:	4618      	mov	r0, r3
 8009428:	f004 ff3e 	bl	800e2a8 <HAL_RCCEx_PeriphCLKConfig>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8009432:	f7ff fe0e 	bl	8009052 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009436:	4b19      	ldr	r3, [pc, #100]	; (800949c <HAL_UART_MspInit+0x1cc>)
 8009438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943a:	4a18      	ldr	r2, [pc, #96]	; (800949c <HAL_UART_MspInit+0x1cc>)
 800943c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009440:	6593      	str	r3, [r2, #88]	; 0x58
 8009442:	4b16      	ldr	r3, [pc, #88]	; (800949c <HAL_UART_MspInit+0x1cc>)
 8009444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800944e:	4b13      	ldr	r3, [pc, #76]	; (800949c <HAL_UART_MspInit+0x1cc>)
 8009450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009452:	4a12      	ldr	r2, [pc, #72]	; (800949c <HAL_UART_MspInit+0x1cc>)
 8009454:	f043 0308 	orr.w	r3, r3, #8
 8009458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800945a:	4b10      	ldr	r3, [pc, #64]	; (800949c <HAL_UART_MspInit+0x1cc>)
 800945c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800945e:	f003 0308 	and.w	r3, r3, #8
 8009462:	60bb      	str	r3, [r7, #8]
 8009464:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 8009466:	2360      	movs	r3, #96	; 0x60
 8009468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800946c:	2302      	movs	r3, #2
 800946e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009472:	2300      	movs	r3, #0
 8009474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009478:	2300      	movs	r3, #0
 800947a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800947e:	2307      	movs	r3, #7
 8009480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009484:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009488:	4619      	mov	r1, r3
 800948a:	4809      	ldr	r0, [pc, #36]	; (80094b0 <HAL_UART_MspInit+0x1e0>)
 800948c:	f002 fde8 	bl	800c060 <HAL_GPIO_Init>
}
 8009490:	bf00      	nop
 8009492:	37c8      	adds	r7, #200	; 0xc8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40008000 	.word	0x40008000
 800949c:	40021000 	.word	0x40021000
 80094a0:	42021800 	.word	0x42021800
 80094a4:	40004c00 	.word	0x40004c00
 80094a8:	42020000 	.word	0x42020000
 80094ac:	40004400 	.word	0x40004400
 80094b0:	42020c00 	.word	0x42020c00

080094b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b0a8      	sub	sp, #160	; 0xa0
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80094bc:	f107 030c 	add.w	r3, r7, #12
 80094c0:	2294      	movs	r2, #148	; 0x94
 80094c2:	2100      	movs	r1, #0
 80094c4:	4618      	mov	r0, r3
 80094c6:	f00e fb85 	bl	8017bd4 <memset>
  if(hrtc->Instance==RTC)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a16      	ldr	r2, [pc, #88]	; (8009528 <HAL_RTC_MspInit+0x74>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d124      	bne.n	800951e <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80094d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80094da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80094e2:	f107 030c 	add.w	r3, r7, #12
 80094e6:	4618      	mov	r0, r3
 80094e8:	f004 fede 	bl	800e2a8 <HAL_RCCEx_PeriphCLKConfig>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80094f2:	f7ff fdae 	bl	8009052 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80094f6:	4b0d      	ldr	r3, [pc, #52]	; (800952c <HAL_RTC_MspInit+0x78>)
 80094f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094fc:	4a0b      	ldr	r2, [pc, #44]	; (800952c <HAL_RTC_MspInit+0x78>)
 80094fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8009506:	4b09      	ldr	r3, [pc, #36]	; (800952c <HAL_RTC_MspInit+0x78>)
 8009508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800950a:	4a08      	ldr	r2, [pc, #32]	; (800952c <HAL_RTC_MspInit+0x78>)
 800950c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009510:	6593      	str	r3, [r2, #88]	; 0x58
 8009512:	4b06      	ldr	r3, [pc, #24]	; (800952c <HAL_RTC_MspInit+0x78>)
 8009514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800951a:	60bb      	str	r3, [r7, #8]
 800951c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800951e:	bf00      	nop
 8009520:	37a0      	adds	r7, #160	; 0xa0
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	40002800 	.word	0x40002800
 800952c:	40021000 	.word	0x40021000

08009530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b090      	sub	sp, #64	; 0x40
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	609a      	str	r2, [r3, #8]
 8009544:	60da      	str	r2, [r3, #12]
 8009546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a62      	ldr	r2, [pc, #392]	; (80096d8 <HAL_SPI_MspInit+0x1a8>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d145      	bne.n	80095de <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009552:	4b62      	ldr	r3, [pc, #392]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009556:	4a61      	ldr	r2, [pc, #388]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009558:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800955c:	6613      	str	r3, [r2, #96]	; 0x60
 800955e:	4b5f      	ldr	r3, [pc, #380]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009566:	62bb      	str	r3, [r7, #40]	; 0x28
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800956a:	4b5c      	ldr	r3, [pc, #368]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 800956c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800956e:	4a5b      	ldr	r2, [pc, #364]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009570:	f043 0301 	orr.w	r3, r3, #1
 8009574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009576:	4b59      	ldr	r3, [pc, #356]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009582:	4b56      	ldr	r3, [pc, #344]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009586:	4a55      	ldr	r2, [pc, #340]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009588:	f043 0310 	orr.w	r3, r3, #16
 800958c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800958e:	4b53      	ldr	r3, [pc, #332]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009592:	f003 0310 	and.w	r3, r3, #16
 8009596:	623b      	str	r3, [r7, #32]
 8009598:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 800959a:	2360      	movs	r3, #96	; 0x60
 800959c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800959e:	2302      	movs	r3, #2
 80095a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095a6:	2300      	movs	r3, #0
 80095a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80095aa:	2305      	movs	r3, #5
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095b2:	4619      	mov	r1, r3
 80095b4:	484a      	ldr	r0, [pc, #296]	; (80096e0 <HAL_SPI_MspInit+0x1b0>)
 80095b6:	f002 fd53 	bl	800c060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 80095ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095c0:	2302      	movs	r3, #2
 80095c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095c4:	2300      	movs	r3, #0
 80095c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095c8:	2300      	movs	r3, #0
 80095ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80095cc:	2305      	movs	r3, #5
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 80095d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095d4:	4619      	mov	r1, r3
 80095d6:	4843      	ldr	r0, [pc, #268]	; (80096e4 <HAL_SPI_MspInit+0x1b4>)
 80095d8:	f002 fd42 	bl	800c060 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80095dc:	e078      	b.n	80096d0 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a41      	ldr	r2, [pc, #260]	; (80096e8 <HAL_SPI_MspInit+0x1b8>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d145      	bne.n	8009674 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80095e8:	4b3c      	ldr	r3, [pc, #240]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 80095ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ec:	4a3b      	ldr	r2, [pc, #236]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 80095ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095f2:	6593      	str	r3, [r2, #88]	; 0x58
 80095f4:	4b39      	ldr	r3, [pc, #228]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 80095f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095fc:	61fb      	str	r3, [r7, #28]
 80095fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009600:	4b36      	ldr	r3, [pc, #216]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009604:	4a35      	ldr	r2, [pc, #212]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009606:	f043 0302 	orr.w	r3, r3, #2
 800960a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800960c:	4b33      	ldr	r3, [pc, #204]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 800960e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009610:	f003 0302 	and.w	r3, r3, #2
 8009614:	61bb      	str	r3, [r7, #24]
 8009616:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009618:	4b30      	ldr	r3, [pc, #192]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 800961a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800961c:	4a2f      	ldr	r2, [pc, #188]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 800961e:	f043 0308 	orr.w	r3, r3, #8
 8009622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009624:	4b2d      	ldr	r3, [pc, #180]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009628:	f003 0308 	and.w	r3, r3, #8
 800962c:	617b      	str	r3, [r7, #20]
 800962e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009634:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009636:	2302      	movs	r3, #2
 8009638:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800963a:	2300      	movs	r3, #0
 800963c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800963e:	2300      	movs	r3, #0
 8009640:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009642:	2305      	movs	r3, #5
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800964a:	4619      	mov	r1, r3
 800964c:	4827      	ldr	r0, [pc, #156]	; (80096ec <HAL_SPI_MspInit+0x1bc>)
 800964e:	f002 fd07 	bl	800c060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8009652:	2318      	movs	r3, #24
 8009654:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009656:	2302      	movs	r3, #2
 8009658:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800965a:	2300      	movs	r3, #0
 800965c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800965e:	2300      	movs	r3, #0
 8009660:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009662:	2305      	movs	r3, #5
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800966a:	4619      	mov	r1, r3
 800966c:	4820      	ldr	r0, [pc, #128]	; (80096f0 <HAL_SPI_MspInit+0x1c0>)
 800966e:	f002 fcf7 	bl	800c060 <HAL_GPIO_Init>
}
 8009672:	e02d      	b.n	80096d0 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a1e      	ldr	r2, [pc, #120]	; (80096f4 <HAL_SPI_MspInit+0x1c4>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d128      	bne.n	80096d0 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800967e:	4b17      	ldr	r3, [pc, #92]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009682:	4a16      	ldr	r2, [pc, #88]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009688:	6593      	str	r3, [r2, #88]	; 0x58
 800968a:	4b14      	ldr	r3, [pc, #80]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 800968c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800968e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009692:	613b      	str	r3, [r7, #16]
 8009694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009696:	4b11      	ldr	r3, [pc, #68]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 8009698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800969a:	4a10      	ldr	r2, [pc, #64]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 800969c:	f043 0304 	orr.w	r3, r3, #4
 80096a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80096a2:	4b0e      	ldr	r3, [pc, #56]	; (80096dc <HAL_SPI_MspInit+0x1ac>)
 80096a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a6:	f003 0304 	and.w	r3, r3, #4
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80096ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80096b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b4:	2302      	movs	r3, #2
 80096b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b8:	2300      	movs	r3, #0
 80096ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096bc:	2300      	movs	r3, #0
 80096be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80096c0:	2306      	movs	r3, #6
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096c8:	4619      	mov	r1, r3
 80096ca:	480b      	ldr	r0, [pc, #44]	; (80096f8 <HAL_SPI_MspInit+0x1c8>)
 80096cc:	f002 fcc8 	bl	800c060 <HAL_GPIO_Init>
}
 80096d0:	bf00      	nop
 80096d2:	3740      	adds	r7, #64	; 0x40
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	40013000 	.word	0x40013000
 80096dc:	40021000 	.word	0x40021000
 80096e0:	42020000 	.word	0x42020000
 80096e4:	42021000 	.word	0x42021000
 80096e8:	40003800 	.word	0x40003800
 80096ec:	42020400 	.word	0x42020400
 80096f0:	42020c00 	.word	0x42020c00
 80096f4:	40003c00 	.word	0x40003c00
 80096f8:	42020800 	.word	0x42020800

080096fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08c      	sub	sp, #48	; 0x30
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009704:	f107 031c 	add.w	r3, r7, #28
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	605a      	str	r2, [r3, #4]
 800970e:	609a      	str	r2, [r3, #8]
 8009710:	60da      	str	r2, [r3, #12]
 8009712:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a3c      	ldr	r2, [pc, #240]	; (800980c <HAL_TIM_Base_MspInit+0x110>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d146      	bne.n	80097ac <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800971e:	4b3c      	ldr	r3, [pc, #240]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 8009720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009722:	4a3b      	ldr	r2, [pc, #236]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 8009724:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009728:	6613      	str	r3, [r2, #96]	; 0x60
 800972a:	4b39      	ldr	r3, [pc, #228]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 800972c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009736:	4b36      	ldr	r3, [pc, #216]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 8009738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800973a:	4a35      	ldr	r2, [pc, #212]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 800973c:	f043 0310 	orr.w	r3, r3, #16
 8009740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009742:	4b33      	ldr	r3, [pc, #204]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 8009744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009746:	f003 0310 	and.w	r3, r3, #16
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800974e:	4b30      	ldr	r3, [pc, #192]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 8009750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009752:	4a2f      	ldr	r2, [pc, #188]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 8009754:	f043 0301 	orr.w	r3, r3, #1
 8009758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800975a:	4b2d      	ldr	r3, [pc, #180]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 800975c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	613b      	str	r3, [r7, #16]
 8009764:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 8009766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800976a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800976c:	2302      	movs	r3, #2
 800976e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009770:	2300      	movs	r3, #0
 8009772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009774:	2300      	movs	r3, #0
 8009776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009778:	2301      	movs	r3, #1
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 800977c:	f107 031c 	add.w	r3, r7, #28
 8009780:	4619      	mov	r1, r3
 8009782:	4824      	ldr	r0, [pc, #144]	; (8009814 <HAL_TIM_Base_MspInit+0x118>)
 8009784:	f002 fc6c 	bl	800c060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 8009788:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800978c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800978e:	2302      	movs	r3, #2
 8009790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009792:	2300      	movs	r3, #0
 8009794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009796:	2300      	movs	r3, #0
 8009798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800979a:	2301      	movs	r3, #1
 800979c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800979e:	f107 031c 	add.w	r3, r7, #28
 80097a2:	4619      	mov	r1, r3
 80097a4:	481c      	ldr	r0, [pc, #112]	; (8009818 <HAL_TIM_Base_MspInit+0x11c>)
 80097a6:	f002 fc5b 	bl	800c060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80097aa:	e02a      	b.n	8009802 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a1a      	ldr	r2, [pc, #104]	; (800981c <HAL_TIM_Base_MspInit+0x120>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d10c      	bne.n	80097d0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80097b6:	4b16      	ldr	r3, [pc, #88]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 80097b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ba:	4a15      	ldr	r2, [pc, #84]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 80097bc:	f043 0308 	orr.w	r3, r3, #8
 80097c0:	6593      	str	r3, [r2, #88]	; 0x58
 80097c2:	4b13      	ldr	r3, [pc, #76]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 80097c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c6:	f003 0308 	and.w	r3, r3, #8
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
}
 80097ce:	e018      	b.n	8009802 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM6)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a12      	ldr	r2, [pc, #72]	; (8009820 <HAL_TIM_Base_MspInit+0x124>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d113      	bne.n	8009802 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80097da:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 80097dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097de:	4a0c      	ldr	r2, [pc, #48]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 80097e0:	f043 0310 	orr.w	r3, r3, #16
 80097e4:	6593      	str	r3, [r2, #88]	; 0x58
 80097e6:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <HAL_TIM_Base_MspInit+0x114>)
 80097e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ea:	f003 0310 	and.w	r3, r3, #16
 80097ee:	60bb      	str	r3, [r7, #8]
 80097f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 80097f2:	2200      	movs	r2, #0
 80097f4:	2105      	movs	r1, #5
 80097f6:	2031      	movs	r0, #49	; 0x31
 80097f8:	f002 f85c 	bl	800b8b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80097fc:	2031      	movs	r0, #49	; 0x31
 80097fe:	f002 f873 	bl	800b8e8 <HAL_NVIC_EnableIRQ>
}
 8009802:	bf00      	nop
 8009804:	3730      	adds	r7, #48	; 0x30
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	40012c00 	.word	0x40012c00
 8009810:	40021000 	.word	0x40021000
 8009814:	42021000 	.word	0x42021000
 8009818:	42020000 	.word	0x42020000
 800981c:	40000c00 	.word	0x40000c00
 8009820:	40001000 	.word	0x40001000

08009824 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08a      	sub	sp, #40	; 0x28
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800982c:	f107 0314 	add.w	r3, r7, #20
 8009830:	2200      	movs	r2, #0
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	605a      	str	r2, [r3, #4]
 8009836:	609a      	str	r2, [r3, #8]
 8009838:	60da      	str	r2, [r3, #12]
 800983a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a1b      	ldr	r2, [pc, #108]	; (80098b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d12f      	bne.n	80098a6 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009846:	4b1b      	ldr	r3, [pc, #108]	; (80098b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8009848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984a:	4a1a      	ldr	r2, [pc, #104]	; (80098b4 <HAL_TIM_Encoder_MspInit+0x90>)
 800984c:	f043 0302 	orr.w	r3, r3, #2
 8009850:	6593      	str	r3, [r2, #88]	; 0x58
 8009852:	4b18      	ldr	r3, [pc, #96]	; (80098b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8009854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800985e:	4b15      	ldr	r3, [pc, #84]	; (80098b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8009860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009862:	4a14      	ldr	r2, [pc, #80]	; (80098b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8009864:	f043 0310 	orr.w	r3, r3, #16
 8009868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800986a:	4b12      	ldr	r3, [pc, #72]	; (80098b4 <HAL_TIM_Encoder_MspInit+0x90>)
 800986c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800986e:	f003 0310 	and.w	r3, r3, #16
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 8009876:	2318      	movs	r3, #24
 8009878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800987a:	2302      	movs	r3, #2
 800987c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009882:	2300      	movs	r3, #0
 8009884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009886:	2302      	movs	r3, #2
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800988a:	f107 0314 	add.w	r3, r7, #20
 800988e:	4619      	mov	r1, r3
 8009890:	4809      	ldr	r0, [pc, #36]	; (80098b8 <HAL_TIM_Encoder_MspInit+0x94>)
 8009892:	f002 fbe5 	bl	800c060 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8009896:	2200      	movs	r2, #0
 8009898:	2105      	movs	r1, #5
 800989a:	202e      	movs	r0, #46	; 0x2e
 800989c:	f002 f80a 	bl	800b8b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80098a0:	202e      	movs	r0, #46	; 0x2e
 80098a2:	f002 f821 	bl	800b8e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80098a6:	bf00      	nop
 80098a8:	3728      	adds	r7, #40	; 0x28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	40000400 	.word	0x40000400
 80098b4:	40021000 	.word	0x40021000
 80098b8:	42021000 	.word	0x42021000

080098bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a0a      	ldr	r2, [pc, #40]	; (80098f4 <HAL_TIM_PWM_MspInit+0x38>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d10b      	bne.n	80098e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80098ce:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80098d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d2:	4a09      	ldr	r2, [pc, #36]	; (80098f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80098d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80098d8:	6613      	str	r3, [r2, #96]	; 0x60
 80098da:	4b07      	ldr	r3, [pc, #28]	; (80098f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80098dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80098e6:	bf00      	nop
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	40013400 	.word	0x40013400
 80098f8:	40021000 	.word	0x40021000

080098fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08a      	sub	sp, #40	; 0x28
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009904:	f107 0314 	add.w	r3, r7, #20
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	605a      	str	r2, [r3, #4]
 800990e:	609a      	str	r2, [r3, #8]
 8009910:	60da      	str	r2, [r3, #12]
 8009912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a22      	ldr	r2, [pc, #136]	; (80099a4 <HAL_TIM_MspPostInit+0xa8>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d11d      	bne.n	800995a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800991e:	4b22      	ldr	r3, [pc, #136]	; (80099a8 <HAL_TIM_MspPostInit+0xac>)
 8009920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009922:	4a21      	ldr	r2, [pc, #132]	; (80099a8 <HAL_TIM_MspPostInit+0xac>)
 8009924:	f043 0320 	orr.w	r3, r3, #32
 8009928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800992a:	4b1f      	ldr	r3, [pc, #124]	; (80099a8 <HAL_TIM_MspPostInit+0xac>)
 800992c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	613b      	str	r3, [r7, #16]
 8009934:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 8009936:	f44f 7310 	mov.w	r3, #576	; 0x240
 800993a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800993c:	2302      	movs	r3, #2
 800993e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009940:	2300      	movs	r3, #0
 8009942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009944:	2300      	movs	r3, #0
 8009946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009948:	2302      	movs	r3, #2
 800994a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800994c:	f107 0314 	add.w	r3, r7, #20
 8009950:	4619      	mov	r1, r3
 8009952:	4816      	ldr	r0, [pc, #88]	; (80099ac <HAL_TIM_MspPostInit+0xb0>)
 8009954:	f002 fb84 	bl	800c060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009958:	e020      	b.n	800999c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a14      	ldr	r2, [pc, #80]	; (80099b0 <HAL_TIM_MspPostInit+0xb4>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d11b      	bne.n	800999c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009964:	4b10      	ldr	r3, [pc, #64]	; (80099a8 <HAL_TIM_MspPostInit+0xac>)
 8009966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009968:	4a0f      	ldr	r2, [pc, #60]	; (80099a8 <HAL_TIM_MspPostInit+0xac>)
 800996a:	f043 0304 	orr.w	r3, r3, #4
 800996e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009970:	4b0d      	ldr	r3, [pc, #52]	; (80099a8 <HAL_TIM_MspPostInit+0xac>)
 8009972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	60fb      	str	r3, [r7, #12]
 800997a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800997c:	2340      	movs	r3, #64	; 0x40
 800997e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009980:	2302      	movs	r3, #2
 8009982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009984:	2300      	movs	r3, #0
 8009986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009988:	2300      	movs	r3, #0
 800998a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800998c:	2303      	movs	r3, #3
 800998e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009990:	f107 0314 	add.w	r3, r7, #20
 8009994:	4619      	mov	r1, r3
 8009996:	4807      	ldr	r0, [pc, #28]	; (80099b4 <HAL_TIM_MspPostInit+0xb8>)
 8009998:	f002 fb62 	bl	800c060 <HAL_GPIO_Init>
}
 800999c:	bf00      	nop
 800999e:	3728      	adds	r7, #40	; 0x28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	40000c00 	.word	0x40000c00
 80099a8:	40021000 	.word	0x40021000
 80099ac:	42021400 	.word	0x42021400
 80099b0:	40013400 	.word	0x40013400
 80099b4:	42020800 	.word	0x42020800

080099b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b0ae      	sub	sp, #184	; 0xb8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	605a      	str	r2, [r3, #4]
 80099ca:	609a      	str	r2, [r3, #8]
 80099cc:	60da      	str	r2, [r3, #12]
 80099ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80099d0:	f107 0310 	add.w	r3, r7, #16
 80099d4:	2294      	movs	r2, #148	; 0x94
 80099d6:	2100      	movs	r1, #0
 80099d8:	4618      	mov	r0, r3
 80099da:	f00e f8fb 	bl	8017bd4 <memset>
  if(hpcd->Instance==USB)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a22      	ldr	r2, [pc, #136]	; (8009a6c <HAL_PCD_MspInit+0xb4>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d13d      	bne.n	8009a64 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80099e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80099ee:	2300      	movs	r3, #0
 80099f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80099f4:	f107 0310 	add.w	r3, r7, #16
 80099f8:	4618      	mov	r0, r3
 80099fa:	f004 fc55 	bl	800e2a8 <HAL_RCCEx_PeriphCLKConfig>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8009a04:	f7ff fb25 	bl	8009052 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a08:	4b19      	ldr	r3, [pc, #100]	; (8009a70 <HAL_PCD_MspInit+0xb8>)
 8009a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a0c:	4a18      	ldr	r2, [pc, #96]	; (8009a70 <HAL_PCD_MspInit+0xb8>)
 8009a0e:	f043 0301 	orr.w	r3, r3, #1
 8009a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a14:	4b16      	ldr	r3, [pc, #88]	; (8009a70 <HAL_PCD_MspInit+0xb8>)
 8009a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	60fb      	str	r3, [r7, #12]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a28:	2302      	movs	r3, #2
 8009a2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a34:	2300      	movs	r3, #0
 8009a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8009a3a:	230a      	movs	r3, #10
 8009a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009a44:	4619      	mov	r1, r3
 8009a46:	480b      	ldr	r0, [pc, #44]	; (8009a74 <HAL_PCD_MspInit+0xbc>)
 8009a48:	f002 fb0a 	bl	800c060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a4c:	4b08      	ldr	r3, [pc, #32]	; (8009a70 <HAL_PCD_MspInit+0xb8>)
 8009a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a50:	4a07      	ldr	r2, [pc, #28]	; (8009a70 <HAL_PCD_MspInit+0xb8>)
 8009a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a56:	65d3      	str	r3, [r2, #92]	; 0x5c
 8009a58:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <HAL_PCD_MspInit+0xb8>)
 8009a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a60:	60bb      	str	r3, [r7, #8]
 8009a62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8009a64:	bf00      	nop
 8009a66:	37b8      	adds	r7, #184	; 0xb8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	4000d400 	.word	0x4000d400
 8009a70:	40021000 	.word	0x40021000
 8009a74:	42020000 	.word	0x42020000

08009a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08c      	sub	sp, #48	; 0x30
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8009a88:	2200      	movs	r2, #0
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	202d      	movs	r0, #45	; 0x2d
 8009a8e:	f001 ff11 	bl	800b8b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009a92:	202d      	movs	r0, #45	; 0x2d
 8009a94:	f001 ff28 	bl	800b8e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8009a98:	4b1f      	ldr	r3, [pc, #124]	; (8009b18 <HAL_InitTick+0xa0>)
 8009a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a9c:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <HAL_InitTick+0xa0>)
 8009a9e:	f043 0301 	orr.w	r3, r3, #1
 8009aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8009aa4:	4b1c      	ldr	r3, [pc, #112]	; (8009b18 <HAL_InitTick+0xa0>)
 8009aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009ab0:	f107 0210 	add.w	r2, r7, #16
 8009ab4:	f107 0314 	add.w	r3, r7, #20
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f004 faf0 	bl	800e0a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8009ac0:	f004 fac6 	bl	800e050 <HAL_RCC_GetPCLK1Freq>
 8009ac4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	4a14      	ldr	r2, [pc, #80]	; (8009b1c <HAL_InitTick+0xa4>)
 8009aca:	fba2 2303 	umull	r2, r3, r2, r3
 8009ace:	0c9b      	lsrs	r3, r3, #18
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8009ad4:	4b12      	ldr	r3, [pc, #72]	; (8009b20 <HAL_InitTick+0xa8>)
 8009ad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009ada:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8009adc:	4b10      	ldr	r3, [pc, #64]	; (8009b20 <HAL_InitTick+0xa8>)
 8009ade:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8009ae4:	4a0e      	ldr	r2, [pc, #56]	; (8009b20 <HAL_InitTick+0xa8>)
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8009aea:	4b0d      	ldr	r3, [pc, #52]	; (8009b20 <HAL_InitTick+0xa8>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009af0:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <HAL_InitTick+0xa8>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8009af6:	480a      	ldr	r0, [pc, #40]	; (8009b20 <HAL_InitTick+0xa8>)
 8009af8:	f006 f936 	bl	800fd68 <HAL_TIM_Base_Init>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d104      	bne.n	8009b0c <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8009b02:	4807      	ldr	r0, [pc, #28]	; (8009b20 <HAL_InitTick+0xa8>)
 8009b04:	f006 f9f0 	bl	800fee8 <HAL_TIM_Base_Start_IT>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	e000      	b.n	8009b0e <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3730      	adds	r7, #48	; 0x30
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	40021000 	.word	0x40021000
 8009b1c:	431bde83 	.word	0x431bde83
 8009b20:	20000b10 	.word	0x20000b10

08009b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009b24:	b480      	push	{r7}
 8009b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009b28:	e7fe      	b.n	8009b28 <NMI_Handler+0x4>

08009b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009b2e:	e7fe      	b.n	8009b2e <HardFault_Handler+0x4>

08009b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009b30:	b480      	push	{r7}
 8009b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009b34:	e7fe      	b.n	8009b34 <MemManage_Handler+0x4>

08009b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009b36:	b480      	push	{r7}
 8009b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009b3a:	e7fe      	b.n	8009b3a <BusFault_Handler+0x4>

08009b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009b40:	e7fe      	b.n	8009b40 <UsageFault_Handler+0x4>

08009b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009b42:	b480      	push	{r7}
 8009b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009b46:	bf00      	nop
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009b54:	4802      	ldr	r0, [pc, #8]	; (8009b60 <DMA1_Channel1_IRQHandler+0x10>)
 8009b56:	f002 f8b3 	bl	800bcc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009b5a:	bf00      	nop
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	200002d0 	.word	0x200002d0

08009b64 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8009b68:	4802      	ldr	r0, [pc, #8]	; (8009b74 <ADC1_2_IRQHandler+0x10>)
 8009b6a:	f000 fdb3 	bl	800a6d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8009b6e:	bf00      	nop
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000268 	.word	0x20000268

08009b78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009b7c:	4802      	ldr	r0, [pc, #8]	; (8009b88 <TIM2_IRQHandler+0x10>)
 8009b7e:	f006 fd16 	bl	80105ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009b82:	bf00      	nop
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20000b10 	.word	0x20000b10

08009b8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009b90:	4802      	ldr	r0, [pc, #8]	; (8009b9c <TIM3_IRQHandler+0x10>)
 8009b92:	f006 fd0c 	bl	80105ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009b96:	bf00      	nop
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	200006e8 	.word	0x200006e8

08009ba0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009ba4:	4802      	ldr	r0, [pc, #8]	; (8009bb0 <TIM6_IRQHandler+0x10>)
 8009ba6:	f006 fd02 	bl	80105ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8009baa:	bf00      	nop
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20000780 	.word	0x20000780

08009bb4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8009bb8:	4802      	ldr	r0, [pc, #8]	; (8009bc4 <UART4_IRQHandler+0x10>)
 8009bba:	f007 fff1 	bl	8011ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8009bbe:	bf00      	nop
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20000420 	.word	0x20000420

08009bc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	af00      	add	r7, sp, #0
  return 1;
 8009bcc:	2301      	movs	r3, #1
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <_kill>:

int _kill(int pid, int sig)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009be2:	f00e f853 	bl	8017c8c <__errno>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2216      	movs	r2, #22
 8009bea:	601a      	str	r2, [r3, #0]
  return -1;
 8009bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <_exit>:

void _exit (int status)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009c00:	f04f 31ff 	mov.w	r1, #4294967295
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff ffe7 	bl	8009bd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009c0a:	e7fe      	b.n	8009c0a <_exit+0x12>

08009c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009c14:	4a14      	ldr	r2, [pc, #80]	; (8009c68 <_sbrk+0x5c>)
 8009c16:	4b15      	ldr	r3, [pc, #84]	; (8009c6c <_sbrk+0x60>)
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009c20:	4b13      	ldr	r3, [pc, #76]	; (8009c70 <_sbrk+0x64>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d102      	bne.n	8009c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009c28:	4b11      	ldr	r3, [pc, #68]	; (8009c70 <_sbrk+0x64>)
 8009c2a:	4a12      	ldr	r2, [pc, #72]	; (8009c74 <_sbrk+0x68>)
 8009c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009c2e:	4b10      	ldr	r3, [pc, #64]	; (8009c70 <_sbrk+0x64>)
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4413      	add	r3, r2
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d207      	bcs.n	8009c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009c3c:	f00e f826 	bl	8017c8c <__errno>
 8009c40:	4603      	mov	r3, r0
 8009c42:	220c      	movs	r2, #12
 8009c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009c46:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4a:	e009      	b.n	8009c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009c4c:	4b08      	ldr	r3, [pc, #32]	; (8009c70 <_sbrk+0x64>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009c52:	4b07      	ldr	r3, [pc, #28]	; (8009c70 <_sbrk+0x64>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4413      	add	r3, r2
 8009c5a:	4a05      	ldr	r2, [pc, #20]	; (8009c70 <_sbrk+0x64>)
 8009c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20030000 	.word	0x20030000
 8009c6c:	00000400 	.word	0x00000400
 8009c70:	20000b5c 	.word	0x20000b5c
 8009c74:	200039f8 	.word	0x200039f8

08009c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009c7c:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <SystemInit+0x20>)
 8009c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c82:	4a05      	ldr	r2, [pc, #20]	; (8009c98 <SystemInit+0x20>)
 8009c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009c8c:	bf00      	nop
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	e000ed00 	.word	0xe000ed00

08009c9c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8009ca2:	4b4f      	ldr	r3, [pc, #316]	; (8009de0 <SystemCoreClockUpdate+0x144>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 0308 	and.w	r3, r3, #8
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d107      	bne.n	8009cbe <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8009cae:	4b4c      	ldr	r3, [pc, #304]	; (8009de0 <SystemCoreClockUpdate+0x144>)
 8009cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cb4:	0a1b      	lsrs	r3, r3, #8
 8009cb6:	f003 030f 	and.w	r3, r3, #15
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	e005      	b.n	8009cca <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8009cbe:	4b48      	ldr	r3, [pc, #288]	; (8009de0 <SystemCoreClockUpdate+0x144>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	091b      	lsrs	r3, r3, #4
 8009cc4:	f003 030f 	and.w	r3, r3, #15
 8009cc8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8009cca:	4a46      	ldr	r2, [pc, #280]	; (8009de4 <SystemCoreClockUpdate+0x148>)
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cd2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009cd4:	4b42      	ldr	r3, [pc, #264]	; (8009de0 <SystemCoreClockUpdate+0x144>)
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 030c 	and.w	r3, r3, #12
 8009cdc:	2b0c      	cmp	r3, #12
 8009cde:	d866      	bhi.n	8009dae <SystemCoreClockUpdate+0x112>
 8009ce0:	a201      	add	r2, pc, #4	; (adr r2, 8009ce8 <SystemCoreClockUpdate+0x4c>)
 8009ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce6:	bf00      	nop
 8009ce8:	08009d1d 	.word	0x08009d1d
 8009cec:	08009daf 	.word	0x08009daf
 8009cf0:	08009daf 	.word	0x08009daf
 8009cf4:	08009daf 	.word	0x08009daf
 8009cf8:	08009d25 	.word	0x08009d25
 8009cfc:	08009daf 	.word	0x08009daf
 8009d00:	08009daf 	.word	0x08009daf
 8009d04:	08009daf 	.word	0x08009daf
 8009d08:	08009d2d 	.word	0x08009d2d
 8009d0c:	08009daf 	.word	0x08009daf
 8009d10:	08009daf 	.word	0x08009daf
 8009d14:	08009daf 	.word	0x08009daf
 8009d18:	08009d35 	.word	0x08009d35
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8009d1c:	4a32      	ldr	r2, [pc, #200]	; (8009de8 <SystemCoreClockUpdate+0x14c>)
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	6013      	str	r3, [r2, #0]
      break;
 8009d22:	e048      	b.n	8009db6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8009d24:	4b30      	ldr	r3, [pc, #192]	; (8009de8 <SystemCoreClockUpdate+0x14c>)
 8009d26:	4a31      	ldr	r2, [pc, #196]	; (8009dec <SystemCoreClockUpdate+0x150>)
 8009d28:	601a      	str	r2, [r3, #0]
      break;
 8009d2a:	e044      	b.n	8009db6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8009d2c:	4b2e      	ldr	r3, [pc, #184]	; (8009de8 <SystemCoreClockUpdate+0x14c>)
 8009d2e:	4a30      	ldr	r2, [pc, #192]	; (8009df0 <SystemCoreClockUpdate+0x154>)
 8009d30:	601a      	str	r2, [r3, #0]
      break;
 8009d32:	e040      	b.n	8009db6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009d34:	4b2a      	ldr	r3, [pc, #168]	; (8009de0 <SystemCoreClockUpdate+0x144>)
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8009d3e:	4b28      	ldr	r3, [pc, #160]	; (8009de0 <SystemCoreClockUpdate+0x144>)
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	091b      	lsrs	r3, r3, #4
 8009d44:	f003 030f 	and.w	r3, r3, #15
 8009d48:	3301      	adds	r3, #1
 8009d4a:	60bb      	str	r3, [r7, #8]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d003      	beq.n	8009d5a <SystemCoreClockUpdate+0xbe>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d006      	beq.n	8009d66 <SystemCoreClockUpdate+0xca>
 8009d58:	e00b      	b.n	8009d72 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8009d5a:	4a24      	ldr	r2, [pc, #144]	; (8009dec <SystemCoreClockUpdate+0x150>)
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d62:	613b      	str	r3, [r7, #16]
          break;
 8009d64:	e00b      	b.n	8009d7e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8009d66:	4a22      	ldr	r2, [pc, #136]	; (8009df0 <SystemCoreClockUpdate+0x154>)
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6e:	613b      	str	r3, [r7, #16]
          break;
 8009d70:	e005      	b.n	8009d7e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d7a:	613b      	str	r3, [r7, #16]
          break;
 8009d7c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8009d7e:	4b18      	ldr	r3, [pc, #96]	; (8009de0 <SystemCoreClockUpdate+0x144>)
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	0a1b      	lsrs	r3, r3, #8
 8009d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	fb02 f303 	mul.w	r3, r2, r3
 8009d8e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8009d90:	4b13      	ldr	r3, [pc, #76]	; (8009de0 <SystemCoreClockUpdate+0x144>)
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	0e5b      	lsrs	r3, r3, #25
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da8:	4a0f      	ldr	r2, [pc, #60]	; (8009de8 <SystemCoreClockUpdate+0x14c>)
 8009daa:	6013      	str	r3, [r2, #0]
      break;
 8009dac:	e003      	b.n	8009db6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8009dae:	4a0e      	ldr	r2, [pc, #56]	; (8009de8 <SystemCoreClockUpdate+0x14c>)
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	6013      	str	r3, [r2, #0]
      break;
 8009db4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8009db6:	4b0a      	ldr	r3, [pc, #40]	; (8009de0 <SystemCoreClockUpdate+0x144>)
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	091b      	lsrs	r3, r3, #4
 8009dbc:	f003 030f 	and.w	r3, r3, #15
 8009dc0:	4a0c      	ldr	r2, [pc, #48]	; (8009df4 <SystemCoreClockUpdate+0x158>)
 8009dc2:	5cd3      	ldrb	r3, [r2, r3]
 8009dc4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8009dc6:	4b08      	ldr	r3, [pc, #32]	; (8009de8 <SystemCoreClockUpdate+0x14c>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd0:	4a05      	ldr	r2, [pc, #20]	; (8009de8 <SystemCoreClockUpdate+0x14c>)
 8009dd2:	6013      	str	r3, [r2, #0]
}
 8009dd4:	bf00      	nop
 8009dd6:	371c      	adds	r7, #28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	40021000 	.word	0x40021000
 8009de4:	08018924 	.word	0x08018924
 8009de8:	20000078 	.word	0x20000078
 8009dec:	00f42400 	.word	0x00f42400
 8009df0:	007a1200 	.word	0x007a1200
 8009df4:	0801890c 	.word	0x0801890c

08009df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8009df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009dfc:	f7ff ff3c 	bl	8009c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009e00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009e02:	e003      	b.n	8009e0c <LoopCopyDataInit>

08009e04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009e04:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009e06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009e08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009e0a:	3104      	adds	r1, #4

08009e0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009e0c:	480a      	ldr	r0, [pc, #40]	; (8009e38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	; (8009e3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8009e10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009e12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009e14:	d3f6      	bcc.n	8009e04 <CopyDataInit>
	ldr	r2, =_sbss
 8009e16:	4a0a      	ldr	r2, [pc, #40]	; (8009e40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009e18:	e002      	b.n	8009e20 <LoopFillZerobss>

08009e1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009e1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009e1c:	f842 3b04 	str.w	r3, [r2], #4

08009e20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009e20:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <LoopForever+0x16>)
	cmp	r2, r3
 8009e22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009e24:	d3f9      	bcc.n	8009e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009e26:	f00d ff37 	bl	8017c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009e2a:	f7fe f80b 	bl	8007e44 <main>

08009e2e <LoopForever>:

LoopForever:
    b LoopForever
 8009e2e:	e7fe      	b.n	8009e2e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8009e30:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8009e34:	08018b00 	.word	0x08018b00
	ldr	r0, =_sdata
 8009e38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009e3c:	200000e8 	.word	0x200000e8
	ldr	r2, =_sbss
 8009e40:	200000e8 	.word	0x200000e8
	ldr	r3, = _ebss
 8009e44:	200039f8 	.word	0x200039f8

08009e48 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009e48:	e7fe      	b.n	8009e48 <COMP_IRQHandler>

08009e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8009e54:	2004      	movs	r0, #4
 8009e56:	f001 fd22 	bl	800b89e <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8009e5a:	f7ff ff1f 	bl	8009c9c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009e5e:	2007      	movs	r0, #7
 8009e60:	f7ff fe0a 	bl	8009a78 <HAL_InitTick>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	71fb      	strb	r3, [r7, #7]
 8009e6e:	e001      	b.n	8009e74 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009e70:	f7ff f8f4 	bl	800905c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009e74:	79fb      	ldrb	r3, [r7, #7]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
	...

08009e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009e84:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <HAL_IncTick+0x20>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4b06      	ldr	r3, [pc, #24]	; (8009ea4 <HAL_IncTick+0x24>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4413      	add	r3, r2
 8009e90:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <HAL_IncTick+0x24>)
 8009e92:	6013      	str	r3, [r2, #0]
}
 8009e94:	bf00      	nop
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20000080 	.word	0x20000080
 8009ea4:	20000b60 	.word	0x20000b60

08009ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8009eac:	4b03      	ldr	r3, [pc, #12]	; (8009ebc <HAL_GetTick+0x14>)
 8009eae:	681b      	ldr	r3, [r3, #0]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	20000b60 	.word	0x20000b60

08009ec0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	609a      	str	r2, [r3, #8]
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b083      	sub	sp, #12
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	431a      	orrs	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	609a      	str	r2, [r3, #8]
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3360      	adds	r3, #96	; 0x60
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	4b08      	ldr	r3, [pc, #32]	; (8009f6c <LL_ADC_SetOffset+0x44>)
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	430a      	orrs	r2, r1
 8009f56:	4313      	orrs	r3, r2
 8009f58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009f60:	bf00      	nop
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	03fff000 	.word	0x03fff000

08009f70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3360      	adds	r3, #96	; 0x60
 8009f7e:	461a      	mov	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	3360      	adds	r3, #96	; 0x60
 8009fac:	461a      	mov	r2, r3
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009fc6:	bf00      	nop
 8009fc8:	371c      	adds	r7, #28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b083      	sub	sp, #12
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	615a      	str	r2, [r3, #20]
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a00c:	2301      	movs	r3, #1
 800a00e:	e000      	b.n	800a012 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a01e:	b480      	push	{r7}
 800a020:	b087      	sub	sp, #28
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	3330      	adds	r3, #48	; 0x30
 800a02e:	461a      	mov	r2, r3
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	0a1b      	lsrs	r3, r3, #8
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	f003 030c 	and.w	r3, r3, #12
 800a03a:	4413      	add	r3, r2
 800a03c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f003 031f 	and.w	r3, r3, #31
 800a048:	211f      	movs	r1, #31
 800a04a:	fa01 f303 	lsl.w	r3, r1, r3
 800a04e:	43db      	mvns	r3, r3
 800a050:	401a      	ands	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	0e9b      	lsrs	r3, r3, #26
 800a056:	f003 011f 	and.w	r1, r3, #31
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	f003 031f 	and.w	r3, r3, #31
 800a060:	fa01 f303 	lsl.w	r3, r1, r3
 800a064:	431a      	orrs	r2, r3
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a06a:	bf00      	nop
 800a06c:	371c      	adds	r7, #28
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a082:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e000      	b.n	800a090 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3314      	adds	r3, #20
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	0e5b      	lsrs	r3, r3, #25
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	f003 0304 	and.w	r3, r3, #4
 800a0b8:	4413      	add	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	0d1b      	lsrs	r3, r3, #20
 800a0c4:	f003 031f 	and.w	r3, r3, #31
 800a0c8:	2107      	movs	r1, #7
 800a0ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ce:	43db      	mvns	r3, r3
 800a0d0:	401a      	ands	r2, r3
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	0d1b      	lsrs	r3, r3, #20
 800a0d6:	f003 031f 	and.w	r3, r3, #31
 800a0da:	6879      	ldr	r1, [r7, #4]
 800a0dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a0e6:	bf00      	nop
 800a0e8:	371c      	adds	r7, #28
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a10c:	43db      	mvns	r3, r3
 800a10e:	401a      	ands	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f003 0318 	and.w	r3, r3, #24
 800a116:	4908      	ldr	r1, [pc, #32]	; (800a138 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a118:	40d9      	lsrs	r1, r3
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	400b      	ands	r3, r1
 800a11e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a122:	431a      	orrs	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a12a:	bf00      	nop
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	0007ffff 	.word	0x0007ffff

0800a13c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f003 031f 	and.w	r3, r3, #31
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800a168:	4618      	mov	r0, r3
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	6093      	str	r3, [r2, #8]
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ac:	d101      	bne.n	800a1b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e000      	b.n	800a1b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a1d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a1d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1fc:	d101      	bne.n	800a202 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e000      	b.n	800a204 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a220:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a224:	f043 0201 	orr.w	r2, r3, #1
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d101      	bne.n	800a250 <LL_ADC_IsEnabled+0x18>
 800a24c:	2301      	movs	r3, #1
 800a24e:	e000      	b.n	800a252 <LL_ADC_IsEnabled+0x1a>
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a25e:	b480      	push	{r7}
 800a260:	b083      	sub	sp, #12
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a26e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a272:	f043 0204 	orr.w	r2, r3, #4
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a27a:	bf00      	nop
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a286:	b480      	push	{r7}
 800a288:	b083      	sub	sp, #12
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f003 0304 	and.w	r3, r3, #4
 800a296:	2b04      	cmp	r3, #4
 800a298:	d101      	bne.n	800a29e <LL_ADC_REG_IsConversionOngoing+0x18>
 800a29a:	2301      	movs	r3, #1
 800a29c:	e000      	b.n	800a2a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	f003 0308 	and.w	r3, r3, #8
 800a2bc:	2b08      	cmp	r3, #8
 800a2be:	d101      	bne.n	800a2c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e000      	b.n	800a2c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
	...

0800a2d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a2d4:	b590      	push	{r4, r7, lr}
 800a2d6:	b089      	sub	sp, #36	; 0x24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e12e      	b.n	800a54c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d109      	bne.n	800a310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7fe fed5 	bl	80090ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff ff3f 	bl	800a198 <LL_ADC_IsDeepPowerDownEnabled>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff ff25 	bl	800a174 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff ff5a 	bl	800a1e8 <LL_ADC_IsInternalRegulatorEnabled>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d115      	bne.n	800a366 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff ff3e 	bl	800a1c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a344:	4b83      	ldr	r3, [pc, #524]	; (800a554 <HAL_ADC_Init+0x280>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	099b      	lsrs	r3, r3, #6
 800a34a:	4a83      	ldr	r2, [pc, #524]	; (800a558 <HAL_ADC_Init+0x284>)
 800a34c:	fba2 2303 	umull	r2, r3, r2, r3
 800a350:	099b      	lsrs	r3, r3, #6
 800a352:	3301      	adds	r3, #1
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a358:	e002      	b.n	800a360 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1f9      	bne.n	800a35a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7ff ff3c 	bl	800a1e8 <LL_ADC_IsInternalRegulatorEnabled>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10d      	bne.n	800a392 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37a:	f043 0210 	orr.w	r2, r3, #16
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a386:	f043 0201 	orr.w	r2, r3, #1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff ff75 	bl	800a286 <LL_ADC_REG_IsConversionOngoing>
 800a39c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a2:	f003 0310 	and.w	r3, r3, #16
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f040 80c7 	bne.w	800a53a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f040 80c3 	bne.w	800a53a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800a3bc:	f043 0202 	orr.w	r2, r3, #2
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff ff35 	bl	800a238 <LL_ADC_IsEnabled>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d110      	bne.n	800a3f6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a3d4:	4861      	ldr	r0, [pc, #388]	; (800a55c <HAL_ADC_Init+0x288>)
 800a3d6:	f7ff ff2f 	bl	800a238 <LL_ADC_IsEnabled>
 800a3da:	4604      	mov	r4, r0
 800a3dc:	4860      	ldr	r0, [pc, #384]	; (800a560 <HAL_ADC_Init+0x28c>)
 800a3de:	f7ff ff2b 	bl	800a238 <LL_ADC_IsEnabled>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	4323      	orrs	r3, r4
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d105      	bne.n	800a3f6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	485c      	ldr	r0, [pc, #368]	; (800a564 <HAL_ADC_Init+0x290>)
 800a3f2:	f7ff fd65 	bl	8009ec0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	7e5b      	ldrb	r3, [r3, #25]
 800a3fa:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a400:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800a406:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800a40c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a414:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a416:	4313      	orrs	r3, r2
 800a418:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d106      	bne.n	800a432 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a428:	3b01      	subs	r3, #1
 800a42a:	045b      	lsls	r3, r3, #17
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	4313      	orrs	r3, r2
 800a430:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a436:	2b00      	cmp	r3, #0
 800a438:	d009      	beq.n	800a44e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a446:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68da      	ldr	r2, [r3, #12]
 800a454:	4b44      	ldr	r3, [pc, #272]	; (800a568 <HAL_ADC_Init+0x294>)
 800a456:	4013      	ands	r3, r2
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	6812      	ldr	r2, [r2, #0]
 800a45c:	69b9      	ldr	r1, [r7, #24]
 800a45e:	430b      	orrs	r3, r1
 800a460:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff ff20 	bl	800a2ac <LL_ADC_INJ_IsConversionOngoing>
 800a46c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d140      	bne.n	800a4f6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d13d      	bne.n	800a4f6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	7e1b      	ldrb	r3, [r3, #24]
 800a482:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a484:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a48c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a48e:	4313      	orrs	r3, r2
 800a490:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a49c:	f023 0306 	bic.w	r3, r3, #6
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	6812      	ldr	r2, [r2, #0]
 800a4a4:	69b9      	ldr	r1, [r7, #24]
 800a4a6:	430b      	orrs	r3, r1
 800a4a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d118      	bne.n	800a4e6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a4be:	f023 0304 	bic.w	r3, r3, #4
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a4ca:	4311      	orrs	r1, r2
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a4d0:	4311      	orrs	r1, r2
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f042 0201 	orr.w	r2, r2, #1
 800a4e2:	611a      	str	r2, [r3, #16]
 800a4e4:	e007      	b.n	800a4f6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	691a      	ldr	r2, [r3, #16]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 0201 	bic.w	r2, r2, #1
 800a4f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d10c      	bne.n	800a518 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a504:	f023 010f 	bic.w	r1, r3, #15
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	69db      	ldr	r3, [r3, #28]
 800a50c:	1e5a      	subs	r2, r3, #1
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	631a      	str	r2, [r3, #48]	; 0x30
 800a516:	e007      	b.n	800a528 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 020f 	bic.w	r2, r2, #15
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a52c:	f023 0303 	bic.w	r3, r3, #3
 800a530:	f043 0201 	orr.w	r2, r3, #1
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	659a      	str	r2, [r3, #88]	; 0x58
 800a538:	e007      	b.n	800a54a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53e:	f043 0210 	orr.w	r2, r3, #16
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a54a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3724      	adds	r7, #36	; 0x24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd90      	pop	{r4, r7, pc}
 800a554:	20000078 	.word	0x20000078
 800a558:	053e2d63 	.word	0x053e2d63
 800a55c:	42028000 	.word	0x42028000
 800a560:	42028100 	.word	0x42028100
 800a564:	42028300 	.word	0x42028300
 800a568:	fff0c007 	.word	0xfff0c007

0800a56c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a578:	4850      	ldr	r0, [pc, #320]	; (800a6bc <HAL_ADC_Start_DMA+0x150>)
 800a57a:	f7ff fddf 	bl	800a13c <LL_ADC_GetMultimode>
 800a57e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff fe7e 	bl	800a286 <LL_ADC_REG_IsConversionOngoing>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f040 808e 	bne.w	800a6ae <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d101      	bne.n	800a5a0 <HAL_ADC_Start_DMA+0x34>
 800a59c:	2302      	movs	r3, #2
 800a59e:	e089      	b.n	800a6b4 <HAL_ADC_Start_DMA+0x148>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	2b05      	cmp	r3, #5
 800a5b2:	d002      	beq.n	800a5ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	2b09      	cmp	r3, #9
 800a5b8:	d172      	bne.n	800a6a0 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 feac 	bl	800b318 <ADC_Enable>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d165      	bne.n	800a696 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a5d2:	f023 0301 	bic.w	r3, r3, #1
 800a5d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a37      	ldr	r2, [pc, #220]	; (800a6c0 <HAL_ADC_Start_DMA+0x154>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d002      	beq.n	800a5ee <HAL_ADC_Start_DMA+0x82>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	e000      	b.n	800a5f0 <HAL_ADC_Start_DMA+0x84>
 800a5ee:	4b35      	ldr	r3, [pc, #212]	; (800a6c4 <HAL_ADC_Start_DMA+0x158>)
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	6812      	ldr	r2, [r2, #0]
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d002      	beq.n	800a5fe <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d105      	bne.n	800a60a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d006      	beq.n	800a624 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a61a:	f023 0206 	bic.w	r2, r3, #6
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	65da      	str	r2, [r3, #92]	; 0x5c
 800a622:	e002      	b.n	800a62a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a62e:	4a26      	ldr	r2, [pc, #152]	; (800a6c8 <HAL_ADC_Start_DMA+0x15c>)
 800a630:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a636:	4a25      	ldr	r2, [pc, #148]	; (800a6cc <HAL_ADC_Start_DMA+0x160>)
 800a638:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a63e:	4a24      	ldr	r2, [pc, #144]	; (800a6d0 <HAL_ADC_Start_DMA+0x164>)
 800a640:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	221c      	movs	r2, #28
 800a648:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f042 0210 	orr.w	r2, r2, #16
 800a660:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68da      	ldr	r2, [r3, #12]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f042 0201 	orr.w	r2, r2, #1
 800a670:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3340      	adds	r3, #64	; 0x40
 800a67c:	4619      	mov	r1, r3
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f001 f9e7 	bl	800ba54 <HAL_DMA_Start_IT>
 800a686:	4603      	mov	r3, r0
 800a688:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff fde5 	bl	800a25e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a694:	e00d      	b.n	800a6b2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800a69e:	e008      	b.n	800a6b2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800a6ac:	e001      	b.n	800a6b2 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	42028300 	.word	0x42028300
 800a6c0:	42028100 	.word	0x42028100
 800a6c4:	42028000 	.word	0x42028000
 800a6c8:	0800b425 	.word	0x0800b425
 800a6cc:	0800b4fd 	.word	0x0800b4fd
 800a6d0:	0800b519 	.word	0x0800b519

0800a6d4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b08a      	sub	sp, #40	; 0x28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a6dc:	2300      	movs	r3, #0
 800a6de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a6f0:	4882      	ldr	r0, [pc, #520]	; (800a8fc <HAL_ADC_IRQHandler+0x228>)
 800a6f2:	f7ff fd23 	bl	800a13c <LL_ADC_GetMultimode>
 800a6f6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	f003 0302 	and.w	r3, r3, #2
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d017      	beq.n	800a732 <HAL_ADC_IRQHandler+0x5e>
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	f003 0302 	and.w	r3, r3, #2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d012      	beq.n	800a732 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	2b00      	cmp	r3, #0
 800a716:	d105      	bne.n	800a724 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a71c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 ff5f 	bl	800b5e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2202      	movs	r2, #2
 800a730:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	f003 0304 	and.w	r3, r3, #4
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d004      	beq.n	800a746 <HAL_ADC_IRQHandler+0x72>
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	f003 0304 	and.w	r3, r3, #4
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10a      	bne.n	800a75c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 8083 	beq.w	800a858 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	f003 0308 	and.w	r3, r3, #8
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d07d      	beq.n	800a858 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a760:	f003 0310 	and.w	r3, r3, #16
 800a764:	2b00      	cmp	r3, #0
 800a766:	d105      	bne.n	800a774 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a76c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4618      	mov	r0, r3
 800a77a:	f7ff fc3d 	bl	8009ff8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d062      	beq.n	800a84a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a5d      	ldr	r2, [pc, #372]	; (800a900 <HAL_ADC_IRQHandler+0x22c>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d002      	beq.n	800a794 <HAL_ADC_IRQHandler+0xc0>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	e000      	b.n	800a796 <HAL_ADC_IRQHandler+0xc2>
 800a794:	4b5b      	ldr	r3, [pc, #364]	; (800a904 <HAL_ADC_IRQHandler+0x230>)
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	6812      	ldr	r2, [r2, #0]
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d008      	beq.n	800a7b0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d005      	beq.n	800a7b0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2b05      	cmp	r3, #5
 800a7a8:	d002      	beq.n	800a7b0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2b09      	cmp	r3, #9
 800a7ae:	d104      	bne.n	800a7ba <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	623b      	str	r3, [r7, #32]
 800a7b8:	e00c      	b.n	800a7d4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a50      	ldr	r2, [pc, #320]	; (800a900 <HAL_ADC_IRQHandler+0x22c>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d002      	beq.n	800a7ca <HAL_ADC_IRQHandler+0xf6>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	e000      	b.n	800a7cc <HAL_ADC_IRQHandler+0xf8>
 800a7ca:	4b4e      	ldr	r3, [pc, #312]	; (800a904 <HAL_ADC_IRQHandler+0x230>)
 800a7cc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d135      	bne.n	800a84a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 0308 	and.w	r3, r3, #8
 800a7e8:	2b08      	cmp	r3, #8
 800a7ea:	d12e      	bne.n	800a84a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fd48 	bl	800a286 <LL_ADC_REG_IsConversionOngoing>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d11a      	bne.n	800a832 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f022 020c 	bic.w	r2, r2, #12
 800a80a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a81c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d112      	bne.n	800a84a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a828:	f043 0201 	orr.w	r2, r3, #1
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	659a      	str	r2, [r3, #88]	; 0x58
 800a830:	e00b      	b.n	800a84a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a836:	f043 0210 	orr.w	r2, r3, #16
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a842:	f043 0201 	orr.w	r2, r3, #1
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7f6 fb56 	bl	8000efc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	220c      	movs	r2, #12
 800a856:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d004      	beq.n	800a86c <HAL_ADC_IRQHandler+0x198>
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	f003 0320 	and.w	r3, r3, #32
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10b      	bne.n	800a884 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 809f 	beq.w	800a9b6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 8099 	beq.w	800a9b6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a888:	f003 0310 	and.w	r3, r3, #16
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d105      	bne.n	800a89c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a894:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff fbe8 	bl	800a076 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a8a6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff fba3 	bl	8009ff8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a8b2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a11      	ldr	r2, [pc, #68]	; (800a900 <HAL_ADC_IRQHandler+0x22c>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d002      	beq.n	800a8c4 <HAL_ADC_IRQHandler+0x1f0>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	e000      	b.n	800a8c6 <HAL_ADC_IRQHandler+0x1f2>
 800a8c4:	4b0f      	ldr	r3, [pc, #60]	; (800a904 <HAL_ADC_IRQHandler+0x230>)
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	6812      	ldr	r2, [r2, #0]
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d008      	beq.n	800a8e0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d005      	beq.n	800a8e0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	2b06      	cmp	r3, #6
 800a8d8:	d002      	beq.n	800a8e0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b07      	cmp	r3, #7
 800a8de:	d104      	bne.n	800a8ea <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	623b      	str	r3, [r7, #32]
 800a8e8:	e013      	b.n	800a912 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a04      	ldr	r2, [pc, #16]	; (800a900 <HAL_ADC_IRQHandler+0x22c>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d009      	beq.n	800a908 <HAL_ADC_IRQHandler+0x234>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	e007      	b.n	800a90a <HAL_ADC_IRQHandler+0x236>
 800a8fa:	bf00      	nop
 800a8fc:	42028300 	.word	0x42028300
 800a900:	42028100 	.word	0x42028100
 800a904:	42028000 	.word	0x42028000
 800a908:	4b7d      	ldr	r3, [pc, #500]	; (800ab00 <HAL_ADC_IRQHandler+0x42c>)
 800a90a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d047      	beq.n	800a9a8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a918:	6a3b      	ldr	r3, [r7, #32]
 800a91a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d007      	beq.n	800a932 <HAL_ADC_IRQHandler+0x25e>
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d03f      	beq.n	800a9a8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d13a      	bne.n	800a9a8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a93c:	2b40      	cmp	r3, #64	; 0x40
 800a93e:	d133      	bne.n	800a9a8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a940:	6a3b      	ldr	r3, [r7, #32]
 800a942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a946:	2b00      	cmp	r3, #0
 800a948:	d12e      	bne.n	800a9a8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff fcac 	bl	800a2ac <LL_ADC_INJ_IsConversionOngoing>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d11a      	bne.n	800a990 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a968:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a96e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a97a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d112      	bne.n	800a9a8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a986:	f043 0201 	orr.w	r2, r3, #1
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	659a      	str	r2, [r3, #88]	; 0x58
 800a98e:	e00b      	b.n	800a9a8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a994:	f043 0210 	orr.w	r2, r3, #16
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a0:	f043 0201 	orr.w	r2, r3, #1
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fdf5 	bl	800b598 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2260      	movs	r2, #96	; 0x60
 800a9b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d011      	beq.n	800a9e4 <HAL_ADC_IRQHandler+0x310>
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00c      	beq.n	800a9e4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f8a0 	bl	800ab1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2280      	movs	r2, #128	; 0x80
 800a9e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d012      	beq.n	800aa14 <HAL_ADC_IRQHandler+0x340>
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00d      	beq.n	800aa14 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fddb 	bl	800b5c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d012      	beq.n	800aa44 <HAL_ADC_IRQHandler+0x370>
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00d      	beq.n	800aa44 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fdcd 	bl	800b5d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	f003 0310 	and.w	r3, r3, #16
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d036      	beq.n	800aabc <HAL_ADC_IRQHandler+0x3e8>
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d031      	beq.n	800aabc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800aa60:	2301      	movs	r3, #1
 800aa62:	627b      	str	r3, [r7, #36]	; 0x24
 800aa64:	e014      	b.n	800aa90 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d008      	beq.n	800aa7e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800aa6c:	4825      	ldr	r0, [pc, #148]	; (800ab04 <HAL_ADC_IRQHandler+0x430>)
 800aa6e:	f7ff fb73 	bl	800a158 <LL_ADC_GetMultiDMATransfer>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00b      	beq.n	800aa90 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	627b      	str	r3, [r7, #36]	; 0x24
 800aa7c:	e008      	b.n	800aa90 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	f003 0301 	and.w	r3, r3, #1
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d10e      	bne.n	800aab4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa9a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa6:	f043 0202 	orr.w	r2, r3, #2
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f83e 	bl	800ab30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2210      	movs	r2, #16
 800aaba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d018      	beq.n	800aaf8 <HAL_ADC_IRQHandler+0x424>
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d013      	beq.n	800aaf8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aae0:	f043 0208 	orr.w	r2, r3, #8
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aaf0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fd5a 	bl	800b5ac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800aaf8:	bf00      	nop
 800aafa:	3728      	adds	r7, #40	; 0x28
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	42028000 	.word	0x42028000
 800ab04:	42028300 	.word	0x42028300

0800ab08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800ab44:	b590      	push	{r4, r7, lr}
 800ab46:	b0b7      	sub	sp, #220	; 0xdc
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d101      	bne.n	800ab66 <HAL_ADC_ConfigChannel+0x22>
 800ab62:	2302      	movs	r3, #2
 800ab64:	e3c1      	b.n	800b2ea <HAL_ADC_ConfigChannel+0x7a6>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7ff fb87 	bl	800a286 <LL_ADC_REG_IsConversionOngoing>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f040 83a6 	bne.w	800b2cc <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6818      	ldr	r0, [r3, #0]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	6859      	ldr	r1, [r3, #4]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f7ff fa46 	bl	800a01e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff fb75 	bl	800a286 <LL_ADC_REG_IsConversionOngoing>
 800ab9c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff fb81 	bl	800a2ac <LL_ADC_INJ_IsConversionOngoing>
 800abaa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800abae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f040 81c1 	bne.w	800af3a <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800abb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f040 81bc 	bne.w	800af3a <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abca:	d10f      	bne.n	800abec <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2200      	movs	r2, #0
 800abd6:	4619      	mov	r1, r3
 800abd8:	f7ff fa60 	bl	800a09c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7ff f9f4 	bl	8009fd2 <LL_ADC_SetSamplingTimeCommonConfig>
 800abea:	e00e      	b.n	800ac0a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6818      	ldr	r0, [r3, #0]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	6819      	ldr	r1, [r3, #0]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	461a      	mov	r2, r3
 800abfa:	f7ff fa4f 	bl	800a09c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2100      	movs	r1, #0
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff f9e4 	bl	8009fd2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	695a      	ldr	r2, [r3, #20]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	08db      	lsrs	r3, r3, #3
 800ac16:	f003 0303 	and.w	r3, r3, #3
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	2b04      	cmp	r3, #4
 800ac2a:	d00a      	beq.n	800ac42 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6818      	ldr	r0, [r3, #0]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	6919      	ldr	r1, [r3, #16]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac3c:	f7ff f974 	bl	8009f28 <LL_ADC_SetOffset>
 800ac40:	e17b      	b.n	800af3a <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2100      	movs	r1, #0
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7ff f991 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10a      	bne.n	800ac6e <HAL_ADC_ConfigChannel+0x12a>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff f986 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800ac64:	4603      	mov	r3, r0
 800ac66:	0e9b      	lsrs	r3, r3, #26
 800ac68:	f003 021f 	and.w	r2, r3, #31
 800ac6c:	e01e      	b.n	800acac <HAL_ADC_ConfigChannel+0x168>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2100      	movs	r1, #0
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff f97b 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac84:	fa93 f3a3 	rbit	r3, r3
 800ac88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ac8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ac94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800ac9c:	2320      	movs	r3, #32
 800ac9e:	e004      	b.n	800acaa <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800aca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aca4:	fab3 f383 	clz	r3, r3
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d105      	bne.n	800acc4 <HAL_ADC_ConfigChannel+0x180>
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	0e9b      	lsrs	r3, r3, #26
 800acbe:	f003 031f 	and.w	r3, r3, #31
 800acc2:	e018      	b.n	800acf6 <HAL_ADC_ConfigChannel+0x1b2>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800accc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800acd0:	fa93 f3a3 	rbit	r3, r3
 800acd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800acd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800ace0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800ace8:	2320      	movs	r3, #32
 800acea:	e004      	b.n	800acf6 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 800acec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800acf0:	fab3 f383 	clz	r3, r3
 800acf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d106      	bne.n	800ad08 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2200      	movs	r2, #0
 800ad00:	2100      	movs	r1, #0
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff f94a 	bl	8009f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff f92e 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800ad14:	4603      	mov	r3, r0
 800ad16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10a      	bne.n	800ad34 <HAL_ADC_ConfigChannel+0x1f0>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2101      	movs	r1, #1
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7ff f923 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	0e9b      	lsrs	r3, r3, #26
 800ad2e:	f003 021f 	and.w	r2, r3, #31
 800ad32:	e01e      	b.n	800ad72 <HAL_ADC_ConfigChannel+0x22e>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2101      	movs	r1, #1
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7ff f918 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800ad40:	4603      	mov	r3, r0
 800ad42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad4a:	fa93 f3a3 	rbit	r3, r3
 800ad4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800ad52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800ad5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800ad62:	2320      	movs	r3, #32
 800ad64:	e004      	b.n	800ad70 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800ad66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad6a:	fab3 f383 	clz	r3, r3
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d105      	bne.n	800ad8a <HAL_ADC_ConfigChannel+0x246>
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	0e9b      	lsrs	r3, r3, #26
 800ad84:	f003 031f 	and.w	r3, r3, #31
 800ad88:	e018      	b.n	800adbc <HAL_ADC_ConfigChannel+0x278>
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad96:	fa93 f3a3 	rbit	r3, r3
 800ad9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800ad9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ada2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800ada6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d101      	bne.n	800adb2 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800adae:	2320      	movs	r3, #32
 800adb0:	e004      	b.n	800adbc <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800adb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800adb6:	fab3 f383 	clz	r3, r3
 800adba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d106      	bne.n	800adce <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2200      	movs	r2, #0
 800adc6:	2101      	movs	r1, #1
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff f8e7 	bl	8009f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2102      	movs	r1, #2
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff f8cb 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800adda:	4603      	mov	r3, r0
 800addc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <HAL_ADC_ConfigChannel+0x2b6>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2102      	movs	r1, #2
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff f8c0 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800adf0:	4603      	mov	r3, r0
 800adf2:	0e9b      	lsrs	r3, r3, #26
 800adf4:	f003 021f 	and.w	r2, r3, #31
 800adf8:	e01e      	b.n	800ae38 <HAL_ADC_ConfigChannel+0x2f4>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2102      	movs	r1, #2
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7ff f8b5 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800ae06:	4603      	mov	r3, r0
 800ae08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae10:	fa93 f3a3 	rbit	r3, r3
 800ae14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800ae18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800ae20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 800ae28:	2320      	movs	r3, #32
 800ae2a:	e004      	b.n	800ae36 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 800ae2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae30:	fab3 f383 	clz	r3, r3
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d105      	bne.n	800ae50 <HAL_ADC_ConfigChannel+0x30c>
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	0e9b      	lsrs	r3, r3, #26
 800ae4a:	f003 031f 	and.w	r3, r3, #31
 800ae4e:	e016      	b.n	800ae7e <HAL_ADC_ConfigChannel+0x33a>
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae5c:	fa93 f3a3 	rbit	r3, r3
 800ae60:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800ae62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800ae68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 800ae70:	2320      	movs	r3, #32
 800ae72:	e004      	b.n	800ae7e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800ae74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae78:	fab3 f383 	clz	r3, r3
 800ae7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d106      	bne.n	800ae90 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2200      	movs	r2, #0
 800ae88:	2102      	movs	r1, #2
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff f886 	bl	8009f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2103      	movs	r1, #3
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7ff f86a 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10a      	bne.n	800aebc <HAL_ADC_ConfigChannel+0x378>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2103      	movs	r1, #3
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7ff f85f 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	0e9b      	lsrs	r3, r3, #26
 800aeb6:	f003 021f 	and.w	r2, r3, #31
 800aeba:	e017      	b.n	800aeec <HAL_ADC_ConfigChannel+0x3a8>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2103      	movs	r1, #3
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff f854 	bl	8009f70 <LL_ADC_GetOffsetChannel>
 800aec8:	4603      	mov	r3, r0
 800aeca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aece:	fa93 f3a3 	rbit	r3, r3
 800aed2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800aed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aed6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800aed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800aede:	2320      	movs	r3, #32
 800aee0:	e003      	b.n	800aeea <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800aee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aee4:	fab3 f383 	clz	r3, r3
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d105      	bne.n	800af04 <HAL_ADC_ConfigChannel+0x3c0>
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	0e9b      	lsrs	r3, r3, #26
 800aefe:	f003 031f 	and.w	r3, r3, #31
 800af02:	e011      	b.n	800af28 <HAL_ADC_ConfigChannel+0x3e4>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af0c:	fa93 f3a3 	rbit	r3, r3
 800af10:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800af12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800af16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 800af1c:	2320      	movs	r3, #32
 800af1e:	e003      	b.n	800af28 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800af20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af22:	fab3 f383 	clz	r3, r3
 800af26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800af28:	429a      	cmp	r2, r3
 800af2a:	d106      	bne.n	800af3a <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2200      	movs	r2, #0
 800af32:	2103      	movs	r1, #3
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff f831 	bl	8009f9c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff f97a 	bl	800a238 <LL_ADC_IsEnabled>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	f040 81c9 	bne.w	800b2de <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6818      	ldr	r0, [r3, #0]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	6819      	ldr	r1, [r3, #0]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	461a      	mov	r2, r3
 800af5a:	f7ff f8cb 	bl	800a0f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	4a8f      	ldr	r2, [pc, #572]	; (800b1a0 <HAL_ADC_ConfigChannel+0x65c>)
 800af64:	4293      	cmp	r3, r2
 800af66:	f040 8131 	bne.w	800b1cc <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10b      	bne.n	800af92 <HAL_ADC_ConfigChannel+0x44e>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	0e9b      	lsrs	r3, r3, #26
 800af80:	3301      	adds	r3, #1
 800af82:	f003 031f 	and.w	r3, r3, #31
 800af86:	2b09      	cmp	r3, #9
 800af88:	bf94      	ite	ls
 800af8a:	2301      	movls	r3, #1
 800af8c:	2300      	movhi	r3, #0
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	e019      	b.n	800afc6 <HAL_ADC_ConfigChannel+0x482>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af9a:	fa93 f3a3 	rbit	r3, r3
 800af9e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800afa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afa2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800afa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800afaa:	2320      	movs	r3, #32
 800afac:	e003      	b.n	800afb6 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800afae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afb0:	fab3 f383 	clz	r3, r3
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	3301      	adds	r3, #1
 800afb8:	f003 031f 	and.w	r3, r3, #31
 800afbc:	2b09      	cmp	r3, #9
 800afbe:	bf94      	ite	ls
 800afc0:	2301      	movls	r3, #1
 800afc2:	2300      	movhi	r3, #0
 800afc4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d079      	beq.n	800b0be <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d107      	bne.n	800afe6 <HAL_ADC_ConfigChannel+0x4a2>
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	0e9b      	lsrs	r3, r3, #26
 800afdc:	3301      	adds	r3, #1
 800afde:	069b      	lsls	r3, r3, #26
 800afe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800afe4:	e015      	b.n	800b012 <HAL_ADC_ConfigChannel+0x4ce>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afee:	fa93 f3a3 	rbit	r3, r3
 800aff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800aff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800aff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800affe:	2320      	movs	r3, #32
 800b000:	e003      	b.n	800b00a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800b002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b004:	fab3 f383 	clz	r3, r3
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	3301      	adds	r3, #1
 800b00c:	069b      	lsls	r3, r3, #26
 800b00e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d109      	bne.n	800b032 <HAL_ADC_ConfigChannel+0x4ee>
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	0e9b      	lsrs	r3, r3, #26
 800b024:	3301      	adds	r3, #1
 800b026:	f003 031f 	and.w	r3, r3, #31
 800b02a:	2101      	movs	r1, #1
 800b02c:	fa01 f303 	lsl.w	r3, r1, r3
 800b030:	e017      	b.n	800b062 <HAL_ADC_ConfigChannel+0x51e>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b03a:	fa93 f3a3 	rbit	r3, r3
 800b03e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800b040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b042:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800b044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800b04a:	2320      	movs	r3, #32
 800b04c:	e003      	b.n	800b056 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800b04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b050:	fab3 f383 	clz	r3, r3
 800b054:	b2db      	uxtb	r3, r3
 800b056:	3301      	adds	r3, #1
 800b058:	f003 031f 	and.w	r3, r3, #31
 800b05c:	2101      	movs	r1, #1
 800b05e:	fa01 f303 	lsl.w	r3, r1, r3
 800b062:	ea42 0103 	orr.w	r1, r2, r3
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <HAL_ADC_ConfigChannel+0x544>
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	0e9b      	lsrs	r3, r3, #26
 800b078:	3301      	adds	r3, #1
 800b07a:	f003 021f 	and.w	r2, r3, #31
 800b07e:	4613      	mov	r3, r2
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	4413      	add	r3, r2
 800b084:	051b      	lsls	r3, r3, #20
 800b086:	e018      	b.n	800b0ba <HAL_ADC_ConfigChannel+0x576>
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	fa93 f3a3 	rbit	r3, r3
 800b094:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800b096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b098:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800b09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800b0a0:	2320      	movs	r3, #32
 800b0a2:	e003      	b.n	800b0ac <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800b0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a6:	fab3 f383 	clz	r3, r3
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	f003 021f 	and.w	r2, r3, #31
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	005b      	lsls	r3, r3, #1
 800b0b6:	4413      	add	r3, r2
 800b0b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	e081      	b.n	800b1c2 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d107      	bne.n	800b0da <HAL_ADC_ConfigChannel+0x596>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	0e9b      	lsrs	r3, r3, #26
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	069b      	lsls	r3, r3, #26
 800b0d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b0d8:	e015      	b.n	800b106 <HAL_ADC_ConfigChannel+0x5c2>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	fa93 f3a3 	rbit	r3, r3
 800b0e6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800b0f2:	2320      	movs	r3, #32
 800b0f4:	e003      	b.n	800b0fe <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	fab3 f383 	clz	r3, r3
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	3301      	adds	r3, #1
 800b100:	069b      	lsls	r3, r3, #26
 800b102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d109      	bne.n	800b126 <HAL_ADC_ConfigChannel+0x5e2>
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	0e9b      	lsrs	r3, r3, #26
 800b118:	3301      	adds	r3, #1
 800b11a:	f003 031f 	and.w	r3, r3, #31
 800b11e:	2101      	movs	r1, #1
 800b120:	fa01 f303 	lsl.w	r3, r1, r3
 800b124:	e017      	b.n	800b156 <HAL_ADC_ConfigChannel+0x612>
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	fa93 f3a3 	rbit	r3, r3
 800b132:	61fb      	str	r3, [r7, #28]
  return result;
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800b13e:	2320      	movs	r3, #32
 800b140:	e003      	b.n	800b14a <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	fab3 f383 	clz	r3, r3
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	3301      	adds	r3, #1
 800b14c:	f003 031f 	and.w	r3, r3, #31
 800b150:	2101      	movs	r1, #1
 800b152:	fa01 f303 	lsl.w	r3, r1, r3
 800b156:	ea42 0103 	orr.w	r1, r2, r3
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10d      	bne.n	800b182 <HAL_ADC_ConfigChannel+0x63e>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	0e9b      	lsrs	r3, r3, #26
 800b16c:	3301      	adds	r3, #1
 800b16e:	f003 021f 	and.w	r2, r3, #31
 800b172:	4613      	mov	r3, r2
 800b174:	005b      	lsls	r3, r3, #1
 800b176:	4413      	add	r3, r2
 800b178:	3b1e      	subs	r3, #30
 800b17a:	051b      	lsls	r3, r3, #20
 800b17c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b180:	e01e      	b.n	800b1c0 <HAL_ADC_ConfigChannel+0x67c>
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	fa93 f3a3 	rbit	r3, r3
 800b18e:	613b      	str	r3, [r7, #16]
  return result;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d104      	bne.n	800b1a4 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800b19a:	2320      	movs	r3, #32
 800b19c:	e006      	b.n	800b1ac <HAL_ADC_ConfigChannel+0x668>
 800b19e:	bf00      	nop
 800b1a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	fab3 f383 	clz	r3, r3
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	f003 021f 	and.w	r2, r3, #31
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	4413      	add	r3, r2
 800b1b8:	3b1e      	subs	r3, #30
 800b1ba:	051b      	lsls	r3, r3, #20
 800b1bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b1c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	f7fe ff68 	bl	800a09c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	4b48      	ldr	r3, [pc, #288]	; (800b2f4 <HAL_ADC_ConfigChannel+0x7b0>)
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 8082 	beq.w	800b2de <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b1da:	4847      	ldr	r0, [pc, #284]	; (800b2f8 <HAL_ADC_ConfigChannel+0x7b4>)
 800b1dc:	f7fe fe96 	bl	8009f0c <LL_ADC_GetCommonPathInternalCh>
 800b1e0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b1e4:	4845      	ldr	r0, [pc, #276]	; (800b2fc <HAL_ADC_ConfigChannel+0x7b8>)
 800b1e6:	f7ff f827 	bl	800a238 <LL_ADC_IsEnabled>
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	4844      	ldr	r0, [pc, #272]	; (800b300 <HAL_ADC_ConfigChannel+0x7bc>)
 800b1ee:	f7ff f823 	bl	800a238 <LL_ADC_IsEnabled>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	4323      	orrs	r3, r4
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d15e      	bne.n	800b2b8 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a41      	ldr	r2, [pc, #260]	; (800b304 <HAL_ADC_ConfigChannel+0x7c0>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d127      	bne.n	800b254 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b208:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d121      	bne.n	800b254 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a39      	ldr	r2, [pc, #228]	; (800b2fc <HAL_ADC_ConfigChannel+0x7b8>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d161      	bne.n	800b2de <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b21a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b21e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b222:	4619      	mov	r1, r3
 800b224:	4834      	ldr	r0, [pc, #208]	; (800b2f8 <HAL_ADC_ConfigChannel+0x7b4>)
 800b226:	f7fe fe5e 	bl	8009ee6 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b22a:	4b37      	ldr	r3, [pc, #220]	; (800b308 <HAL_ADC_ConfigChannel+0x7c4>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	099b      	lsrs	r3, r3, #6
 800b230:	4a36      	ldr	r2, [pc, #216]	; (800b30c <HAL_ADC_ConfigChannel+0x7c8>)
 800b232:	fba2 2303 	umull	r2, r3, r2, r3
 800b236:	099b      	lsrs	r3, r3, #6
 800b238:	1c5a      	adds	r2, r3, #1
 800b23a:	4613      	mov	r3, r2
 800b23c:	005b      	lsls	r3, r3, #1
 800b23e:	4413      	add	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800b242:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800b244:	e002      	b.n	800b24c <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3b01      	subs	r3, #1
 800b24a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1f9      	bne.n	800b246 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b252:	e044      	b.n	800b2de <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a2d      	ldr	r2, [pc, #180]	; (800b310 <HAL_ADC_ConfigChannel+0x7cc>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d113      	bne.n	800b286 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b25e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10d      	bne.n	800b286 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a23      	ldr	r2, [pc, #140]	; (800b2fc <HAL_ADC_ConfigChannel+0x7b8>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d134      	bne.n	800b2de <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b278:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b27c:	4619      	mov	r1, r3
 800b27e:	481e      	ldr	r0, [pc, #120]	; (800b2f8 <HAL_ADC_ConfigChannel+0x7b4>)
 800b280:	f7fe fe31 	bl	8009ee6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b284:	e02b      	b.n	800b2de <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a22      	ldr	r2, [pc, #136]	; (800b314 <HAL_ADC_ConfigChannel+0x7d0>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d126      	bne.n	800b2de <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d120      	bne.n	800b2de <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a16      	ldr	r2, [pc, #88]	; (800b2fc <HAL_ADC_ConfigChannel+0x7b8>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d11b      	bne.n	800b2de <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b2a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b2aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	4811      	ldr	r0, [pc, #68]	; (800b2f8 <HAL_ADC_ConfigChannel+0x7b4>)
 800b2b2:	f7fe fe18 	bl	8009ee6 <LL_ADC_SetCommonPathInternalCh>
 800b2b6:	e012      	b.n	800b2de <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2bc:	f043 0220 	orr.w	r2, r3, #32
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800b2ca:	e008      	b.n	800b2de <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2d0:	f043 0220 	orr.w	r2, r3, #32
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800b2e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	37dc      	adds	r7, #220	; 0xdc
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd90      	pop	{r4, r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	80080000 	.word	0x80080000
 800b2f8:	42028300 	.word	0x42028300
 800b2fc:	42028000 	.word	0x42028000
 800b300:	42028100 	.word	0x42028100
 800b304:	c7520000 	.word	0xc7520000
 800b308:	20000078 	.word	0x20000078
 800b30c:	053e2d63 	.word	0x053e2d63
 800b310:	cb840000 	.word	0xcb840000
 800b314:	80000001 	.word	0x80000001

0800b318 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b320:	2300      	movs	r3, #0
 800b322:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe ff85 	bl	800a238 <LL_ADC_IsEnabled>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d169      	bne.n	800b408 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	689a      	ldr	r2, [r3, #8]
 800b33a:	4b36      	ldr	r3, [pc, #216]	; (800b414 <ADC_Enable+0xfc>)
 800b33c:	4013      	ands	r3, r2
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00d      	beq.n	800b35e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b346:	f043 0210 	orr.w	r2, r3, #16
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b352:	f043 0201 	orr.w	r2, r3, #1
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e055      	b.n	800b40a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f7fe ff54 	bl	800a210 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b368:	482b      	ldr	r0, [pc, #172]	; (800b418 <ADC_Enable+0x100>)
 800b36a:	f7fe fdcf 	bl	8009f0c <LL_ADC_GetCommonPathInternalCh>
 800b36e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b374:	2b00      	cmp	r3, #0
 800b376:	d013      	beq.n	800b3a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b378:	4b28      	ldr	r3, [pc, #160]	; (800b41c <ADC_Enable+0x104>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	099b      	lsrs	r3, r3, #6
 800b37e:	4a28      	ldr	r2, [pc, #160]	; (800b420 <ADC_Enable+0x108>)
 800b380:	fba2 2303 	umull	r2, r3, r2, r3
 800b384:	099b      	lsrs	r3, r3, #6
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	4613      	mov	r3, r2
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b392:	e002      	b.n	800b39a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	3b01      	subs	r3, #1
 800b398:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1f9      	bne.n	800b394 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b3a0:	f7fe fd82 	bl	8009ea8 <HAL_GetTick>
 800b3a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b3a6:	e028      	b.n	800b3fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fe ff43 	bl	800a238 <LL_ADC_IsEnabled>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d104      	bne.n	800b3c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fe ff27 	bl	800a210 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b3c2:	f7fe fd71 	bl	8009ea8 <HAL_GetTick>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d914      	bls.n	800b3fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 0301 	and.w	r3, r3, #1
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d00d      	beq.n	800b3fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3e2:	f043 0210 	orr.w	r2, r3, #16
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ee:	f043 0201 	orr.w	r2, r3, #1
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e007      	b.n	800b40a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	2b01      	cmp	r3, #1
 800b406:	d1cf      	bne.n	800b3a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	8000003f 	.word	0x8000003f
 800b418:	42028300 	.word	0x42028300
 800b41c:	20000078 	.word	0x20000078
 800b420:	053e2d63 	.word	0x053e2d63

0800b424 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b430:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b436:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d14b      	bne.n	800b4d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b442:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 0308 	and.w	r3, r3, #8
 800b454:	2b00      	cmp	r3, #0
 800b456:	d021      	beq.n	800b49c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fe fdcb 	bl	8009ff8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d032      	beq.n	800b4ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d12b      	bne.n	800b4ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b47a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d11f      	bne.n	800b4ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b492:	f043 0201 	orr.w	r2, r3, #1
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	659a      	str	r2, [r3, #88]	; 0x58
 800b49a:	e018      	b.n	800b4ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	f003 0302 	and.w	r3, r3, #2
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d111      	bne.n	800b4ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d105      	bne.n	800b4ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4c6:	f043 0201 	orr.w	r2, r3, #1
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f7f5 fd14 	bl	8000efc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b4d4:	e00e      	b.n	800b4f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4da:	f003 0310 	and.w	r3, r3, #16
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f7ff fb24 	bl	800ab30 <HAL_ADC_ErrorCallback>
}
 800b4e8:	e004      	b.n	800b4f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	4798      	blx	r3
}
 800b4f4:	bf00      	nop
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b508:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f7ff fafc 	bl	800ab08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b510:	bf00      	nop
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b524:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b536:	f043 0204 	orr.w	r2, r3, #4
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7ff faf6 	bl	800ab30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b544:	bf00      	nop
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <LL_ADC_IsEnabled>:
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d101      	bne.n	800b564 <LL_ADC_IsEnabled+0x18>
 800b560:	2301      	movs	r3, #1
 800b562:	e000      	b.n	800b566 <LL_ADC_IsEnabled+0x1a>
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <LL_ADC_REG_IsConversionOngoing>:
{
 800b572:	b480      	push	{r7}
 800b574:	b083      	sub	sp, #12
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f003 0304 	and.w	r3, r3, #4
 800b582:	2b04      	cmp	r3, #4
 800b584:	d101      	bne.n	800b58a <LL_ADC_REG_IsConversionOngoing+0x18>
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800b5fc:	b590      	push	{r4, r7, lr}
 800b5fe:	b0a1      	sub	sp, #132	; 0x84
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b612:	2b01      	cmp	r3, #1
 800b614:	d101      	bne.n	800b61a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b616:	2302      	movs	r3, #2
 800b618:	e089      	b.n	800b72e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800b622:	2300      	movs	r3, #0
 800b624:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800b626:	2300      	movs	r3, #0
 800b628:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a42      	ldr	r2, [pc, #264]	; (800b738 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d102      	bne.n	800b63a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b634:	4b41      	ldr	r3, [pc, #260]	; (800b73c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	e001      	b.n	800b63e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10b      	bne.n	800b65c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b648:	f043 0220 	orr.w	r2, r3, #32
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e068      	b.n	800b72e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff ff87 	bl	800b572 <LL_ADC_REG_IsConversionOngoing>
 800b664:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7ff ff81 	bl	800b572 <LL_ADC_REG_IsConversionOngoing>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d14a      	bne.n	800b70c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800b676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d147      	bne.n	800b70c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b67c:	4b30      	ldr	r3, [pc, #192]	; (800b740 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800b67e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d027      	beq.n	800b6d8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	6859      	ldr	r1, [r3, #4]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b69a:	035b      	lsls	r3, r3, #13
 800b69c:	430b      	orrs	r3, r1
 800b69e:	431a      	orrs	r2, r3
 800b6a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b6a4:	4824      	ldr	r0, [pc, #144]	; (800b738 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800b6a6:	f7ff ff51 	bl	800b54c <LL_ADC_IsEnabled>
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	4823      	ldr	r0, [pc, #140]	; (800b73c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800b6ae:	f7ff ff4d 	bl	800b54c <LL_ADC_IsEnabled>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	4323      	orrs	r3, r4
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d132      	bne.n	800b720 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b6ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800b6c2:	f023 030f 	bic.w	r3, r3, #15
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	6811      	ldr	r1, [r2, #0]
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	6892      	ldr	r2, [r2, #8]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	431a      	orrs	r2, r3
 800b6d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6d4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b6d6:	e023      	b.n	800b720 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800b6d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b6e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b6e4:	4814      	ldr	r0, [pc, #80]	; (800b738 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800b6e6:	f7ff ff31 	bl	800b54c <LL_ADC_IsEnabled>
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	4813      	ldr	r0, [pc, #76]	; (800b73c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800b6ee:	f7ff ff2d 	bl	800b54c <LL_ADC_IsEnabled>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	4323      	orrs	r3, r4
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d112      	bne.n	800b720 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b6fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800b702:	f023 030f 	bic.w	r3, r3, #15
 800b706:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b708:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b70a:	e009      	b.n	800b720 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b710:	f043 0220 	orr.w	r2, r3, #32
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800b71e:	e000      	b.n	800b722 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b720:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800b72a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3784      	adds	r7, #132	; 0x84
 800b732:	46bd      	mov	sp, r7
 800b734:	bd90      	pop	{r4, r7, pc}
 800b736:	bf00      	nop
 800b738:	42028000 	.word	0x42028000
 800b73c:	42028100 	.word	0x42028100
 800b740:	42028300 	.word	0x42028300

0800b744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f003 0307 	and.w	r3, r3, #7
 800b752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b754:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <__NVIC_SetPriorityGrouping+0x44>)
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b75a:	68ba      	ldr	r2, [r7, #8]
 800b75c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b760:	4013      	ands	r3, r2
 800b762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b76c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b776:	4a04      	ldr	r2, [pc, #16]	; (800b788 <__NVIC_SetPriorityGrouping+0x44>)
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	60d3      	str	r3, [r2, #12]
}
 800b77c:	bf00      	nop
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	e000ed00 	.word	0xe000ed00

0800b78c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b790:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <__NVIC_GetPriorityGrouping+0x18>)
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	0a1b      	lsrs	r3, r3, #8
 800b796:	f003 0307 	and.w	r3, r3, #7
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	e000ed00 	.word	0xe000ed00

0800b7a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	db0b      	blt.n	800b7d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	f003 021f 	and.w	r2, r3, #31
 800b7c0:	4907      	ldr	r1, [pc, #28]	; (800b7e0 <__NVIC_EnableIRQ+0x38>)
 800b7c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7c6:	095b      	lsrs	r3, r3, #5
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	fa00 f202 	lsl.w	r2, r0, r2
 800b7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b7d2:	bf00      	nop
 800b7d4:	370c      	adds	r7, #12
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	e000e100 	.word	0xe000e100

0800b7e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	6039      	str	r1, [r7, #0]
 800b7ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	db0a      	blt.n	800b80e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	490c      	ldr	r1, [pc, #48]	; (800b830 <__NVIC_SetPriority+0x4c>)
 800b7fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b802:	0152      	lsls	r2, r2, #5
 800b804:	b2d2      	uxtb	r2, r2
 800b806:	440b      	add	r3, r1
 800b808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b80c:	e00a      	b.n	800b824 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	b2da      	uxtb	r2, r3
 800b812:	4908      	ldr	r1, [pc, #32]	; (800b834 <__NVIC_SetPriority+0x50>)
 800b814:	79fb      	ldrb	r3, [r7, #7]
 800b816:	f003 030f 	and.w	r3, r3, #15
 800b81a:	3b04      	subs	r3, #4
 800b81c:	0152      	lsls	r2, r2, #5
 800b81e:	b2d2      	uxtb	r2, r2
 800b820:	440b      	add	r3, r1
 800b822:	761a      	strb	r2, [r3, #24]
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	e000e100 	.word	0xe000e100
 800b834:	e000ed00 	.word	0xe000ed00

0800b838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b838:	b480      	push	{r7}
 800b83a:	b089      	sub	sp, #36	; 0x24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	f1c3 0307 	rsb	r3, r3, #7
 800b852:	2b03      	cmp	r3, #3
 800b854:	bf28      	it	cs
 800b856:	2303      	movcs	r3, #3
 800b858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	3303      	adds	r3, #3
 800b85e:	2b06      	cmp	r3, #6
 800b860:	d902      	bls.n	800b868 <NVIC_EncodePriority+0x30>
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	3b04      	subs	r3, #4
 800b866:	e000      	b.n	800b86a <NVIC_EncodePriority+0x32>
 800b868:	2300      	movs	r3, #0
 800b86a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	fa02 f303 	lsl.w	r3, r2, r3
 800b876:	43da      	mvns	r2, r3
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	401a      	ands	r2, r3
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b880:	f04f 31ff 	mov.w	r1, #4294967295
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	fa01 f303 	lsl.w	r3, r1, r3
 800b88a:	43d9      	mvns	r1, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b890:	4313      	orrs	r3, r2
         );
}
 800b892:	4618      	mov	r0, r3
 800b894:	3724      	adds	r7, #36	; 0x24
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7ff ff4c 	bl	800b744 <__NVIC_SetPriorityGrouping>
}
 800b8ac:	bf00      	nop
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
 800b8c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b8c2:	f7ff ff63 	bl	800b78c <__NVIC_GetPriorityGrouping>
 800b8c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	68b9      	ldr	r1, [r7, #8]
 800b8cc:	6978      	ldr	r0, [r7, #20]
 800b8ce:	f7ff ffb3 	bl	800b838 <NVIC_EncodePriority>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8d8:	4611      	mov	r1, r2
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7ff ff82 	bl	800b7e4 <__NVIC_SetPriority>
}
 800b8e0:	bf00      	nop
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff ff56 	bl	800b7a8 <__NVIC_EnableIRQ>
}
 800b8fc:	bf00      	nop
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e08d      	b.n	800ba32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	461a      	mov	r2, r3
 800b91c:	4b47      	ldr	r3, [pc, #284]	; (800ba3c <HAL_DMA_Init+0x138>)
 800b91e:	429a      	cmp	r2, r3
 800b920:	d80f      	bhi.n	800b942 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	461a      	mov	r2, r3
 800b928:	4b45      	ldr	r3, [pc, #276]	; (800ba40 <HAL_DMA_Init+0x13c>)
 800b92a:	4413      	add	r3, r2
 800b92c:	4a45      	ldr	r2, [pc, #276]	; (800ba44 <HAL_DMA_Init+0x140>)
 800b92e:	fba2 2303 	umull	r2, r3, r2, r3
 800b932:	091b      	lsrs	r3, r3, #4
 800b934:	009a      	lsls	r2, r3, #2
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a42      	ldr	r2, [pc, #264]	; (800ba48 <HAL_DMA_Init+0x144>)
 800b93e:	649a      	str	r2, [r3, #72]	; 0x48
 800b940:	e00e      	b.n	800b960 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	4b40      	ldr	r3, [pc, #256]	; (800ba4c <HAL_DMA_Init+0x148>)
 800b94a:	4413      	add	r3, r2
 800b94c:	4a3d      	ldr	r2, [pc, #244]	; (800ba44 <HAL_DMA_Init+0x140>)
 800b94e:	fba2 2303 	umull	r2, r3, r2, r3
 800b952:	091b      	lsrs	r3, r3, #4
 800b954:	009a      	lsls	r2, r3, #2
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a3c      	ldr	r2, [pc, #240]	; (800ba50 <HAL_DMA_Init+0x14c>)
 800b95e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 800b976:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800b97a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b99c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 faf2 	bl	800bf9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9c0:	d102      	bne.n	800b9c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d0:	b2d2      	uxtb	r2, r2
 800b9d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b9dc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d010      	beq.n	800ba08 <HAL_DMA_Init+0x104>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	2b04      	cmp	r3, #4
 800b9ec:	d80c      	bhi.n	800ba08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fb12 	bl	800c018 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ba04:	605a      	str	r2, [r3, #4]
 800ba06:	e008      	b.n	800ba1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	40020407 	.word	0x40020407
 800ba40:	bffdfff8 	.word	0xbffdfff8
 800ba44:	cccccccd 	.word	0xcccccccd
 800ba48:	40020000 	.word	0x40020000
 800ba4c:	bffdfbf8 	.word	0xbffdfbf8
 800ba50:	40020400 	.word	0x40020400

0800ba54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
 800ba60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d101      	bne.n	800ba74 <HAL_DMA_Start_IT+0x20>
 800ba70:	2302      	movs	r3, #2
 800ba72:	e066      	b.n	800bb42 <HAL_DMA_Start_IT+0xee>
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2201      	movs	r2, #1
 800ba78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d155      	bne.n	800bb34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f022 0201 	bic.w	r2, r2, #1
 800baa4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	68b9      	ldr	r1, [r7, #8]
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f000 fa37 	bl	800bf20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d008      	beq.n	800bacc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f042 020e 	orr.w	r2, r2, #14
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	e00f      	b.n	800baec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f022 0204 	bic.w	r2, r2, #4
 800bada:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f042 020a 	orr.w	r2, r2, #10
 800baea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d007      	beq.n	800bb0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb08:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d007      	beq.n	800bb22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f042 0201 	orr.w	r2, r2, #1
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	e005      	b.n	800bb40 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bb4a:	b480      	push	{r7}
 800bb4c:	b085      	sub	sp, #20
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d008      	beq.n	800bb74 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2204      	movs	r2, #4
 800bb66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e040      	b.n	800bbf6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f022 020e 	bic.w	r2, r2, #14
 800bb82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f022 0201 	bic.w	r2, r2, #1
 800bba2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bba8:	f003 021c 	and.w	r2, r3, #28
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	fa01 f202 	lsl.w	r2, r1, r2
 800bbb6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bbc0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00c      	beq.n	800bbe4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bbd8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800bbe2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3714      	adds	r7, #20
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d005      	beq.n	800bc26 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2204      	movs	r2, #4
 800bc1e:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	73fb      	strb	r3, [r7, #15]
 800bc24:	e047      	b.n	800bcb6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f022 020e 	bic.w	r2, r2, #14
 800bc34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f022 0201 	bic.w	r2, r2, #1
 800bc44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc5a:	f003 021c 	and.w	r2, r3, #28
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc62:	2101      	movs	r1, #1
 800bc64:	fa01 f202 	lsl.w	r2, r1, r2
 800bc68:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bc72:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00c      	beq.n	800bc96 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800bc94:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d003      	beq.n	800bcb6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	4798      	blx	r3
    }
  }
  return status;
 800bcb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcdc:	f003 031c 	and.w	r3, r3, #28
 800bce0:	2204      	movs	r2, #4
 800bce2:	409a      	lsls	r2, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4013      	ands	r3, r2
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d053      	beq.n	800bd94 <HAL_DMA_IRQHandler+0xd4>
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	f003 0304 	and.w	r3, r3, #4
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d04e      	beq.n	800bd94 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d024      	beq.n	800bd4e <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd08:	f003 021c 	and.w	r2, r3, #28
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd10:	2104      	movs	r1, #4
 800bd12:	fa01 f202 	lsl.w	r2, r1, r2
 800bd16:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d109      	bne.n	800bd3a <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 80c0 	beq.w	800beb0 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bd38:	e0ba      	b.n	800beb0 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 80b6 	beq.w	800beb0 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bd4c:	e0b0      	b.n	800beb0 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f003 0320 	and.w	r3, r3, #32
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d107      	bne.n	800bd6c <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f022 0204 	bic.w	r2, r2, #4
 800bd6a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd70:	f003 021c 	and.w	r2, r3, #28
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd78:	2104      	movs	r1, #4
 800bd7a:	fa01 f202 	lsl.w	r2, r1, r2
 800bd7e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f000 8093 	beq.w	800beb0 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bd92:	e08d      	b.n	800beb0 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd98:	f003 031c 	and.w	r3, r3, #28
 800bd9c:	2202      	movs	r2, #2
 800bd9e:	409a      	lsls	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	4013      	ands	r3, r2
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d04e      	beq.n	800be46 <HAL_DMA_IRQHandler+0x186>
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f003 0302 	and.w	r3, r3, #2
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d049      	beq.n	800be46 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d018      	beq.n	800bdf2 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d108      	bne.n	800bde0 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d06e      	beq.n	800beb4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bdde:	e069      	b.n	800beb4 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d065      	beq.n	800beb4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bdf0:	e060      	b.n	800beb4 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 0320 	and.w	r3, r3, #32
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10b      	bne.n	800be18 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f022 020a 	bic.w	r2, r2, #10
 800be0e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be1c:	f003 021c 	and.w	r2, r3, #28
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be24:	2102      	movs	r1, #2
 800be26:	fa01 f202 	lsl.w	r2, r1, r2
 800be2a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d03b      	beq.n	800beb4 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800be44:	e036      	b.n	800beb4 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be4a:	f003 031c 	and.w	r3, r3, #28
 800be4e:	2208      	movs	r2, #8
 800be50:	409a      	lsls	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	4013      	ands	r3, r2
 800be56:	2b00      	cmp	r3, #0
 800be58:	d02e      	beq.n	800beb8 <HAL_DMA_IRQHandler+0x1f8>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	f003 0308 	and.w	r3, r3, #8
 800be60:	2b00      	cmp	r3, #0
 800be62:	d029      	beq.n	800beb8 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f022 020e 	bic.w	r2, r2, #14
 800be72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be78:	f003 021c 	and.w	r2, r3, #28
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be80:	2101      	movs	r1, #1
 800be82:	fa01 f202 	lsl.w	r2, r1, r2
 800be86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d008      	beq.n	800beb8 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800beae:	e002      	b.n	800beb6 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800beb0:	bf00      	nop
 800beb2:	e000      	b.n	800beb6 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800beb4:	bf00      	nop
  return;
 800beb6:	bf00      	nop
 800beb8:	bf00      	nop
}
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d103      	bne.n	800bedc <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	72fb      	strb	r3, [r7, #11]
    return status;
 800bed8:	7afb      	ldrb	r3, [r7, #11]
 800beda:	e01b      	b.n	800bf14 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	f003 0310 	and.w	r3, r3, #16
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00d      	beq.n	800bf0a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d004      	beq.n	800bf02 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800befe:	60fb      	str	r3, [r7, #12]
 800bf00:	e003      	b.n	800bf0a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bf08:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	601a      	str	r2, [r3, #0]

  return status;
 800bf12:	7afb      	ldrb	r3, [r7, #11]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b085      	sub	sp, #20
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	607a      	str	r2, [r7, #4]
 800bf2c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bf36:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d004      	beq.n	800bf4a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800bf48:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf4e:	f003 021c 	and.w	r2, r3, #28
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf56:	2101      	movs	r1, #1
 800bf58:	fa01 f202 	lsl.w	r2, r1, r2
 800bf5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	2b10      	cmp	r3, #16
 800bf6c:	d108      	bne.n	800bf80 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 800bf7e:	e007      	b.n	800bf90 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	60da      	str	r2, [r3, #12]
}
 800bf90:	bf00      	nop
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	4b17      	ldr	r3, [pc, #92]	; (800c008 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d80a      	bhi.n	800bfc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfb4:	089b      	lsrs	r3, r3, #2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bfbc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	6513      	str	r3, [r2, #80]	; 0x50
 800bfc4:	e007      	b.n	800bfd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfca:	089b      	lsrs	r3, r3, #2
 800bfcc:	009a      	lsls	r2, r3, #2
 800bfce:	4b0f      	ldr	r3, [pc, #60]	; (800c00c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800bfd0:	4413      	add	r3, r2
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	3b08      	subs	r3, #8
 800bfde:	4a0c      	ldr	r2, [pc, #48]	; (800c010 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bfe0:	fba2 2303 	umull	r2, r3, r2, r3
 800bfe4:	091b      	lsrs	r3, r3, #4
 800bfe6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a0a      	ldr	r2, [pc, #40]	; (800c014 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bfec:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f003 031f 	and.w	r3, r3, #31
 800bff4:	2201      	movs	r2, #1
 800bff6:	409a      	lsls	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	659a      	str	r2, [r3, #88]	; 0x58
}
 800bffc:	bf00      	nop
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	40020407 	.word	0x40020407
 800c00c:	40020820 	.word	0x40020820
 800c010:	cccccccd 	.word	0xcccccccd
 800c014:	40020880 	.word	0x40020880

0800c018 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	b2db      	uxtb	r3, r3
 800c026:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4b0b      	ldr	r3, [pc, #44]	; (800c058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c02c:	4413      	add	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	461a      	mov	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a08      	ldr	r2, [pc, #32]	; (800c05c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c03a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	3b01      	subs	r3, #1
 800c040:	f003 0303 	and.w	r3, r3, #3
 800c044:	2201      	movs	r2, #1
 800c046:	409a      	lsls	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c04c:	bf00      	nop
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	1000823f 	.word	0x1000823f
 800c05c:	40020940 	.word	0x40020940

0800c060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c06e:	e158      	b.n	800c322 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	2101      	movs	r1, #1
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	fa01 f303 	lsl.w	r3, r1, r3
 800c07c:	4013      	ands	r3, r2
 800c07e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 814a 	beq.w	800c31c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	f003 0303 	and.w	r3, r3, #3
 800c090:	2b01      	cmp	r3, #1
 800c092:	d005      	beq.n	800c0a0 <HAL_GPIO_Init+0x40>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	f003 0303 	and.w	r3, r3, #3
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d130      	bne.n	800c102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	005b      	lsls	r3, r3, #1
 800c0aa:	2203      	movs	r2, #3
 800c0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b0:	43db      	mvns	r3, r3
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	68da      	ldr	r2, [r3, #12]
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	005b      	lsls	r3, r3, #1
 800c0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	fa02 f303 	lsl.w	r3, r2, r3
 800c0de:	43db      	mvns	r3, r3
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	091b      	lsrs	r3, r3, #4
 800c0ec:	f003 0201 	and.w	r2, r3, #1
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	693a      	ldr	r2, [r7, #16]
 800c100:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	f003 0303 	and.w	r3, r3, #3
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d017      	beq.n	800c13e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	005b      	lsls	r3, r3, #1
 800c118:	2203      	movs	r2, #3
 800c11a:	fa02 f303 	lsl.w	r3, r2, r3
 800c11e:	43db      	mvns	r3, r3
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	4013      	ands	r3, r2
 800c124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	689a      	ldr	r2, [r3, #8]
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	005b      	lsls	r3, r3, #1
 800c12e:	fa02 f303 	lsl.w	r3, r2, r3
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	4313      	orrs	r3, r2
 800c136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f003 0303 	and.w	r3, r3, #3
 800c146:	2b02      	cmp	r3, #2
 800c148:	d123      	bne.n	800c192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	08da      	lsrs	r2, r3, #3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3208      	adds	r2, #8
 800c152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c156:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	f003 0307 	and.w	r3, r3, #7
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	220f      	movs	r2, #15
 800c162:	fa02 f303 	lsl.w	r3, r2, r3
 800c166:	43db      	mvns	r3, r3
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	4013      	ands	r3, r2
 800c16c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	691a      	ldr	r2, [r3, #16]
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f003 0307 	and.w	r3, r3, #7
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	fa02 f303 	lsl.w	r3, r2, r3
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	4313      	orrs	r3, r2
 800c182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	08da      	lsrs	r2, r3, #3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3208      	adds	r2, #8
 800c18c:	6939      	ldr	r1, [r7, #16]
 800c18e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	005b      	lsls	r3, r3, #1
 800c19c:	2203      	movs	r2, #3
 800c19e:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a2:	43db      	mvns	r3, r3
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	f003 0203 	and.w	r2, r3, #3
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	693a      	ldr	r2, [r7, #16]
 800c1c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 80a4 	beq.w	800c31c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800c1d4:	4a5a      	ldr	r2, [pc, #360]	; (800c340 <HAL_GPIO_Init+0x2e0>)
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	089b      	lsrs	r3, r3, #2
 800c1da:	3318      	adds	r3, #24
 800c1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1e0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f003 0303 	and.w	r3, r3, #3
 800c1e8:	00db      	lsls	r3, r3, #3
 800c1ea:	220f      	movs	r2, #15
 800c1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f0:	43db      	mvns	r3, r3
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a52      	ldr	r2, [pc, #328]	; (800c344 <HAL_GPIO_Init+0x2e4>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d025      	beq.n	800c24c <HAL_GPIO_Init+0x1ec>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a51      	ldr	r2, [pc, #324]	; (800c348 <HAL_GPIO_Init+0x2e8>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d01f      	beq.n	800c248 <HAL_GPIO_Init+0x1e8>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a50      	ldr	r2, [pc, #320]	; (800c34c <HAL_GPIO_Init+0x2ec>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d019      	beq.n	800c244 <HAL_GPIO_Init+0x1e4>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4a4f      	ldr	r2, [pc, #316]	; (800c350 <HAL_GPIO_Init+0x2f0>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d013      	beq.n	800c240 <HAL_GPIO_Init+0x1e0>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a4e      	ldr	r2, [pc, #312]	; (800c354 <HAL_GPIO_Init+0x2f4>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d00d      	beq.n	800c23c <HAL_GPIO_Init+0x1dc>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a4d      	ldr	r2, [pc, #308]	; (800c358 <HAL_GPIO_Init+0x2f8>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d007      	beq.n	800c238 <HAL_GPIO_Init+0x1d8>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a4c      	ldr	r2, [pc, #304]	; (800c35c <HAL_GPIO_Init+0x2fc>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d101      	bne.n	800c234 <HAL_GPIO_Init+0x1d4>
 800c230:	2306      	movs	r3, #6
 800c232:	e00c      	b.n	800c24e <HAL_GPIO_Init+0x1ee>
 800c234:	2307      	movs	r3, #7
 800c236:	e00a      	b.n	800c24e <HAL_GPIO_Init+0x1ee>
 800c238:	2305      	movs	r3, #5
 800c23a:	e008      	b.n	800c24e <HAL_GPIO_Init+0x1ee>
 800c23c:	2304      	movs	r3, #4
 800c23e:	e006      	b.n	800c24e <HAL_GPIO_Init+0x1ee>
 800c240:	2303      	movs	r3, #3
 800c242:	e004      	b.n	800c24e <HAL_GPIO_Init+0x1ee>
 800c244:	2302      	movs	r3, #2
 800c246:	e002      	b.n	800c24e <HAL_GPIO_Init+0x1ee>
 800c248:	2301      	movs	r3, #1
 800c24a:	e000      	b.n	800c24e <HAL_GPIO_Init+0x1ee>
 800c24c:	2300      	movs	r3, #0
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	f002 0203 	and.w	r2, r2, #3
 800c254:	00d2      	lsls	r2, r2, #3
 800c256:	4093      	lsls	r3, r2
 800c258:	693a      	ldr	r2, [r7, #16]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800c25e:	4938      	ldr	r1, [pc, #224]	; (800c340 <HAL_GPIO_Init+0x2e0>)
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	089b      	lsrs	r3, r3, #2
 800c264:	3318      	adds	r3, #24
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c26c:	4b34      	ldr	r3, [pc, #208]	; (800c340 <HAL_GPIO_Init+0x2e0>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	43db      	mvns	r3, r3
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	4013      	ands	r3, r2
 800c27a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800c288:	693a      	ldr	r2, [r7, #16]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c290:	4a2b      	ldr	r2, [pc, #172]	; (800c340 <HAL_GPIO_Init+0x2e0>)
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c296:	4b2a      	ldr	r3, [pc, #168]	; (800c340 <HAL_GPIO_Init+0x2e0>)
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	43db      	mvns	r3, r3
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c2ba:	4a21      	ldr	r2, [pc, #132]	; (800c340 <HAL_GPIO_Init+0x2e0>)
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800c2c0:	4b1f      	ldr	r3, [pc, #124]	; (800c340 <HAL_GPIO_Init+0x2e0>)
 800c2c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	43db      	mvns	r3, r3
 800c2cc:	693a      	ldr	r2, [r7, #16]
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d003      	beq.n	800c2e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800c2de:	693a      	ldr	r2, [r7, #16]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c2e6:	4a16      	ldr	r2, [pc, #88]	; (800c340 <HAL_GPIO_Init+0x2e0>)
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800c2ee:	4b14      	ldr	r3, [pc, #80]	; (800c340 <HAL_GPIO_Init+0x2e0>)
 800c2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	43db      	mvns	r3, r3
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d003      	beq.n	800c314 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	4313      	orrs	r3, r2
 800c312:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c314:	4a0a      	ldr	r2, [pc, #40]	; (800c340 <HAL_GPIO_Init+0x2e0>)
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	3301      	adds	r3, #1
 800c320:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	fa22 f303 	lsr.w	r3, r2, r3
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f47f ae9f 	bne.w	800c070 <HAL_GPIO_Init+0x10>
  }
}
 800c332:	bf00      	nop
 800c334:	bf00      	nop
 800c336:	371c      	adds	r7, #28
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	4002f400 	.word	0x4002f400
 800c344:	42020000 	.word	0x42020000
 800c348:	42020400 	.word	0x42020400
 800c34c:	42020800 	.word	0x42020800
 800c350:	42020c00 	.word	0x42020c00
 800c354:	42021000 	.word	0x42021000
 800c358:	42021400 	.word	0x42021400
 800c35c:	42021800 	.word	0x42021800

0800c360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	807b      	strh	r3, [r7, #2]
 800c36c:	4613      	mov	r3, r2
 800c36e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c370:	787b      	ldrb	r3, [r7, #1]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d003      	beq.n	800c37e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c376:	887a      	ldrh	r2, [r7, #2]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c37c:	e002      	b.n	800c384 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c37e:	887a      	ldrh	r2, [r7, #2]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	695b      	ldr	r3, [r3, #20]
 800c3a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c3a2:	887a      	ldrh	r2, [r7, #2]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	041a      	lsls	r2, r3, #16
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	43d9      	mvns	r1, r3
 800c3ae:	887b      	ldrh	r3, [r7, #2]
 800c3b0:	400b      	ands	r3, r1
 800c3b2:	431a      	orrs	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	619a      	str	r2, [r3, #24]
}
 800c3b8:	bf00      	nop
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d101      	bne.n	800c3d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e081      	b.n	800c4da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f7fc ff12 	bl	8009214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2224      	movs	r2, #36	; 0x24
 800c3f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f022 0201 	bic.w	r2, r2, #1
 800c406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685a      	ldr	r2, [r3, #4]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c414:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	689a      	ldr	r2, [r3, #8]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c424:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d107      	bne.n	800c43e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	689a      	ldr	r2, [r3, #8]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c43a:	609a      	str	r2, [r3, #8]
 800c43c:	e006      	b.n	800c44c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	689a      	ldr	r2, [r3, #8]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c44a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	2b02      	cmp	r3, #2
 800c452:	d104      	bne.n	800c45e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c45c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	6812      	ldr	r2, [r2, #0]
 800c468:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c46c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c470:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c480:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	691a      	ldr	r2, [r3, #16]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	699b      	ldr	r3, [r3, #24]
 800c492:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	430a      	orrs	r2, r1
 800c49a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	69d9      	ldr	r1, [r3, #28]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6a1a      	ldr	r2, [r3, #32]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	430a      	orrs	r2, r1
 800c4aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f042 0201 	orr.w	r2, r2, #1
 800c4ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2220      	movs	r2, #32
 800c4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
	...

0800c4e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b088      	sub	sp, #32
 800c4e8:	af02      	add	r7, sp, #8
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	607a      	str	r2, [r7, #4]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	817b      	strh	r3, [r7, #10]
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b20      	cmp	r3, #32
 800c502:	f040 80da 	bne.w	800c6ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d101      	bne.n	800c514 <HAL_I2C_Master_Transmit+0x30>
 800c510:	2302      	movs	r3, #2
 800c512:	e0d3      	b.n	800c6bc <HAL_I2C_Master_Transmit+0x1d8>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2201      	movs	r2, #1
 800c518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c51c:	f7fd fcc4 	bl	8009ea8 <HAL_GetTick>
 800c520:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	2319      	movs	r3, #25
 800c528:	2201      	movs	r2, #1
 800c52a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 f9e6 	bl	800c900 <I2C_WaitOnFlagUntilTimeout>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e0be      	b.n	800c6bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2221      	movs	r2, #33	; 0x21
 800c542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2210      	movs	r2, #16
 800c54a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2200      	movs	r2, #0
 800c552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	893a      	ldrh	r2, [r7, #8]
 800c55e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2200      	movs	r2, #0
 800c564:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	2bff      	cmp	r3, #255	; 0xff
 800c56e:	d90e      	bls.n	800c58e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	22ff      	movs	r2, #255	; 0xff
 800c574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c57a:	b2da      	uxtb	r2, r3
 800c57c:	8979      	ldrh	r1, [r7, #10]
 800c57e:	4b51      	ldr	r3, [pc, #324]	; (800c6c4 <HAL_I2C_Master_Transmit+0x1e0>)
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f000 fbf6 	bl	800cd78 <I2C_TransferConfig>
 800c58c:	e06c      	b.n	800c668 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c592:	b29a      	uxth	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	8979      	ldrh	r1, [r7, #10]
 800c5a0:	4b48      	ldr	r3, [pc, #288]	; (800c6c4 <HAL_I2C_Master_Transmit+0x1e0>)
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f000 fbe5 	bl	800cd78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800c5ae:	e05b      	b.n	800c668 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	6a39      	ldr	r1, [r7, #32]
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f000 f9f2 	bl	800c99e <I2C_WaitOnTXISFlagUntilTimeout>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e07b      	b.n	800c6bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c8:	781a      	ldrb	r2, [r3, #0]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d034      	beq.n	800c668 <HAL_I2C_Master_Transmit+0x184>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c602:	2b00      	cmp	r3, #0
 800c604:	d130      	bne.n	800c668 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	9300      	str	r3, [sp, #0]
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	2200      	movs	r2, #0
 800c60e:	2180      	movs	r1, #128	; 0x80
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f000 f975 	bl	800c900 <I2C_WaitOnFlagUntilTimeout>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d001      	beq.n	800c620 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e04d      	b.n	800c6bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c624:	b29b      	uxth	r3, r3
 800c626:	2bff      	cmp	r3, #255	; 0xff
 800c628:	d90e      	bls.n	800c648 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	22ff      	movs	r2, #255	; 0xff
 800c62e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c634:	b2da      	uxtb	r2, r3
 800c636:	8979      	ldrh	r1, [r7, #10]
 800c638:	2300      	movs	r3, #0
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f000 fb99 	bl	800cd78 <I2C_TransferConfig>
 800c646:	e00f      	b.n	800c668 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c656:	b2da      	uxtb	r2, r3
 800c658:	8979      	ldrh	r1, [r7, #10]
 800c65a:	2300      	movs	r3, #0
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f000 fb88 	bl	800cd78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d19e      	bne.n	800c5b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	6a39      	ldr	r1, [r7, #32]
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f000 f9d8 	bl	800ca2c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e01a      	b.n	800c6bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2220      	movs	r2, #32
 800c68c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6859      	ldr	r1, [r3, #4]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	4b0b      	ldr	r3, [pc, #44]	; (800c6c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800c69a:	400b      	ands	r3, r1
 800c69c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2220      	movs	r2, #32
 800c6a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e000      	b.n	800c6bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800c6ba:	2302      	movs	r3, #2
  }
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3718      	adds	r7, #24
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	80002000 	.word	0x80002000
 800c6c8:	fe00e800 	.word	0xfe00e800

0800c6cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b088      	sub	sp, #32
 800c6d0:	af02      	add	r7, sp, #8
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	607a      	str	r2, [r7, #4]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	460b      	mov	r3, r1
 800c6da:	817b      	strh	r3, [r7, #10]
 800c6dc:	4613      	mov	r3, r2
 800c6de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b20      	cmp	r3, #32
 800c6ea:	f040 80db 	bne.w	800c8a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d101      	bne.n	800c6fc <HAL_I2C_Master_Receive+0x30>
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	e0d4      	b.n	800c8a6 <HAL_I2C_Master_Receive+0x1da>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c704:	f7fd fbd0 	bl	8009ea8 <HAL_GetTick>
 800c708:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	2319      	movs	r3, #25
 800c710:	2201      	movs	r2, #1
 800c712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f000 f8f2 	bl	800c900 <I2C_WaitOnFlagUntilTimeout>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d001      	beq.n	800c726 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	e0bf      	b.n	800c8a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2222      	movs	r2, #34	; 0x22
 800c72a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2210      	movs	r2, #16
 800c732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2200      	movs	r2, #0
 800c73a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	893a      	ldrh	r2, [r7, #8]
 800c746:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2200      	movs	r2, #0
 800c74c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c752:	b29b      	uxth	r3, r3
 800c754:	2bff      	cmp	r3, #255	; 0xff
 800c756:	d90e      	bls.n	800c776 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	22ff      	movs	r2, #255	; 0xff
 800c75c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c762:	b2da      	uxtb	r2, r3
 800c764:	8979      	ldrh	r1, [r7, #10]
 800c766:	4b52      	ldr	r3, [pc, #328]	; (800c8b0 <HAL_I2C_Master_Receive+0x1e4>)
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 fb02 	bl	800cd78 <I2C_TransferConfig>
 800c774:	e06d      	b.n	800c852 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c784:	b2da      	uxtb	r2, r3
 800c786:	8979      	ldrh	r1, [r7, #10]
 800c788:	4b49      	ldr	r3, [pc, #292]	; (800c8b0 <HAL_I2C_Master_Receive+0x1e4>)
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f000 faf1 	bl	800cd78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800c796:	e05c      	b.n	800c852 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	6a39      	ldr	r1, [r7, #32]
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f000 f989 	bl	800cab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d001      	beq.n	800c7ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e07c      	b.n	800c8a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b6:	b2d2      	uxtb	r2, r2
 800c7b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7be:	1c5a      	adds	r2, r3, #1
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d034      	beq.n	800c852 <HAL_I2C_Master_Receive+0x186>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d130      	bne.n	800c852 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	2180      	movs	r1, #128	; 0x80
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f000 f880 	bl	800c900 <I2C_WaitOnFlagUntilTimeout>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d001      	beq.n	800c80a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800c806:	2301      	movs	r3, #1
 800c808:	e04d      	b.n	800c8a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c80e:	b29b      	uxth	r3, r3
 800c810:	2bff      	cmp	r3, #255	; 0xff
 800c812:	d90e      	bls.n	800c832 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	22ff      	movs	r2, #255	; 0xff
 800c818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	8979      	ldrh	r1, [r7, #10]
 800c822:	2300      	movs	r3, #0
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 faa4 	bl	800cd78 <I2C_TransferConfig>
 800c830:	e00f      	b.n	800c852 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c836:	b29a      	uxth	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c840:	b2da      	uxtb	r2, r3
 800c842:	8979      	ldrh	r1, [r7, #10]
 800c844:	2300      	movs	r3, #0
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f000 fa93 	bl	800cd78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c856:	b29b      	uxth	r3, r3
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d19d      	bne.n	800c798 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	6a39      	ldr	r1, [r7, #32]
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f000 f8e3 	bl	800ca2c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	e01a      	b.n	800c8a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2220      	movs	r2, #32
 800c876:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6859      	ldr	r1, [r3, #4]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	4b0c      	ldr	r3, [pc, #48]	; (800c8b4 <HAL_I2C_Master_Receive+0x1e8>)
 800c884:	400b      	ands	r3, r1
 800c886:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2220      	movs	r2, #32
 800c88c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	e000      	b.n	800c8a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800c8a4:	2302      	movs	r3, #2
  }
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	80002400 	.word	0x80002400
 800c8b4:	fe00e800 	.word	0xfe00e800

0800c8b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	699b      	ldr	r3, [r3, #24]
 800c8c6:	f003 0302 	and.w	r3, r3, #2
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d103      	bne.n	800c8d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	f003 0301 	and.w	r3, r3, #1
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d007      	beq.n	800c8f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	699a      	ldr	r2, [r3, #24]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f042 0201 	orr.w	r2, r2, #1
 800c8f2:	619a      	str	r2, [r3, #24]
  }
}
 800c8f4:	bf00      	nop
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	603b      	str	r3, [r7, #0]
 800c90c:	4613      	mov	r3, r2
 800c90e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c910:	e031      	b.n	800c976 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c918:	d02d      	beq.n	800c976 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c91a:	f7fd fac5 	bl	8009ea8 <HAL_GetTick>
 800c91e:	4602      	mov	r2, r0
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	429a      	cmp	r2, r3
 800c928:	d302      	bcc.n	800c930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d122      	bne.n	800c976 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	699a      	ldr	r2, [r3, #24]
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	4013      	ands	r3, r2
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	bf0c      	ite	eq
 800c940:	2301      	moveq	r3, #1
 800c942:	2300      	movne	r3, #0
 800c944:	b2db      	uxtb	r3, r3
 800c946:	461a      	mov	r2, r3
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d113      	bne.n	800c976 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c952:	f043 0220 	orr.w	r2, r3, #32
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2220      	movs	r2, #32
 800c95e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2200      	movs	r2, #0
 800c966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800c972:	2301      	movs	r3, #1
 800c974:	e00f      	b.n	800c996 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	699a      	ldr	r2, [r3, #24]
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	4013      	ands	r3, r2
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	429a      	cmp	r2, r3
 800c984:	bf0c      	ite	eq
 800c986:	2301      	moveq	r3, #1
 800c988:	2300      	movne	r3, #0
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	461a      	mov	r2, r3
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	429a      	cmp	r2, r3
 800c992:	d0be      	beq.n	800c912 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	60f8      	str	r0, [r7, #12]
 800c9a6:	60b9      	str	r1, [r7, #8]
 800c9a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c9aa:	e033      	b.n	800ca14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	68b9      	ldr	r1, [r7, #8]
 800c9b0:	68f8      	ldr	r0, [r7, #12]
 800c9b2:	f000 f901 	bl	800cbb8 <I2C_IsErrorOccurred>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e031      	b.n	800ca24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c6:	d025      	beq.n	800ca14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9c8:	f7fd fa6e 	bl	8009ea8 <HAL_GetTick>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d302      	bcc.n	800c9de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d11a      	bne.n	800ca14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	f003 0302 	and.w	r3, r3, #2
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d013      	beq.n	800ca14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9f0:	f043 0220 	orr.w	r2, r3, #32
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	e007      	b.n	800ca24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	f003 0302 	and.w	r3, r3, #2
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d1c4      	bne.n	800c9ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ca38:	e02f      	b.n	800ca9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	68b9      	ldr	r1, [r7, #8]
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f000 f8ba 	bl	800cbb8 <I2C_IsErrorOccurred>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e02d      	b.n	800caaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca4e:	f7fd fa2b 	bl	8009ea8 <HAL_GetTick>
 800ca52:	4602      	mov	r2, r0
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d302      	bcc.n	800ca64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d11a      	bne.n	800ca9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	f003 0320 	and.w	r3, r3, #32
 800ca6e:	2b20      	cmp	r3, #32
 800ca70:	d013      	beq.n	800ca9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca76:	f043 0220 	orr.w	r2, r3, #32
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2220      	movs	r2, #32
 800ca82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e007      	b.n	800caaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	f003 0320 	and.w	r3, r3, #32
 800caa4:	2b20      	cmp	r3, #32
 800caa6:	d1c8      	bne.n	800ca3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
	...

0800cab4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cac0:	e06b      	b.n	800cb9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	68b9      	ldr	r1, [r7, #8]
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 f876 	bl	800cbb8 <I2C_IsErrorOccurred>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d001      	beq.n	800cad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e069      	b.n	800cbaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	f003 0320 	and.w	r3, r3, #32
 800cae0:	2b20      	cmp	r3, #32
 800cae2:	d138      	bne.n	800cb56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	699b      	ldr	r3, [r3, #24]
 800caea:	f003 0304 	and.w	r3, r3, #4
 800caee:	2b04      	cmp	r3, #4
 800caf0:	d105      	bne.n	800cafe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800cafa:	2300      	movs	r3, #0
 800cafc:	e055      	b.n	800cbaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	f003 0310 	and.w	r3, r3, #16
 800cb08:	2b10      	cmp	r3, #16
 800cb0a:	d107      	bne.n	800cb1c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2210      	movs	r2, #16
 800cb12:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2204      	movs	r2, #4
 800cb18:	645a      	str	r2, [r3, #68]	; 0x44
 800cb1a:	e002      	b.n	800cb22 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2220      	movs	r2, #32
 800cb28:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	6859      	ldr	r1, [r3, #4]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	4b1f      	ldr	r3, [pc, #124]	; (800cbb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800cb36:	400b      	ands	r3, r1
 800cb38:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2220      	movs	r2, #32
 800cb3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	e029      	b.n	800cbaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb56:	f7fd f9a7 	bl	8009ea8 <HAL_GetTick>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d302      	bcc.n	800cb6c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d116      	bne.n	800cb9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	f003 0304 	and.w	r3, r3, #4
 800cb76:	2b04      	cmp	r3, #4
 800cb78:	d00f      	beq.n	800cb9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb7e:	f043 0220 	orr.w	r2, r3, #32
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2220      	movs	r2, #32
 800cb8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e007      	b.n	800cbaa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	699b      	ldr	r3, [r3, #24]
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b04      	cmp	r3, #4
 800cba6:	d18c      	bne.n	800cac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3710      	adds	r7, #16
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	fe00e800 	.word	0xfe00e800

0800cbb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b08a      	sub	sp, #40	; 0x28
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	f003 0310 	and.w	r3, r3, #16
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d068      	beq.n	800ccb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2210      	movs	r2, #16
 800cbea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cbec:	e049      	b.n	800cc82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf4:	d045      	beq.n	800cc82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cbf6:	f7fd f957 	bl	8009ea8 <HAL_GetTick>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d302      	bcc.n	800cc0c <I2C_IsErrorOccurred+0x54>
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d13a      	bne.n	800cc82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	699b      	ldr	r3, [r3, #24]
 800cc26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc2e:	d121      	bne.n	800cc74 <I2C_IsErrorOccurred+0xbc>
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc36:	d01d      	beq.n	800cc74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800cc38:	7cfb      	ldrb	r3, [r7, #19]
 800cc3a:	2b20      	cmp	r3, #32
 800cc3c:	d01a      	beq.n	800cc74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800cc4e:	f7fd f92b 	bl	8009ea8 <HAL_GetTick>
 800cc52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cc54:	e00e      	b.n	800cc74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cc56:	f7fd f927 	bl	8009ea8 <HAL_GetTick>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	2b19      	cmp	r3, #25
 800cc62:	d907      	bls.n	800cc74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800cc64:	6a3b      	ldr	r3, [r7, #32]
 800cc66:	f043 0320 	orr.w	r3, r3, #32
 800cc6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800cc72:	e006      	b.n	800cc82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	699b      	ldr	r3, [r3, #24]
 800cc7a:	f003 0320 	and.w	r3, r3, #32
 800cc7e:	2b20      	cmp	r3, #32
 800cc80:	d1e9      	bne.n	800cc56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	f003 0320 	and.w	r3, r3, #32
 800cc8c:	2b20      	cmp	r3, #32
 800cc8e:	d003      	beq.n	800cc98 <I2C_IsErrorOccurred+0xe0>
 800cc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d0aa      	beq.n	800cbee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800cc98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d103      	bne.n	800cca8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2220      	movs	r2, #32
 800cca6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800cca8:	6a3b      	ldr	r3, [r7, #32]
 800ccaa:	f043 0304 	orr.w	r3, r3, #4
 800ccae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00b      	beq.n	800cce0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	f043 0301 	orr.w	r3, r3, #1
 800ccce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ccd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00b      	beq.n	800cd02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	f043 0308 	orr.w	r3, r3, #8
 800ccf0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ccfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00b      	beq.n	800cd24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800cd0c:	6a3b      	ldr	r3, [r7, #32]
 800cd0e:	f043 0302 	orr.w	r3, r3, #2
 800cd12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800cd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d01c      	beq.n	800cd66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7ff fdc3 	bl	800c8b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6859      	ldr	r1, [r3, #4]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <I2C_IsErrorOccurred+0x1bc>)
 800cd3e:	400b      	ands	r3, r1
 800cd40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	431a      	orrs	r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2220      	movs	r2, #32
 800cd52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800cd66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3728      	adds	r7, #40	; 0x28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	fe00e800 	.word	0xfe00e800

0800cd78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b087      	sub	sp, #28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	607b      	str	r3, [r7, #4]
 800cd82:	460b      	mov	r3, r1
 800cd84:	817b      	strh	r3, [r7, #10]
 800cd86:	4613      	mov	r3, r2
 800cd88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd8a:	897b      	ldrh	r3, [r7, #10]
 800cd8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cd90:	7a7b      	ldrb	r3, [r7, #9]
 800cd92:	041b      	lsls	r3, r3, #16
 800cd94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd9e:	6a3b      	ldr	r3, [r7, #32]
 800cda0:	4313      	orrs	r3, r2
 800cda2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cda6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	685a      	ldr	r2, [r3, #4]
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	0d5b      	lsrs	r3, r3, #21
 800cdb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800cdb6:	4b08      	ldr	r3, [pc, #32]	; (800cdd8 <I2C_TransferConfig+0x60>)
 800cdb8:	430b      	orrs	r3, r1
 800cdba:	43db      	mvns	r3, r3
 800cdbc:	ea02 0103 	and.w	r1, r2, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	697a      	ldr	r2, [r7, #20]
 800cdc6:	430a      	orrs	r2, r1
 800cdc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cdca:	bf00      	nop
 800cdcc:	371c      	adds	r7, #28
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	03ff63ff 	.word	0x03ff63ff

0800cddc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	2b20      	cmp	r3, #32
 800cdf0:	d138      	bne.n	800ce64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d101      	bne.n	800ce00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	e032      	b.n	800ce66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2224      	movs	r2, #36	; 0x24
 800ce0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f022 0201 	bic.w	r2, r2, #1
 800ce1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ce2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6819      	ldr	r1, [r3, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	430a      	orrs	r2, r1
 800ce3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f042 0201 	orr.w	r2, r2, #1
 800ce4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2220      	movs	r2, #32
 800ce54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	e000      	b.n	800ce66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ce64:	2302      	movs	r3, #2
  }
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr

0800ce72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ce72:	b480      	push	{r7}
 800ce74:	b085      	sub	sp, #20
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
 800ce7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	2b20      	cmp	r3, #32
 800ce86:	d139      	bne.n	800cefc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d101      	bne.n	800ce96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ce92:	2302      	movs	r3, #2
 800ce94:	e033      	b.n	800cefe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2224      	movs	r2, #36	; 0x24
 800cea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f022 0201 	bic.w	r2, r2, #1
 800ceb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cec4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	021b      	lsls	r3, r3, #8
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	4313      	orrs	r3, r2
 800cece:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f042 0201 	orr.w	r2, r2, #1
 800cee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2220      	movs	r2, #32
 800ceec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	e000      	b.n	800cefe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cefc:	2302      	movs	r3, #2
  }
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3714      	adds	r7, #20
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr
	...

0800cf0c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf14:	2300      	movs	r3, #0
 800cf16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800cf18:	4b0b      	ldr	r3, [pc, #44]	; (800cf48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d002      	beq.n	800cf2a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	73fb      	strb	r3, [r7, #15]
 800cf28:	e007      	b.n	800cf3a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800cf2a:	4b07      	ldr	r3, [pc, #28]	; (800cf48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f023 0204 	bic.w	r2, r3, #4
 800cf32:	4905      	ldr	r1, [pc, #20]	; (800cf48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	600b      	str	r3, [r1, #0]
  }

  return status;
 800cf3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3714      	adds	r7, #20
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	40030400 	.word	0x40030400

0800cf4c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <HAL_ICACHE_Enable+0x1c>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a04      	ldr	r2, [pc, #16]	; (800cf68 <HAL_ICACHE_Enable+0x1c>)
 800cf56:	f043 0301 	orr.w	r3, r3, #1
 800cf5a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr
 800cf68:	40030400 	.word	0x40030400

0800cf6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf6e:	b08b      	sub	sp, #44	; 0x2c
 800cf70:	af06      	add	r7, sp, #24
 800cf72:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e0cb      	b.n	800d116 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d106      	bne.n	800cf98 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7fc fd10 	bl	80099b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2203      	movs	r2, #3
 800cf9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f006 ffb3 	bl	8013f10 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cfaa:	2300      	movs	r3, #0
 800cfac:	73fb      	strb	r3, [r7, #15]
 800cfae:	e040      	b.n	800d032 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
 800cfb2:	6879      	ldr	r1, [r7, #4]
 800cfb4:	1c5a      	adds	r2, r3, #1
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	4413      	add	r3, r2
 800cfbc:	00db      	lsls	r3, r3, #3
 800cfbe:	440b      	add	r3, r1
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cfc6:	7bfb      	ldrb	r3, [r7, #15]
 800cfc8:	6879      	ldr	r1, [r7, #4]
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	4613      	mov	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	4413      	add	r3, r2
 800cfd2:	00db      	lsls	r3, r3, #3
 800cfd4:	440b      	add	r3, r1
 800cfd6:	7bfa      	ldrb	r2, [r7, #15]
 800cfd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cfda:	7bfb      	ldrb	r3, [r7, #15]
 800cfdc:	6879      	ldr	r1, [r7, #4]
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4413      	add	r3, r2
 800cfe6:	00db      	lsls	r3, r3, #3
 800cfe8:	440b      	add	r3, r1
 800cfea:	3303      	adds	r3, #3
 800cfec:	2200      	movs	r2, #0
 800cfee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cff0:	7bfa      	ldrb	r2, [r7, #15]
 800cff2:	6879      	ldr	r1, [r7, #4]
 800cff4:	4613      	mov	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	00db      	lsls	r3, r3, #3
 800cffc:	440b      	add	r3, r1
 800cffe:	3338      	adds	r3, #56	; 0x38
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d004:	7bfa      	ldrb	r2, [r7, #15]
 800d006:	6879      	ldr	r1, [r7, #4]
 800d008:	4613      	mov	r3, r2
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	00db      	lsls	r3, r3, #3
 800d010:	440b      	add	r3, r1
 800d012:	333c      	adds	r3, #60	; 0x3c
 800d014:	2200      	movs	r2, #0
 800d016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d018:	7bfa      	ldrb	r2, [r7, #15]
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	4613      	mov	r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	00db      	lsls	r3, r3, #3
 800d024:	440b      	add	r3, r1
 800d026:	3340      	adds	r3, #64	; 0x40
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
 800d02e:	3301      	adds	r3, #1
 800d030:	73fb      	strb	r3, [r7, #15]
 800d032:	7bfa      	ldrb	r2, [r7, #15]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d3b9      	bcc.n	800cfb0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d03c:	2300      	movs	r3, #0
 800d03e:	73fb      	strb	r3, [r7, #15]
 800d040:	e044      	b.n	800d0cc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d042:	7bfa      	ldrb	r2, [r7, #15]
 800d044:	6879      	ldr	r1, [r7, #4]
 800d046:	4613      	mov	r3, r2
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	00db      	lsls	r3, r3, #3
 800d04e:	440b      	add	r3, r1
 800d050:	f203 1369 	addw	r3, r3, #361	; 0x169
 800d054:	2200      	movs	r2, #0
 800d056:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d058:	7bfa      	ldrb	r2, [r7, #15]
 800d05a:	6879      	ldr	r1, [r7, #4]
 800d05c:	4613      	mov	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	4413      	add	r3, r2
 800d062:	00db      	lsls	r3, r3, #3
 800d064:	440b      	add	r3, r1
 800d066:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d06a:	7bfa      	ldrb	r2, [r7, #15]
 800d06c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d06e:	7bfa      	ldrb	r2, [r7, #15]
 800d070:	6879      	ldr	r1, [r7, #4]
 800d072:	4613      	mov	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	00db      	lsls	r3, r3, #3
 800d07a:	440b      	add	r3, r1
 800d07c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800d080:	2200      	movs	r2, #0
 800d082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d084:	7bfa      	ldrb	r2, [r7, #15]
 800d086:	6879      	ldr	r1, [r7, #4]
 800d088:	4613      	mov	r3, r2
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4413      	add	r3, r2
 800d08e:	00db      	lsls	r3, r3, #3
 800d090:	440b      	add	r3, r1
 800d092:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d096:	2200      	movs	r2, #0
 800d098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d09a:	7bfa      	ldrb	r2, [r7, #15]
 800d09c:	6879      	ldr	r1, [r7, #4]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4413      	add	r3, r2
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	440b      	add	r3, r1
 800d0a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d0b0:	7bfa      	ldrb	r2, [r7, #15]
 800d0b2:	6879      	ldr	r1, [r7, #4]
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4413      	add	r3, r2
 800d0ba:	00db      	lsls	r3, r3, #3
 800d0bc:	440b      	add	r3, r1
 800d0be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d0c6:	7bfb      	ldrb	r3, [r7, #15]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	73fb      	strb	r3, [r7, #15]
 800d0cc:	7bfa      	ldrb	r2, [r7, #15]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d3b5      	bcc.n	800d042 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	603b      	str	r3, [r7, #0]
 800d0dc:	687e      	ldr	r6, [r7, #4]
 800d0de:	466d      	mov	r5, sp
 800d0e0:	f106 0410 	add.w	r4, r6, #16
 800d0e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d0e8:	6823      	ldr	r3, [r4, #0]
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	1d33      	adds	r3, r6, #4
 800d0ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0f0:	6838      	ldr	r0, [r7, #0]
 800d0f2:	f006 ff28 	bl	8013f46 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2201      	movs	r2, #1
 800d102:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	69db      	ldr	r3, [r3, #28]
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d102      	bne.n	800d114 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f805 	bl	800d11e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3714      	adds	r7, #20
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d11e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d11e:	b480      	push	{r7}
 800d120:	b085      	sub	sp, #20
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d142:	b29b      	uxth	r3, r3
 800d144:	f043 0301 	orr.w	r3, r3, #1
 800d148:	b29a      	uxth	r2, r3
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d156:	b29b      	uxth	r3, r3
 800d158:	f043 0302 	orr.w	r3, r3, #2
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3714      	adds	r7, #20
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
	...

0800d174 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d174:	b480      	push	{r7}
 800d176:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d178:	4b05      	ldr	r3, [pc, #20]	; (800d190 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a04      	ldr	r2, [pc, #16]	; (800d190 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d17e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d182:	6013      	str	r3, [r2, #0]
}
 800d184:	bf00      	nop
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	40007000 	.word	0x40007000

0800d194 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800d194:	b480      	push	{r7}
 800d196:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800d198:	4b04      	ldr	r3, [pc, #16]	; (800d1ac <HAL_PWREx_GetVoltageRange+0x18>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	40007000 	.word	0x40007000

0800d1b0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 800d1b8:	4b27      	ldr	r3, [pc, #156]	; (800d258 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d1c0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800d1c2:	f000 f861 	bl	800d288 <HAL_PWREx_SMPS_GetEffectiveMode>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1cc:	d101      	bne.n	800d1d2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e03e      	b.n	800d250 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800d1d2:	4b21      	ldr	r3, [pc, #132]	; (800d258 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1de:	d101      	bne.n	800d1e4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e035      	b.n	800d250 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d101      	bne.n	800d1f0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	e02f      	b.n	800d250 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800d1f0:	4b19      	ldr	r3, [pc, #100]	; (800d258 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d1f8:	4917      	ldr	r1, [pc, #92]	; (800d258 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800d200:	4b16      	ldr	r3, [pc, #88]	; (800d25c <HAL_PWREx_ControlVoltageScaling+0xac>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	095b      	lsrs	r3, r3, #5
 800d206:	4a16      	ldr	r2, [pc, #88]	; (800d260 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800d208:	fba2 2303 	umull	r2, r3, r2, r3
 800d20c:	09db      	lsrs	r3, r3, #7
 800d20e:	2232      	movs	r2, #50	; 0x32
 800d210:	fb02 f303 	mul.w	r3, r2, r3
 800d214:	4a13      	ldr	r2, [pc, #76]	; (800d264 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800d216:	fba2 2303 	umull	r2, r3, r2, r3
 800d21a:	08db      	lsrs	r3, r3, #3
 800d21c:	3301      	adds	r3, #1
 800d21e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d220:	e002      	b.n	800d228 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3b01      	subs	r3, #1
 800d226:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d228:	4b0b      	ldr	r3, [pc, #44]	; (800d258 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800d22a:	695b      	ldr	r3, [r3, #20]
 800d22c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d234:	d102      	bne.n	800d23c <HAL_PWREx_ControlVoltageScaling+0x8c>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d1f2      	bne.n	800d222 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d23c:	4b06      	ldr	r3, [pc, #24]	; (800d258 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800d23e:	695b      	ldr	r3, [r3, #20]
 800d240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d248:	d101      	bne.n	800d24e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800d24a:	2303      	movs	r3, #3
 800d24c:	e000      	b.n	800d250 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	40007000 	.word	0x40007000
 800d25c:	20000078 	.word	0x20000078
 800d260:	0a7c5ac5 	.word	0x0a7c5ac5
 800d264:	cccccccd 	.word	0xcccccccd

0800d268 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800d268:	b480      	push	{r7}
 800d26a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800d26c:	4b05      	ldr	r3, [pc, #20]	; (800d284 <HAL_PWREx_EnableVddIO2+0x1c>)
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	4a04      	ldr	r2, [pc, #16]	; (800d284 <HAL_PWREx_EnableVddIO2+0x1c>)
 800d272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d276:	6053      	str	r3, [r2, #4]
}
 800d278:	bf00      	nop
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	40007000 	.word	0x40007000

0800d288 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800d28e:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d003      	beq.n	800d2a6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800d29e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2a2:	607b      	str	r3, [r7, #4]
 800d2a4:	e00a      	b.n	800d2bc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d103      	bne.n	800d2b8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800d2b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2b4:	607b      	str	r3, [r7, #4]
 800d2b6:	e001      	b.n	800d2bc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800d2bc:	687b      	ldr	r3, [r7, #4]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	40007000 	.word	0x40007000

0800d2d0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b088      	sub	sp, #32
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d102      	bne.n	800d2e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	f000 bcc2 	b.w	800dc68 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d2e4:	4b99      	ldr	r3, [pc, #612]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	f003 030c 	and.w	r3, r3, #12
 800d2ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d2ee:	4b97      	ldr	r3, [pc, #604]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	f003 0303 	and.w	r3, r3, #3
 800d2f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0310 	and.w	r3, r3, #16
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 80e9 	beq.w	800d4d8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d006      	beq.n	800d31a <HAL_RCC_OscConfig+0x4a>
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	2b0c      	cmp	r3, #12
 800d310:	f040 8083 	bne.w	800d41a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	2b01      	cmp	r3, #1
 800d318:	d17f      	bne.n	800d41a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d31a:	4b8c      	ldr	r3, [pc, #560]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f003 0302 	and.w	r3, r3, #2
 800d322:	2b00      	cmp	r3, #0
 800d324:	d006      	beq.n	800d334 <HAL_RCC_OscConfig+0x64>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d102      	bne.n	800d334 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	f000 bc9a 	b.w	800dc68 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d338:	4b84      	ldr	r3, [pc, #528]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f003 0308 	and.w	r3, r3, #8
 800d340:	2b00      	cmp	r3, #0
 800d342:	d004      	beq.n	800d34e <HAL_RCC_OscConfig+0x7e>
 800d344:	4b81      	ldr	r3, [pc, #516]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d34c:	e005      	b.n	800d35a <HAL_RCC_OscConfig+0x8a>
 800d34e:	4b7f      	ldr	r3, [pc, #508]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d354:	091b      	lsrs	r3, r3, #4
 800d356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d224      	bcs.n	800d3a8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d362:	4618      	mov	r0, r3
 800d364:	f000 fece 	bl	800e104 <RCC_SetFlashLatencyFromMSIRange>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d002      	beq.n	800d374 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	f000 bc7a 	b.w	800dc68 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d374:	4b75      	ldr	r3, [pc, #468]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a74      	ldr	r2, [pc, #464]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d37a:	f043 0308 	orr.w	r3, r3, #8
 800d37e:	6013      	str	r3, [r2, #0]
 800d380:	4b72      	ldr	r3, [pc, #456]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38c:	496f      	ldr	r1, [pc, #444]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d38e:	4313      	orrs	r3, r2
 800d390:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d392:	4b6e      	ldr	r3, [pc, #440]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a1b      	ldr	r3, [r3, #32]
 800d39e:	021b      	lsls	r3, r3, #8
 800d3a0:	496a      	ldr	r1, [pc, #424]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	604b      	str	r3, [r1, #4]
 800d3a6:	e026      	b.n	800d3f6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d3a8:	4b68      	ldr	r3, [pc, #416]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a67      	ldr	r2, [pc, #412]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d3ae:	f043 0308 	orr.w	r3, r3, #8
 800d3b2:	6013      	str	r3, [r2, #0]
 800d3b4:	4b65      	ldr	r3, [pc, #404]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c0:	4962      	ldr	r1, [pc, #392]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d3c6:	4b61      	ldr	r3, [pc, #388]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a1b      	ldr	r3, [r3, #32]
 800d3d2:	021b      	lsls	r3, r3, #8
 800d3d4:	495d      	ldr	r1, [pc, #372]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d10a      	bne.n	800d3f6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 fe8d 	bl	800e104 <RCC_SetFlashLatencyFromMSIRange>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	f000 bc39 	b.w	800dc68 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d3f6:	f000 fe17 	bl	800e028 <HAL_RCC_GetHCLKFreq>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	4a54      	ldr	r2, [pc, #336]	; (800d550 <HAL_RCC_OscConfig+0x280>)
 800d3fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800d400:	4b54      	ldr	r3, [pc, #336]	; (800d554 <HAL_RCC_OscConfig+0x284>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4618      	mov	r0, r3
 800d406:	f7fc fb37 	bl	8009a78 <HAL_InitTick>
 800d40a:	4603      	mov	r3, r0
 800d40c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800d40e:	7bfb      	ldrb	r3, [r7, #15]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d060      	beq.n	800d4d6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	f000 bc27 	b.w	800dc68 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	69db      	ldr	r3, [r3, #28]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d039      	beq.n	800d496 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d422:	4b4a      	ldr	r3, [pc, #296]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a49      	ldr	r2, [pc, #292]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d428:	f043 0301 	orr.w	r3, r3, #1
 800d42c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d42e:	f7fc fd3b 	bl	8009ea8 <HAL_GetTick>
 800d432:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d434:	e00f      	b.n	800d456 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d436:	f7fc fd37 	bl	8009ea8 <HAL_GetTick>
 800d43a:	4602      	mov	r2, r0
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	2b02      	cmp	r3, #2
 800d442:	d908      	bls.n	800d456 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d444:	4b41      	ldr	r3, [pc, #260]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f003 0302 	and.w	r3, r3, #2
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d102      	bne.n	800d456 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800d450:	2303      	movs	r3, #3
 800d452:	f000 bc09 	b.w	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d456:	4b3d      	ldr	r3, [pc, #244]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f003 0302 	and.w	r3, r3, #2
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d0e9      	beq.n	800d436 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d462:	4b3a      	ldr	r3, [pc, #232]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a39      	ldr	r2, [pc, #228]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d468:	f043 0308 	orr.w	r3, r3, #8
 800d46c:	6013      	str	r3, [r2, #0]
 800d46e:	4b37      	ldr	r3, [pc, #220]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47a:	4934      	ldr	r1, [pc, #208]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d47c:	4313      	orrs	r3, r2
 800d47e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d480:	4b32      	ldr	r3, [pc, #200]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6a1b      	ldr	r3, [r3, #32]
 800d48c:	021b      	lsls	r3, r3, #8
 800d48e:	492f      	ldr	r1, [pc, #188]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d490:	4313      	orrs	r3, r2
 800d492:	604b      	str	r3, [r1, #4]
 800d494:	e020      	b.n	800d4d8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d496:	4b2d      	ldr	r3, [pc, #180]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4a2c      	ldr	r2, [pc, #176]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d49c:	f023 0301 	bic.w	r3, r3, #1
 800d4a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d4a2:	f7fc fd01 	bl	8009ea8 <HAL_GetTick>
 800d4a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d4a8:	e00e      	b.n	800d4c8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d4aa:	f7fc fcfd 	bl	8009ea8 <HAL_GetTick>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	1ad3      	subs	r3, r2, r3
 800d4b4:	2b02      	cmp	r3, #2
 800d4b6:	d907      	bls.n	800d4c8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d4b8:	4b24      	ldr	r3, [pc, #144]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f003 0302 	and.w	r3, r3, #2
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800d4c4:	2303      	movs	r3, #3
 800d4c6:	e3cf      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d4c8:	4b20      	ldr	r3, [pc, #128]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 0302 	and.w	r3, r3, #2
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1ea      	bne.n	800d4aa <HAL_RCC_OscConfig+0x1da>
 800d4d4:	e000      	b.n	800d4d8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d4d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f003 0301 	and.w	r3, r3, #1
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d07e      	beq.n	800d5e2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	2b08      	cmp	r3, #8
 800d4e8:	d005      	beq.n	800d4f6 <HAL_RCC_OscConfig+0x226>
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	2b0c      	cmp	r3, #12
 800d4ee:	d10e      	bne.n	800d50e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	2b03      	cmp	r3, #3
 800d4f4:	d10b      	bne.n	800d50e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4f6:	4b15      	ldr	r3, [pc, #84]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d06e      	beq.n	800d5e0 <HAL_RCC_OscConfig+0x310>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d16a      	bne.n	800d5e0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800d50a:	2301      	movs	r3, #1
 800d50c:	e3ac      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d516:	d106      	bne.n	800d526 <HAL_RCC_OscConfig+0x256>
 800d518:	4b0c      	ldr	r3, [pc, #48]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a0b      	ldr	r2, [pc, #44]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d51e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	e024      	b.n	800d570 <HAL_RCC_OscConfig+0x2a0>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d52e:	d113      	bne.n	800d558 <HAL_RCC_OscConfig+0x288>
 800d530:	4b06      	ldr	r3, [pc, #24]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a05      	ldr	r2, [pc, #20]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	4b03      	ldr	r3, [pc, #12]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a02      	ldr	r2, [pc, #8]	; (800d54c <HAL_RCC_OscConfig+0x27c>)
 800d542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	e012      	b.n	800d570 <HAL_RCC_OscConfig+0x2a0>
 800d54a:	bf00      	nop
 800d54c:	40021000 	.word	0x40021000
 800d550:	20000078 	.word	0x20000078
 800d554:	2000007c 	.word	0x2000007c
 800d558:	4b8b      	ldr	r3, [pc, #556]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a8a      	ldr	r2, [pc, #552]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d55e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d562:	6013      	str	r3, [r2, #0]
 800d564:	4b88      	ldr	r3, [pc, #544]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a87      	ldr	r2, [pc, #540]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d56a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d56e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d019      	beq.n	800d5ac <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d578:	f7fc fc96 	bl	8009ea8 <HAL_GetTick>
 800d57c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d57e:	e00e      	b.n	800d59e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d580:	f7fc fc92 	bl	8009ea8 <HAL_GetTick>
 800d584:	4602      	mov	r2, r0
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	1ad3      	subs	r3, r2, r3
 800d58a:	2b64      	cmp	r3, #100	; 0x64
 800d58c:	d907      	bls.n	800d59e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d58e:	4b7e      	ldr	r3, [pc, #504]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d596:	2b00      	cmp	r3, #0
 800d598:	d101      	bne.n	800d59e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800d59a:	2303      	movs	r3, #3
 800d59c:	e364      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d59e:	4b7a      	ldr	r3, [pc, #488]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d0ea      	beq.n	800d580 <HAL_RCC_OscConfig+0x2b0>
 800d5aa:	e01a      	b.n	800d5e2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5ac:	f7fc fc7c 	bl	8009ea8 <HAL_GetTick>
 800d5b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d5b2:	e00e      	b.n	800d5d2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d5b4:	f7fc fc78 	bl	8009ea8 <HAL_GetTick>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	1ad3      	subs	r3, r2, r3
 800d5be:	2b64      	cmp	r3, #100	; 0x64
 800d5c0:	d907      	bls.n	800d5d2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d5c2:	4b71      	ldr	r3, [pc, #452]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d001      	beq.n	800d5d2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800d5ce:	2303      	movs	r3, #3
 800d5d0:	e34a      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d5d2:	4b6d      	ldr	r3, [pc, #436]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d1ea      	bne.n	800d5b4 <HAL_RCC_OscConfig+0x2e4>
 800d5de:	e000      	b.n	800d5e2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f003 0302 	and.w	r3, r3, #2
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d06c      	beq.n	800d6c8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	2b04      	cmp	r3, #4
 800d5f2:	d005      	beq.n	800d600 <HAL_RCC_OscConfig+0x330>
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	2b0c      	cmp	r3, #12
 800d5f8:	d119      	bne.n	800d62e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	d116      	bne.n	800d62e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d600:	4b61      	ldr	r3, [pc, #388]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d005      	beq.n	800d618 <HAL_RCC_OscConfig+0x348>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d101      	bne.n	800d618 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800d614:	2301      	movs	r3, #1
 800d616:	e327      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d618:	4b5b      	ldr	r3, [pc, #364]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	061b      	lsls	r3, r3, #24
 800d626:	4958      	ldr	r1, [pc, #352]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d628:	4313      	orrs	r3, r2
 800d62a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d62c:	e04c      	b.n	800d6c8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d029      	beq.n	800d68a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d636:	4b54      	ldr	r3, [pc, #336]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a53      	ldr	r2, [pc, #332]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d63c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d642:	f7fc fc31 	bl	8009ea8 <HAL_GetTick>
 800d646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d648:	e00e      	b.n	800d668 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d64a:	f7fc fc2d 	bl	8009ea8 <HAL_GetTick>
 800d64e:	4602      	mov	r2, r0
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	2b02      	cmp	r3, #2
 800d656:	d907      	bls.n	800d668 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d658:	4b4b      	ldr	r3, [pc, #300]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800d664:	2303      	movs	r3, #3
 800d666:	e2ff      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d668:	4b47      	ldr	r3, [pc, #284]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d670:	2b00      	cmp	r3, #0
 800d672:	d0ea      	beq.n	800d64a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d674:	4b44      	ldr	r3, [pc, #272]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	061b      	lsls	r3, r3, #24
 800d682:	4941      	ldr	r1, [pc, #260]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d684:	4313      	orrs	r3, r2
 800d686:	604b      	str	r3, [r1, #4]
 800d688:	e01e      	b.n	800d6c8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d68a:	4b3f      	ldr	r3, [pc, #252]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a3e      	ldr	r2, [pc, #248]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d696:	f7fc fc07 	bl	8009ea8 <HAL_GetTick>
 800d69a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d69c:	e00e      	b.n	800d6bc <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d69e:	f7fc fc03 	bl	8009ea8 <HAL_GetTick>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	1ad3      	subs	r3, r2, r3
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d907      	bls.n	800d6bc <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d6ac:	4b36      	ldr	r3, [pc, #216]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d001      	beq.n	800d6bc <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800d6b8:	2303      	movs	r3, #3
 800d6ba:	e2d5      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d6bc:	4b32      	ldr	r3, [pc, #200]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1ea      	bne.n	800d69e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f003 0308 	and.w	r3, r3, #8
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d062      	beq.n	800d79a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	695b      	ldr	r3, [r3, #20]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d038      	beq.n	800d74e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	699b      	ldr	r3, [r3, #24]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d108      	bne.n	800d6f6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800d6e4:	4b28      	ldr	r3, [pc, #160]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d6e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6ea:	4a27      	ldr	r2, [pc, #156]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d6ec:	f023 0310 	bic.w	r3, r3, #16
 800d6f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d6f4:	e007      	b.n	800d706 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800d6f6:	4b24      	ldr	r3, [pc, #144]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d6f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6fc:	4a22      	ldr	r2, [pc, #136]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d6fe:	f043 0310 	orr.w	r3, r3, #16
 800d702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d706:	4b20      	ldr	r3, [pc, #128]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d70c:	4a1e      	ldr	r2, [pc, #120]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d70e:	f043 0301 	orr.w	r3, r3, #1
 800d712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d716:	f7fc fbc7 	bl	8009ea8 <HAL_GetTick>
 800d71a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d71c:	e00f      	b.n	800d73e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d71e:	f7fc fbc3 	bl	8009ea8 <HAL_GetTick>
 800d722:	4602      	mov	r2, r0
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	2b07      	cmp	r3, #7
 800d72a:	d908      	bls.n	800d73e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d72c:	4b16      	ldr	r3, [pc, #88]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d72e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d732:	f003 0302 	and.w	r3, r3, #2
 800d736:	2b00      	cmp	r3, #0
 800d738:	d101      	bne.n	800d73e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800d73a:	2303      	movs	r3, #3
 800d73c:	e294      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d73e:	4b12      	ldr	r3, [pc, #72]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d744:	f003 0302 	and.w	r3, r3, #2
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d0e8      	beq.n	800d71e <HAL_RCC_OscConfig+0x44e>
 800d74c:	e025      	b.n	800d79a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d74e:	4b0e      	ldr	r3, [pc, #56]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d754:	4a0c      	ldr	r2, [pc, #48]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d756:	f023 0301 	bic.w	r3, r3, #1
 800d75a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d75e:	f7fc fba3 	bl	8009ea8 <HAL_GetTick>
 800d762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d764:	e012      	b.n	800d78c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d766:	f7fc fb9f 	bl	8009ea8 <HAL_GetTick>
 800d76a:	4602      	mov	r2, r0
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	2b07      	cmp	r3, #7
 800d772:	d90b      	bls.n	800d78c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d774:	4b04      	ldr	r3, [pc, #16]	; (800d788 <HAL_RCC_OscConfig+0x4b8>)
 800d776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d77a:	f003 0302 	and.w	r3, r3, #2
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d004      	beq.n	800d78c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800d782:	2303      	movs	r3, #3
 800d784:	e270      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
 800d786:	bf00      	nop
 800d788:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d78c:	4ba8      	ldr	r3, [pc, #672]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d78e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d792:	f003 0302 	and.w	r3, r3, #2
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1e5      	bne.n	800d766 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f003 0304 	and.w	r3, r3, #4
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f000 812d 	beq.w	800da02 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800d7ac:	4ba0      	ldr	r3, [pc, #640]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d7ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10d      	bne.n	800d7d4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d7b8:	4b9d      	ldr	r3, [pc, #628]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7bc:	4a9c      	ldr	r2, [pc, #624]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d7be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7c2:	6593      	str	r3, [r2, #88]	; 0x58
 800d7c4:	4b9a      	ldr	r3, [pc, #616]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d7c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7cc:	60bb      	str	r3, [r7, #8]
 800d7ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d7d4:	4b97      	ldr	r3, [pc, #604]	; (800da34 <HAL_RCC_OscConfig+0x764>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d11e      	bne.n	800d81e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d7e0:	4b94      	ldr	r3, [pc, #592]	; (800da34 <HAL_RCC_OscConfig+0x764>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a93      	ldr	r2, [pc, #588]	; (800da34 <HAL_RCC_OscConfig+0x764>)
 800d7e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d7ec:	f7fc fb5c 	bl	8009ea8 <HAL_GetTick>
 800d7f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d7f2:	e00e      	b.n	800d812 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d7f4:	f7fc fb58 	bl	8009ea8 <HAL_GetTick>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d907      	bls.n	800d812 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d802:	4b8c      	ldr	r3, [pc, #560]	; (800da34 <HAL_RCC_OscConfig+0x764>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d101      	bne.n	800d812 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d80e:	2303      	movs	r3, #3
 800d810:	e22a      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d812:	4b88      	ldr	r3, [pc, #544]	; (800da34 <HAL_RCC_OscConfig+0x764>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d0ea      	beq.n	800d7f4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	f003 0301 	and.w	r3, r3, #1
 800d826:	2b00      	cmp	r3, #0
 800d828:	d01f      	beq.n	800d86a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	f003 0304 	and.w	r3, r3, #4
 800d832:	2b00      	cmp	r3, #0
 800d834:	d010      	beq.n	800d858 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d836:	4b7e      	ldr	r3, [pc, #504]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d83c:	4a7c      	ldr	r2, [pc, #496]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d83e:	f043 0304 	orr.w	r3, r3, #4
 800d842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d846:	4b7a      	ldr	r3, [pc, #488]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d84c:	4a78      	ldr	r2, [pc, #480]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d84e:	f043 0301 	orr.w	r3, r3, #1
 800d852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d856:	e018      	b.n	800d88a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d858:	4b75      	ldr	r3, [pc, #468]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d85e:	4a74      	ldr	r2, [pc, #464]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d860:	f043 0301 	orr.w	r3, r3, #1
 800d864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d868:	e00f      	b.n	800d88a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d86a:	4b71      	ldr	r3, [pc, #452]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d870:	4a6f      	ldr	r2, [pc, #444]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d872:	f023 0301 	bic.w	r3, r3, #1
 800d876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d87a:	4b6d      	ldr	r3, [pc, #436]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d880:	4a6b      	ldr	r2, [pc, #428]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d882:	f023 0304 	bic.w	r3, r3, #4
 800d886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d068      	beq.n	800d964 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d892:	f7fc fb09 	bl	8009ea8 <HAL_GetTick>
 800d896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d898:	e011      	b.n	800d8be <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d89a:	f7fc fb05 	bl	8009ea8 <HAL_GetTick>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	1ad3      	subs	r3, r2, r3
 800d8a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d908      	bls.n	800d8be <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d8ac:	4b60      	ldr	r3, [pc, #384]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8b2:	f003 0302 	and.w	r3, r3, #2
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d101      	bne.n	800d8be <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	e1d4      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d8be:	4b5c      	ldr	r3, [pc, #368]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8c4:	f003 0302 	and.w	r3, r3, #2
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d0e6      	beq.n	800d89a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d022      	beq.n	800d91e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d8d8:	4b55      	ldr	r3, [pc, #340]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d8da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8de:	4a54      	ldr	r2, [pc, #336]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d8e8:	e011      	b.n	800d90e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d8ea:	f7fc fadd 	bl	8009ea8 <HAL_GetTick>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	1ad3      	subs	r3, r2, r3
 800d8f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d908      	bls.n	800d90e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d8fc:	4b4c      	ldr	r3, [pc, #304]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d906:	2b00      	cmp	r3, #0
 800d908:	d101      	bne.n	800d90e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800d90a:	2303      	movs	r3, #3
 800d90c:	e1ac      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d90e:	4b48      	ldr	r3, [pc, #288]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d0e6      	beq.n	800d8ea <HAL_RCC_OscConfig+0x61a>
 800d91c:	e068      	b.n	800d9f0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d91e:	4b44      	ldr	r3, [pc, #272]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d924:	4a42      	ldr	r2, [pc, #264]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d92a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d92e:	e011      	b.n	800d954 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d930:	f7fc faba 	bl	8009ea8 <HAL_GetTick>
 800d934:	4602      	mov	r2, r0
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d93e:	4293      	cmp	r3, r2
 800d940:	d908      	bls.n	800d954 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d942:	4b3b      	ldr	r3, [pc, #236]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d001      	beq.n	800d954 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800d950:	2303      	movs	r3, #3
 800d952:	e189      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d954:	4b36      	ldr	r3, [pc, #216]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d95a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e6      	bne.n	800d930 <HAL_RCC_OscConfig+0x660>
 800d962:	e045      	b.n	800d9f0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d964:	f7fc faa0 	bl	8009ea8 <HAL_GetTick>
 800d968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d96a:	e011      	b.n	800d990 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d96c:	f7fc fa9c 	bl	8009ea8 <HAL_GetTick>
 800d970:	4602      	mov	r2, r0
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	f241 3288 	movw	r2, #5000	; 0x1388
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d908      	bls.n	800d990 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d97e:	4b2c      	ldr	r3, [pc, #176]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d984:	f003 0302 	and.w	r3, r3, #2
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800d98c:	2303      	movs	r3, #3
 800d98e:	e16b      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d990:	4b27      	ldr	r3, [pc, #156]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d996:	f003 0302 	and.w	r3, r3, #2
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1e6      	bne.n	800d96c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800d99e:	4b24      	ldr	r3, [pc, #144]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d021      	beq.n	800d9f0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d9ac:	4b20      	ldr	r3, [pc, #128]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d9ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9b2:	4a1f      	ldr	r2, [pc, #124]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d9b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d9bc:	e011      	b.n	800d9e2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9be:	f7fc fa73 	bl	8009ea8 <HAL_GetTick>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	1ad3      	subs	r3, r2, r3
 800d9c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d908      	bls.n	800d9e2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d9d0:	4b17      	ldr	r3, [pc, #92]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d001      	beq.n	800d9e2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800d9de:	2303      	movs	r3, #3
 800d9e0:	e142      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d9e2:	4b13      	ldr	r3, [pc, #76]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d1e6      	bne.n	800d9be <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d9f0:	7ffb      	ldrb	r3, [r7, #31]
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d105      	bne.n	800da02 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9f6:	4b0e      	ldr	r3, [pc, #56]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9fa:	4a0d      	ldr	r2, [pc, #52]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800d9fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f003 0320 	and.w	r3, r3, #32
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d04f      	beq.n	800daae <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da12:	2b00      	cmp	r3, #0
 800da14:	d028      	beq.n	800da68 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800da16:	4b06      	ldr	r3, [pc, #24]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800da18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da1c:	4a04      	ldr	r2, [pc, #16]	; (800da30 <HAL_RCC_OscConfig+0x760>)
 800da1e:	f043 0301 	orr.w	r3, r3, #1
 800da22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da26:	f7fc fa3f 	bl	8009ea8 <HAL_GetTick>
 800da2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800da2c:	e014      	b.n	800da58 <HAL_RCC_OscConfig+0x788>
 800da2e:	bf00      	nop
 800da30:	40021000 	.word	0x40021000
 800da34:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800da38:	f7fc fa36 	bl	8009ea8 <HAL_GetTick>
 800da3c:	4602      	mov	r2, r0
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	2b02      	cmp	r3, #2
 800da44:	d908      	bls.n	800da58 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800da46:	4b8a      	ldr	r3, [pc, #552]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800da48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da4c:	f003 0302 	and.w	r3, r3, #2
 800da50:	2b00      	cmp	r3, #0
 800da52:	d101      	bne.n	800da58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800da54:	2303      	movs	r3, #3
 800da56:	e107      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800da58:	4b85      	ldr	r3, [pc, #532]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800da5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da5e:	f003 0302 	and.w	r3, r3, #2
 800da62:	2b00      	cmp	r3, #0
 800da64:	d0e8      	beq.n	800da38 <HAL_RCC_OscConfig+0x768>
 800da66:	e022      	b.n	800daae <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800da68:	4b81      	ldr	r3, [pc, #516]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800da6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da6e:	4a80      	ldr	r2, [pc, #512]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800da70:	f023 0301 	bic.w	r3, r3, #1
 800da74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da78:	f7fc fa16 	bl	8009ea8 <HAL_GetTick>
 800da7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800da7e:	e00f      	b.n	800daa0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800da80:	f7fc fa12 	bl	8009ea8 <HAL_GetTick>
 800da84:	4602      	mov	r2, r0
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	d908      	bls.n	800daa0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800da8e:	4b78      	ldr	r3, [pc, #480]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800da90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da94:	f003 0302 	and.w	r3, r3, #2
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d001      	beq.n	800daa0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800da9c:	2303      	movs	r3, #3
 800da9e:	e0e3      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800daa0:	4b73      	ldr	r3, [pc, #460]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800daa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800daa6:	f003 0302 	and.w	r3, r3, #2
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1e8      	bne.n	800da80 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f000 80d7 	beq.w	800dc66 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dab8:	4b6d      	ldr	r3, [pc, #436]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	f003 030c 	and.w	r3, r3, #12
 800dac0:	2b0c      	cmp	r3, #12
 800dac2:	f000 8091 	beq.w	800dbe8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d166      	bne.n	800db9c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dace:	4b68      	ldr	r3, [pc, #416]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a67      	ldr	r2, [pc, #412]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800dad4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dada:	f7fc f9e5 	bl	8009ea8 <HAL_GetTick>
 800dade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dae0:	e00e      	b.n	800db00 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dae2:	f7fc f9e1 	bl	8009ea8 <HAL_GetTick>
 800dae6:	4602      	mov	r2, r0
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	2b02      	cmp	r3, #2
 800daee:	d907      	bls.n	800db00 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800daf0:	4b5f      	ldr	r3, [pc, #380]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d001      	beq.n	800db00 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800dafc:	2303      	movs	r3, #3
 800dafe:	e0b3      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db00:	4b5b      	ldr	r3, [pc, #364]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1ea      	bne.n	800dae2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db0c:	4b58      	ldr	r3, [pc, #352]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800db0e:	68da      	ldr	r2, [r3, #12]
 800db10:	4b58      	ldr	r3, [pc, #352]	; (800dc74 <HAL_RCC_OscConfig+0x9a4>)
 800db12:	4013      	ands	r3, r2
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800db1c:	3a01      	subs	r2, #1
 800db1e:	0112      	lsls	r2, r2, #4
 800db20:	4311      	orrs	r1, r2
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800db26:	0212      	lsls	r2, r2, #8
 800db28:	4311      	orrs	r1, r2
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800db2e:	0852      	lsrs	r2, r2, #1
 800db30:	3a01      	subs	r2, #1
 800db32:	0552      	lsls	r2, r2, #21
 800db34:	4311      	orrs	r1, r2
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800db3a:	0852      	lsrs	r2, r2, #1
 800db3c:	3a01      	subs	r2, #1
 800db3e:	0652      	lsls	r2, r2, #25
 800db40:	4311      	orrs	r1, r2
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800db46:	06d2      	lsls	r2, r2, #27
 800db48:	430a      	orrs	r2, r1
 800db4a:	4949      	ldr	r1, [pc, #292]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800db4c:	4313      	orrs	r3, r2
 800db4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db50:	4b47      	ldr	r3, [pc, #284]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a46      	ldr	r2, [pc, #280]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800db56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800db5c:	4b44      	ldr	r3, [pc, #272]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	4a43      	ldr	r2, [pc, #268]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800db62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db68:	f7fc f99e 	bl	8009ea8 <HAL_GetTick>
 800db6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db6e:	e00e      	b.n	800db8e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db70:	f7fc f99a 	bl	8009ea8 <HAL_GetTick>
 800db74:	4602      	mov	r2, r0
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	1ad3      	subs	r3, r2, r3
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d907      	bls.n	800db8e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db7e:	4b3c      	ldr	r3, [pc, #240]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db86:	2b00      	cmp	r3, #0
 800db88:	d101      	bne.n	800db8e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800db8a:	2303      	movs	r3, #3
 800db8c:	e06c      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db8e:	4b38      	ldr	r3, [pc, #224]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db96:	2b00      	cmp	r3, #0
 800db98:	d0ea      	beq.n	800db70 <HAL_RCC_OscConfig+0x8a0>
 800db9a:	e064      	b.n	800dc66 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db9c:	4b34      	ldr	r3, [pc, #208]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a33      	ldr	r2, [pc, #204]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800dba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dba8:	f7fc f97e 	bl	8009ea8 <HAL_GetTick>
 800dbac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dbae:	e00e      	b.n	800dbce <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbb0:	f7fc f97a 	bl	8009ea8 <HAL_GetTick>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d907      	bls.n	800dbce <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dbbe:	4b2c      	ldr	r3, [pc, #176]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800dbca:	2303      	movs	r3, #3
 800dbcc:	e04c      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dbce:	4b28      	ldr	r3, [pc, #160]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1ea      	bne.n	800dbb0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800dbda:	4b25      	ldr	r3, [pc, #148]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800dbdc:	68da      	ldr	r2, [r3, #12]
 800dbde:	4924      	ldr	r1, [pc, #144]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800dbe0:	4b25      	ldr	r3, [pc, #148]	; (800dc78 <HAL_RCC_OscConfig+0x9a8>)
 800dbe2:	4013      	ands	r3, r2
 800dbe4:	60cb      	str	r3, [r1, #12]
 800dbe6:	e03e      	b.n	800dc66 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d101      	bne.n	800dbf4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e039      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800dbf4:	4b1e      	ldr	r3, [pc, #120]	; (800dc70 <HAL_RCC_OscConfig+0x9a0>)
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f003 0203 	and.w	r2, r3, #3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d12c      	bne.n	800dc62 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc12:	3b01      	subs	r3, #1
 800dc14:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d123      	bne.n	800dc62 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc24:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d11b      	bne.n	800dc62 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc34:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d113      	bne.n	800dc62 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc44:	085b      	lsrs	r3, r3, #1
 800dc46:	3b01      	subs	r3, #1
 800dc48:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d109      	bne.n	800dc62 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc58:	085b      	lsrs	r3, r3, #1
 800dc5a:	3b01      	subs	r3, #1
 800dc5c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d001      	beq.n	800dc66 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	e000      	b.n	800dc68 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3720      	adds	r7, #32
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	40021000 	.word	0x40021000
 800dc74:	019f800c 	.word	0x019f800c
 800dc78:	feeefffc 	.word	0xfeeefffc

0800dc7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b086      	sub	sp, #24
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800dc86:	2300      	movs	r3, #0
 800dc88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d101      	bne.n	800dc94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dc90:	2301      	movs	r3, #1
 800dc92:	e11c      	b.n	800dece <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dc94:	4b90      	ldr	r3, [pc, #576]	; (800ded8 <HAL_RCC_ClockConfig+0x25c>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f003 030f 	and.w	r3, r3, #15
 800dc9c:	683a      	ldr	r2, [r7, #0]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d910      	bls.n	800dcc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dca2:	4b8d      	ldr	r3, [pc, #564]	; (800ded8 <HAL_RCC_ClockConfig+0x25c>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f023 020f 	bic.w	r2, r3, #15
 800dcaa:	498b      	ldr	r1, [pc, #556]	; (800ded8 <HAL_RCC_ClockConfig+0x25c>)
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcb2:	4b89      	ldr	r3, [pc, #548]	; (800ded8 <HAL_RCC_ClockConfig+0x25c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f003 030f 	and.w	r3, r3, #15
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d001      	beq.n	800dcc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e104      	b.n	800dece <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f003 0302 	and.w	r3, r3, #2
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d010      	beq.n	800dcf2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	689a      	ldr	r2, [r3, #8]
 800dcd4:	4b81      	ldr	r3, [pc, #516]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d908      	bls.n	800dcf2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dce0:	4b7e      	ldr	r3, [pc, #504]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	497b      	ldr	r1, [pc, #492]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f000 8085 	beq.w	800de0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	2b03      	cmp	r3, #3
 800dd06:	d11f      	bne.n	800dd48 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dd08:	4b74      	ldr	r3, [pc, #464]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d101      	bne.n	800dd18 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	e0da      	b.n	800dece <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800dd18:	f000 fa58 	bl	800e1cc <RCC_GetSysClockFreqFromPLLSource>
 800dd1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	4a6f      	ldr	r2, [pc, #444]	; (800dee0 <HAL_RCC_ClockConfig+0x264>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d947      	bls.n	800ddb6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800dd26:	4b6d      	ldr	r3, [pc, #436]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dd28:	689b      	ldr	r3, [r3, #8]
 800dd2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d141      	bne.n	800ddb6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dd32:	4b6a      	ldr	r3, [pc, #424]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd3a:	4a68      	ldr	r2, [pc, #416]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800dd42:	2380      	movs	r3, #128	; 0x80
 800dd44:	617b      	str	r3, [r7, #20]
 800dd46:	e036      	b.n	800ddb6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d107      	bne.n	800dd60 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dd50:	4b62      	ldr	r3, [pc, #392]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d115      	bne.n	800dd88 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e0b6      	b.n	800dece <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d107      	bne.n	800dd78 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800dd68:	4b5c      	ldr	r3, [pc, #368]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f003 0302 	and.w	r3, r3, #2
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d109      	bne.n	800dd88 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800dd74:	2301      	movs	r3, #1
 800dd76:	e0aa      	b.n	800dece <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dd78:	4b58      	ldr	r3, [pc, #352]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d101      	bne.n	800dd88 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800dd84:	2301      	movs	r3, #1
 800dd86:	e0a2      	b.n	800dece <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800dd88:	f000 f8b0 	bl	800deec <HAL_RCC_GetSysClockFreq>
 800dd8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	4a53      	ldr	r2, [pc, #332]	; (800dee0 <HAL_RCC_ClockConfig+0x264>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d90f      	bls.n	800ddb6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800dd96:	4b51      	ldr	r3, [pc, #324]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d109      	bne.n	800ddb6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dda2:	4b4e      	ldr	r3, [pc, #312]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ddaa:	4a4c      	ldr	r2, [pc, #304]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800ddac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ddb2:	2380      	movs	r3, #128	; 0x80
 800ddb4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ddb6:	4b49      	ldr	r3, [pc, #292]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	f023 0203 	bic.w	r2, r3, #3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	4946      	ldr	r1, [pc, #280]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddc8:	f7fc f86e 	bl	8009ea8 <HAL_GetTick>
 800ddcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddce:	e013      	b.n	800ddf8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ddd0:	f7fc f86a 	bl	8009ea8 <HAL_GetTick>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d90a      	bls.n	800ddf8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dde2:	4b3e      	ldr	r3, [pc, #248]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	f003 020c 	and.w	r2, r3, #12
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d001      	beq.n	800ddf8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	e06a      	b.n	800dece <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddf8:	4b38      	ldr	r3, [pc, #224]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	f003 020c 	and.w	r2, r3, #12
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	429a      	cmp	r2, r3
 800de08:	d1e2      	bne.n	800ddd0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2b80      	cmp	r3, #128	; 0x80
 800de0e:	d105      	bne.n	800de1c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800de10:	4b32      	ldr	r3, [pc, #200]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	4a31      	ldr	r2, [pc, #196]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800de16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800de1a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f003 0302 	and.w	r3, r3, #2
 800de24:	2b00      	cmp	r3, #0
 800de26:	d010      	beq.n	800de4a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	689a      	ldr	r2, [r3, #8]
 800de2c:	4b2b      	ldr	r3, [pc, #172]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de34:	429a      	cmp	r2, r3
 800de36:	d208      	bcs.n	800de4a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de38:	4b28      	ldr	r3, [pc, #160]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	4925      	ldr	r1, [pc, #148]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800de46:	4313      	orrs	r3, r2
 800de48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800de4a:	4b23      	ldr	r3, [pc, #140]	; (800ded8 <HAL_RCC_ClockConfig+0x25c>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f003 030f 	and.w	r3, r3, #15
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	429a      	cmp	r2, r3
 800de56:	d210      	bcs.n	800de7a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de58:	4b1f      	ldr	r3, [pc, #124]	; (800ded8 <HAL_RCC_ClockConfig+0x25c>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f023 020f 	bic.w	r2, r3, #15
 800de60:	491d      	ldr	r1, [pc, #116]	; (800ded8 <HAL_RCC_ClockConfig+0x25c>)
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	4313      	orrs	r3, r2
 800de66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de68:	4b1b      	ldr	r3, [pc, #108]	; (800ded8 <HAL_RCC_ClockConfig+0x25c>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f003 030f 	and.w	r3, r3, #15
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	429a      	cmp	r2, r3
 800de74:	d001      	beq.n	800de7a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	e029      	b.n	800dece <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 0304 	and.w	r3, r3, #4
 800de82:	2b00      	cmp	r3, #0
 800de84:	d008      	beq.n	800de98 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de86:	4b15      	ldr	r3, [pc, #84]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	4912      	ldr	r1, [pc, #72]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800de94:	4313      	orrs	r3, r2
 800de96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f003 0308 	and.w	r3, r3, #8
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d009      	beq.n	800deb8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dea4:	4b0d      	ldr	r3, [pc, #52]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	691b      	ldr	r3, [r3, #16]
 800deb0:	00db      	lsls	r3, r3, #3
 800deb2:	490a      	ldr	r1, [pc, #40]	; (800dedc <HAL_RCC_ClockConfig+0x260>)
 800deb4:	4313      	orrs	r3, r2
 800deb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800deb8:	f000 f8b6 	bl	800e028 <HAL_RCC_GetHCLKFreq>
 800debc:	4603      	mov	r3, r0
 800debe:	4a09      	ldr	r2, [pc, #36]	; (800dee4 <HAL_RCC_ClockConfig+0x268>)
 800dec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800dec2:	4b09      	ldr	r3, [pc, #36]	; (800dee8 <HAL_RCC_ClockConfig+0x26c>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fb fdd6 	bl	8009a78 <HAL_InitTick>
 800decc:	4603      	mov	r3, r0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3718      	adds	r7, #24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	40022000 	.word	0x40022000
 800dedc:	40021000 	.word	0x40021000
 800dee0:	04c4b400 	.word	0x04c4b400
 800dee4:	20000078 	.word	0x20000078
 800dee8:	2000007c 	.word	0x2000007c

0800deec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800deec:	b480      	push	{r7}
 800deee:	b089      	sub	sp, #36	; 0x24
 800def0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800def2:	2300      	movs	r3, #0
 800def4:	61fb      	str	r3, [r7, #28]
 800def6:	2300      	movs	r3, #0
 800def8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800defa:	4b47      	ldr	r3, [pc, #284]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	f003 030c 	and.w	r3, r3, #12
 800df02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800df04:	4b44      	ldr	r3, [pc, #272]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	f003 0303 	and.w	r3, r3, #3
 800df0c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d005      	beq.n	800df20 <HAL_RCC_GetSysClockFreq+0x34>
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	2b0c      	cmp	r3, #12
 800df18:	d121      	bne.n	800df5e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d11e      	bne.n	800df5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800df20:	4b3d      	ldr	r3, [pc, #244]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f003 0308 	and.w	r3, r3, #8
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d107      	bne.n	800df3c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800df2c:	4b3a      	ldr	r3, [pc, #232]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800df2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df32:	0a1b      	lsrs	r3, r3, #8
 800df34:	f003 030f 	and.w	r3, r3, #15
 800df38:	61fb      	str	r3, [r7, #28]
 800df3a:	e005      	b.n	800df48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800df3c:	4b36      	ldr	r3, [pc, #216]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	091b      	lsrs	r3, r3, #4
 800df42:	f003 030f 	and.w	r3, r3, #15
 800df46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800df48:	4a34      	ldr	r2, [pc, #208]	; (800e01c <HAL_RCC_GetSysClockFreq+0x130>)
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df50:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d10d      	bne.n	800df74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800df5c:	e00a      	b.n	800df74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	2b04      	cmp	r3, #4
 800df62:	d102      	bne.n	800df6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800df64:	4b2e      	ldr	r3, [pc, #184]	; (800e020 <HAL_RCC_GetSysClockFreq+0x134>)
 800df66:	61bb      	str	r3, [r7, #24]
 800df68:	e004      	b.n	800df74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2b08      	cmp	r3, #8
 800df6e:	d101      	bne.n	800df74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800df70:	4b2c      	ldr	r3, [pc, #176]	; (800e024 <HAL_RCC_GetSysClockFreq+0x138>)
 800df72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	2b0c      	cmp	r3, #12
 800df78:	d146      	bne.n	800e008 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800df7a:	4b27      	ldr	r3, [pc, #156]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	f003 0303 	and.w	r3, r3, #3
 800df82:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800df84:	4b24      	ldr	r3, [pc, #144]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	091b      	lsrs	r3, r3, #4
 800df8a:	f003 030f 	and.w	r3, r3, #15
 800df8e:	3301      	adds	r3, #1
 800df90:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	2b02      	cmp	r3, #2
 800df96:	d003      	beq.n	800dfa0 <HAL_RCC_GetSysClockFreq+0xb4>
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2b03      	cmp	r3, #3
 800df9c:	d00d      	beq.n	800dfba <HAL_RCC_GetSysClockFreq+0xce>
 800df9e:	e019      	b.n	800dfd4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dfa0:	4a1f      	ldr	r2, [pc, #124]	; (800e020 <HAL_RCC_GetSysClockFreq+0x134>)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfa8:	4a1b      	ldr	r2, [pc, #108]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dfaa:	68d2      	ldr	r2, [r2, #12]
 800dfac:	0a12      	lsrs	r2, r2, #8
 800dfae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dfb2:	fb02 f303 	mul.w	r3, r2, r3
 800dfb6:	617b      	str	r3, [r7, #20]
        break;
 800dfb8:	e019      	b.n	800dfee <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dfba:	4a1a      	ldr	r2, [pc, #104]	; (800e024 <HAL_RCC_GetSysClockFreq+0x138>)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfc2:	4a15      	ldr	r2, [pc, #84]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dfc4:	68d2      	ldr	r2, [r2, #12]
 800dfc6:	0a12      	lsrs	r2, r2, #8
 800dfc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dfcc:	fb02 f303 	mul.w	r3, r2, r3
 800dfd0:	617b      	str	r3, [r7, #20]
        break;
 800dfd2:	e00c      	b.n	800dfee <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dfd4:	69fa      	ldr	r2, [r7, #28]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfdc:	4a0e      	ldr	r2, [pc, #56]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dfde:	68d2      	ldr	r2, [r2, #12]
 800dfe0:	0a12      	lsrs	r2, r2, #8
 800dfe2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dfe6:	fb02 f303 	mul.w	r3, r2, r3
 800dfea:	617b      	str	r3, [r7, #20]
        break;
 800dfec:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800dfee:	4b0a      	ldr	r3, [pc, #40]	; (800e018 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	0e5b      	lsrs	r3, r3, #25
 800dff4:	f003 0303 	and.w	r3, r3, #3
 800dff8:	3301      	adds	r3, #1
 800dffa:	005b      	lsls	r3, r3, #1
 800dffc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	fbb2 f3f3 	udiv	r3, r2, r3
 800e006:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800e008:	69bb      	ldr	r3, [r7, #24]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3724      	adds	r7, #36	; 0x24
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	40021000 	.word	0x40021000
 800e01c:	08018924 	.word	0x08018924
 800e020:	00f42400 	.word	0x00f42400
 800e024:	007a1200 	.word	0x007a1200

0800e028 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800e02c:	f7ff ff5e 	bl	800deec <HAL_RCC_GetSysClockFreq>
 800e030:	4602      	mov	r2, r0
 800e032:	4b05      	ldr	r3, [pc, #20]	; (800e048 <HAL_RCC_GetHCLKFreq+0x20>)
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	091b      	lsrs	r3, r3, #4
 800e038:	f003 030f 	and.w	r3, r3, #15
 800e03c:	4903      	ldr	r1, [pc, #12]	; (800e04c <HAL_RCC_GetHCLKFreq+0x24>)
 800e03e:	5ccb      	ldrb	r3, [r1, r3]
 800e040:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e044:	4618      	mov	r0, r3
 800e046:	bd80      	pop	{r7, pc}
 800e048:	40021000 	.word	0x40021000
 800e04c:	0801890c 	.word	0x0801890c

0800e050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e054:	f7ff ffe8 	bl	800e028 <HAL_RCC_GetHCLKFreq>
 800e058:	4602      	mov	r2, r0
 800e05a:	4b05      	ldr	r3, [pc, #20]	; (800e070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	0a1b      	lsrs	r3, r3, #8
 800e060:	f003 0307 	and.w	r3, r3, #7
 800e064:	4903      	ldr	r1, [pc, #12]	; (800e074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e066:	5ccb      	ldrb	r3, [r1, r3]
 800e068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	40021000 	.word	0x40021000
 800e074:	0801891c 	.word	0x0801891c

0800e078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e07c:	f7ff ffd4 	bl	800e028 <HAL_RCC_GetHCLKFreq>
 800e080:	4602      	mov	r2, r0
 800e082:	4b05      	ldr	r3, [pc, #20]	; (800e098 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	0adb      	lsrs	r3, r3, #11
 800e088:	f003 0307 	and.w	r3, r3, #7
 800e08c:	4903      	ldr	r1, [pc, #12]	; (800e09c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e08e:	5ccb      	ldrb	r3, [r1, r3]
 800e090:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e094:	4618      	mov	r0, r3
 800e096:	bd80      	pop	{r7, pc}
 800e098:	40021000 	.word	0x40021000
 800e09c:	0801891c 	.word	0x0801891c

0800e0a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	220f      	movs	r2, #15
 800e0ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e0b0:	4b12      	ldr	r3, [pc, #72]	; (800e0fc <HAL_RCC_GetClockConfig+0x5c>)
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	f003 0203 	and.w	r2, r3, #3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e0bc:	4b0f      	ldr	r3, [pc, #60]	; (800e0fc <HAL_RCC_GetClockConfig+0x5c>)
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e0c8:	4b0c      	ldr	r3, [pc, #48]	; (800e0fc <HAL_RCC_GetClockConfig+0x5c>)
 800e0ca:	689b      	ldr	r3, [r3, #8]
 800e0cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e0d4:	4b09      	ldr	r3, [pc, #36]	; (800e0fc <HAL_RCC_GetClockConfig+0x5c>)
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	08db      	lsrs	r3, r3, #3
 800e0da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e0e2:	4b07      	ldr	r3, [pc, #28]	; (800e100 <HAL_RCC_GetClockConfig+0x60>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f003 020f 	and.w	r2, r3, #15
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	601a      	str	r2, [r3, #0]
}
 800e0ee:	bf00      	nop
 800e0f0:	370c      	adds	r7, #12
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	40021000 	.word	0x40021000
 800e100:	40022000 	.word	0x40022000

0800e104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800e10c:	2300      	movs	r3, #0
 800e10e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800e110:	4b2c      	ldr	r3, [pc, #176]	; (800e1c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800e112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d003      	beq.n	800e124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800e11c:	f7ff f83a 	bl	800d194 <HAL_PWREx_GetVoltageRange>
 800e120:	6138      	str	r0, [r7, #16]
 800e122:	e014      	b.n	800e14e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800e124:	4b27      	ldr	r3, [pc, #156]	; (800e1c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800e126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e128:	4a26      	ldr	r2, [pc, #152]	; (800e1c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800e12a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e12e:	6593      	str	r3, [r2, #88]	; 0x58
 800e130:	4b24      	ldr	r3, [pc, #144]	; (800e1c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800e132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e138:	60fb      	str	r3, [r7, #12]
 800e13a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800e13c:	f7ff f82a 	bl	800d194 <HAL_PWREx_GetVoltageRange>
 800e140:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800e142:	4b20      	ldr	r3, [pc, #128]	; (800e1c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800e144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e146:	4a1f      	ldr	r2, [pc, #124]	; (800e1c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800e148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e14c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d003      	beq.n	800e15c <RCC_SetFlashLatencyFromMSIRange+0x58>
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e15a:	d10b      	bne.n	800e174 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b80      	cmp	r3, #128	; 0x80
 800e160:	d919      	bls.n	800e196 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2ba0      	cmp	r3, #160	; 0xa0
 800e166:	d902      	bls.n	800e16e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800e168:	2302      	movs	r3, #2
 800e16a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800e16c:	e013      	b.n	800e196 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800e16e:	2301      	movs	r3, #1
 800e170:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800e172:	e010      	b.n	800e196 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b80      	cmp	r3, #128	; 0x80
 800e178:	d902      	bls.n	800e180 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800e17a:	2303      	movs	r3, #3
 800e17c:	617b      	str	r3, [r7, #20]
 800e17e:	e00a      	b.n	800e196 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2b80      	cmp	r3, #128	; 0x80
 800e184:	d102      	bne.n	800e18c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800e186:	2302      	movs	r3, #2
 800e188:	617b      	str	r3, [r7, #20]
 800e18a:	e004      	b.n	800e196 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b70      	cmp	r3, #112	; 0x70
 800e190:	d101      	bne.n	800e196 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800e192:	2301      	movs	r3, #1
 800e194:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800e196:	4b0c      	ldr	r3, [pc, #48]	; (800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f023 020f 	bic.w	r2, r3, #15
 800e19e:	490a      	ldr	r1, [pc, #40]	; (800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800e1a6:	4b08      	ldr	r3, [pc, #32]	; (800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f003 030f 	and.w	r3, r3, #15
 800e1ae:	697a      	ldr	r2, [r7, #20]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d001      	beq.n	800e1b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e000      	b.n	800e1ba <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800e1b8:	2300      	movs	r3, #0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3718      	adds	r7, #24
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	40021000 	.word	0x40021000
 800e1c8:	40022000 	.word	0x40022000

0800e1cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b087      	sub	sp, #28
 800e1d0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e1d2:	4b31      	ldr	r3, [pc, #196]	; (800e298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	f003 0303 	and.w	r3, r3, #3
 800e1da:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e1dc:	4b2e      	ldr	r3, [pc, #184]	; (800e298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	091b      	lsrs	r3, r3, #4
 800e1e2:	f003 030f 	and.w	r3, r3, #15
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2b03      	cmp	r3, #3
 800e1ee:	d015      	beq.n	800e21c <RCC_GetSysClockFreqFromPLLSource+0x50>
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d839      	bhi.n	800e26a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d01c      	beq.n	800e236 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2b02      	cmp	r3, #2
 800e200:	d133      	bne.n	800e26a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e202:	4a26      	ldr	r2, [pc, #152]	; (800e29c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	fbb2 f3f3 	udiv	r3, r2, r3
 800e20a:	4a23      	ldr	r2, [pc, #140]	; (800e298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800e20c:	68d2      	ldr	r2, [r2, #12]
 800e20e:	0a12      	lsrs	r2, r2, #8
 800e210:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e214:	fb02 f303 	mul.w	r3, r2, r3
 800e218:	613b      	str	r3, [r7, #16]
      break;
 800e21a:	e029      	b.n	800e270 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e21c:	4a20      	ldr	r2, [pc, #128]	; (800e2a0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	fbb2 f3f3 	udiv	r3, r2, r3
 800e224:	4a1c      	ldr	r2, [pc, #112]	; (800e298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800e226:	68d2      	ldr	r2, [r2, #12]
 800e228:	0a12      	lsrs	r2, r2, #8
 800e22a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e22e:	fb02 f303 	mul.w	r3, r2, r3
 800e232:	613b      	str	r3, [r7, #16]
      break;
 800e234:	e01c      	b.n	800e270 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800e236:	4b18      	ldr	r3, [pc, #96]	; (800e298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f003 0308 	and.w	r3, r3, #8
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d107      	bne.n	800e252 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800e242:	4b15      	ldr	r3, [pc, #84]	; (800e298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800e244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e248:	0a1b      	lsrs	r3, r3, #8
 800e24a:	f003 030f 	and.w	r3, r3, #15
 800e24e:	617b      	str	r3, [r7, #20]
 800e250:	e005      	b.n	800e25e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800e252:	4b11      	ldr	r3, [pc, #68]	; (800e298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	091b      	lsrs	r3, r3, #4
 800e258:	f003 030f 	and.w	r3, r3, #15
 800e25c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800e25e:	4a11      	ldr	r2, [pc, #68]	; (800e2a4 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e266:	613b      	str	r3, [r7, #16]
        break;
 800e268:	e002      	b.n	800e270 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800e26a:	2300      	movs	r3, #0
 800e26c:	613b      	str	r3, [r7, #16]
      break;
 800e26e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800e270:	4b09      	ldr	r3, [pc, #36]	; (800e298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	0e5b      	lsrs	r3, r3, #25
 800e276:	f003 0303 	and.w	r3, r3, #3
 800e27a:	3301      	adds	r3, #1
 800e27c:	005b      	lsls	r3, r3, #1
 800e27e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800e280:	693a      	ldr	r2, [r7, #16]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	fbb2 f3f3 	udiv	r3, r2, r3
 800e288:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800e28a:	683b      	ldr	r3, [r7, #0]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	371c      	adds	r7, #28
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr
 800e298:	40021000 	.word	0x40021000
 800e29c:	00f42400 	.word	0x00f42400
 800e2a0:	007a1200 	.word	0x007a1200
 800e2a4:	08018924 	.word	0x08018924

0800e2a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b088      	sub	sp, #32
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d040      	beq.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2c8:	2b80      	cmp	r3, #128	; 0x80
 800e2ca:	d02a      	beq.n	800e322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e2cc:	2b80      	cmp	r3, #128	; 0x80
 800e2ce:	d825      	bhi.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800e2d0:	2b60      	cmp	r3, #96	; 0x60
 800e2d2:	d026      	beq.n	800e322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e2d4:	2b60      	cmp	r3, #96	; 0x60
 800e2d6:	d821      	bhi.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800e2d8:	2b40      	cmp	r3, #64	; 0x40
 800e2da:	d006      	beq.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x42>
 800e2dc:	2b40      	cmp	r3, #64	; 0x40
 800e2de:	d81d      	bhi.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d009      	beq.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800e2e4:	2b20      	cmp	r3, #32
 800e2e6:	d010      	beq.n	800e30a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800e2e8:	e018      	b.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e2ea:	4b8f      	ldr	r3, [pc, #572]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	4a8e      	ldr	r2, [pc, #568]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e2f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e2f4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e2f6:	e015      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	4618      	mov	r0, r3
 800e300:	f000 fb56 	bl	800e9b0 <RCCEx_PLLSAI1_Config>
 800e304:	4603      	mov	r3, r0
 800e306:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e308:	e00c      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	3320      	adds	r3, #32
 800e30e:	2100      	movs	r1, #0
 800e310:	4618      	mov	r0, r3
 800e312:	f000 fc33 	bl	800eb7c <RCCEx_PLLSAI2_Config>
 800e316:	4603      	mov	r3, r0
 800e318:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e31a:	e003      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e31c:	2301      	movs	r3, #1
 800e31e:	77fb      	strb	r3, [r7, #31]
        break;
 800e320:	e000      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800e322:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e324:	7ffb      	ldrb	r3, [r7, #31]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d10b      	bne.n	800e342 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e32a:	4b7f      	ldr	r3, [pc, #508]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e32c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e330:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e338:	497b      	ldr	r1, [pc, #492]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e33a:	4313      	orrs	r3, r2
 800e33c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e340:	e001      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e342:	7ffb      	ldrb	r3, [r7, #31]
 800e344:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d047      	beq.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e35a:	d030      	beq.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e35c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e360:	d82a      	bhi.n	800e3b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e366:	d02a      	beq.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e36c:	d824      	bhi.n	800e3b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e36e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e372:	d008      	beq.n	800e386 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800e374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e378:	d81e      	bhi.n	800e3b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00a      	beq.n	800e394 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800e37e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e382:	d010      	beq.n	800e3a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e384:	e018      	b.n	800e3b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e386:	4b68      	ldr	r3, [pc, #416]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	4a67      	ldr	r2, [pc, #412]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e38c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e390:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e392:	e015      	b.n	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3304      	adds	r3, #4
 800e398:	2100      	movs	r1, #0
 800e39a:	4618      	mov	r0, r3
 800e39c:	f000 fb08 	bl	800e9b0 <RCCEx_PLLSAI1_Config>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e3a4:	e00c      	b.n	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3320      	adds	r3, #32
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f000 fbe5 	bl	800eb7c <RCCEx_PLLSAI2_Config>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e3b6:	e003      	b.n	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	77fb      	strb	r3, [r7, #31]
        break;
 800e3bc:	e000      	b.n	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800e3be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3c0:	7ffb      	ldrb	r3, [r7, #31]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d10b      	bne.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e3c6:	4b58      	ldr	r3, [pc, #352]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e3c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e3cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3d4:	4954      	ldr	r1, [pc, #336]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e3dc:	e001      	b.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3de:	7ffb      	ldrb	r3, [r7, #31]
 800e3e0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f000 80ab 	beq.w	800e546 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e3f4:	4b4c      	ldr	r3, [pc, #304]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10d      	bne.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e400:	4b49      	ldr	r3, [pc, #292]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e404:	4a48      	ldr	r2, [pc, #288]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e40a:	6593      	str	r3, [r2, #88]	; 0x58
 800e40c:	4b46      	ldr	r3, [pc, #280]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e414:	60fb      	str	r3, [r7, #12]
 800e416:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800e418:	2301      	movs	r3, #1
 800e41a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e41c:	4b43      	ldr	r3, [pc, #268]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a42      	ldr	r2, [pc, #264]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e428:	f7fb fd3e 	bl	8009ea8 <HAL_GetTick>
 800e42c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e42e:	e00f      	b.n	800e450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e430:	f7fb fd3a 	bl	8009ea8 <HAL_GetTick>
 800e434:	4602      	mov	r2, r0
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d908      	bls.n	800e450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e43e:	4b3b      	ldr	r3, [pc, #236]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e446:	2b00      	cmp	r3, #0
 800e448:	d109      	bne.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800e44a:	2303      	movs	r3, #3
 800e44c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800e44e:	e006      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e450:	4b36      	ldr	r3, [pc, #216]	; (800e52c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d0e9      	beq.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800e45c:	e000      	b.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800e45e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800e460:	7ffb      	ldrb	r3, [r7, #31]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d164      	bne.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e466:	4b30      	ldr	r3, [pc, #192]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e46c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e470:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d01f      	beq.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e47e:	69ba      	ldr	r2, [r7, #24]
 800e480:	429a      	cmp	r2, r3
 800e482:	d019      	beq.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e484:	4b28      	ldr	r3, [pc, #160]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e48a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e48e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e490:	4b25      	ldr	r3, [pc, #148]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e496:	4a24      	ldr	r2, [pc, #144]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e49c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e4a0:	4b21      	ldr	r3, [pc, #132]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e4a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4a6:	4a20      	ldr	r2, [pc, #128]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e4a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e4ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e4b0:	4a1d      	ldr	r2, [pc, #116]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	f003 0301 	and.w	r3, r3, #1
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d01f      	beq.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4c2:	f7fb fcf1 	bl	8009ea8 <HAL_GetTick>
 800e4c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e4c8:	e012      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e4ca:	f7fb fced 	bl	8009ea8 <HAL_GetTick>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	1ad3      	subs	r3, r2, r3
 800e4d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d909      	bls.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e4dc:	4b12      	ldr	r3, [pc, #72]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4e2:	f003 0302 	and.w	r3, r3, #2
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10a      	bne.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800e4ee:	e007      	b.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e4f0:	4b0d      	ldr	r3, [pc, #52]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4f6:	f003 0302 	and.w	r3, r3, #2
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d0e5      	beq.n	800e4ca <HAL_RCCEx_PeriphCLKConfig+0x222>
 800e4fe:	e000      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800e500:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800e502:	7ffb      	ldrb	r3, [r7, #31]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10c      	bne.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e508:	4b07      	ldr	r3, [pc, #28]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e50e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e518:	4903      	ldr	r1, [pc, #12]	; (800e528 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e51a:	4313      	orrs	r3, r2
 800e51c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e520:	e008      	b.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e522:	7ffb      	ldrb	r3, [r7, #31]
 800e524:	77bb      	strb	r3, [r7, #30]
 800e526:	e005      	b.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800e528:	40021000 	.word	0x40021000
 800e52c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e530:	7ffb      	ldrb	r3, [r7, #31]
 800e532:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e534:	7dfb      	ldrb	r3, [r7, #23]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d105      	bne.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e53a:	4b9c      	ldr	r3, [pc, #624]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53e:	4a9b      	ldr	r2, [pc, #620]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e544:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00a      	beq.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e552:	4b96      	ldr	r3, [pc, #600]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e558:	f023 0203 	bic.w	r2, r3, #3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e560:	4992      	ldr	r1, [pc, #584]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e562:	4313      	orrs	r3, r2
 800e564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f003 0302 	and.w	r3, r3, #2
 800e570:	2b00      	cmp	r3, #0
 800e572:	d00a      	beq.n	800e58a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e574:	4b8d      	ldr	r3, [pc, #564]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e57a:	f023 020c 	bic.w	r2, r3, #12
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e582:	498a      	ldr	r1, [pc, #552]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e584:	4313      	orrs	r3, r2
 800e586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 0304 	and.w	r3, r3, #4
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00a      	beq.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e596:	4b85      	ldr	r3, [pc, #532]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e59c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a4:	4981      	ldr	r1, [pc, #516]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f003 0308 	and.w	r3, r3, #8
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00a      	beq.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e5b8:	4b7c      	ldr	r3, [pc, #496]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c6:	4979      	ldr	r1, [pc, #484]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f003 0310 	and.w	r3, r3, #16
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00a      	beq.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e5da:	4b74      	ldr	r3, [pc, #464]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e8:	4970      	ldr	r1, [pc, #448]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f003 0320 	and.w	r3, r3, #32
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00a      	beq.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e5fc:	4b6b      	ldr	r3, [pc, #428]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e602:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e60a:	4968      	ldr	r1, [pc, #416]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e60c:	4313      	orrs	r3, r2
 800e60e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00a      	beq.n	800e634 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e61e:	4b63      	ldr	r3, [pc, #396]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e62c:	495f      	ldr	r1, [pc, #380]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e62e:	4313      	orrs	r3, r2
 800e630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00a      	beq.n	800e656 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e640:	4b5a      	ldr	r3, [pc, #360]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e64e:	4957      	ldr	r1, [pc, #348]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e650:	4313      	orrs	r3, r2
 800e652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00a      	beq.n	800e678 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800e662:	4b52      	ldr	r3, [pc, #328]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e668:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e670:	494e      	ldr	r1, [pc, #312]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e672:	4313      	orrs	r3, r2
 800e674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e680:	2b00      	cmp	r3, #0
 800e682:	d031      	beq.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e68c:	d00e      	beq.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x404>
 800e68e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e692:	d814      	bhi.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e694:	2b00      	cmp	r3, #0
 800e696:	d015      	beq.n	800e6c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800e698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e69c:	d10f      	bne.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e69e:	4b43      	ldr	r3, [pc, #268]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	4a42      	ldr	r2, [pc, #264]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e6a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6a8:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800e6aa:	e00c      	b.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	3304      	adds	r3, #4
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f000 f97c 	bl	800e9b0 <RCCEx_PLLSAI1_Config>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800e6bc:	e003      	b.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	77fb      	strb	r3, [r7, #31]
        break;
 800e6c2:	e000      	b.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800e6c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6c6:	7ffb      	ldrb	r3, [r7, #31]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10b      	bne.n	800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e6cc:	4b37      	ldr	r3, [pc, #220]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6da:	4934      	ldr	r1, [pc, #208]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e6e2:	e001      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6e4:	7ffb      	ldrb	r3, [r7, #31]
 800e6e6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00a      	beq.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e6f4:	4b2d      	ldr	r3, [pc, #180]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e702:	492a      	ldr	r1, [pc, #168]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e704:	4313      	orrs	r3, r2
 800e706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00a      	beq.n	800e72c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e716:	4b25      	ldr	r3, [pc, #148]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e71c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e724:	4921      	ldr	r1, [pc, #132]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e726:	4313      	orrs	r3, r2
 800e728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00a      	beq.n	800e74e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e738:	4b1c      	ldr	r3, [pc, #112]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e73e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e746:	4919      	ldr	r1, [pc, #100]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e748:	4313      	orrs	r3, r2
 800e74a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00a      	beq.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e75a:	4b14      	ldr	r3, [pc, #80]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e75c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e760:	f023 0203 	bic.w	r2, r3, #3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e768:	4910      	ldr	r1, [pc, #64]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e76a:	4313      	orrs	r3, r2
 800e76c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d02b      	beq.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e77c:	4b0b      	ldr	r3, [pc, #44]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e78a:	4908      	ldr	r1, [pc, #32]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e78c:	4313      	orrs	r3, r2
 800e78e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e79a:	d109      	bne.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e79c:	4b03      	ldr	r3, [pc, #12]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	4a02      	ldr	r2, [pc, #8]	; (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e7a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7a6:	60d3      	str	r3, [r2, #12]
 800e7a8:	e014      	b.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800e7aa:	bf00      	nop
 800e7ac:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e7b8:	d10c      	bne.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3304      	adds	r3, #4
 800e7be:	2101      	movs	r1, #1
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f000 f8f5 	bl	800e9b0 <RCCEx_PLLSAI1_Config>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800e7ca:	7ffb      	ldrb	r3, [r7, #31]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d001      	beq.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800e7d0:	7ffb      	ldrb	r3, [r7, #31]
 800e7d2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d04a      	beq.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e7e8:	d108      	bne.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x554>
 800e7ea:	4b70      	ldr	r3, [pc, #448]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e7ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e7f0:	4a6e      	ldr	r2, [pc, #440]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e7f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e7f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800e7fa:	e012      	b.n	800e822 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800e7fc:	4b6b      	ldr	r3, [pc, #428]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e7fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e802:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e80a:	4968      	ldr	r1, [pc, #416]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e80c:	4313      	orrs	r3, r2
 800e80e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e812:	4b66      	ldr	r3, [pc, #408]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e818:	4a64      	ldr	r2, [pc, #400]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e81a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e81e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e82a:	d10d      	bne.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	3304      	adds	r3, #4
 800e830:	2101      	movs	r1, #1
 800e832:	4618      	mov	r0, r3
 800e834:	f000 f8bc 	bl	800e9b0 <RCCEx_PLLSAI1_Config>
 800e838:	4603      	mov	r3, r0
 800e83a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e83c:	7ffb      	ldrb	r3, [r7, #31]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d019      	beq.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800e842:	7ffb      	ldrb	r3, [r7, #31]
 800e844:	77bb      	strb	r3, [r7, #30]
 800e846:	e016      	b.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e84c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e850:	d106      	bne.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e852:	4b56      	ldr	r3, [pc, #344]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	4a55      	ldr	r2, [pc, #340]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e85c:	60d3      	str	r3, [r2, #12]
 800e85e:	e00a      	b.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e868:	d105      	bne.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e86a:	4b50      	ldr	r3, [pc, #320]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	4a4f      	ldr	r2, [pc, #316]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e874:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d028      	beq.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e882:	4b4a      	ldr	r3, [pc, #296]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e888:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e890:	4946      	ldr	r1, [pc, #280]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e892:	4313      	orrs	r3, r2
 800e894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e89c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e8a0:	d106      	bne.n	800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e8a2:	4b42      	ldr	r3, [pc, #264]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	4a41      	ldr	r2, [pc, #260]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e8a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8ac:	60d3      	str	r3, [r2, #12]
 800e8ae:	e011      	b.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e8b8:	d10c      	bne.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	3304      	adds	r3, #4
 800e8be:	2101      	movs	r1, #1
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f000 f875 	bl	800e9b0 <RCCEx_PLLSAI1_Config>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e8ca:	7ffb      	ldrb	r3, [r7, #31]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d001      	beq.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800e8d0:	7ffb      	ldrb	r3, [r7, #31]
 800e8d2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d01e      	beq.n	800e91e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e8e0:	4b32      	ldr	r3, [pc, #200]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8f0:	492e      	ldr	r1, [pc, #184]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e902:	d10c      	bne.n	800e91e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	3304      	adds	r3, #4
 800e908:	2102      	movs	r1, #2
 800e90a:	4618      	mov	r0, r3
 800e90c:	f000 f850 	bl	800e9b0 <RCCEx_PLLSAI1_Config>
 800e910:	4603      	mov	r3, r0
 800e912:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e914:	7ffb      	ldrb	r3, [r7, #31]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d001      	beq.n	800e91e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800e91a:	7ffb      	ldrb	r3, [r7, #31]
 800e91c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00b      	beq.n	800e942 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e92a:	4b20      	ldr	r3, [pc, #128]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e92c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e930:	f023 0204 	bic.w	r2, r3, #4
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e93a:	491c      	ldr	r1, [pc, #112]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e93c:	4313      	orrs	r3, r2
 800e93e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00b      	beq.n	800e966 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e94e:	4b17      	ldr	r3, [pc, #92]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e954:	f023 0218 	bic.w	r2, r3, #24
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e95e:	4913      	ldr	r1, [pc, #76]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e960:	4313      	orrs	r3, r2
 800e962:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d017      	beq.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e972:	4b0e      	ldr	r3, [pc, #56]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e974:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e982:	490a      	ldr	r1, [pc, #40]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e984:	4313      	orrs	r3, r2
 800e986:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e994:	d105      	bne.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e996:	4b05      	ldr	r3, [pc, #20]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	4a04      	ldr	r2, [pc, #16]	; (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e99c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e9a0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800e9a2:	7fbb      	ldrb	r3, [r7, #30]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3720      	adds	r7, #32
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	40021000 	.word	0x40021000

0800e9b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b03      	cmp	r3, #3
 800e9c4:	d018      	beq.n	800e9f8 <RCCEx_PLLSAI1_Config+0x48>
 800e9c6:	2b03      	cmp	r3, #3
 800e9c8:	d81f      	bhi.n	800ea0a <RCCEx_PLLSAI1_Config+0x5a>
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d002      	beq.n	800e9d4 <RCCEx_PLLSAI1_Config+0x24>
 800e9ce:	2b02      	cmp	r3, #2
 800e9d0:	d009      	beq.n	800e9e6 <RCCEx_PLLSAI1_Config+0x36>
 800e9d2:	e01a      	b.n	800ea0a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e9d4:	4b65      	ldr	r3, [pc, #404]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f003 0302 	and.w	r3, r3, #2
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d117      	bne.n	800ea10 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e9e4:	e014      	b.n	800ea10 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e9e6:	4b61      	ldr	r3, [pc, #388]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d110      	bne.n	800ea14 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e9f6:	e00d      	b.n	800ea14 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800e9f8:	4b5c      	ldr	r3, [pc, #368]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d109      	bne.n	800ea18 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800ea04:	2301      	movs	r3, #1
 800ea06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ea08:	e006      	b.n	800ea18 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ea0e:	e004      	b.n	800ea1a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800ea10:	bf00      	nop
 800ea12:	e002      	b.n	800ea1a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800ea14:	bf00      	nop
 800ea16:	e000      	b.n	800ea1a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800ea18:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f040 809f 	bne.w	800eb60 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ea22:	4b52      	ldr	r3, [pc, #328]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a51      	ldr	r2, [pc, #324]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800ea28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ea2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea2e:	f7fb fa3b 	bl	8009ea8 <HAL_GetTick>
 800ea32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ea34:	e00f      	b.n	800ea56 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ea36:	f7fb fa37 	bl	8009ea8 <HAL_GetTick>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	2b02      	cmp	r3, #2
 800ea42:	d908      	bls.n	800ea56 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ea44:	4b49      	ldr	r3, [pc, #292]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d009      	beq.n	800ea64 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800ea50:	2303      	movs	r3, #3
 800ea52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ea54:	e006      	b.n	800ea64 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ea56:	4b45      	ldr	r3, [pc, #276]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1e9      	bne.n	800ea36 <RCCEx_PLLSAI1_Config+0x86>
 800ea62:	e000      	b.n	800ea66 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800ea64:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800ea66:	7bfb      	ldrb	r3, [r7, #15]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d179      	bne.n	800eb60 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d116      	bne.n	800eaa0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ea72:	4b3e      	ldr	r3, [pc, #248]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800ea74:	691a      	ldr	r2, [r3, #16]
 800ea76:	4b3e      	ldr	r3, [pc, #248]	; (800eb70 <RCCEx_PLLSAI1_Config+0x1c0>)
 800ea78:	4013      	ands	r3, r2
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	6892      	ldr	r2, [r2, #8]
 800ea7e:	0211      	lsls	r1, r2, #8
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	68d2      	ldr	r2, [r2, #12]
 800ea84:	06d2      	lsls	r2, r2, #27
 800ea86:	4311      	orrs	r1, r2
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	6852      	ldr	r2, [r2, #4]
 800ea8c:	3a01      	subs	r2, #1
 800ea8e:	0112      	lsls	r2, r2, #4
 800ea90:	4311      	orrs	r1, r2
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	6812      	ldr	r2, [r2, #0]
 800ea96:	430a      	orrs	r2, r1
 800ea98:	4934      	ldr	r1, [pc, #208]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	610b      	str	r3, [r1, #16]
 800ea9e:	e033      	b.n	800eb08 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d118      	bne.n	800ead8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800eaa6:	4b31      	ldr	r3, [pc, #196]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800eaa8:	691a      	ldr	r2, [r3, #16]
 800eaaa:	4b32      	ldr	r3, [pc, #200]	; (800eb74 <RCCEx_PLLSAI1_Config+0x1c4>)
 800eaac:	4013      	ands	r3, r2
 800eaae:	687a      	ldr	r2, [r7, #4]
 800eab0:	6892      	ldr	r2, [r2, #8]
 800eab2:	0211      	lsls	r1, r2, #8
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	6912      	ldr	r2, [r2, #16]
 800eab8:	0852      	lsrs	r2, r2, #1
 800eaba:	3a01      	subs	r2, #1
 800eabc:	0552      	lsls	r2, r2, #21
 800eabe:	4311      	orrs	r1, r2
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	6852      	ldr	r2, [r2, #4]
 800eac4:	3a01      	subs	r2, #1
 800eac6:	0112      	lsls	r2, r2, #4
 800eac8:	4311      	orrs	r1, r2
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	6812      	ldr	r2, [r2, #0]
 800eace:	430a      	orrs	r2, r1
 800ead0:	4926      	ldr	r1, [pc, #152]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800ead2:	4313      	orrs	r3, r2
 800ead4:	610b      	str	r3, [r1, #16]
 800ead6:	e017      	b.n	800eb08 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ead8:	4b24      	ldr	r3, [pc, #144]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800eada:	691a      	ldr	r2, [r3, #16]
 800eadc:	4b26      	ldr	r3, [pc, #152]	; (800eb78 <RCCEx_PLLSAI1_Config+0x1c8>)
 800eade:	4013      	ands	r3, r2
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	6892      	ldr	r2, [r2, #8]
 800eae4:	0211      	lsls	r1, r2, #8
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	6952      	ldr	r2, [r2, #20]
 800eaea:	0852      	lsrs	r2, r2, #1
 800eaec:	3a01      	subs	r2, #1
 800eaee:	0652      	lsls	r2, r2, #25
 800eaf0:	4311      	orrs	r1, r2
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	6852      	ldr	r2, [r2, #4]
 800eaf6:	3a01      	subs	r2, #1
 800eaf8:	0112      	lsls	r2, r2, #4
 800eafa:	4311      	orrs	r1, r2
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	6812      	ldr	r2, [r2, #0]
 800eb00:	430a      	orrs	r2, r1
 800eb02:	491a      	ldr	r1, [pc, #104]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800eb04:	4313      	orrs	r3, r2
 800eb06:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800eb08:	4b18      	ldr	r3, [pc, #96]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a17      	ldr	r2, [pc, #92]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800eb0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eb12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb14:	f7fb f9c8 	bl	8009ea8 <HAL_GetTick>
 800eb18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800eb1a:	e00f      	b.n	800eb3c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800eb1c:	f7fb f9c4 	bl	8009ea8 <HAL_GetTick>
 800eb20:	4602      	mov	r2, r0
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	1ad3      	subs	r3, r2, r3
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d908      	bls.n	800eb3c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800eb2a:	4b10      	ldr	r3, [pc, #64]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d109      	bne.n	800eb4a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800eb36:	2303      	movs	r3, #3
 800eb38:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800eb3a:	e006      	b.n	800eb4a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800eb3c:	4b0b      	ldr	r3, [pc, #44]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d0e9      	beq.n	800eb1c <RCCEx_PLLSAI1_Config+0x16c>
 800eb48:	e000      	b.n	800eb4c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800eb4a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800eb4c:	7bfb      	ldrb	r3, [r7, #15]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d106      	bne.n	800eb60 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800eb52:	4b06      	ldr	r3, [pc, #24]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800eb54:	691a      	ldr	r2, [r3, #16]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	699b      	ldr	r3, [r3, #24]
 800eb5a:	4904      	ldr	r1, [pc, #16]	; (800eb6c <RCCEx_PLLSAI1_Config+0x1bc>)
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800eb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	40021000 	.word	0x40021000
 800eb70:	07ff800c 	.word	0x07ff800c
 800eb74:	ff9f800c 	.word	0xff9f800c
 800eb78:	f9ff800c 	.word	0xf9ff800c

0800eb7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb86:	2300      	movs	r3, #0
 800eb88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2b03      	cmp	r3, #3
 800eb90:	d018      	beq.n	800ebc4 <RCCEx_PLLSAI2_Config+0x48>
 800eb92:	2b03      	cmp	r3, #3
 800eb94:	d81f      	bhi.n	800ebd6 <RCCEx_PLLSAI2_Config+0x5a>
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d002      	beq.n	800eba0 <RCCEx_PLLSAI2_Config+0x24>
 800eb9a:	2b02      	cmp	r3, #2
 800eb9c:	d009      	beq.n	800ebb2 <RCCEx_PLLSAI2_Config+0x36>
 800eb9e:	e01a      	b.n	800ebd6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800eba0:	4b4a      	ldr	r3, [pc, #296]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f003 0302 	and.w	r3, r3, #2
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d117      	bne.n	800ebdc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800ebac:	2301      	movs	r3, #1
 800ebae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ebb0:	e014      	b.n	800ebdc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ebb2:	4b46      	ldr	r3, [pc, #280]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d110      	bne.n	800ebe0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ebc2:	e00d      	b.n	800ebe0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800ebc4:	4b41      	ldr	r3, [pc, #260]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d109      	bne.n	800ebe4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ebd4:	e006      	b.n	800ebe4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	73fb      	strb	r3, [r7, #15]
      break;
 800ebda:	e004      	b.n	800ebe6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800ebdc:	bf00      	nop
 800ebde:	e002      	b.n	800ebe6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800ebe0:	bf00      	nop
 800ebe2:	e000      	b.n	800ebe6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800ebe4:	bf00      	nop
  }

  if (status == HAL_OK)
 800ebe6:	7bfb      	ldrb	r3, [r7, #15]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d169      	bne.n	800ecc0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ebec:	4b37      	ldr	r3, [pc, #220]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a36      	ldr	r2, [pc, #216]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ebf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ebf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ebf8:	f7fb f956 	bl	8009ea8 <HAL_GetTick>
 800ebfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ebfe:	e00f      	b.n	800ec20 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ec00:	f7fb f952 	bl	8009ea8 <HAL_GetTick>
 800ec04:	4602      	mov	r2, r0
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	1ad3      	subs	r3, r2, r3
 800ec0a:	2b02      	cmp	r3, #2
 800ec0c:	d908      	bls.n	800ec20 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ec0e:	4b2f      	ldr	r3, [pc, #188]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d009      	beq.n	800ec2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ec1e:	e006      	b.n	800ec2e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ec20:	4b2a      	ldr	r3, [pc, #168]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1e9      	bne.n	800ec00 <RCCEx_PLLSAI2_Config+0x84>
 800ec2c:	e000      	b.n	800ec30 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800ec2e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800ec30:	7bfb      	ldrb	r3, [r7, #15]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d144      	bne.n	800ecc0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d115      	bne.n	800ec68 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ec3c:	4b23      	ldr	r3, [pc, #140]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ec3e:	695a      	ldr	r2, [r3, #20]
 800ec40:	4b23      	ldr	r3, [pc, #140]	; (800ecd0 <RCCEx_PLLSAI2_Config+0x154>)
 800ec42:	4013      	ands	r3, r2
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	6892      	ldr	r2, [r2, #8]
 800ec48:	0211      	lsls	r1, r2, #8
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	68d2      	ldr	r2, [r2, #12]
 800ec4e:	06d2      	lsls	r2, r2, #27
 800ec50:	4311      	orrs	r1, r2
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	6852      	ldr	r2, [r2, #4]
 800ec56:	3a01      	subs	r2, #1
 800ec58:	0112      	lsls	r2, r2, #4
 800ec5a:	4311      	orrs	r1, r2
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	6812      	ldr	r2, [r2, #0]
 800ec60:	430a      	orrs	r2, r1
 800ec62:	491a      	ldr	r1, [pc, #104]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ec64:	4313      	orrs	r3, r2
 800ec66:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ec68:	4b18      	ldr	r3, [pc, #96]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a17      	ldr	r2, [pc, #92]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ec6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec74:	f7fb f918 	bl	8009ea8 <HAL_GetTick>
 800ec78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ec7a:	e00f      	b.n	800ec9c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ec7c:	f7fb f914 	bl	8009ea8 <HAL_GetTick>
 800ec80:	4602      	mov	r2, r0
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	2b02      	cmp	r3, #2
 800ec88:	d908      	bls.n	800ec9c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ec8a:	4b10      	ldr	r3, [pc, #64]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d109      	bne.n	800ecaa <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800ec9a:	e006      	b.n	800ecaa <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ec9c:	4b0b      	ldr	r3, [pc, #44]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d0e9      	beq.n	800ec7c <RCCEx_PLLSAI2_Config+0x100>
 800eca8:	e000      	b.n	800ecac <RCCEx_PLLSAI2_Config+0x130>
          break;
 800ecaa:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d106      	bne.n	800ecc0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800ecb2:	4b06      	ldr	r3, [pc, #24]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ecb4:	695a      	ldr	r2, [r3, #20]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	691b      	ldr	r3, [r3, #16]
 800ecba:	4904      	ldr	r1, [pc, #16]	; (800eccc <RCCEx_PLLSAI2_Config+0x150>)
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ecc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3710      	adds	r7, #16
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	40021000 	.word	0x40021000
 800ecd0:	07ff800c 	.word	0x07ff800c

0800ecd4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d066      	beq.n	800edb4 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d106      	bne.n	800ed00 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f7fa fbda 	bl	80094b4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2202      	movs	r2, #2
 800ed04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	f003 0310 	and.w	r3, r3, #16
 800ed12:	2b10      	cmp	r3, #16
 800ed14:	d045      	beq.n	800eda2 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ed16:	4b2a      	ldr	r3, [pc, #168]	; (800edc0 <HAL_RTC_Init+0xec>)
 800ed18:	22ca      	movs	r2, #202	; 0xca
 800ed1a:	625a      	str	r2, [r3, #36]	; 0x24
 800ed1c:	4b28      	ldr	r3, [pc, #160]	; (800edc0 <HAL_RTC_Init+0xec>)
 800ed1e:	2253      	movs	r2, #83	; 0x53
 800ed20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 f872 	bl	800ee0c <RTC_EnterInitMode>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ed2c:	7bfb      	ldrb	r3, [r7, #15]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d121      	bne.n	800ed76 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800ed32:	4b23      	ldr	r3, [pc, #140]	; (800edc0 <HAL_RTC_Init+0xec>)
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	4a22      	ldr	r2, [pc, #136]	; (800edc0 <HAL_RTC_Init+0xec>)
 800ed38:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800ed3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed40:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800ed42:	4b1f      	ldr	r3, [pc, #124]	; (800edc0 <HAL_RTC_Init+0xec>)
 800ed44:	699a      	ldr	r2, [r3, #24]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6859      	ldr	r1, [r3, #4]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	691b      	ldr	r3, [r3, #16]
 800ed4e:	4319      	orrs	r1, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	699b      	ldr	r3, [r3, #24]
 800ed54:	430b      	orrs	r3, r1
 800ed56:	491a      	ldr	r1, [pc, #104]	; (800edc0 <HAL_RTC_Init+0xec>)
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	68da      	ldr	r2, [r3, #12]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	689b      	ldr	r3, [r3, #8]
 800ed64:	041b      	lsls	r3, r3, #16
 800ed66:	4916      	ldr	r1, [pc, #88]	; (800edc0 <HAL_RTC_Init+0xec>)
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 f881 	bl	800ee74 <RTC_ExitInitMode>
 800ed72:	4603      	mov	r3, r0
 800ed74:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800ed76:	7bfb      	ldrb	r3, [r7, #15]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10e      	bne.n	800ed9a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800ed7c:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <HAL_RTC_Init+0xec>)
 800ed7e:	699b      	ldr	r3, [r3, #24]
 800ed80:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a19      	ldr	r1, [r3, #32]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	69db      	ldr	r3, [r3, #28]
 800ed8c:	4319      	orrs	r1, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	695b      	ldr	r3, [r3, #20]
 800ed92:	430b      	orrs	r3, r1
 800ed94:	490a      	ldr	r1, [pc, #40]	; (800edc0 <HAL_RTC_Init+0xec>)
 800ed96:	4313      	orrs	r3, r2
 800ed98:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ed9a:	4b09      	ldr	r3, [pc, #36]	; (800edc0 <HAL_RTC_Init+0xec>)
 800ed9c:	22ff      	movs	r2, #255	; 0xff
 800ed9e:	625a      	str	r2, [r3, #36]	; 0x24
 800eda0:	e001      	b.n	800eda6 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800eda6:	7bfb      	ldrb	r3, [r7, #15]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d103      	bne.n	800edb4 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3710      	adds	r7, #16
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	40002800 	.word	0x40002800

0800edc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800edcc:	4b0d      	ldr	r3, [pc, #52]	; (800ee04 <HAL_RTC_WaitForSynchro+0x40>)
 800edce:	4a0e      	ldr	r2, [pc, #56]	; (800ee08 <HAL_RTC_WaitForSynchro+0x44>)
 800edd0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800edd2:	f7fb f869 	bl	8009ea8 <HAL_GetTick>
 800edd6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800edd8:	e009      	b.n	800edee <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800edda:	f7fb f865 	bl	8009ea8 <HAL_GetTick>
 800edde:	4602      	mov	r2, r0
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	1ad3      	subs	r3, r2, r3
 800ede4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ede8:	d901      	bls.n	800edee <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800edea:	2303      	movs	r3, #3
 800edec:	e006      	b.n	800edfc <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800edee:	4b05      	ldr	r3, [pc, #20]	; (800ee04 <HAL_RTC_WaitForSynchro+0x40>)
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	f003 0320 	and.w	r3, r3, #32
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d0ef      	beq.n	800edda <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800edfa:	2300      	movs	r3, #0
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3710      	adds	r7, #16
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	40002800 	.word	0x40002800
 800ee08:	0001005c 	.word	0x0001005c

0800ee0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ee18:	4b15      	ldr	r3, [pc, #84]	; (800ee70 <RTC_EnterInitMode+0x64>)
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d120      	bne.n	800ee66 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ee24:	4b12      	ldr	r3, [pc, #72]	; (800ee70 <RTC_EnterInitMode+0x64>)
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	4a11      	ldr	r2, [pc, #68]	; (800ee70 <RTC_EnterInitMode+0x64>)
 800ee2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee2e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800ee30:	f7fb f83a 	bl	8009ea8 <HAL_GetTick>
 800ee34:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ee36:	e00d      	b.n	800ee54 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ee38:	f7fb f836 	bl	8009ea8 <HAL_GetTick>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	1ad3      	subs	r3, r2, r3
 800ee42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ee46:	d905      	bls.n	800ee54 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ee48:	2303      	movs	r3, #3
 800ee4a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2203      	movs	r2, #3
 800ee50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ee54:	4b06      	ldr	r3, [pc, #24]	; (800ee70 <RTC_EnterInitMode+0x64>)
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d102      	bne.n	800ee66 <RTC_EnterInitMode+0x5a>
 800ee60:	7bfb      	ldrb	r3, [r7, #15]
 800ee62:	2b03      	cmp	r3, #3
 800ee64:	d1e8      	bne.n	800ee38 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800ee66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3710      	adds	r7, #16
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	40002800 	.word	0x40002800

0800ee74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ee80:	4b1a      	ldr	r3, [pc, #104]	; (800eeec <RTC_ExitInitMode+0x78>)
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	4a19      	ldr	r2, [pc, #100]	; (800eeec <RTC_ExitInitMode+0x78>)
 800ee86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee8a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ee8c:	4b17      	ldr	r3, [pc, #92]	; (800eeec <RTC_ExitInitMode+0x78>)
 800ee8e:	699b      	ldr	r3, [r3, #24]
 800ee90:	f003 0320 	and.w	r3, r3, #32
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d10c      	bne.n	800eeb2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7ff ff93 	bl	800edc4 <HAL_RTC_WaitForSynchro>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d01e      	beq.n	800eee2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2203      	movs	r2, #3
 800eea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800eeac:	2303      	movs	r3, #3
 800eeae:	73fb      	strb	r3, [r7, #15]
 800eeb0:	e017      	b.n	800eee2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800eeb2:	4b0e      	ldr	r3, [pc, #56]	; (800eeec <RTC_ExitInitMode+0x78>)
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	4a0d      	ldr	r2, [pc, #52]	; (800eeec <RTC_ExitInitMode+0x78>)
 800eeb8:	f023 0320 	bic.w	r3, r3, #32
 800eebc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7ff ff80 	bl	800edc4 <HAL_RTC_WaitForSynchro>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d005      	beq.n	800eed6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2203      	movs	r2, #3
 800eece:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800eed2:	2303      	movs	r3, #3
 800eed4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800eed6:	4b05      	ldr	r3, [pc, #20]	; (800eeec <RTC_ExitInitMode+0x78>)
 800eed8:	699b      	ldr	r3, [r3, #24]
 800eeda:	4a04      	ldr	r2, [pc, #16]	; (800eeec <RTC_ExitInitMode+0x78>)
 800eedc:	f043 0320 	orr.w	r3, r3, #32
 800eee0:	6193      	str	r3, [r2, #24]
  }

  return status;
 800eee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3710      	adds	r7, #16
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}
 800eeec:	40002800 	.word	0x40002800

0800eef0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	490f      	ldr	r1, [pc, #60]	; (800ef40 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800ef04:	4313      	orrs	r3, r2
 800ef06:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	689a      	ldr	r2, [r3, #8]
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	490c      	ldr	r1, [pc, #48]	; (800ef44 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ef12:	4313      	orrs	r3, r2
 800ef14:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800ef16:	4b0b      	ldr	r3, [pc, #44]	; (800ef44 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ef18:	6a1b      	ldr	r3, [r3, #32]
 800ef1a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	6919      	ldr	r1, [r3, #16]
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	695b      	ldr	r3, [r3, #20]
 800ef26:	041b      	lsls	r3, r3, #16
 800ef28:	430b      	orrs	r3, r1
 800ef2a:	4906      	ldr	r1, [pc, #24]	; (800ef44 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ef2c:	4313      	orrs	r3, r2
 800ef2e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	40002800 	.word	0x40002800
 800ef44:	40003400 	.word	0x40003400

0800ef48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d101      	bne.n	800ef5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ef56:	2301      	movs	r3, #1
 800ef58:	e095      	b.n	800f086 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d108      	bne.n	800ef74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef6a:	d009      	beq.n	800ef80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	61da      	str	r2, [r3, #28]
 800ef72:	e005      	b.n	800ef80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ef8c:	b2db      	uxtb	r3, r3
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d106      	bne.n	800efa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2200      	movs	r2, #0
 800ef96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f7fa fac8 	bl	8009530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2202      	movs	r2, #2
 800efa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800efc0:	d902      	bls.n	800efc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800efc2:	2300      	movs	r3, #0
 800efc4:	60fb      	str	r3, [r7, #12]
 800efc6:	e002      	b.n	800efce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800efc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	68db      	ldr	r3, [r3, #12]
 800efd2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800efd6:	d007      	beq.n	800efe8 <HAL_SPI_Init+0xa0>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800efe0:	d002      	beq.n	800efe8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800eff8:	431a      	orrs	r2, r3
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	691b      	ldr	r3, [r3, #16]
 800effe:	f003 0302 	and.w	r3, r3, #2
 800f002:	431a      	orrs	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	695b      	ldr	r3, [r3, #20]
 800f008:	f003 0301 	and.w	r3, r3, #1
 800f00c:	431a      	orrs	r2, r3
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	699b      	ldr	r3, [r3, #24]
 800f012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f016:	431a      	orrs	r2, r3
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	69db      	ldr	r3, [r3, #28]
 800f01c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f020:	431a      	orrs	r2, r3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6a1b      	ldr	r3, [r3, #32]
 800f026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f02a:	ea42 0103 	orr.w	r1, r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f032:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	430a      	orrs	r2, r1
 800f03c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	699b      	ldr	r3, [r3, #24]
 800f042:	0c1b      	lsrs	r3, r3, #16
 800f044:	f003 0204 	and.w	r2, r3, #4
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04c:	f003 0310 	and.w	r3, r3, #16
 800f050:	431a      	orrs	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f056:	f003 0308 	and.w	r3, r3, #8
 800f05a:	431a      	orrs	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	68db      	ldr	r3, [r3, #12]
 800f060:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f064:	ea42 0103 	orr.w	r1, r2, r3
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	430a      	orrs	r2, r1
 800f074:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2200      	movs	r2, #0
 800f07a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b088      	sub	sp, #32
 800f092:	af00      	add	r7, sp, #0
 800f094:	60f8      	str	r0, [r7, #12]
 800f096:	60b9      	str	r1, [r7, #8]
 800f098:	603b      	str	r3, [r7, #0]
 800f09a:	4613      	mov	r3, r2
 800f09c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d101      	bne.n	800f0b0 <HAL_SPI_Transmit+0x22>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	e158      	b.n	800f362 <HAL_SPI_Transmit+0x2d4>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0b8:	f7fa fef6 	bl	8009ea8 <HAL_GetTick>
 800f0bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f0be:	88fb      	ldrh	r3, [r7, #6]
 800f0c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	d002      	beq.n	800f0d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f0ce:	2302      	movs	r3, #2
 800f0d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f0d2:	e13d      	b.n	800f350 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d002      	beq.n	800f0e0 <HAL_SPI_Transmit+0x52>
 800f0da:	88fb      	ldrh	r3, [r7, #6]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d102      	bne.n	800f0e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f0e4:	e134      	b.n	800f350 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2203      	movs	r2, #3
 800f0ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	88fa      	ldrh	r2, [r7, #6]
 800f0fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	88fa      	ldrh	r2, [r7, #6]
 800f104:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2200      	movs	r2, #0
 800f10a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2200      	movs	r2, #0
 800f110:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2200      	movs	r2, #0
 800f120:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2200      	movs	r2, #0
 800f126:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f130:	d10f      	bne.n	800f152 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f140:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f150:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f15c:	2b40      	cmp	r3, #64	; 0x40
 800f15e:	d007      	beq.n	800f170 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f16e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f178:	d94b      	bls.n	800f212 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d002      	beq.n	800f188 <HAL_SPI_Transmit+0xfa>
 800f182:	8afb      	ldrh	r3, [r7, #22]
 800f184:	2b01      	cmp	r3, #1
 800f186:	d13e      	bne.n	800f206 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f18c:	881a      	ldrh	r2, [r3, #0]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f198:	1c9a      	adds	r2, r3, #2
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	3b01      	subs	r3, #1
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f1ac:	e02b      	b.n	800f206 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	f003 0302 	and.w	r3, r3, #2
 800f1b8:	2b02      	cmp	r3, #2
 800f1ba:	d112      	bne.n	800f1e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1c0:	881a      	ldrh	r2, [r3, #0]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1cc:	1c9a      	adds	r2, r3, #2
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	3b01      	subs	r3, #1
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f1e0:	e011      	b.n	800f206 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1e2:	f7fa fe61 	bl	8009ea8 <HAL_GetTick>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	1ad3      	subs	r3, r2, r3
 800f1ec:	683a      	ldr	r2, [r7, #0]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d803      	bhi.n	800f1fa <HAL_SPI_Transmit+0x16c>
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f8:	d102      	bne.n	800f200 <HAL_SPI_Transmit+0x172>
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d102      	bne.n	800f206 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800f200:	2303      	movs	r3, #3
 800f202:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f204:	e0a4      	b.n	800f350 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1ce      	bne.n	800f1ae <HAL_SPI_Transmit+0x120>
 800f210:	e07c      	b.n	800f30c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d002      	beq.n	800f220 <HAL_SPI_Transmit+0x192>
 800f21a:	8afb      	ldrh	r3, [r7, #22]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d170      	bne.n	800f302 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f224:	b29b      	uxth	r3, r3
 800f226:	2b01      	cmp	r3, #1
 800f228:	d912      	bls.n	800f250 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f22e:	881a      	ldrh	r2, [r3, #0]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f23a:	1c9a      	adds	r2, r3, #2
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f244:	b29b      	uxth	r3, r3
 800f246:	3b02      	subs	r3, #2
 800f248:	b29a      	uxth	r2, r3
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f24e:	e058      	b.n	800f302 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	330c      	adds	r3, #12
 800f25a:	7812      	ldrb	r2, [r2, #0]
 800f25c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f262:	1c5a      	adds	r2, r3, #1
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	3b01      	subs	r3, #1
 800f270:	b29a      	uxth	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800f276:	e044      	b.n	800f302 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	f003 0302 	and.w	r3, r3, #2
 800f282:	2b02      	cmp	r3, #2
 800f284:	d12b      	bne.n	800f2de <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d912      	bls.n	800f2b6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f294:	881a      	ldrh	r2, [r3, #0]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a0:	1c9a      	adds	r2, r3, #2
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	3b02      	subs	r3, #2
 800f2ae:	b29a      	uxth	r2, r3
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f2b4:	e025      	b.n	800f302 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	330c      	adds	r3, #12
 800f2c0:	7812      	ldrb	r2, [r2, #0]
 800f2c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	b29a      	uxth	r2, r3
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f2dc:	e011      	b.n	800f302 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2de:	f7fa fde3 	bl	8009ea8 <HAL_GetTick>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	1ad3      	subs	r3, r2, r3
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d803      	bhi.n	800f2f6 <HAL_SPI_Transmit+0x268>
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f4:	d102      	bne.n	800f2fc <HAL_SPI_Transmit+0x26e>
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d102      	bne.n	800f302 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800f2fc:	2303      	movs	r3, #3
 800f2fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f300:	e026      	b.n	800f350 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f306:	b29b      	uxth	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1b5      	bne.n	800f278 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f30c:	69ba      	ldr	r2, [r7, #24]
 800f30e:	6839      	ldr	r1, [r7, #0]
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f000 fce3 	bl	800fcdc <SPI_EndRxTxTransaction>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d002      	beq.n	800f322 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2220      	movs	r2, #32
 800f320:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	689b      	ldr	r3, [r3, #8]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d10a      	bne.n	800f340 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f32a:	2300      	movs	r3, #0
 800f32c:	613b      	str	r3, [r7, #16]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	68db      	ldr	r3, [r3, #12]
 800f334:	613b      	str	r3, [r7, #16]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	613b      	str	r3, [r7, #16]
 800f33e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f344:	2b00      	cmp	r3, #0
 800f346:	d002      	beq.n	800f34e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800f348:	2301      	movs	r3, #1
 800f34a:	77fb      	strb	r3, [r7, #31]
 800f34c:	e000      	b.n	800f350 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800f34e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2201      	movs	r2, #1
 800f354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f360:	7ffb      	ldrb	r3, [r7, #31]
}
 800f362:	4618      	mov	r0, r3
 800f364:	3720      	adds	r7, #32
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}

0800f36a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f36a:	b580      	push	{r7, lr}
 800f36c:	b088      	sub	sp, #32
 800f36e:	af02      	add	r7, sp, #8
 800f370:	60f8      	str	r0, [r7, #12]
 800f372:	60b9      	str	r1, [r7, #8]
 800f374:	603b      	str	r3, [r7, #0]
 800f376:	4613      	mov	r3, r2
 800f378:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f37a:	2300      	movs	r3, #0
 800f37c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f386:	d112      	bne.n	800f3ae <HAL_SPI_Receive+0x44>
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d10e      	bne.n	800f3ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	2204      	movs	r2, #4
 800f394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f398:	88fa      	ldrh	r2, [r7, #6]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	4613      	mov	r3, r2
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	68b9      	ldr	r1, [r7, #8]
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f000 f910 	bl	800f5ca <HAL_SPI_TransmitReceive>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	e109      	b.n	800f5c2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d101      	bne.n	800f3bc <HAL_SPI_Receive+0x52>
 800f3b8:	2302      	movs	r3, #2
 800f3ba:	e102      	b.n	800f5c2 <HAL_SPI_Receive+0x258>
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f3c4:	f7fa fd70 	bl	8009ea8 <HAL_GetTick>
 800f3c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d002      	beq.n	800f3dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800f3d6:	2302      	movs	r3, #2
 800f3d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f3da:	e0e9      	b.n	800f5b0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d002      	beq.n	800f3e8 <HAL_SPI_Receive+0x7e>
 800f3e2:	88fb      	ldrh	r3, [r7, #6]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d102      	bne.n	800f3ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f3ec:	e0e0      	b.n	800f5b0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2204      	movs	r2, #4
 800f3f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	68ba      	ldr	r2, [r7, #8]
 800f400:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	88fa      	ldrh	r2, [r7, #6]
 800f406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	88fa      	ldrh	r2, [r7, #6]
 800f40e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2200      	movs	r2, #0
 800f416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2200      	movs	r2, #0
 800f41c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2200      	movs	r2, #0
 800f428:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2200      	movs	r2, #0
 800f42e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f438:	d908      	bls.n	800f44c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	685a      	ldr	r2, [r3, #4]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f448:	605a      	str	r2, [r3, #4]
 800f44a:	e007      	b.n	800f45c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	685a      	ldr	r2, [r3, #4]
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f45a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f464:	d10f      	bne.n	800f486 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f484:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f490:	2b40      	cmp	r3, #64	; 0x40
 800f492:	d007      	beq.n	800f4a4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f4a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f4ac:	d867      	bhi.n	800f57e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f4ae:	e030      	b.n	800f512 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	f003 0301 	and.w	r3, r3, #1
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d117      	bne.n	800f4ee <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f103 020c 	add.w	r2, r3, #12
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ca:	7812      	ldrb	r2, [r2, #0]
 800f4cc:	b2d2      	uxtb	r2, r2
 800f4ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4d4:	1c5a      	adds	r2, r3, #1
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f4ec:	e011      	b.n	800f512 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4ee:	f7fa fcdb 	bl	8009ea8 <HAL_GetTick>
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	1ad3      	subs	r3, r2, r3
 800f4f8:	683a      	ldr	r2, [r7, #0]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d803      	bhi.n	800f506 <HAL_SPI_Receive+0x19c>
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f504:	d102      	bne.n	800f50c <HAL_SPI_Receive+0x1a2>
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d102      	bne.n	800f512 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800f50c:	2303      	movs	r3, #3
 800f50e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f510:	e04e      	b.n	800f5b0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f518:	b29b      	uxth	r3, r3
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1c8      	bne.n	800f4b0 <HAL_SPI_Receive+0x146>
 800f51e:	e034      	b.n	800f58a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	689b      	ldr	r3, [r3, #8]
 800f526:	f003 0301 	and.w	r3, r3, #1
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	d115      	bne.n	800f55a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	68da      	ldr	r2, [r3, #12]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f538:	b292      	uxth	r2, r2
 800f53a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f540:	1c9a      	adds	r2, r3, #2
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	3b01      	subs	r3, #1
 800f550:	b29a      	uxth	r2, r3
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f558:	e011      	b.n	800f57e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f55a:	f7fa fca5 	bl	8009ea8 <HAL_GetTick>
 800f55e:	4602      	mov	r2, r0
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	1ad3      	subs	r3, r2, r3
 800f564:	683a      	ldr	r2, [r7, #0]
 800f566:	429a      	cmp	r2, r3
 800f568:	d803      	bhi.n	800f572 <HAL_SPI_Receive+0x208>
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f570:	d102      	bne.n	800f578 <HAL_SPI_Receive+0x20e>
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d102      	bne.n	800f57e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800f578:	2303      	movs	r3, #3
 800f57a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f57c:	e018      	b.n	800f5b0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f584:	b29b      	uxth	r3, r3
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1ca      	bne.n	800f520 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f58a:	693a      	ldr	r2, [r7, #16]
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	f000 fb4c 	bl	800fc2c <SPI_EndRxTransaction>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d002      	beq.n	800f5a0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2220      	movs	r2, #32
 800f59e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d002      	beq.n	800f5ae <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	75fb      	strb	r3, [r7, #23]
 800f5ac:	e000      	b.n	800f5b0 <HAL_SPI_Receive+0x246>
  }

error :
 800f5ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3718      	adds	r7, #24
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b08a      	sub	sp, #40	; 0x28
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	60f8      	str	r0, [r7, #12]
 800f5d2:	60b9      	str	r1, [r7, #8]
 800f5d4:	607a      	str	r2, [r7, #4]
 800f5d6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f5d8:	2301      	movs	r3, #1
 800f5da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d101      	bne.n	800f5f0 <HAL_SPI_TransmitReceive+0x26>
 800f5ec:	2302      	movs	r3, #2
 800f5ee:	e1fb      	b.n	800f9e8 <HAL_SPI_TransmitReceive+0x41e>
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f5f8:	f7fa fc56 	bl	8009ea8 <HAL_GetTick>
 800f5fc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f604:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f60c:	887b      	ldrh	r3, [r7, #2]
 800f60e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800f610:	887b      	ldrh	r3, [r7, #2]
 800f612:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f614:	7efb      	ldrb	r3, [r7, #27]
 800f616:	2b01      	cmp	r3, #1
 800f618:	d00e      	beq.n	800f638 <HAL_SPI_TransmitReceive+0x6e>
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f620:	d106      	bne.n	800f630 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d102      	bne.n	800f630 <HAL_SPI_TransmitReceive+0x66>
 800f62a:	7efb      	ldrb	r3, [r7, #27]
 800f62c:	2b04      	cmp	r3, #4
 800f62e:	d003      	beq.n	800f638 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800f630:	2302      	movs	r3, #2
 800f632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f636:	e1cd      	b.n	800f9d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d005      	beq.n	800f64a <HAL_SPI_TransmitReceive+0x80>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d002      	beq.n	800f64a <HAL_SPI_TransmitReceive+0x80>
 800f644:	887b      	ldrh	r3, [r7, #2]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d103      	bne.n	800f652 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800f64a:	2301      	movs	r3, #1
 800f64c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f650:	e1c0      	b.n	800f9d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b04      	cmp	r3, #4
 800f65c:	d003      	beq.n	800f666 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2205      	movs	r2, #5
 800f662:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2200      	movs	r2, #0
 800f66a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	887a      	ldrh	r2, [r7, #2]
 800f676:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	887a      	ldrh	r2, [r7, #2]
 800f67e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	887a      	ldrh	r2, [r7, #2]
 800f68c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	887a      	ldrh	r2, [r7, #2]
 800f692:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	2200      	movs	r2, #0
 800f698:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2200      	movs	r2, #0
 800f69e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f6a8:	d802      	bhi.n	800f6b0 <HAL_SPI_TransmitReceive+0xe6>
 800f6aa:	8a3b      	ldrh	r3, [r7, #16]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d908      	bls.n	800f6c2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	685a      	ldr	r2, [r3, #4]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f6be:	605a      	str	r2, [r3, #4]
 800f6c0:	e007      	b.n	800f6d2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	685a      	ldr	r2, [r3, #4]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f6d0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6dc:	2b40      	cmp	r3, #64	; 0x40
 800f6de:	d007      	beq.n	800f6f0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f6ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f6f8:	d97c      	bls.n	800f7f4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d002      	beq.n	800f708 <HAL_SPI_TransmitReceive+0x13e>
 800f702:	8a7b      	ldrh	r3, [r7, #18]
 800f704:	2b01      	cmp	r3, #1
 800f706:	d169      	bne.n	800f7dc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f70c:	881a      	ldrh	r2, [r3, #0]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f718:	1c9a      	adds	r2, r3, #2
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f722:	b29b      	uxth	r3, r3
 800f724:	3b01      	subs	r3, #1
 800f726:	b29a      	uxth	r2, r3
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f72c:	e056      	b.n	800f7dc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	689b      	ldr	r3, [r3, #8]
 800f734:	f003 0302 	and.w	r3, r3, #2
 800f738:	2b02      	cmp	r3, #2
 800f73a:	d11b      	bne.n	800f774 <HAL_SPI_TransmitReceive+0x1aa>
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f740:	b29b      	uxth	r3, r3
 800f742:	2b00      	cmp	r3, #0
 800f744:	d016      	beq.n	800f774 <HAL_SPI_TransmitReceive+0x1aa>
 800f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d113      	bne.n	800f774 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f750:	881a      	ldrh	r2, [r3, #0]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f75c:	1c9a      	adds	r2, r3, #2
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f766:	b29b      	uxth	r3, r3
 800f768:	3b01      	subs	r3, #1
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f770:	2300      	movs	r3, #0
 800f772:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	f003 0301 	and.w	r3, r3, #1
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d11c      	bne.n	800f7bc <HAL_SPI_TransmitReceive+0x1f2>
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f788:	b29b      	uxth	r3, r3
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d016      	beq.n	800f7bc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	68da      	ldr	r2, [r3, #12]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f798:	b292      	uxth	r2, r2
 800f79a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a0:	1c9a      	adds	r2, r3, #2
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	3b01      	subs	r3, #1
 800f7b0:	b29a      	uxth	r2, r3
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f7bc:	f7fa fb74 	bl	8009ea8 <HAL_GetTick>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	1ad3      	subs	r3, r2, r3
 800f7c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d807      	bhi.n	800f7dc <HAL_SPI_TransmitReceive+0x212>
 800f7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d2:	d003      	beq.n	800f7dc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800f7d4:	2303      	movs	r3, #3
 800f7d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f7da:	e0fb      	b.n	800f9d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1a3      	bne.n	800f72e <HAL_SPI_TransmitReceive+0x164>
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d19d      	bne.n	800f72e <HAL_SPI_TransmitReceive+0x164>
 800f7f2:	e0df      	b.n	800f9b4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d003      	beq.n	800f804 <HAL_SPI_TransmitReceive+0x23a>
 800f7fc:	8a7b      	ldrh	r3, [r7, #18]
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	f040 80cb 	bne.w	800f99a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f808:	b29b      	uxth	r3, r3
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	d912      	bls.n	800f834 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f812:	881a      	ldrh	r2, [r3, #0]
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f81e:	1c9a      	adds	r2, r3, #2
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f828:	b29b      	uxth	r3, r3
 800f82a:	3b02      	subs	r3, #2
 800f82c:	b29a      	uxth	r2, r3
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f832:	e0b2      	b.n	800f99a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	330c      	adds	r3, #12
 800f83e:	7812      	ldrb	r2, [r2, #0]
 800f840:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f846:	1c5a      	adds	r2, r3, #1
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f850:	b29b      	uxth	r3, r3
 800f852:	3b01      	subs	r3, #1
 800f854:	b29a      	uxth	r2, r3
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f85a:	e09e      	b.n	800f99a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	689b      	ldr	r3, [r3, #8]
 800f862:	f003 0302 	and.w	r3, r3, #2
 800f866:	2b02      	cmp	r3, #2
 800f868:	d134      	bne.n	800f8d4 <HAL_SPI_TransmitReceive+0x30a>
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f86e:	b29b      	uxth	r3, r3
 800f870:	2b00      	cmp	r3, #0
 800f872:	d02f      	beq.n	800f8d4 <HAL_SPI_TransmitReceive+0x30a>
 800f874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f876:	2b01      	cmp	r3, #1
 800f878:	d12c      	bne.n	800f8d4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f87e:	b29b      	uxth	r3, r3
 800f880:	2b01      	cmp	r3, #1
 800f882:	d912      	bls.n	800f8aa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f888:	881a      	ldrh	r2, [r3, #0]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f894:	1c9a      	adds	r2, r3, #2
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	3b02      	subs	r3, #2
 800f8a2:	b29a      	uxth	r2, r3
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f8a8:	e012      	b.n	800f8d0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	330c      	adds	r3, #12
 800f8b4:	7812      	ldrb	r2, [r2, #0]
 800f8b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8bc:	1c5a      	adds	r2, r3, #1
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	b29a      	uxth	r2, r3
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	689b      	ldr	r3, [r3, #8]
 800f8da:	f003 0301 	and.w	r3, r3, #1
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d148      	bne.n	800f974 <HAL_SPI_TransmitReceive+0x3aa>
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d042      	beq.n	800f974 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d923      	bls.n	800f942 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	68da      	ldr	r2, [r3, #12]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f904:	b292      	uxth	r2, r2
 800f906:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f90c:	1c9a      	adds	r2, r3, #2
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f918:	b29b      	uxth	r3, r3
 800f91a:	3b02      	subs	r3, #2
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d81f      	bhi.n	800f970 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	685a      	ldr	r2, [r3, #4]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f93e:	605a      	str	r2, [r3, #4]
 800f940:	e016      	b.n	800f970 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f103 020c 	add.w	r2, r3, #12
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f94e:	7812      	ldrb	r2, [r2, #0]
 800f950:	b2d2      	uxtb	r2, r2
 800f952:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f964:	b29b      	uxth	r3, r3
 800f966:	3b01      	subs	r3, #1
 800f968:	b29a      	uxth	r2, r3
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f970:	2301      	movs	r3, #1
 800f972:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f974:	f7fa fa98 	bl	8009ea8 <HAL_GetTick>
 800f978:	4602      	mov	r2, r0
 800f97a:	69fb      	ldr	r3, [r7, #28]
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f980:	429a      	cmp	r2, r3
 800f982:	d803      	bhi.n	800f98c <HAL_SPI_TransmitReceive+0x3c2>
 800f984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f98a:	d102      	bne.n	800f992 <HAL_SPI_TransmitReceive+0x3c8>
 800f98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d103      	bne.n	800f99a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800f992:	2303      	movs	r3, #3
 800f994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f998:	e01c      	b.n	800f9d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f47f af5b 	bne.w	800f85c <HAL_SPI_TransmitReceive+0x292>
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f47f af54 	bne.w	800f85c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f9b4:	69fa      	ldr	r2, [r7, #28]
 800f9b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f000 f98f 	bl	800fcdc <SPI_EndRxTxTransaction>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d006      	beq.n	800f9d2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2220      	movs	r2, #32
 800f9ce:	661a      	str	r2, [r3, #96]	; 0x60
 800f9d0:	e000      	b.n	800f9d4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800f9d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f9e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3728      	adds	r7, #40	; 0x28
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b088      	sub	sp, #32
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	603b      	str	r3, [r7, #0]
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fa00:	f7fa fa52 	bl	8009ea8 <HAL_GetTick>
 800fa04:	4602      	mov	r2, r0
 800fa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa08:	1a9b      	subs	r3, r3, r2
 800fa0a:	683a      	ldr	r2, [r7, #0]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fa10:	f7fa fa4a 	bl	8009ea8 <HAL_GetTick>
 800fa14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fa16:	4b39      	ldr	r3, [pc, #228]	; (800fafc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	015b      	lsls	r3, r3, #5
 800fa1c:	0d1b      	lsrs	r3, r3, #20
 800fa1e:	69fa      	ldr	r2, [r7, #28]
 800fa20:	fb02 f303 	mul.w	r3, r2, r3
 800fa24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fa26:	e054      	b.n	800fad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa2e:	d050      	beq.n	800fad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fa30:	f7fa fa3a 	bl	8009ea8 <HAL_GetTick>
 800fa34:	4602      	mov	r2, r0
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	1ad3      	subs	r3, r2, r3
 800fa3a:	69fa      	ldr	r2, [r7, #28]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d902      	bls.n	800fa46 <SPI_WaitFlagStateUntilTimeout+0x56>
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d13d      	bne.n	800fac2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	685a      	ldr	r2, [r3, #4]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fa54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fa5e:	d111      	bne.n	800fa84 <SPI_WaitFlagStateUntilTimeout+0x94>
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	689b      	ldr	r3, [r3, #8]
 800fa64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa68:	d004      	beq.n	800fa74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa72:	d107      	bne.n	800fa84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa8c:	d10f      	bne.n	800faae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	681a      	ldr	r2, [r3, #0]
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800faac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2201      	movs	r2, #1
 800fab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2200      	movs	r2, #0
 800faba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800fabe:	2303      	movs	r3, #3
 800fac0:	e017      	b.n	800faf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d101      	bne.n	800facc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fac8:	2300      	movs	r3, #0
 800faca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	3b01      	subs	r3, #1
 800fad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	689a      	ldr	r2, [r3, #8]
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	4013      	ands	r3, r2
 800fadc:	68ba      	ldr	r2, [r7, #8]
 800fade:	429a      	cmp	r2, r3
 800fae0:	bf0c      	ite	eq
 800fae2:	2301      	moveq	r3, #1
 800fae4:	2300      	movne	r3, #0
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	461a      	mov	r2, r3
 800faea:	79fb      	ldrb	r3, [r7, #7]
 800faec:	429a      	cmp	r2, r3
 800faee:	d19b      	bne.n	800fa28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800faf0:	2300      	movs	r3, #0
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3720      	adds	r7, #32
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	20000078 	.word	0x20000078

0800fb00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b08a      	sub	sp, #40	; 0x28
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	607a      	str	r2, [r7, #4]
 800fb0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fb12:	f7fa f9c9 	bl	8009ea8 <HAL_GetTick>
 800fb16:	4602      	mov	r2, r0
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	1a9b      	subs	r3, r3, r2
 800fb1c:	683a      	ldr	r2, [r7, #0]
 800fb1e:	4413      	add	r3, r2
 800fb20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800fb22:	f7fa f9c1 	bl	8009ea8 <HAL_GetTick>
 800fb26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	330c      	adds	r3, #12
 800fb2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fb30:	4b3d      	ldr	r3, [pc, #244]	; (800fc28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	4613      	mov	r3, r2
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	4413      	add	r3, r2
 800fb3a:	00da      	lsls	r2, r3, #3
 800fb3c:	1ad3      	subs	r3, r2, r3
 800fb3e:	0d1b      	lsrs	r3, r3, #20
 800fb40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb42:	fb02 f303 	mul.w	r3, r2, r3
 800fb46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800fb48:	e060      	b.n	800fc0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800fb50:	d107      	bne.n	800fb62 <SPI_WaitFifoStateUntilTimeout+0x62>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d104      	bne.n	800fb62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800fb60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb68:	d050      	beq.n	800fc0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fb6a:	f7fa f99d 	bl	8009ea8 <HAL_GetTick>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	6a3b      	ldr	r3, [r7, #32]
 800fb72:	1ad3      	subs	r3, r2, r3
 800fb74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d902      	bls.n	800fb80 <SPI_WaitFifoStateUntilTimeout+0x80>
 800fb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d13d      	bne.n	800fbfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	685a      	ldr	r2, [r3, #4]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fb8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fb98:	d111      	bne.n	800fbbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fba2:	d004      	beq.n	800fbae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	689b      	ldr	r3, [r3, #8]
 800fba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbac:	d107      	bne.n	800fbbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbc6:	d10f      	bne.n	800fbe8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fbd6:	601a      	str	r2, [r3, #0]
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fbe6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2201      	movs	r2, #1
 800fbec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800fbf8:	2303      	movs	r3, #3
 800fbfa:	e010      	b.n	800fc1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800fc02:	2300      	movs	r3, #0
 800fc04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	3b01      	subs	r3, #1
 800fc0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	689a      	ldr	r2, [r3, #8]
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	4013      	ands	r3, r2
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d196      	bne.n	800fb4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3728      	adds	r7, #40	; 0x28
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	20000078 	.word	0x20000078

0800fc2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b086      	sub	sp, #24
 800fc30:	af02      	add	r7, sp, #8
 800fc32:	60f8      	str	r0, [r7, #12]
 800fc34:	60b9      	str	r1, [r7, #8]
 800fc36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc40:	d111      	bne.n	800fc66 <SPI_EndRxTransaction+0x3a>
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	689b      	ldr	r3, [r3, #8]
 800fc46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc4a:	d004      	beq.n	800fc56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc54:	d107      	bne.n	800fc66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc64:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	9300      	str	r3, [sp, #0]
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	2180      	movs	r1, #128	; 0x80
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f7ff febd 	bl	800f9f0 <SPI_WaitFlagStateUntilTimeout>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d007      	beq.n	800fc8c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc80:	f043 0220 	orr.w	r2, r3, #32
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fc88:	2303      	movs	r3, #3
 800fc8a:	e023      	b.n	800fcd4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc94:	d11d      	bne.n	800fcd2 <SPI_EndRxTransaction+0xa6>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	689b      	ldr	r3, [r3, #8]
 800fc9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc9e:	d004      	beq.n	800fcaa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	689b      	ldr	r3, [r3, #8]
 800fca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fca8:	d113      	bne.n	800fcd2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	f7ff ff22 	bl	800fb00 <SPI_WaitFifoStateUntilTimeout>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d007      	beq.n	800fcd2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fcc6:	f043 0220 	orr.w	r2, r3, #32
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800fcce:	2303      	movs	r3, #3
 800fcd0:	e000      	b.n	800fcd4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800fcd2:	2300      	movs	r3, #0
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3710      	adds	r7, #16
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b086      	sub	sp, #24
 800fce0:	af02      	add	r7, sp, #8
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	9300      	str	r3, [sp, #0]
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800fcf4:	68f8      	ldr	r0, [r7, #12]
 800fcf6:	f7ff ff03 	bl	800fb00 <SPI_WaitFifoStateUntilTimeout>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d007      	beq.n	800fd10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd04:	f043 0220 	orr.w	r2, r3, #32
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fd0c:	2303      	movs	r3, #3
 800fd0e:	e027      	b.n	800fd60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	9300      	str	r3, [sp, #0]
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	2200      	movs	r2, #0
 800fd18:	2180      	movs	r1, #128	; 0x80
 800fd1a:	68f8      	ldr	r0, [r7, #12]
 800fd1c:	f7ff fe68 	bl	800f9f0 <SPI_WaitFlagStateUntilTimeout>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d007      	beq.n	800fd36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd2a:	f043 0220 	orr.w	r2, r3, #32
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fd32:	2303      	movs	r3, #3
 800fd34:	e014      	b.n	800fd60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	9300      	str	r3, [sp, #0]
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	f7ff fedc 	bl	800fb00 <SPI_WaitFifoStateUntilTimeout>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d007      	beq.n	800fd5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd52:	f043 0220 	orr.w	r2, r3, #32
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fd5a:	2303      	movs	r3, #3
 800fd5c:	e000      	b.n	800fd60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fd5e:	2300      	movs	r3, #0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3710      	adds	r7, #16
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d101      	bne.n	800fd7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fd76:	2301      	movs	r3, #1
 800fd78:	e049      	b.n	800fe0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d106      	bne.n	800fd94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f7f9 fcb4 	bl	80096fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2202      	movs	r2, #2
 800fd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	3304      	adds	r3, #4
 800fda4:	4619      	mov	r1, r3
 800fda6:	4610      	mov	r0, r2
 800fda8:	f000 ffc2 	bl	8010d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2201      	movs	r2, #1
 800fdb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2201      	movs	r2, #1
 800fdd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2201      	movs	r2, #1
 800fde0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2201      	movs	r2, #1
 800fde8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2201      	movs	r2, #1
 800fe00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2201      	movs	r2, #1
 800fe08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fe0c:	2300      	movs	r3, #0
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3708      	adds	r7, #8
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
	...

0800fe18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	d001      	beq.n	800fe30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e047      	b.n	800fec0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2202      	movs	r2, #2
 800fe34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a23      	ldr	r2, [pc, #140]	; (800fecc <HAL_TIM_Base_Start+0xb4>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d01d      	beq.n	800fe7e <HAL_TIM_Base_Start+0x66>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe4a:	d018      	beq.n	800fe7e <HAL_TIM_Base_Start+0x66>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a1f      	ldr	r2, [pc, #124]	; (800fed0 <HAL_TIM_Base_Start+0xb8>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d013      	beq.n	800fe7e <HAL_TIM_Base_Start+0x66>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4a1e      	ldr	r2, [pc, #120]	; (800fed4 <HAL_TIM_Base_Start+0xbc>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d00e      	beq.n	800fe7e <HAL_TIM_Base_Start+0x66>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	4a1c      	ldr	r2, [pc, #112]	; (800fed8 <HAL_TIM_Base_Start+0xc0>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d009      	beq.n	800fe7e <HAL_TIM_Base_Start+0x66>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4a1b      	ldr	r2, [pc, #108]	; (800fedc <HAL_TIM_Base_Start+0xc4>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d004      	beq.n	800fe7e <HAL_TIM_Base_Start+0x66>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4a19      	ldr	r2, [pc, #100]	; (800fee0 <HAL_TIM_Base_Start+0xc8>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d115      	bne.n	800feaa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	689a      	ldr	r2, [r3, #8]
 800fe84:	4b17      	ldr	r3, [pc, #92]	; (800fee4 <HAL_TIM_Base_Start+0xcc>)
 800fe86:	4013      	ands	r3, r2
 800fe88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2b06      	cmp	r3, #6
 800fe8e:	d015      	beq.n	800febc <HAL_TIM_Base_Start+0xa4>
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe96:	d011      	beq.n	800febc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f042 0201 	orr.w	r2, r2, #1
 800fea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fea8:	e008      	b.n	800febc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	f042 0201 	orr.w	r2, r2, #1
 800feb8:	601a      	str	r2, [r3, #0]
 800feba:	e000      	b.n	800febe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800febc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3714      	adds	r7, #20
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr
 800fecc:	40012c00 	.word	0x40012c00
 800fed0:	40000400 	.word	0x40000400
 800fed4:	40000800 	.word	0x40000800
 800fed8:	40000c00 	.word	0x40000c00
 800fedc:	40013400 	.word	0x40013400
 800fee0:	40014000 	.word	0x40014000
 800fee4:	00010007 	.word	0x00010007

0800fee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fee8:	b480      	push	{r7}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d001      	beq.n	800ff00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fefc:	2301      	movs	r3, #1
 800fefe:	e04f      	b.n	800ffa0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2202      	movs	r2, #2
 800ff04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	68da      	ldr	r2, [r3, #12]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f042 0201 	orr.w	r2, r2, #1
 800ff16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	4a23      	ldr	r2, [pc, #140]	; (800ffac <HAL_TIM_Base_Start_IT+0xc4>)
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d01d      	beq.n	800ff5e <HAL_TIM_Base_Start_IT+0x76>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff2a:	d018      	beq.n	800ff5e <HAL_TIM_Base_Start_IT+0x76>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4a1f      	ldr	r2, [pc, #124]	; (800ffb0 <HAL_TIM_Base_Start_IT+0xc8>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d013      	beq.n	800ff5e <HAL_TIM_Base_Start_IT+0x76>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	4a1e      	ldr	r2, [pc, #120]	; (800ffb4 <HAL_TIM_Base_Start_IT+0xcc>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d00e      	beq.n	800ff5e <HAL_TIM_Base_Start_IT+0x76>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	4a1c      	ldr	r2, [pc, #112]	; (800ffb8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d009      	beq.n	800ff5e <HAL_TIM_Base_Start_IT+0x76>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	4a1b      	ldr	r2, [pc, #108]	; (800ffbc <HAL_TIM_Base_Start_IT+0xd4>)
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d004      	beq.n	800ff5e <HAL_TIM_Base_Start_IT+0x76>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4a19      	ldr	r2, [pc, #100]	; (800ffc0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d115      	bne.n	800ff8a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	689a      	ldr	r2, [r3, #8]
 800ff64:	4b17      	ldr	r3, [pc, #92]	; (800ffc4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ff66:	4013      	ands	r3, r2
 800ff68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2b06      	cmp	r3, #6
 800ff6e:	d015      	beq.n	800ff9c <HAL_TIM_Base_Start_IT+0xb4>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff76:	d011      	beq.n	800ff9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	681a      	ldr	r2, [r3, #0]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f042 0201 	orr.w	r2, r2, #1
 800ff86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff88:	e008      	b.n	800ff9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f042 0201 	orr.w	r2, r2, #1
 800ff98:	601a      	str	r2, [r3, #0]
 800ff9a:	e000      	b.n	800ff9e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3714      	adds	r7, #20
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr
 800ffac:	40012c00 	.word	0x40012c00
 800ffb0:	40000400 	.word	0x40000400
 800ffb4:	40000800 	.word	0x40000800
 800ffb8:	40000c00 	.word	0x40000c00
 800ffbc:	40013400 	.word	0x40013400
 800ffc0:	40014000 	.word	0x40014000
 800ffc4:	00010007 	.word	0x00010007

0800ffc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d101      	bne.n	800ffda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	e049      	b.n	801006e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d106      	bne.n	800fff4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f7f9 fc64 	bl	80098bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2202      	movs	r2, #2
 800fff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	3304      	adds	r3, #4
 8010004:	4619      	mov	r1, r3
 8010006:	4610      	mov	r0, r2
 8010008:	f000 fe92 	bl	8010d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2201      	movs	r2, #1
 8010010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2201      	movs	r2, #1
 8010018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2201      	movs	r2, #1
 8010020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2201      	movs	r2, #1
 8010028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2201      	movs	r2, #1
 8010030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2201      	movs	r2, #1
 8010038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2201      	movs	r2, #1
 8010040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2201      	movs	r2, #1
 8010048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2201      	movs	r2, #1
 8010050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2201      	movs	r2, #1
 8010058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2201      	movs	r2, #1
 8010060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2201      	movs	r2, #1
 8010068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
	...

08010078 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d109      	bne.n	801009c <HAL_TIM_PWM_Start+0x24>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801008e:	b2db      	uxtb	r3, r3
 8010090:	2b01      	cmp	r3, #1
 8010092:	bf14      	ite	ne
 8010094:	2301      	movne	r3, #1
 8010096:	2300      	moveq	r3, #0
 8010098:	b2db      	uxtb	r3, r3
 801009a:	e03c      	b.n	8010116 <HAL_TIM_PWM_Start+0x9e>
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	2b04      	cmp	r3, #4
 80100a0:	d109      	bne.n	80100b6 <HAL_TIM_PWM_Start+0x3e>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80100a8:	b2db      	uxtb	r3, r3
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	bf14      	ite	ne
 80100ae:	2301      	movne	r3, #1
 80100b0:	2300      	moveq	r3, #0
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	e02f      	b.n	8010116 <HAL_TIM_PWM_Start+0x9e>
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	2b08      	cmp	r3, #8
 80100ba:	d109      	bne.n	80100d0 <HAL_TIM_PWM_Start+0x58>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	bf14      	ite	ne
 80100c8:	2301      	movne	r3, #1
 80100ca:	2300      	moveq	r3, #0
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	e022      	b.n	8010116 <HAL_TIM_PWM_Start+0x9e>
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2b0c      	cmp	r3, #12
 80100d4:	d109      	bne.n	80100ea <HAL_TIM_PWM_Start+0x72>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	2b01      	cmp	r3, #1
 80100e0:	bf14      	ite	ne
 80100e2:	2301      	movne	r3, #1
 80100e4:	2300      	moveq	r3, #0
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	e015      	b.n	8010116 <HAL_TIM_PWM_Start+0x9e>
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	2b10      	cmp	r3, #16
 80100ee:	d109      	bne.n	8010104 <HAL_TIM_PWM_Start+0x8c>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	bf14      	ite	ne
 80100fc:	2301      	movne	r3, #1
 80100fe:	2300      	moveq	r3, #0
 8010100:	b2db      	uxtb	r3, r3
 8010102:	e008      	b.n	8010116 <HAL_TIM_PWM_Start+0x9e>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801010a:	b2db      	uxtb	r3, r3
 801010c:	2b01      	cmp	r3, #1
 801010e:	bf14      	ite	ne
 8010110:	2301      	movne	r3, #1
 8010112:	2300      	moveq	r3, #0
 8010114:	b2db      	uxtb	r3, r3
 8010116:	2b00      	cmp	r3, #0
 8010118:	d001      	beq.n	801011e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	e09c      	b.n	8010258 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d104      	bne.n	801012e <HAL_TIM_PWM_Start+0xb6>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2202      	movs	r2, #2
 8010128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801012c:	e023      	b.n	8010176 <HAL_TIM_PWM_Start+0xfe>
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	2b04      	cmp	r3, #4
 8010132:	d104      	bne.n	801013e <HAL_TIM_PWM_Start+0xc6>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2202      	movs	r2, #2
 8010138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801013c:	e01b      	b.n	8010176 <HAL_TIM_PWM_Start+0xfe>
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	2b08      	cmp	r3, #8
 8010142:	d104      	bne.n	801014e <HAL_TIM_PWM_Start+0xd6>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2202      	movs	r2, #2
 8010148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801014c:	e013      	b.n	8010176 <HAL_TIM_PWM_Start+0xfe>
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	2b0c      	cmp	r3, #12
 8010152:	d104      	bne.n	801015e <HAL_TIM_PWM_Start+0xe6>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2202      	movs	r2, #2
 8010158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801015c:	e00b      	b.n	8010176 <HAL_TIM_PWM_Start+0xfe>
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	2b10      	cmp	r3, #16
 8010162:	d104      	bne.n	801016e <HAL_TIM_PWM_Start+0xf6>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2202      	movs	r2, #2
 8010168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801016c:	e003      	b.n	8010176 <HAL_TIM_PWM_Start+0xfe>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2202      	movs	r2, #2
 8010172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2201      	movs	r2, #1
 801017c:	6839      	ldr	r1, [r7, #0]
 801017e:	4618      	mov	r0, r3
 8010180:	f001 fb06 	bl	8011790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	4a35      	ldr	r2, [pc, #212]	; (8010260 <HAL_TIM_PWM_Start+0x1e8>)
 801018a:	4293      	cmp	r3, r2
 801018c:	d013      	beq.n	80101b6 <HAL_TIM_PWM_Start+0x13e>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	4a34      	ldr	r2, [pc, #208]	; (8010264 <HAL_TIM_PWM_Start+0x1ec>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d00e      	beq.n	80101b6 <HAL_TIM_PWM_Start+0x13e>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4a32      	ldr	r2, [pc, #200]	; (8010268 <HAL_TIM_PWM_Start+0x1f0>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d009      	beq.n	80101b6 <HAL_TIM_PWM_Start+0x13e>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	4a31      	ldr	r2, [pc, #196]	; (801026c <HAL_TIM_PWM_Start+0x1f4>)
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d004      	beq.n	80101b6 <HAL_TIM_PWM_Start+0x13e>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a2f      	ldr	r2, [pc, #188]	; (8010270 <HAL_TIM_PWM_Start+0x1f8>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d101      	bne.n	80101ba <HAL_TIM_PWM_Start+0x142>
 80101b6:	2301      	movs	r3, #1
 80101b8:	e000      	b.n	80101bc <HAL_TIM_PWM_Start+0x144>
 80101ba:	2300      	movs	r3, #0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d007      	beq.n	80101d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80101ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4a22      	ldr	r2, [pc, #136]	; (8010260 <HAL_TIM_PWM_Start+0x1e8>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d01d      	beq.n	8010216 <HAL_TIM_PWM_Start+0x19e>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101e2:	d018      	beq.n	8010216 <HAL_TIM_PWM_Start+0x19e>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4a22      	ldr	r2, [pc, #136]	; (8010274 <HAL_TIM_PWM_Start+0x1fc>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d013      	beq.n	8010216 <HAL_TIM_PWM_Start+0x19e>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	4a21      	ldr	r2, [pc, #132]	; (8010278 <HAL_TIM_PWM_Start+0x200>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d00e      	beq.n	8010216 <HAL_TIM_PWM_Start+0x19e>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4a1f      	ldr	r2, [pc, #124]	; (801027c <HAL_TIM_PWM_Start+0x204>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d009      	beq.n	8010216 <HAL_TIM_PWM_Start+0x19e>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a17      	ldr	r2, [pc, #92]	; (8010264 <HAL_TIM_PWM_Start+0x1ec>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d004      	beq.n	8010216 <HAL_TIM_PWM_Start+0x19e>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a15      	ldr	r2, [pc, #84]	; (8010268 <HAL_TIM_PWM_Start+0x1f0>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d115      	bne.n	8010242 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	689a      	ldr	r2, [r3, #8]
 801021c:	4b18      	ldr	r3, [pc, #96]	; (8010280 <HAL_TIM_PWM_Start+0x208>)
 801021e:	4013      	ands	r3, r2
 8010220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b06      	cmp	r3, #6
 8010226:	d015      	beq.n	8010254 <HAL_TIM_PWM_Start+0x1dc>
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801022e:	d011      	beq.n	8010254 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	681a      	ldr	r2, [r3, #0]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f042 0201 	orr.w	r2, r2, #1
 801023e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010240:	e008      	b.n	8010254 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f042 0201 	orr.w	r2, r2, #1
 8010250:	601a      	str	r2, [r3, #0]
 8010252:	e000      	b.n	8010256 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010254:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010256:	2300      	movs	r3, #0
}
 8010258:	4618      	mov	r0, r3
 801025a:	3710      	adds	r7, #16
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	40012c00 	.word	0x40012c00
 8010264:	40013400 	.word	0x40013400
 8010268:	40014000 	.word	0x40014000
 801026c:	40014400 	.word	0x40014400
 8010270:	40014800 	.word	0x40014800
 8010274:	40000400 	.word	0x40000400
 8010278:	40000800 	.word	0x40000800
 801027c:	40000c00 	.word	0x40000c00
 8010280:	00010007 	.word	0x00010007

08010284 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d101      	bne.n	8010296 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010292:	2301      	movs	r3, #1
 8010294:	e049      	b.n	801032a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801029c:	b2db      	uxtb	r3, r3
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d106      	bne.n	80102b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f000 f841 	bl	8010332 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2202      	movs	r2, #2
 80102b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	3304      	adds	r3, #4
 80102c0:	4619      	mov	r1, r3
 80102c2:	4610      	mov	r0, r2
 80102c4:	f000 fd34 	bl	8010d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2201      	movs	r2, #1
 80102cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2201      	movs	r2, #1
 80102d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2201      	movs	r2, #1
 80102dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2201      	movs	r2, #1
 80102e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2201      	movs	r2, #1
 80102ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2201      	movs	r2, #1
 80102f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2201      	movs	r2, #1
 80102fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2201      	movs	r2, #1
 8010304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2201      	movs	r2, #1
 801030c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2201      	movs	r2, #1
 8010314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2201      	movs	r2, #1
 801031c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2201      	movs	r2, #1
 8010324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010328:	2300      	movs	r3, #0
}
 801032a:	4618      	mov	r0, r3
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8010332:	b480      	push	{r7}
 8010334:	b083      	sub	sp, #12
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801033a:	bf00      	nop
 801033c:	370c      	adds	r7, #12
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr

08010346 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b086      	sub	sp, #24
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
 801034e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d101      	bne.n	801035a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010356:	2301      	movs	r3, #1
 8010358:	e097      	b.n	801048a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010360:	b2db      	uxtb	r3, r3
 8010362:	2b00      	cmp	r3, #0
 8010364:	d106      	bne.n	8010374 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2200      	movs	r2, #0
 801036a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7f9 fa58 	bl	8009824 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2202      	movs	r2, #2
 8010378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	6812      	ldr	r2, [r2, #0]
 8010386:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 801038a:	f023 0307 	bic.w	r3, r3, #7
 801038e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	3304      	adds	r3, #4
 8010398:	4619      	mov	r1, r3
 801039a:	4610      	mov	r0, r2
 801039c:	f000 fcc8 	bl	8010d30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	699b      	ldr	r3, [r3, #24]
 80103ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	6a1b      	ldr	r3, [r3, #32]
 80103b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	697a      	ldr	r2, [r7, #20]
 80103be:	4313      	orrs	r3, r2
 80103c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103c8:	f023 0303 	bic.w	r3, r3, #3
 80103cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	689a      	ldr	r2, [r3, #8]
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	699b      	ldr	r3, [r3, #24]
 80103d6:	021b      	lsls	r3, r3, #8
 80103d8:	4313      	orrs	r3, r2
 80103da:	693a      	ldr	r2, [r7, #16]
 80103dc:	4313      	orrs	r3, r2
 80103de:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80103e6:	f023 030c 	bic.w	r3, r3, #12
 80103ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80103f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80103f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	68da      	ldr	r2, [r3, #12]
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	69db      	ldr	r3, [r3, #28]
 8010400:	021b      	lsls	r3, r3, #8
 8010402:	4313      	orrs	r3, r2
 8010404:	693a      	ldr	r2, [r7, #16]
 8010406:	4313      	orrs	r3, r2
 8010408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	691b      	ldr	r3, [r3, #16]
 801040e:	011a      	lsls	r2, r3, #4
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	6a1b      	ldr	r3, [r3, #32]
 8010414:	031b      	lsls	r3, r3, #12
 8010416:	4313      	orrs	r3, r2
 8010418:	693a      	ldr	r2, [r7, #16]
 801041a:	4313      	orrs	r3, r2
 801041c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010424:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801042c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	685a      	ldr	r2, [r3, #4]
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	695b      	ldr	r3, [r3, #20]
 8010436:	011b      	lsls	r3, r3, #4
 8010438:	4313      	orrs	r3, r2
 801043a:	68fa      	ldr	r2, [r7, #12]
 801043c:	4313      	orrs	r3, r2
 801043e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	697a      	ldr	r2, [r7, #20]
 8010446:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	693a      	ldr	r2, [r7, #16]
 801044e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	68fa      	ldr	r2, [r7, #12]
 8010456:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2201      	movs	r2, #1
 801045c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2201      	movs	r2, #1
 801046c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2201      	movs	r2, #1
 801047c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2201      	movs	r2, #1
 8010484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010488:	2300      	movs	r3, #0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3718      	adds	r7, #24
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b084      	sub	sp, #16
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
 801049a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80104a2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80104aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104b2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104ba:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d110      	bne.n	80104e4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80104c2:	7bfb      	ldrb	r3, [r7, #15]
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d102      	bne.n	80104ce <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80104c8:	7b7b      	ldrb	r3, [r7, #13]
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d001      	beq.n	80104d2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80104ce:	2301      	movs	r3, #1
 80104d0:	e069      	b.n	80105a6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2202      	movs	r2, #2
 80104d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2202      	movs	r2, #2
 80104de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104e2:	e031      	b.n	8010548 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	2b04      	cmp	r3, #4
 80104e8:	d110      	bne.n	801050c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80104ea:	7bbb      	ldrb	r3, [r7, #14]
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d102      	bne.n	80104f6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80104f0:	7b3b      	ldrb	r3, [r7, #12]
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	d001      	beq.n	80104fa <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80104f6:	2301      	movs	r3, #1
 80104f8:	e055      	b.n	80105a6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2202      	movs	r2, #2
 80104fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2202      	movs	r2, #2
 8010506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801050a:	e01d      	b.n	8010548 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801050c:	7bfb      	ldrb	r3, [r7, #15]
 801050e:	2b01      	cmp	r3, #1
 8010510:	d108      	bne.n	8010524 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010512:	7bbb      	ldrb	r3, [r7, #14]
 8010514:	2b01      	cmp	r3, #1
 8010516:	d105      	bne.n	8010524 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010518:	7b7b      	ldrb	r3, [r7, #13]
 801051a:	2b01      	cmp	r3, #1
 801051c:	d102      	bne.n	8010524 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801051e:	7b3b      	ldrb	r3, [r7, #12]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d001      	beq.n	8010528 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8010524:	2301      	movs	r3, #1
 8010526:	e03e      	b.n	80105a6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2202      	movs	r2, #2
 801052c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2202      	movs	r2, #2
 8010534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2202      	movs	r2, #2
 801053c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2202      	movs	r2, #2
 8010544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d003      	beq.n	8010556 <HAL_TIM_Encoder_Start+0xc4>
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	2b04      	cmp	r3, #4
 8010552:	d008      	beq.n	8010566 <HAL_TIM_Encoder_Start+0xd4>
 8010554:	e00f      	b.n	8010576 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2201      	movs	r2, #1
 801055c:	2100      	movs	r1, #0
 801055e:	4618      	mov	r0, r3
 8010560:	f001 f916 	bl	8011790 <TIM_CCxChannelCmd>
      break;
 8010564:	e016      	b.n	8010594 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2201      	movs	r2, #1
 801056c:	2104      	movs	r1, #4
 801056e:	4618      	mov	r0, r3
 8010570:	f001 f90e 	bl	8011790 <TIM_CCxChannelCmd>
      break;
 8010574:	e00e      	b.n	8010594 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2201      	movs	r2, #1
 801057c:	2100      	movs	r1, #0
 801057e:	4618      	mov	r0, r3
 8010580:	f001 f906 	bl	8011790 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	2201      	movs	r2, #1
 801058a:	2104      	movs	r1, #4
 801058c:	4618      	mov	r0, r3
 801058e:	f001 f8ff 	bl	8011790 <TIM_CCxChannelCmd>
      break;
 8010592:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	f042 0201 	orr.w	r2, r2, #1
 80105a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80105a4:	2300      	movs	r3, #0
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}

080105ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b082      	sub	sp, #8
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	f003 0302 	and.w	r3, r3, #2
 80105c0:	2b02      	cmp	r3, #2
 80105c2:	d122      	bne.n	801060a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	f003 0302 	and.w	r3, r3, #2
 80105ce:	2b02      	cmp	r3, #2
 80105d0:	d11b      	bne.n	801060a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f06f 0202 	mvn.w	r2, #2
 80105da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2201      	movs	r2, #1
 80105e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	699b      	ldr	r3, [r3, #24]
 80105e8:	f003 0303 	and.w	r3, r3, #3
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d003      	beq.n	80105f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f000 fb7e 	bl	8010cf2 <HAL_TIM_IC_CaptureCallback>
 80105f6:	e005      	b.n	8010604 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f000 fb70 	bl	8010cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f000 fb81 	bl	8010d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2200      	movs	r2, #0
 8010608:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	691b      	ldr	r3, [r3, #16]
 8010610:	f003 0304 	and.w	r3, r3, #4
 8010614:	2b04      	cmp	r3, #4
 8010616:	d122      	bne.n	801065e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	f003 0304 	and.w	r3, r3, #4
 8010622:	2b04      	cmp	r3, #4
 8010624:	d11b      	bne.n	801065e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f06f 0204 	mvn.w	r2, #4
 801062e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2202      	movs	r2, #2
 8010634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	699b      	ldr	r3, [r3, #24]
 801063c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010640:	2b00      	cmp	r3, #0
 8010642:	d003      	beq.n	801064c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f000 fb54 	bl	8010cf2 <HAL_TIM_IC_CaptureCallback>
 801064a:	e005      	b.n	8010658 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f000 fb46 	bl	8010cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f000 fb57 	bl	8010d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2200      	movs	r2, #0
 801065c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	691b      	ldr	r3, [r3, #16]
 8010664:	f003 0308 	and.w	r3, r3, #8
 8010668:	2b08      	cmp	r3, #8
 801066a:	d122      	bne.n	80106b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	f003 0308 	and.w	r3, r3, #8
 8010676:	2b08      	cmp	r3, #8
 8010678:	d11b      	bne.n	80106b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f06f 0208 	mvn.w	r2, #8
 8010682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2204      	movs	r2, #4
 8010688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	69db      	ldr	r3, [r3, #28]
 8010690:	f003 0303 	and.w	r3, r3, #3
 8010694:	2b00      	cmp	r3, #0
 8010696:	d003      	beq.n	80106a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f000 fb2a 	bl	8010cf2 <HAL_TIM_IC_CaptureCallback>
 801069e:	e005      	b.n	80106ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f000 fb1c 	bl	8010cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f000 fb2d 	bl	8010d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	691b      	ldr	r3, [r3, #16]
 80106b8:	f003 0310 	and.w	r3, r3, #16
 80106bc:	2b10      	cmp	r3, #16
 80106be:	d122      	bne.n	8010706 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	f003 0310 	and.w	r3, r3, #16
 80106ca:	2b10      	cmp	r3, #16
 80106cc:	d11b      	bne.n	8010706 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f06f 0210 	mvn.w	r2, #16
 80106d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2208      	movs	r2, #8
 80106dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	69db      	ldr	r3, [r3, #28]
 80106e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d003      	beq.n	80106f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f000 fb00 	bl	8010cf2 <HAL_TIM_IC_CaptureCallback>
 80106f2:	e005      	b.n	8010700 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 faf2 	bl	8010cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 fb03 	bl	8010d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2200      	movs	r2, #0
 8010704:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	691b      	ldr	r3, [r3, #16]
 801070c:	f003 0301 	and.w	r3, r3, #1
 8010710:	2b01      	cmp	r3, #1
 8010712:	d10e      	bne.n	8010732 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	f003 0301 	and.w	r3, r3, #1
 801071e:	2b01      	cmp	r3, #1
 8010720:	d107      	bne.n	8010732 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f06f 0201 	mvn.w	r2, #1
 801072a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f7f8 fc81 	bl	8009034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	691b      	ldr	r3, [r3, #16]
 8010738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801073c:	2b80      	cmp	r3, #128	; 0x80
 801073e:	d10e      	bne.n	801075e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801074a:	2b80      	cmp	r3, #128	; 0x80
 801074c:	d107      	bne.n	801075e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f001 f971 	bl	8011a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	691b      	ldr	r3, [r3, #16]
 8010764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801076c:	d10e      	bne.n	801078c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010778:	2b80      	cmp	r3, #128	; 0x80
 801077a:	d107      	bne.n	801078c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f001 f964 	bl	8011a54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	691b      	ldr	r3, [r3, #16]
 8010792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010796:	2b40      	cmp	r3, #64	; 0x40
 8010798:	d10e      	bne.n	80107b8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107a4:	2b40      	cmp	r3, #64	; 0x40
 80107a6:	d107      	bne.n	80107b8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80107b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 fab1 	bl	8010d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	691b      	ldr	r3, [r3, #16]
 80107be:	f003 0320 	and.w	r3, r3, #32
 80107c2:	2b20      	cmp	r3, #32
 80107c4:	d10e      	bne.n	80107e4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	f003 0320 	and.w	r3, r3, #32
 80107d0:	2b20      	cmp	r3, #32
 80107d2:	d107      	bne.n	80107e4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	f06f 0220 	mvn.w	r2, #32
 80107dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f001 f924 	bl	8011a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80107e4:	bf00      	nop
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b086      	sub	sp, #24
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80107f8:	2300      	movs	r3, #0
 80107fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010802:	2b01      	cmp	r3, #1
 8010804:	d101      	bne.n	801080a <HAL_TIM_IC_ConfigChannel+0x1e>
 8010806:	2302      	movs	r3, #2
 8010808:	e088      	b.n	801091c <HAL_TIM_IC_ConfigChannel+0x130>
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2201      	movs	r2, #1
 801080e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d11b      	bne.n	8010850 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8010828:	f000 fdf2 	bl	8011410 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	699a      	ldr	r2, [r3, #24]
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f022 020c 	bic.w	r2, r2, #12
 801083a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	6999      	ldr	r1, [r3, #24]
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	689a      	ldr	r2, [r3, #8]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	430a      	orrs	r2, r1
 801084c:	619a      	str	r2, [r3, #24]
 801084e:	e060      	b.n	8010912 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2b04      	cmp	r3, #4
 8010854:	d11c      	bne.n	8010890 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8010866:	f000 fe70 	bl	801154a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	699a      	ldr	r2, [r3, #24]
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010878:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	6999      	ldr	r1, [r3, #24]
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	021a      	lsls	r2, r3, #8
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	430a      	orrs	r2, r1
 801088c:	619a      	str	r2, [r3, #24]
 801088e:	e040      	b.n	8010912 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2b08      	cmp	r3, #8
 8010894:	d11b      	bne.n	80108ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80108a6:	f000 febd 	bl	8011624 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	69da      	ldr	r2, [r3, #28]
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f022 020c 	bic.w	r2, r2, #12
 80108b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	69d9      	ldr	r1, [r3, #28]
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	689a      	ldr	r2, [r3, #8]
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	430a      	orrs	r2, r1
 80108ca:	61da      	str	r2, [r3, #28]
 80108cc:	e021      	b.n	8010912 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2b0c      	cmp	r3, #12
 80108d2:	d11c      	bne.n	801090e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80108e4:	f000 feda 	bl	801169c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	69da      	ldr	r2, [r3, #28]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80108f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	69d9      	ldr	r1, [r3, #28]
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	689b      	ldr	r3, [r3, #8]
 8010902:	021a      	lsls	r2, r3, #8
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	430a      	orrs	r2, r1
 801090a:	61da      	str	r2, [r3, #28]
 801090c:	e001      	b.n	8010912 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801090e:	2301      	movs	r3, #1
 8010910:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2200      	movs	r2, #0
 8010916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801091a:	7dfb      	ldrb	r3, [r7, #23]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3718      	adds	r7, #24
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b086      	sub	sp, #24
 8010928:	af00      	add	r7, sp, #0
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010930:	2300      	movs	r3, #0
 8010932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801093a:	2b01      	cmp	r3, #1
 801093c:	d101      	bne.n	8010942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801093e:	2302      	movs	r3, #2
 8010940:	e0ff      	b.n	8010b42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2201      	movs	r2, #1
 8010946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2b14      	cmp	r3, #20
 801094e:	f200 80f0 	bhi.w	8010b32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010952:	a201      	add	r2, pc, #4	; (adr r2, 8010958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010958:	080109ad 	.word	0x080109ad
 801095c:	08010b33 	.word	0x08010b33
 8010960:	08010b33 	.word	0x08010b33
 8010964:	08010b33 	.word	0x08010b33
 8010968:	080109ed 	.word	0x080109ed
 801096c:	08010b33 	.word	0x08010b33
 8010970:	08010b33 	.word	0x08010b33
 8010974:	08010b33 	.word	0x08010b33
 8010978:	08010a2f 	.word	0x08010a2f
 801097c:	08010b33 	.word	0x08010b33
 8010980:	08010b33 	.word	0x08010b33
 8010984:	08010b33 	.word	0x08010b33
 8010988:	08010a6f 	.word	0x08010a6f
 801098c:	08010b33 	.word	0x08010b33
 8010990:	08010b33 	.word	0x08010b33
 8010994:	08010b33 	.word	0x08010b33
 8010998:	08010ab1 	.word	0x08010ab1
 801099c:	08010b33 	.word	0x08010b33
 80109a0:	08010b33 	.word	0x08010b33
 80109a4:	08010b33 	.word	0x08010b33
 80109a8:	08010af1 	.word	0x08010af1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	68b9      	ldr	r1, [r7, #8]
 80109b2:	4618      	mov	r0, r3
 80109b4:	f000 fa56 	bl	8010e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	699a      	ldr	r2, [r3, #24]
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f042 0208 	orr.w	r2, r2, #8
 80109c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	699a      	ldr	r2, [r3, #24]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f022 0204 	bic.w	r2, r2, #4
 80109d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	6999      	ldr	r1, [r3, #24]
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	691a      	ldr	r2, [r3, #16]
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	430a      	orrs	r2, r1
 80109e8:	619a      	str	r2, [r3, #24]
      break;
 80109ea:	e0a5      	b.n	8010b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	68b9      	ldr	r1, [r7, #8]
 80109f2:	4618      	mov	r0, r3
 80109f4:	f000 fac6 	bl	8010f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	699a      	ldr	r2, [r3, #24]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	699a      	ldr	r2, [r3, #24]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	6999      	ldr	r1, [r3, #24]
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	691b      	ldr	r3, [r3, #16]
 8010a22:	021a      	lsls	r2, r3, #8
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	430a      	orrs	r2, r1
 8010a2a:	619a      	str	r2, [r3, #24]
      break;
 8010a2c:	e084      	b.n	8010b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	68b9      	ldr	r1, [r7, #8]
 8010a34:	4618      	mov	r0, r3
 8010a36:	f000 fb2f 	bl	8011098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	69da      	ldr	r2, [r3, #28]
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f042 0208 	orr.w	r2, r2, #8
 8010a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	69da      	ldr	r2, [r3, #28]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f022 0204 	bic.w	r2, r2, #4
 8010a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	69d9      	ldr	r1, [r3, #28]
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	691a      	ldr	r2, [r3, #16]
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	430a      	orrs	r2, r1
 8010a6a:	61da      	str	r2, [r3, #28]
      break;
 8010a6c:	e064      	b.n	8010b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	68b9      	ldr	r1, [r7, #8]
 8010a74:	4618      	mov	r0, r3
 8010a76:	f000 fb97 	bl	80111a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	69da      	ldr	r2, [r3, #28]
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	69da      	ldr	r2, [r3, #28]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	69d9      	ldr	r1, [r3, #28]
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	691b      	ldr	r3, [r3, #16]
 8010aa4:	021a      	lsls	r2, r3, #8
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	430a      	orrs	r2, r1
 8010aac:	61da      	str	r2, [r3, #28]
      break;
 8010aae:	e043      	b.n	8010b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	68b9      	ldr	r1, [r7, #8]
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f000 fbe0 	bl	801127c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f042 0208 	orr.w	r2, r2, #8
 8010aca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f022 0204 	bic.w	r2, r2, #4
 8010ada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	691a      	ldr	r2, [r3, #16]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	430a      	orrs	r2, r1
 8010aec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010aee:	e023      	b.n	8010b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	68b9      	ldr	r1, [r7, #8]
 8010af6:	4618      	mov	r0, r3
 8010af8:	f000 fc24 	bl	8011344 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010b0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	691b      	ldr	r3, [r3, #16]
 8010b26:	021a      	lsls	r2, r3, #8
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	430a      	orrs	r2, r1
 8010b2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010b30:	e002      	b.n	8010b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010b32:	2301      	movs	r3, #1
 8010b34:	75fb      	strb	r3, [r7, #23]
      break;
 8010b36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3718      	adds	r7, #24
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop

08010b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010b56:	2300      	movs	r3, #0
 8010b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	d101      	bne.n	8010b68 <HAL_TIM_ConfigClockSource+0x1c>
 8010b64:	2302      	movs	r3, #2
 8010b66:	e0b6      	b.n	8010cd6 <HAL_TIM_ConfigClockSource+0x18a>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2202      	movs	r2, #2
 8010b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8010b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	68ba      	ldr	r2, [r7, #8]
 8010b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ba4:	d03e      	beq.n	8010c24 <HAL_TIM_ConfigClockSource+0xd8>
 8010ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010baa:	f200 8087 	bhi.w	8010cbc <HAL_TIM_ConfigClockSource+0x170>
 8010bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bb2:	f000 8086 	beq.w	8010cc2 <HAL_TIM_ConfigClockSource+0x176>
 8010bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bba:	d87f      	bhi.n	8010cbc <HAL_TIM_ConfigClockSource+0x170>
 8010bbc:	2b70      	cmp	r3, #112	; 0x70
 8010bbe:	d01a      	beq.n	8010bf6 <HAL_TIM_ConfigClockSource+0xaa>
 8010bc0:	2b70      	cmp	r3, #112	; 0x70
 8010bc2:	d87b      	bhi.n	8010cbc <HAL_TIM_ConfigClockSource+0x170>
 8010bc4:	2b60      	cmp	r3, #96	; 0x60
 8010bc6:	d050      	beq.n	8010c6a <HAL_TIM_ConfigClockSource+0x11e>
 8010bc8:	2b60      	cmp	r3, #96	; 0x60
 8010bca:	d877      	bhi.n	8010cbc <HAL_TIM_ConfigClockSource+0x170>
 8010bcc:	2b50      	cmp	r3, #80	; 0x50
 8010bce:	d03c      	beq.n	8010c4a <HAL_TIM_ConfigClockSource+0xfe>
 8010bd0:	2b50      	cmp	r3, #80	; 0x50
 8010bd2:	d873      	bhi.n	8010cbc <HAL_TIM_ConfigClockSource+0x170>
 8010bd4:	2b40      	cmp	r3, #64	; 0x40
 8010bd6:	d058      	beq.n	8010c8a <HAL_TIM_ConfigClockSource+0x13e>
 8010bd8:	2b40      	cmp	r3, #64	; 0x40
 8010bda:	d86f      	bhi.n	8010cbc <HAL_TIM_ConfigClockSource+0x170>
 8010bdc:	2b30      	cmp	r3, #48	; 0x30
 8010bde:	d064      	beq.n	8010caa <HAL_TIM_ConfigClockSource+0x15e>
 8010be0:	2b30      	cmp	r3, #48	; 0x30
 8010be2:	d86b      	bhi.n	8010cbc <HAL_TIM_ConfigClockSource+0x170>
 8010be4:	2b20      	cmp	r3, #32
 8010be6:	d060      	beq.n	8010caa <HAL_TIM_ConfigClockSource+0x15e>
 8010be8:	2b20      	cmp	r3, #32
 8010bea:	d867      	bhi.n	8010cbc <HAL_TIM_ConfigClockSource+0x170>
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d05c      	beq.n	8010caa <HAL_TIM_ConfigClockSource+0x15e>
 8010bf0:	2b10      	cmp	r3, #16
 8010bf2:	d05a      	beq.n	8010caa <HAL_TIM_ConfigClockSource+0x15e>
 8010bf4:	e062      	b.n	8010cbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010c06:	f000 fda3 	bl	8011750 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	609a      	str	r2, [r3, #8]
      break;
 8010c22:	e04f      	b.n	8010cc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010c34:	f000 fd8c 	bl	8011750 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	689a      	ldr	r2, [r3, #8]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010c46:	609a      	str	r2, [r3, #8]
      break;
 8010c48:	e03c      	b.n	8010cc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c56:	461a      	mov	r2, r3
 8010c58:	f000 fc48 	bl	80114ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	2150      	movs	r1, #80	; 0x50
 8010c62:	4618      	mov	r0, r3
 8010c64:	f000 fd57 	bl	8011716 <TIM_ITRx_SetConfig>
      break;
 8010c68:	e02c      	b.n	8010cc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010c76:	461a      	mov	r2, r3
 8010c78:	f000 fca4 	bl	80115c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	2160      	movs	r1, #96	; 0x60
 8010c82:	4618      	mov	r0, r3
 8010c84:	f000 fd47 	bl	8011716 <TIM_ITRx_SetConfig>
      break;
 8010c88:	e01c      	b.n	8010cc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c96:	461a      	mov	r2, r3
 8010c98:	f000 fc28 	bl	80114ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	2140      	movs	r1, #64	; 0x40
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f000 fd37 	bl	8011716 <TIM_ITRx_SetConfig>
      break;
 8010ca8:	e00c      	b.n	8010cc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	4610      	mov	r0, r2
 8010cb6:	f000 fd2e 	bl	8011716 <TIM_ITRx_SetConfig>
      break;
 8010cba:	e003      	b.n	8010cc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8010cc0:	e000      	b.n	8010cc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8010cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3710      	adds	r7, #16
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010cde:	b480      	push	{r7}
 8010ce0:	b083      	sub	sp, #12
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010ce6:	bf00      	nop
 8010ce8:	370c      	adds	r7, #12
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr

08010cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010cf2:	b480      	push	{r7}
 8010cf4:	b083      	sub	sp, #12
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010cfa:	bf00      	nop
 8010cfc:	370c      	adds	r7, #12
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr

08010d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010d06:	b480      	push	{r7}
 8010d08:	b083      	sub	sp, #12
 8010d0a:	af00      	add	r7, sp, #0
 8010d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010d0e:	bf00      	nop
 8010d10:	370c      	adds	r7, #12
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr

08010d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010d1a:	b480      	push	{r7}
 8010d1c:	b083      	sub	sp, #12
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010d22:	bf00      	nop
 8010d24:	370c      	adds	r7, #12
 8010d26:	46bd      	mov	sp, r7
 8010d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2c:	4770      	bx	lr
	...

08010d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	4a40      	ldr	r2, [pc, #256]	; (8010e44 <TIM_Base_SetConfig+0x114>)
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d013      	beq.n	8010d70 <TIM_Base_SetConfig+0x40>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d4e:	d00f      	beq.n	8010d70 <TIM_Base_SetConfig+0x40>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	4a3d      	ldr	r2, [pc, #244]	; (8010e48 <TIM_Base_SetConfig+0x118>)
 8010d54:	4293      	cmp	r3, r2
 8010d56:	d00b      	beq.n	8010d70 <TIM_Base_SetConfig+0x40>
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	4a3c      	ldr	r2, [pc, #240]	; (8010e4c <TIM_Base_SetConfig+0x11c>)
 8010d5c:	4293      	cmp	r3, r2
 8010d5e:	d007      	beq.n	8010d70 <TIM_Base_SetConfig+0x40>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	4a3b      	ldr	r2, [pc, #236]	; (8010e50 <TIM_Base_SetConfig+0x120>)
 8010d64:	4293      	cmp	r3, r2
 8010d66:	d003      	beq.n	8010d70 <TIM_Base_SetConfig+0x40>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	4a3a      	ldr	r2, [pc, #232]	; (8010e54 <TIM_Base_SetConfig+0x124>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d108      	bne.n	8010d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	685b      	ldr	r3, [r3, #4]
 8010d7c:	68fa      	ldr	r2, [r7, #12]
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	4a2f      	ldr	r2, [pc, #188]	; (8010e44 <TIM_Base_SetConfig+0x114>)
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d01f      	beq.n	8010dca <TIM_Base_SetConfig+0x9a>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d90:	d01b      	beq.n	8010dca <TIM_Base_SetConfig+0x9a>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	4a2c      	ldr	r2, [pc, #176]	; (8010e48 <TIM_Base_SetConfig+0x118>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d017      	beq.n	8010dca <TIM_Base_SetConfig+0x9a>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	4a2b      	ldr	r2, [pc, #172]	; (8010e4c <TIM_Base_SetConfig+0x11c>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d013      	beq.n	8010dca <TIM_Base_SetConfig+0x9a>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	4a2a      	ldr	r2, [pc, #168]	; (8010e50 <TIM_Base_SetConfig+0x120>)
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d00f      	beq.n	8010dca <TIM_Base_SetConfig+0x9a>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	4a29      	ldr	r2, [pc, #164]	; (8010e54 <TIM_Base_SetConfig+0x124>)
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d00b      	beq.n	8010dca <TIM_Base_SetConfig+0x9a>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4a28      	ldr	r2, [pc, #160]	; (8010e58 <TIM_Base_SetConfig+0x128>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d007      	beq.n	8010dca <TIM_Base_SetConfig+0x9a>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4a27      	ldr	r2, [pc, #156]	; (8010e5c <TIM_Base_SetConfig+0x12c>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d003      	beq.n	8010dca <TIM_Base_SetConfig+0x9a>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4a26      	ldr	r2, [pc, #152]	; (8010e60 <TIM_Base_SetConfig+0x130>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d108      	bne.n	8010ddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	4313      	orrs	r3, r2
 8010dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	695b      	ldr	r3, [r3, #20]
 8010de6:	4313      	orrs	r3, r2
 8010de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	68fa      	ldr	r2, [r7, #12]
 8010dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	689a      	ldr	r2, [r3, #8]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	4a10      	ldr	r2, [pc, #64]	; (8010e44 <TIM_Base_SetConfig+0x114>)
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d00f      	beq.n	8010e28 <TIM_Base_SetConfig+0xf8>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	4a12      	ldr	r2, [pc, #72]	; (8010e54 <TIM_Base_SetConfig+0x124>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d00b      	beq.n	8010e28 <TIM_Base_SetConfig+0xf8>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	4a11      	ldr	r2, [pc, #68]	; (8010e58 <TIM_Base_SetConfig+0x128>)
 8010e14:	4293      	cmp	r3, r2
 8010e16:	d007      	beq.n	8010e28 <TIM_Base_SetConfig+0xf8>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	4a10      	ldr	r2, [pc, #64]	; (8010e5c <TIM_Base_SetConfig+0x12c>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d003      	beq.n	8010e28 <TIM_Base_SetConfig+0xf8>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	4a0f      	ldr	r2, [pc, #60]	; (8010e60 <TIM_Base_SetConfig+0x130>)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d103      	bne.n	8010e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	691a      	ldr	r2, [r3, #16]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2201      	movs	r2, #1
 8010e34:	615a      	str	r2, [r3, #20]
}
 8010e36:	bf00      	nop
 8010e38:	3714      	adds	r7, #20
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop
 8010e44:	40012c00 	.word	0x40012c00
 8010e48:	40000400 	.word	0x40000400
 8010e4c:	40000800 	.word	0x40000800
 8010e50:	40000c00 	.word	0x40000c00
 8010e54:	40013400 	.word	0x40013400
 8010e58:	40014000 	.word	0x40014000
 8010e5c:	40014400 	.word	0x40014400
 8010e60:	40014800 	.word	0x40014800

08010e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b087      	sub	sp, #28
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6a1b      	ldr	r3, [r3, #32]
 8010e72:	f023 0201 	bic.w	r2, r3, #1
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6a1b      	ldr	r3, [r3, #32]
 8010e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	699b      	ldr	r3, [r3, #24]
 8010e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f023 0303 	bic.w	r3, r3, #3
 8010e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	68fa      	ldr	r2, [r7, #12]
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	f023 0302 	bic.w	r3, r3, #2
 8010eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	689b      	ldr	r3, [r3, #8]
 8010eb6:	697a      	ldr	r2, [r7, #20]
 8010eb8:	4313      	orrs	r3, r2
 8010eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	4a2c      	ldr	r2, [pc, #176]	; (8010f70 <TIM_OC1_SetConfig+0x10c>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d00f      	beq.n	8010ee4 <TIM_OC1_SetConfig+0x80>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4a2b      	ldr	r2, [pc, #172]	; (8010f74 <TIM_OC1_SetConfig+0x110>)
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d00b      	beq.n	8010ee4 <TIM_OC1_SetConfig+0x80>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4a2a      	ldr	r2, [pc, #168]	; (8010f78 <TIM_OC1_SetConfig+0x114>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d007      	beq.n	8010ee4 <TIM_OC1_SetConfig+0x80>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	4a29      	ldr	r2, [pc, #164]	; (8010f7c <TIM_OC1_SetConfig+0x118>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d003      	beq.n	8010ee4 <TIM_OC1_SetConfig+0x80>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4a28      	ldr	r2, [pc, #160]	; (8010f80 <TIM_OC1_SetConfig+0x11c>)
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d10c      	bne.n	8010efe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	f023 0308 	bic.w	r3, r3, #8
 8010eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	697a      	ldr	r2, [r7, #20]
 8010ef2:	4313      	orrs	r3, r2
 8010ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	f023 0304 	bic.w	r3, r3, #4
 8010efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	4a1b      	ldr	r2, [pc, #108]	; (8010f70 <TIM_OC1_SetConfig+0x10c>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d00f      	beq.n	8010f26 <TIM_OC1_SetConfig+0xc2>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4a1a      	ldr	r2, [pc, #104]	; (8010f74 <TIM_OC1_SetConfig+0x110>)
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	d00b      	beq.n	8010f26 <TIM_OC1_SetConfig+0xc2>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	4a19      	ldr	r2, [pc, #100]	; (8010f78 <TIM_OC1_SetConfig+0x114>)
 8010f12:	4293      	cmp	r3, r2
 8010f14:	d007      	beq.n	8010f26 <TIM_OC1_SetConfig+0xc2>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4a18      	ldr	r2, [pc, #96]	; (8010f7c <TIM_OC1_SetConfig+0x118>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d003      	beq.n	8010f26 <TIM_OC1_SetConfig+0xc2>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	4a17      	ldr	r2, [pc, #92]	; (8010f80 <TIM_OC1_SetConfig+0x11c>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d111      	bne.n	8010f4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	695b      	ldr	r3, [r3, #20]
 8010f3a:	693a      	ldr	r2, [r7, #16]
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	699b      	ldr	r3, [r3, #24]
 8010f44:	693a      	ldr	r2, [r7, #16]
 8010f46:	4313      	orrs	r3, r2
 8010f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	693a      	ldr	r2, [r7, #16]
 8010f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	68fa      	ldr	r2, [r7, #12]
 8010f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	685a      	ldr	r2, [r3, #4]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	697a      	ldr	r2, [r7, #20]
 8010f62:	621a      	str	r2, [r3, #32]
}
 8010f64:	bf00      	nop
 8010f66:	371c      	adds	r7, #28
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr
 8010f70:	40012c00 	.word	0x40012c00
 8010f74:	40013400 	.word	0x40013400
 8010f78:	40014000 	.word	0x40014000
 8010f7c:	40014400 	.word	0x40014400
 8010f80:	40014800 	.word	0x40014800

08010f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b087      	sub	sp, #28
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6a1b      	ldr	r3, [r3, #32]
 8010f92:	f023 0210 	bic.w	r2, r3, #16
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6a1b      	ldr	r3, [r3, #32]
 8010f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	699b      	ldr	r3, [r3, #24]
 8010faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	021b      	lsls	r3, r3, #8
 8010fc6:	68fa      	ldr	r2, [r7, #12]
 8010fc8:	4313      	orrs	r3, r2
 8010fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	f023 0320 	bic.w	r3, r3, #32
 8010fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	011b      	lsls	r3, r3, #4
 8010fda:	697a      	ldr	r2, [r7, #20]
 8010fdc:	4313      	orrs	r3, r2
 8010fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4a28      	ldr	r2, [pc, #160]	; (8011084 <TIM_OC2_SetConfig+0x100>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d003      	beq.n	8010ff0 <TIM_OC2_SetConfig+0x6c>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	4a27      	ldr	r2, [pc, #156]	; (8011088 <TIM_OC2_SetConfig+0x104>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d10d      	bne.n	801100c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	011b      	lsls	r3, r3, #4
 8010ffe:	697a      	ldr	r2, [r7, #20]
 8011000:	4313      	orrs	r3, r2
 8011002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801100a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	4a1d      	ldr	r2, [pc, #116]	; (8011084 <TIM_OC2_SetConfig+0x100>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d00f      	beq.n	8011034 <TIM_OC2_SetConfig+0xb0>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	4a1c      	ldr	r2, [pc, #112]	; (8011088 <TIM_OC2_SetConfig+0x104>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d00b      	beq.n	8011034 <TIM_OC2_SetConfig+0xb0>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4a1b      	ldr	r2, [pc, #108]	; (801108c <TIM_OC2_SetConfig+0x108>)
 8011020:	4293      	cmp	r3, r2
 8011022:	d007      	beq.n	8011034 <TIM_OC2_SetConfig+0xb0>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	4a1a      	ldr	r2, [pc, #104]	; (8011090 <TIM_OC2_SetConfig+0x10c>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d003      	beq.n	8011034 <TIM_OC2_SetConfig+0xb0>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	4a19      	ldr	r2, [pc, #100]	; (8011094 <TIM_OC2_SetConfig+0x110>)
 8011030:	4293      	cmp	r3, r2
 8011032:	d113      	bne.n	801105c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801103a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	695b      	ldr	r3, [r3, #20]
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	693a      	ldr	r2, [r7, #16]
 801104c:	4313      	orrs	r3, r2
 801104e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	699b      	ldr	r3, [r3, #24]
 8011054:	009b      	lsls	r3, r3, #2
 8011056:	693a      	ldr	r2, [r7, #16]
 8011058:	4313      	orrs	r3, r2
 801105a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	693a      	ldr	r2, [r7, #16]
 8011060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	68fa      	ldr	r2, [r7, #12]
 8011066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	685a      	ldr	r2, [r3, #4]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	697a      	ldr	r2, [r7, #20]
 8011074:	621a      	str	r2, [r3, #32]
}
 8011076:	bf00      	nop
 8011078:	371c      	adds	r7, #28
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop
 8011084:	40012c00 	.word	0x40012c00
 8011088:	40013400 	.word	0x40013400
 801108c:	40014000 	.word	0x40014000
 8011090:	40014400 	.word	0x40014400
 8011094:	40014800 	.word	0x40014800

08011098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011098:	b480      	push	{r7}
 801109a:	b087      	sub	sp, #28
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6a1b      	ldr	r3, [r3, #32]
 80110a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6a1b      	ldr	r3, [r3, #32]
 80110b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	69db      	ldr	r3, [r3, #28]
 80110be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80110c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f023 0303 	bic.w	r3, r3, #3
 80110d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	4313      	orrs	r3, r2
 80110dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80110e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	689b      	ldr	r3, [r3, #8]
 80110ea:	021b      	lsls	r3, r3, #8
 80110ec:	697a      	ldr	r2, [r7, #20]
 80110ee:	4313      	orrs	r3, r2
 80110f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4a27      	ldr	r2, [pc, #156]	; (8011194 <TIM_OC3_SetConfig+0xfc>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d003      	beq.n	8011102 <TIM_OC3_SetConfig+0x6a>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4a26      	ldr	r2, [pc, #152]	; (8011198 <TIM_OC3_SetConfig+0x100>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d10d      	bne.n	801111e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	021b      	lsls	r3, r3, #8
 8011110:	697a      	ldr	r2, [r7, #20]
 8011112:	4313      	orrs	r3, r2
 8011114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801111c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4a1c      	ldr	r2, [pc, #112]	; (8011194 <TIM_OC3_SetConfig+0xfc>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d00f      	beq.n	8011146 <TIM_OC3_SetConfig+0xae>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4a1b      	ldr	r2, [pc, #108]	; (8011198 <TIM_OC3_SetConfig+0x100>)
 801112a:	4293      	cmp	r3, r2
 801112c:	d00b      	beq.n	8011146 <TIM_OC3_SetConfig+0xae>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4a1a      	ldr	r2, [pc, #104]	; (801119c <TIM_OC3_SetConfig+0x104>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d007      	beq.n	8011146 <TIM_OC3_SetConfig+0xae>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	4a19      	ldr	r2, [pc, #100]	; (80111a0 <TIM_OC3_SetConfig+0x108>)
 801113a:	4293      	cmp	r3, r2
 801113c:	d003      	beq.n	8011146 <TIM_OC3_SetConfig+0xae>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	4a18      	ldr	r2, [pc, #96]	; (80111a4 <TIM_OC3_SetConfig+0x10c>)
 8011142:	4293      	cmp	r3, r2
 8011144:	d113      	bne.n	801116e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801114c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	695b      	ldr	r3, [r3, #20]
 801115a:	011b      	lsls	r3, r3, #4
 801115c:	693a      	ldr	r2, [r7, #16]
 801115e:	4313      	orrs	r3, r2
 8011160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	699b      	ldr	r3, [r3, #24]
 8011166:	011b      	lsls	r3, r3, #4
 8011168:	693a      	ldr	r2, [r7, #16]
 801116a:	4313      	orrs	r3, r2
 801116c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	693a      	ldr	r2, [r7, #16]
 8011172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	68fa      	ldr	r2, [r7, #12]
 8011178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	685a      	ldr	r2, [r3, #4]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	697a      	ldr	r2, [r7, #20]
 8011186:	621a      	str	r2, [r3, #32]
}
 8011188:	bf00      	nop
 801118a:	371c      	adds	r7, #28
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr
 8011194:	40012c00 	.word	0x40012c00
 8011198:	40013400 	.word	0x40013400
 801119c:	40014000 	.word	0x40014000
 80111a0:	40014400 	.word	0x40014400
 80111a4:	40014800 	.word	0x40014800

080111a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b087      	sub	sp, #28
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6a1b      	ldr	r3, [r3, #32]
 80111b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6a1b      	ldr	r3, [r3, #32]
 80111c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	69db      	ldr	r3, [r3, #28]
 80111ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80111d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80111e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	021b      	lsls	r3, r3, #8
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	4313      	orrs	r3, r2
 80111ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80111f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	689b      	ldr	r3, [r3, #8]
 80111fc:	031b      	lsls	r3, r3, #12
 80111fe:	693a      	ldr	r2, [r7, #16]
 8011200:	4313      	orrs	r3, r2
 8011202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	4a18      	ldr	r2, [pc, #96]	; (8011268 <TIM_OC4_SetConfig+0xc0>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d00f      	beq.n	801122c <TIM_OC4_SetConfig+0x84>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4a17      	ldr	r2, [pc, #92]	; (801126c <TIM_OC4_SetConfig+0xc4>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d00b      	beq.n	801122c <TIM_OC4_SetConfig+0x84>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	4a16      	ldr	r2, [pc, #88]	; (8011270 <TIM_OC4_SetConfig+0xc8>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d007      	beq.n	801122c <TIM_OC4_SetConfig+0x84>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	4a15      	ldr	r2, [pc, #84]	; (8011274 <TIM_OC4_SetConfig+0xcc>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d003      	beq.n	801122c <TIM_OC4_SetConfig+0x84>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4a14      	ldr	r2, [pc, #80]	; (8011278 <TIM_OC4_SetConfig+0xd0>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d109      	bne.n	8011240 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	695b      	ldr	r3, [r3, #20]
 8011238:	019b      	lsls	r3, r3, #6
 801123a:	697a      	ldr	r2, [r7, #20]
 801123c:	4313      	orrs	r3, r2
 801123e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	697a      	ldr	r2, [r7, #20]
 8011244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	68fa      	ldr	r2, [r7, #12]
 801124a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	685a      	ldr	r2, [r3, #4]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	693a      	ldr	r2, [r7, #16]
 8011258:	621a      	str	r2, [r3, #32]
}
 801125a:	bf00      	nop
 801125c:	371c      	adds	r7, #28
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr
 8011266:	bf00      	nop
 8011268:	40012c00 	.word	0x40012c00
 801126c:	40013400 	.word	0x40013400
 8011270:	40014000 	.word	0x40014000
 8011274:	40014400 	.word	0x40014400
 8011278:	40014800 	.word	0x40014800

0801127c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801127c:	b480      	push	{r7}
 801127e:	b087      	sub	sp, #28
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6a1b      	ldr	r3, [r3, #32]
 801128a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6a1b      	ldr	r3, [r3, #32]
 8011296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80112aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	68fa      	ldr	r2, [r7, #12]
 80112b6:	4313      	orrs	r3, r2
 80112b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80112c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	689b      	ldr	r3, [r3, #8]
 80112c6:	041b      	lsls	r3, r3, #16
 80112c8:	693a      	ldr	r2, [r7, #16]
 80112ca:	4313      	orrs	r3, r2
 80112cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4a17      	ldr	r2, [pc, #92]	; (8011330 <TIM_OC5_SetConfig+0xb4>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d00f      	beq.n	80112f6 <TIM_OC5_SetConfig+0x7a>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a16      	ldr	r2, [pc, #88]	; (8011334 <TIM_OC5_SetConfig+0xb8>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d00b      	beq.n	80112f6 <TIM_OC5_SetConfig+0x7a>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4a15      	ldr	r2, [pc, #84]	; (8011338 <TIM_OC5_SetConfig+0xbc>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d007      	beq.n	80112f6 <TIM_OC5_SetConfig+0x7a>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4a14      	ldr	r2, [pc, #80]	; (801133c <TIM_OC5_SetConfig+0xc0>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d003      	beq.n	80112f6 <TIM_OC5_SetConfig+0x7a>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4a13      	ldr	r2, [pc, #76]	; (8011340 <TIM_OC5_SetConfig+0xc4>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d109      	bne.n	801130a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80112fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	695b      	ldr	r3, [r3, #20]
 8011302:	021b      	lsls	r3, r3, #8
 8011304:	697a      	ldr	r2, [r7, #20]
 8011306:	4313      	orrs	r3, r2
 8011308:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	697a      	ldr	r2, [r7, #20]
 801130e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	68fa      	ldr	r2, [r7, #12]
 8011314:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	685a      	ldr	r2, [r3, #4]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	693a      	ldr	r2, [r7, #16]
 8011322:	621a      	str	r2, [r3, #32]
}
 8011324:	bf00      	nop
 8011326:	371c      	adds	r7, #28
 8011328:	46bd      	mov	sp, r7
 801132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132e:	4770      	bx	lr
 8011330:	40012c00 	.word	0x40012c00
 8011334:	40013400 	.word	0x40013400
 8011338:	40014000 	.word	0x40014000
 801133c:	40014400 	.word	0x40014400
 8011340:	40014800 	.word	0x40014800

08011344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011344:	b480      	push	{r7}
 8011346:	b087      	sub	sp, #28
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6a1b      	ldr	r3, [r3, #32]
 8011352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6a1b      	ldr	r3, [r3, #32]
 801135e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801136a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	021b      	lsls	r3, r3, #8
 801137e:	68fa      	ldr	r2, [r7, #12]
 8011380:	4313      	orrs	r3, r2
 8011382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801138a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	051b      	lsls	r3, r3, #20
 8011392:	693a      	ldr	r2, [r7, #16]
 8011394:	4313      	orrs	r3, r2
 8011396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4a18      	ldr	r2, [pc, #96]	; (80113fc <TIM_OC6_SetConfig+0xb8>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d00f      	beq.n	80113c0 <TIM_OC6_SetConfig+0x7c>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4a17      	ldr	r2, [pc, #92]	; (8011400 <TIM_OC6_SetConfig+0xbc>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d00b      	beq.n	80113c0 <TIM_OC6_SetConfig+0x7c>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	4a16      	ldr	r2, [pc, #88]	; (8011404 <TIM_OC6_SetConfig+0xc0>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d007      	beq.n	80113c0 <TIM_OC6_SetConfig+0x7c>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4a15      	ldr	r2, [pc, #84]	; (8011408 <TIM_OC6_SetConfig+0xc4>)
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d003      	beq.n	80113c0 <TIM_OC6_SetConfig+0x7c>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	4a14      	ldr	r2, [pc, #80]	; (801140c <TIM_OC6_SetConfig+0xc8>)
 80113bc:	4293      	cmp	r3, r2
 80113be:	d109      	bne.n	80113d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80113c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	695b      	ldr	r3, [r3, #20]
 80113cc:	029b      	lsls	r3, r3, #10
 80113ce:	697a      	ldr	r2, [r7, #20]
 80113d0:	4313      	orrs	r3, r2
 80113d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	697a      	ldr	r2, [r7, #20]
 80113d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	68fa      	ldr	r2, [r7, #12]
 80113de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	685a      	ldr	r2, [r3, #4]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	693a      	ldr	r2, [r7, #16]
 80113ec:	621a      	str	r2, [r3, #32]
}
 80113ee:	bf00      	nop
 80113f0:	371c      	adds	r7, #28
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr
 80113fa:	bf00      	nop
 80113fc:	40012c00 	.word	0x40012c00
 8011400:	40013400 	.word	0x40013400
 8011404:	40014000 	.word	0x40014000
 8011408:	40014400 	.word	0x40014400
 801140c:	40014800 	.word	0x40014800

08011410 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8011410:	b480      	push	{r7}
 8011412:	b087      	sub	sp, #28
 8011414:	af00      	add	r7, sp, #0
 8011416:	60f8      	str	r0, [r7, #12]
 8011418:	60b9      	str	r1, [r7, #8]
 801141a:	607a      	str	r2, [r7, #4]
 801141c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	6a1b      	ldr	r3, [r3, #32]
 8011422:	f023 0201 	bic.w	r2, r3, #1
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	699b      	ldr	r3, [r3, #24]
 801142e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	6a1b      	ldr	r3, [r3, #32]
 8011434:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	4a26      	ldr	r2, [pc, #152]	; (80114d4 <TIM_TI1_SetConfig+0xc4>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d017      	beq.n	801146e <TIM_TI1_SetConfig+0x5e>
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011444:	d013      	beq.n	801146e <TIM_TI1_SetConfig+0x5e>
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	4a23      	ldr	r2, [pc, #140]	; (80114d8 <TIM_TI1_SetConfig+0xc8>)
 801144a:	4293      	cmp	r3, r2
 801144c:	d00f      	beq.n	801146e <TIM_TI1_SetConfig+0x5e>
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	4a22      	ldr	r2, [pc, #136]	; (80114dc <TIM_TI1_SetConfig+0xcc>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d00b      	beq.n	801146e <TIM_TI1_SetConfig+0x5e>
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	4a21      	ldr	r2, [pc, #132]	; (80114e0 <TIM_TI1_SetConfig+0xd0>)
 801145a:	4293      	cmp	r3, r2
 801145c:	d007      	beq.n	801146e <TIM_TI1_SetConfig+0x5e>
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	4a20      	ldr	r2, [pc, #128]	; (80114e4 <TIM_TI1_SetConfig+0xd4>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d003      	beq.n	801146e <TIM_TI1_SetConfig+0x5e>
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	4a1f      	ldr	r2, [pc, #124]	; (80114e8 <TIM_TI1_SetConfig+0xd8>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d101      	bne.n	8011472 <TIM_TI1_SetConfig+0x62>
 801146e:	2301      	movs	r3, #1
 8011470:	e000      	b.n	8011474 <TIM_TI1_SetConfig+0x64>
 8011472:	2300      	movs	r3, #0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d008      	beq.n	801148a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	f023 0303 	bic.w	r3, r3, #3
 801147e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8011480:	697a      	ldr	r2, [r7, #20]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4313      	orrs	r3, r2
 8011486:	617b      	str	r3, [r7, #20]
 8011488:	e003      	b.n	8011492 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	f043 0301 	orr.w	r3, r3, #1
 8011490:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	011b      	lsls	r3, r3, #4
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	697a      	ldr	r2, [r7, #20]
 80114a2:	4313      	orrs	r3, r2
 80114a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	f023 030a 	bic.w	r3, r3, #10
 80114ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	f003 030a 	and.w	r3, r3, #10
 80114b4:	693a      	ldr	r2, [r7, #16]
 80114b6:	4313      	orrs	r3, r2
 80114b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	697a      	ldr	r2, [r7, #20]
 80114be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	693a      	ldr	r2, [r7, #16]
 80114c4:	621a      	str	r2, [r3, #32]
}
 80114c6:	bf00      	nop
 80114c8:	371c      	adds	r7, #28
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	40012c00 	.word	0x40012c00
 80114d8:	40000400 	.word	0x40000400
 80114dc:	40000800 	.word	0x40000800
 80114e0:	40000c00 	.word	0x40000c00
 80114e4:	40013400 	.word	0x40013400
 80114e8:	40014000 	.word	0x40014000

080114ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b087      	sub	sp, #28
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	60f8      	str	r0, [r7, #12]
 80114f4:	60b9      	str	r1, [r7, #8]
 80114f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	6a1b      	ldr	r3, [r3, #32]
 80114fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	6a1b      	ldr	r3, [r3, #32]
 8011502:	f023 0201 	bic.w	r2, r3, #1
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	699b      	ldr	r3, [r3, #24]
 801150e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	011b      	lsls	r3, r3, #4
 801151c:	693a      	ldr	r2, [r7, #16]
 801151e:	4313      	orrs	r3, r2
 8011520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	f023 030a 	bic.w	r3, r3, #10
 8011528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801152a:	697a      	ldr	r2, [r7, #20]
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	4313      	orrs	r3, r2
 8011530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	693a      	ldr	r2, [r7, #16]
 8011536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	697a      	ldr	r2, [r7, #20]
 801153c:	621a      	str	r2, [r3, #32]
}
 801153e:	bf00      	nop
 8011540:	371c      	adds	r7, #28
 8011542:	46bd      	mov	sp, r7
 8011544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011548:	4770      	bx	lr

0801154a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801154a:	b480      	push	{r7}
 801154c:	b087      	sub	sp, #28
 801154e:	af00      	add	r7, sp, #0
 8011550:	60f8      	str	r0, [r7, #12]
 8011552:	60b9      	str	r1, [r7, #8]
 8011554:	607a      	str	r2, [r7, #4]
 8011556:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	6a1b      	ldr	r3, [r3, #32]
 801155c:	f023 0210 	bic.w	r2, r3, #16
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	699b      	ldr	r3, [r3, #24]
 8011568:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	6a1b      	ldr	r3, [r3, #32]
 801156e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011576:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	021b      	lsls	r3, r3, #8
 801157c:	697a      	ldr	r2, [r7, #20]
 801157e:	4313      	orrs	r3, r2
 8011580:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	031b      	lsls	r3, r3, #12
 801158e:	b29b      	uxth	r3, r3
 8011590:	697a      	ldr	r2, [r7, #20]
 8011592:	4313      	orrs	r3, r2
 8011594:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801159c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	011b      	lsls	r3, r3, #4
 80115a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80115a6:	693a      	ldr	r2, [r7, #16]
 80115a8:	4313      	orrs	r3, r2
 80115aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	697a      	ldr	r2, [r7, #20]
 80115b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	693a      	ldr	r2, [r7, #16]
 80115b6:	621a      	str	r2, [r3, #32]
}
 80115b8:	bf00      	nop
 80115ba:	371c      	adds	r7, #28
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b087      	sub	sp, #28
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	6a1b      	ldr	r3, [r3, #32]
 80115d4:	f023 0210 	bic.w	r2, r3, #16
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	699b      	ldr	r3, [r3, #24]
 80115e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	6a1b      	ldr	r3, [r3, #32]
 80115e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80115ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	031b      	lsls	r3, r3, #12
 80115f4:	697a      	ldr	r2, [r7, #20]
 80115f6:	4313      	orrs	r3, r2
 80115f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011600:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	011b      	lsls	r3, r3, #4
 8011606:	693a      	ldr	r2, [r7, #16]
 8011608:	4313      	orrs	r3, r2
 801160a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	697a      	ldr	r2, [r7, #20]
 8011610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	693a      	ldr	r2, [r7, #16]
 8011616:	621a      	str	r2, [r3, #32]
}
 8011618:	bf00      	nop
 801161a:	371c      	adds	r7, #28
 801161c:	46bd      	mov	sp, r7
 801161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011622:	4770      	bx	lr

08011624 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011624:	b480      	push	{r7}
 8011626:	b087      	sub	sp, #28
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]
 8011630:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	6a1b      	ldr	r3, [r3, #32]
 8011636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	69db      	ldr	r3, [r3, #28]
 8011642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	6a1b      	ldr	r3, [r3, #32]
 8011648:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	f023 0303 	bic.w	r3, r3, #3
 8011650:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8011652:	697a      	ldr	r2, [r7, #20]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	4313      	orrs	r3, r2
 8011658:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011660:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	011b      	lsls	r3, r3, #4
 8011666:	b2db      	uxtb	r3, r3
 8011668:	697a      	ldr	r2, [r7, #20]
 801166a:	4313      	orrs	r3, r2
 801166c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8011674:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	021b      	lsls	r3, r3, #8
 801167a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801167e:	693a      	ldr	r2, [r7, #16]
 8011680:	4313      	orrs	r3, r2
 8011682:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	697a      	ldr	r2, [r7, #20]
 8011688:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	693a      	ldr	r2, [r7, #16]
 801168e:	621a      	str	r2, [r3, #32]
}
 8011690:	bf00      	nop
 8011692:	371c      	adds	r7, #28
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801169c:	b480      	push	{r7}
 801169e:	b087      	sub	sp, #28
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	607a      	str	r2, [r7, #4]
 80116a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	6a1b      	ldr	r3, [r3, #32]
 80116ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	69db      	ldr	r3, [r3, #28]
 80116ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	6a1b      	ldr	r3, [r3, #32]
 80116c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80116c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	021b      	lsls	r3, r3, #8
 80116ce:	697a      	ldr	r2, [r7, #20]
 80116d0:	4313      	orrs	r3, r2
 80116d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80116da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	031b      	lsls	r3, r3, #12
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	697a      	ldr	r2, [r7, #20]
 80116e4:	4313      	orrs	r3, r2
 80116e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80116ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	031b      	lsls	r3, r3, #12
 80116f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80116f8:	693a      	ldr	r2, [r7, #16]
 80116fa:	4313      	orrs	r3, r2
 80116fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	697a      	ldr	r2, [r7, #20]
 8011702:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	693a      	ldr	r2, [r7, #16]
 8011708:	621a      	str	r2, [r3, #32]
}
 801170a:	bf00      	nop
 801170c:	371c      	adds	r7, #28
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr

08011716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011716:	b480      	push	{r7}
 8011718:	b085      	sub	sp, #20
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
 801171e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	689b      	ldr	r3, [r3, #8]
 8011724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801172c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011732:	683a      	ldr	r2, [r7, #0]
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	4313      	orrs	r3, r2
 8011738:	f043 0307 	orr.w	r3, r3, #7
 801173c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	68fa      	ldr	r2, [r7, #12]
 8011742:	609a      	str	r2, [r3, #8]
}
 8011744:	bf00      	nop
 8011746:	3714      	adds	r7, #20
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011750:	b480      	push	{r7}
 8011752:	b087      	sub	sp, #28
 8011754:	af00      	add	r7, sp, #0
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	60b9      	str	r1, [r7, #8]
 801175a:	607a      	str	r2, [r7, #4]
 801175c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801176a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	021a      	lsls	r2, r3, #8
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	431a      	orrs	r2, r3
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	4313      	orrs	r3, r2
 8011778:	697a      	ldr	r2, [r7, #20]
 801177a:	4313      	orrs	r3, r2
 801177c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	697a      	ldr	r2, [r7, #20]
 8011782:	609a      	str	r2, [r3, #8]
}
 8011784:	bf00      	nop
 8011786:	371c      	adds	r7, #28
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr

08011790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011790:	b480      	push	{r7}
 8011792:	b087      	sub	sp, #28
 8011794:	af00      	add	r7, sp, #0
 8011796:	60f8      	str	r0, [r7, #12]
 8011798:	60b9      	str	r1, [r7, #8]
 801179a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	f003 031f 	and.w	r3, r3, #31
 80117a2:	2201      	movs	r2, #1
 80117a4:	fa02 f303 	lsl.w	r3, r2, r3
 80117a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	6a1a      	ldr	r2, [r3, #32]
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	43db      	mvns	r3, r3
 80117b2:	401a      	ands	r2, r3
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	6a1a      	ldr	r2, [r3, #32]
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	f003 031f 	and.w	r3, r3, #31
 80117c2:	6879      	ldr	r1, [r7, #4]
 80117c4:	fa01 f303 	lsl.w	r3, r1, r3
 80117c8:	431a      	orrs	r2, r3
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	621a      	str	r2, [r3, #32]
}
 80117ce:	bf00      	nop
 80117d0:	371c      	adds	r7, #28
 80117d2:	46bd      	mov	sp, r7
 80117d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d8:	4770      	bx	lr
	...

080117dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80117dc:	b480      	push	{r7}
 80117de:	b085      	sub	sp, #20
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d101      	bne.n	80117f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80117f0:	2302      	movs	r3, #2
 80117f2:	e068      	b.n	80118c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2201      	movs	r2, #1
 80117f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2202      	movs	r2, #2
 8011800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	689b      	ldr	r3, [r3, #8]
 8011812:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4a2e      	ldr	r2, [pc, #184]	; (80118d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d004      	beq.n	8011828 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	4a2d      	ldr	r2, [pc, #180]	; (80118d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d108      	bne.n	801183a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801182e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	68fa      	ldr	r2, [r7, #12]
 8011836:	4313      	orrs	r3, r2
 8011838:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011840:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	68fa      	ldr	r2, [r7, #12]
 8011848:	4313      	orrs	r3, r2
 801184a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4a1e      	ldr	r2, [pc, #120]	; (80118d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801185a:	4293      	cmp	r3, r2
 801185c:	d01d      	beq.n	801189a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011866:	d018      	beq.n	801189a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4a1b      	ldr	r2, [pc, #108]	; (80118dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d013      	beq.n	801189a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	4a1a      	ldr	r2, [pc, #104]	; (80118e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011878:	4293      	cmp	r3, r2
 801187a:	d00e      	beq.n	801189a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	4a18      	ldr	r2, [pc, #96]	; (80118e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011882:	4293      	cmp	r3, r2
 8011884:	d009      	beq.n	801189a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	4a13      	ldr	r2, [pc, #76]	; (80118d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801188c:	4293      	cmp	r3, r2
 801188e:	d004      	beq.n	801189a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	4a14      	ldr	r2, [pc, #80]	; (80118e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011896:	4293      	cmp	r3, r2
 8011898:	d10c      	bne.n	80118b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	689b      	ldr	r3, [r3, #8]
 80118a6:	68ba      	ldr	r2, [r7, #8]
 80118a8:	4313      	orrs	r3, r2
 80118aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	68ba      	ldr	r2, [r7, #8]
 80118b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2201      	movs	r2, #1
 80118b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80118c4:	2300      	movs	r3, #0
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3714      	adds	r7, #20
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
 80118d4:	40012c00 	.word	0x40012c00
 80118d8:	40013400 	.word	0x40013400
 80118dc:	40000400 	.word	0x40000400
 80118e0:	40000800 	.word	0x40000800
 80118e4:	40000c00 	.word	0x40000c00
 80118e8:	40014000 	.word	0x40014000

080118ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b085      	sub	sp, #20
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80118f6:	2300      	movs	r3, #0
 80118f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011900:	2b01      	cmp	r3, #1
 8011902:	d101      	bne.n	8011908 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011904:	2302      	movs	r3, #2
 8011906:	e087      	b.n	8011a18 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2201      	movs	r2, #1
 801190c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	68db      	ldr	r3, [r3, #12]
 801191a:	4313      	orrs	r3, r2
 801191c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	4313      	orrs	r3, r2
 801192a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	685b      	ldr	r3, [r3, #4]
 8011936:	4313      	orrs	r3, r2
 8011938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4313      	orrs	r3, r2
 8011946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	691b      	ldr	r3, [r3, #16]
 8011952:	4313      	orrs	r3, r2
 8011954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	695b      	ldr	r3, [r3, #20]
 8011960:	4313      	orrs	r3, r2
 8011962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801196e:	4313      	orrs	r3, r2
 8011970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	699b      	ldr	r3, [r3, #24]
 801197c:	041b      	lsls	r3, r3, #16
 801197e:	4313      	orrs	r3, r2
 8011980:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4a27      	ldr	r2, [pc, #156]	; (8011a24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8011988:	4293      	cmp	r3, r2
 801198a:	d004      	beq.n	8011996 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	4a25      	ldr	r2, [pc, #148]	; (8011a28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8011992:	4293      	cmp	r3, r2
 8011994:	d106      	bne.n	80119a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	69db      	ldr	r3, [r3, #28]
 80119a0:	4313      	orrs	r3, r2
 80119a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4a1e      	ldr	r2, [pc, #120]	; (8011a24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80119aa:	4293      	cmp	r3, r2
 80119ac:	d004      	beq.n	80119b8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	4a1d      	ldr	r2, [pc, #116]	; (8011a28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d126      	bne.n	8011a06 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119c2:	051b      	lsls	r3, r3, #20
 80119c4:	4313      	orrs	r3, r2
 80119c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	6a1b      	ldr	r3, [r3, #32]
 80119d2:	4313      	orrs	r3, r2
 80119d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e0:	4313      	orrs	r3, r2
 80119e2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	4a0e      	ldr	r2, [pc, #56]	; (8011a24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80119ea:	4293      	cmp	r3, r2
 80119ec:	d004      	beq.n	80119f8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	4a0d      	ldr	r2, [pc, #52]	; (8011a28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80119f4:	4293      	cmp	r3, r2
 80119f6:	d106      	bne.n	8011a06 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a02:	4313      	orrs	r3, r2
 8011a04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	68fa      	ldr	r2, [r7, #12]
 8011a0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2200      	movs	r2, #0
 8011a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011a16:	2300      	movs	r3, #0
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3714      	adds	r7, #20
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a22:	4770      	bx	lr
 8011a24:	40012c00 	.word	0x40012c00
 8011a28:	40013400 	.word	0x40013400

08011a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b083      	sub	sp, #12
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011a34:	bf00      	nop
 8011a36:	370c      	adds	r7, #12
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr

08011a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011a40:	b480      	push	{r7}
 8011a42:	b083      	sub	sp, #12
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011a48:	bf00      	nop
 8011a4a:	370c      	adds	r7, #12
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a52:	4770      	bx	lr

08011a54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011a54:	b480      	push	{r7}
 8011a56:	b083      	sub	sp, #12
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011a5c:	bf00      	nop
 8011a5e:	370c      	adds	r7, #12
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr

08011a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d101      	bne.n	8011a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011a76:	2301      	movs	r3, #1
 8011a78:	e042      	b.n	8011b00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d106      	bne.n	8011a92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2200      	movs	r2, #0
 8011a88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f7f7 fc1f 	bl	80092d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2224      	movs	r2, #36	; 0x24
 8011a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	681a      	ldr	r2, [r3, #0]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f022 0201 	bic.w	r2, r2, #1
 8011aa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 fbbc 	bl	8012228 <UART_SetConfig>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	d101      	bne.n	8011aba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	e022      	b.n	8011b00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d002      	beq.n	8011ac8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f000 feb0 	bl	8012828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	685a      	ldr	r2, [r3, #4]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	689a      	ldr	r2, [r3, #8]
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	f042 0201 	orr.w	r2, r2, #1
 8011af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f000 ff37 	bl	801296c <UART_CheckIdleState>
 8011afe:	4603      	mov	r3, r0
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3708      	adds	r7, #8
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b08a      	sub	sp, #40	; 0x28
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	60f8      	str	r0, [r7, #12]
 8011b10:	60b9      	str	r1, [r7, #8]
 8011b12:	4613      	mov	r3, r2
 8011b14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b1c:	2b20      	cmp	r3, #32
 8011b1e:	d137      	bne.n	8011b90 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d002      	beq.n	8011b2c <HAL_UART_Receive_IT+0x24>
 8011b26:	88fb      	ldrh	r3, [r7, #6]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d101      	bne.n	8011b30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	e030      	b.n	8011b92 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	2200      	movs	r2, #0
 8011b34:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	4a18      	ldr	r2, [pc, #96]	; (8011b9c <HAL_UART_Receive_IT+0x94>)
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	d01f      	beq.n	8011b80 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d018      	beq.n	8011b80 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	e853 3f00 	ldrex	r3, [r3]
 8011b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011b62:	627b      	str	r3, [r7, #36]	; 0x24
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	461a      	mov	r2, r3
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6c:	623b      	str	r3, [r7, #32]
 8011b6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b70:	69f9      	ldr	r1, [r7, #28]
 8011b72:	6a3a      	ldr	r2, [r7, #32]
 8011b74:	e841 2300 	strex	r3, r2, [r1]
 8011b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8011b7a:	69bb      	ldr	r3, [r7, #24]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d1e6      	bne.n	8011b4e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011b80:	88fb      	ldrh	r3, [r7, #6]
 8011b82:	461a      	mov	r2, r3
 8011b84:	68b9      	ldr	r1, [r7, #8]
 8011b86:	68f8      	ldr	r0, [r7, #12]
 8011b88:	f001 f802 	bl	8012b90 <UART_Start_Receive_IT>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	e000      	b.n	8011b92 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011b90:	2302      	movs	r3, #2
  }
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3728      	adds	r7, #40	; 0x28
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	40008000 	.word	0x40008000

08011ba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b0ba      	sub	sp, #232	; 0xe8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	69db      	ldr	r3, [r3, #28]
 8011bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	689b      	ldr	r3, [r3, #8]
 8011bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011bc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011bca:	f640 030f 	movw	r3, #2063	; 0x80f
 8011bce:	4013      	ands	r3, r2
 8011bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8011bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d11b      	bne.n	8011c14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011be0:	f003 0320 	and.w	r3, r3, #32
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d015      	beq.n	8011c14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011bec:	f003 0320 	and.w	r3, r3, #32
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d105      	bne.n	8011c00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d009      	beq.n	8011c14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f000 82e3 	beq.w	80121d0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	4798      	blx	r3
      }
      return;
 8011c12:	e2dd      	b.n	80121d0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	f000 8123 	beq.w	8011e64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011c1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011c22:	4b8d      	ldr	r3, [pc, #564]	; (8011e58 <HAL_UART_IRQHandler+0x2b8>)
 8011c24:	4013      	ands	r3, r2
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d106      	bne.n	8011c38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011c2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011c2e:	4b8b      	ldr	r3, [pc, #556]	; (8011e5c <HAL_UART_IRQHandler+0x2bc>)
 8011c30:	4013      	ands	r3, r2
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f000 8116 	beq.w	8011e64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c3c:	f003 0301 	and.w	r3, r3, #1
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d011      	beq.n	8011c68 <HAL_UART_IRQHandler+0xc8>
 8011c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d00b      	beq.n	8011c68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	2201      	movs	r2, #1
 8011c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c5e:	f043 0201 	orr.w	r2, r3, #1
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c6c:	f003 0302 	and.w	r3, r3, #2
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d011      	beq.n	8011c98 <HAL_UART_IRQHandler+0xf8>
 8011c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c78:	f003 0301 	and.w	r3, r3, #1
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d00b      	beq.n	8011c98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2202      	movs	r2, #2
 8011c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c8e:	f043 0204 	orr.w	r2, r3, #4
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c9c:	f003 0304 	and.w	r3, r3, #4
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d011      	beq.n	8011cc8 <HAL_UART_IRQHandler+0x128>
 8011ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011ca8:	f003 0301 	and.w	r3, r3, #1
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d00b      	beq.n	8011cc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2204      	movs	r2, #4
 8011cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cbe:	f043 0202 	orr.w	r2, r3, #2
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ccc:	f003 0308 	and.w	r3, r3, #8
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d017      	beq.n	8011d04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011cd8:	f003 0320 	and.w	r3, r3, #32
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d105      	bne.n	8011cec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011ce0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011ce4:	4b5c      	ldr	r3, [pc, #368]	; (8011e58 <HAL_UART_IRQHandler+0x2b8>)
 8011ce6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d00b      	beq.n	8011d04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	2208      	movs	r2, #8
 8011cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cfa:	f043 0208 	orr.w	r2, r3, #8
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d012      	beq.n	8011d36 <HAL_UART_IRQHandler+0x196>
 8011d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d00c      	beq.n	8011d36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d2c:	f043 0220 	orr.w	r2, r3, #32
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	f000 8249 	beq.w	80121d4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d46:	f003 0320 	and.w	r3, r3, #32
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d013      	beq.n	8011d76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d52:	f003 0320 	and.w	r3, r3, #32
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d105      	bne.n	8011d66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d007      	beq.n	8011d76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d003      	beq.n	8011d76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d8a:	2b40      	cmp	r3, #64	; 0x40
 8011d8c:	d005      	beq.n	8011d9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011d92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d054      	beq.n	8011e44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f001 f81a 	bl	8012dd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011daa:	2b40      	cmp	r3, #64	; 0x40
 8011dac:	d146      	bne.n	8011e3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	3308      	adds	r3, #8
 8011db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011dbc:	e853 3f00 	ldrex	r3, [r3]
 8011dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	3308      	adds	r3, #8
 8011dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011dea:	e841 2300 	strex	r3, r2, [r1]
 8011dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d1d9      	bne.n	8011dae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d017      	beq.n	8011e34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e0a:	4a15      	ldr	r2, [pc, #84]	; (8011e60 <HAL_UART_IRQHandler+0x2c0>)
 8011e0c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7f9 fef4 	bl	800bc02 <HAL_DMA_Abort_IT>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d019      	beq.n	8011e54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8011e2e:	4610      	mov	r0, r2
 8011e30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e32:	e00f      	b.n	8011e54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 f9e1 	bl	80121fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e3a:	e00b      	b.n	8011e54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f000 f9dd 	bl	80121fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e42:	e007      	b.n	8011e54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f000 f9d9 	bl	80121fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8011e52:	e1bf      	b.n	80121d4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e54:	bf00      	nop
    return;
 8011e56:	e1bd      	b.n	80121d4 <HAL_UART_IRQHandler+0x634>
 8011e58:	10000001 	.word	0x10000001
 8011e5c:	04000120 	.word	0x04000120
 8011e60:	08012ea1 	.word	0x08012ea1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e68:	2b01      	cmp	r3, #1
 8011e6a:	f040 8153 	bne.w	8012114 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011e72:	f003 0310 	and.w	r3, r3, #16
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	f000 814c 	beq.w	8012114 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011e80:	f003 0310 	and.w	r3, r3, #16
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	f000 8145 	beq.w	8012114 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	2210      	movs	r2, #16
 8011e90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	689b      	ldr	r3, [r3, #8]
 8011e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e9c:	2b40      	cmp	r3, #64	; 0x40
 8011e9e:	f040 80bb 	bne.w	8012018 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	f000 818f 	beq.w	80121d8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011ec0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	f080 8187 	bcs.w	80121d8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f003 0320 	and.w	r3, r3, #32
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	f040 8087 	bne.w	8011ff6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011ef4:	e853 3f00 	ldrex	r3, [r3]
 8011ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011f12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011f16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011f22:	e841 2300 	strex	r3, r2, [r1]
 8011f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d1da      	bne.n	8011ee8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	3308      	adds	r3, #8
 8011f38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f3c:	e853 3f00 	ldrex	r3, [r3]
 8011f40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f44:	f023 0301 	bic.w	r3, r3, #1
 8011f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	3308      	adds	r3, #8
 8011f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011f56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011f62:	e841 2300 	strex	r3, r2, [r1]
 8011f66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d1e1      	bne.n	8011f32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	3308      	adds	r3, #8
 8011f74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f78:	e853 3f00 	ldrex	r3, [r3]
 8011f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	3308      	adds	r3, #8
 8011f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011f94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011f98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011f9a:	e841 2300 	strex	r3, r2, [r1]
 8011f9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d1e3      	bne.n	8011f6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2220      	movs	r2, #32
 8011faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fbc:	e853 3f00 	ldrex	r3, [r3]
 8011fc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fc4:	f023 0310 	bic.w	r3, r3, #16
 8011fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011fd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8011fd8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011fde:	e841 2300 	strex	r3, r2, [r1]
 8011fe2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d1e4      	bne.n	8011fb4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7f9 fdaa 	bl	800bb4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2202      	movs	r2, #2
 8011ffa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012008:	b29b      	uxth	r3, r3
 801200a:	1ad3      	subs	r3, r2, r3
 801200c:	b29b      	uxth	r3, r3
 801200e:	4619      	mov	r1, r3
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 f8fd 	bl	8012210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012016:	e0df      	b.n	80121d8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012024:	b29b      	uxth	r3, r3
 8012026:	1ad3      	subs	r3, r2, r3
 8012028:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012032:	b29b      	uxth	r3, r3
 8012034:	2b00      	cmp	r3, #0
 8012036:	f000 80d1 	beq.w	80121dc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801203a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801203e:	2b00      	cmp	r3, #0
 8012040:	f000 80cc 	beq.w	80121dc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801204a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204c:	e853 3f00 	ldrex	r3, [r3]
 8012050:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	461a      	mov	r2, r3
 8012062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012066:	647b      	str	r3, [r7, #68]	; 0x44
 8012068:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801206a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801206c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801206e:	e841 2300 	strex	r3, r2, [r1]
 8012072:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012076:	2b00      	cmp	r3, #0
 8012078:	d1e4      	bne.n	8012044 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	3308      	adds	r3, #8
 8012080:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012084:	e853 3f00 	ldrex	r3, [r3]
 8012088:	623b      	str	r3, [r7, #32]
   return(result);
 801208a:	6a3b      	ldr	r3, [r7, #32]
 801208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012090:	f023 0301 	bic.w	r3, r3, #1
 8012094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	3308      	adds	r3, #8
 801209e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80120a2:	633a      	str	r2, [r7, #48]	; 0x30
 80120a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120aa:	e841 2300 	strex	r3, r2, [r1]
 80120ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80120b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d1e1      	bne.n	801207a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2220      	movs	r2, #32
 80120ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2200      	movs	r2, #0
 80120c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	e853 3f00 	ldrex	r3, [r3]
 80120d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	f023 0310 	bic.w	r3, r3, #16
 80120de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	461a      	mov	r2, r3
 80120e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80120ec:	61fb      	str	r3, [r7, #28]
 80120ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f0:	69b9      	ldr	r1, [r7, #24]
 80120f2:	69fa      	ldr	r2, [r7, #28]
 80120f4:	e841 2300 	strex	r3, r2, [r1]
 80120f8:	617b      	str	r3, [r7, #20]
   return(result);
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d1e4      	bne.n	80120ca <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2202      	movs	r2, #2
 8012104:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801210a:	4619      	mov	r1, r3
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 f87f 	bl	8012210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012112:	e063      	b.n	80121dc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801211c:	2b00      	cmp	r3, #0
 801211e:	d00e      	beq.n	801213e <HAL_UART_IRQHandler+0x59e>
 8012120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012128:	2b00      	cmp	r3, #0
 801212a:	d008      	beq.n	801213e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f001 fc10 	bl	801395c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801213c:	e051      	b.n	80121e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801213e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012146:	2b00      	cmp	r3, #0
 8012148:	d014      	beq.n	8012174 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801214a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012152:	2b00      	cmp	r3, #0
 8012154:	d105      	bne.n	8012162 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801215a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801215e:	2b00      	cmp	r3, #0
 8012160:	d008      	beq.n	8012174 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012166:	2b00      	cmp	r3, #0
 8012168:	d03a      	beq.n	80121e0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	4798      	blx	r3
    }
    return;
 8012172:	e035      	b.n	80121e0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801217c:	2b00      	cmp	r3, #0
 801217e:	d009      	beq.n	8012194 <HAL_UART_IRQHandler+0x5f4>
 8012180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012188:	2b00      	cmp	r3, #0
 801218a:	d003      	beq.n	8012194 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f000 fe9d 	bl	8012ecc <UART_EndTransmit_IT>
    return;
 8012192:	e026      	b.n	80121e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801219c:	2b00      	cmp	r3, #0
 801219e:	d009      	beq.n	80121b4 <HAL_UART_IRQHandler+0x614>
 80121a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80121a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d003      	beq.n	80121b4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f001 fbe9 	bl	8013984 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80121b2:	e016      	b.n	80121e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80121b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80121b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d010      	beq.n	80121e2 <HAL_UART_IRQHandler+0x642>
 80121c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	da0c      	bge.n	80121e2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f001 fbd1 	bl	8013970 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80121ce:	e008      	b.n	80121e2 <HAL_UART_IRQHandler+0x642>
      return;
 80121d0:	bf00      	nop
 80121d2:	e006      	b.n	80121e2 <HAL_UART_IRQHandler+0x642>
    return;
 80121d4:	bf00      	nop
 80121d6:	e004      	b.n	80121e2 <HAL_UART_IRQHandler+0x642>
      return;
 80121d8:	bf00      	nop
 80121da:	e002      	b.n	80121e2 <HAL_UART_IRQHandler+0x642>
      return;
 80121dc:	bf00      	nop
 80121de:	e000      	b.n	80121e2 <HAL_UART_IRQHandler+0x642>
    return;
 80121e0:	bf00      	nop
  }
}
 80121e2:	37e8      	adds	r7, #232	; 0xe8
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}

080121e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80121e8:	b480      	push	{r7}
 80121ea:	b083      	sub	sp, #12
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80121f0:	bf00      	nop
 80121f2:	370c      	adds	r7, #12
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr

080121fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80121fc:	b480      	push	{r7}
 80121fe:	b083      	sub	sp, #12
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012204:	bf00      	nop
 8012206:	370c      	adds	r7, #12
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr

08012210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	460b      	mov	r3, r1
 801221a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801221c:	bf00      	nop
 801221e:	370c      	adds	r7, #12
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr

08012228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801222c:	b08c      	sub	sp, #48	; 0x30
 801222e:	af00      	add	r7, sp, #0
 8012230:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012232:	2300      	movs	r3, #0
 8012234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	689a      	ldr	r2, [r3, #8]
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	691b      	ldr	r3, [r3, #16]
 8012240:	431a      	orrs	r2, r3
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	695b      	ldr	r3, [r3, #20]
 8012246:	431a      	orrs	r2, r3
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	69db      	ldr	r3, [r3, #28]
 801224c:	4313      	orrs	r3, r2
 801224e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	681a      	ldr	r2, [r3, #0]
 8012256:	4baa      	ldr	r3, [pc, #680]	; (8012500 <UART_SetConfig+0x2d8>)
 8012258:	4013      	ands	r3, r2
 801225a:	697a      	ldr	r2, [r7, #20]
 801225c:	6812      	ldr	r2, [r2, #0]
 801225e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012260:	430b      	orrs	r3, r1
 8012262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	685b      	ldr	r3, [r3, #4]
 801226a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	68da      	ldr	r2, [r3, #12]
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	430a      	orrs	r2, r1
 8012278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	699b      	ldr	r3, [r3, #24]
 801227e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4a9f      	ldr	r2, [pc, #636]	; (8012504 <UART_SetConfig+0x2dc>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d004      	beq.n	8012294 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	6a1b      	ldr	r3, [r3, #32]
 801228e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012290:	4313      	orrs	r3, r2
 8012292:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	689b      	ldr	r3, [r3, #8]
 801229a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801229e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80122a2:	697a      	ldr	r2, [r7, #20]
 80122a4:	6812      	ldr	r2, [r2, #0]
 80122a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80122a8:	430b      	orrs	r3, r1
 80122aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b2:	f023 010f 	bic.w	r1, r3, #15
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	430a      	orrs	r2, r1
 80122c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	4a90      	ldr	r2, [pc, #576]	; (8012508 <UART_SetConfig+0x2e0>)
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d125      	bne.n	8012318 <UART_SetConfig+0xf0>
 80122cc:	4b8f      	ldr	r3, [pc, #572]	; (801250c <UART_SetConfig+0x2e4>)
 80122ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80122d2:	f003 0303 	and.w	r3, r3, #3
 80122d6:	2b03      	cmp	r3, #3
 80122d8:	d81a      	bhi.n	8012310 <UART_SetConfig+0xe8>
 80122da:	a201      	add	r2, pc, #4	; (adr r2, 80122e0 <UART_SetConfig+0xb8>)
 80122dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122e0:	080122f1 	.word	0x080122f1
 80122e4:	08012301 	.word	0x08012301
 80122e8:	080122f9 	.word	0x080122f9
 80122ec:	08012309 	.word	0x08012309
 80122f0:	2301      	movs	r3, #1
 80122f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80122f6:	e116      	b.n	8012526 <UART_SetConfig+0x2fe>
 80122f8:	2302      	movs	r3, #2
 80122fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80122fe:	e112      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012300:	2304      	movs	r3, #4
 8012302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012306:	e10e      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012308:	2308      	movs	r3, #8
 801230a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801230e:	e10a      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012310:	2310      	movs	r3, #16
 8012312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012316:	e106      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	4a7c      	ldr	r2, [pc, #496]	; (8012510 <UART_SetConfig+0x2e8>)
 801231e:	4293      	cmp	r3, r2
 8012320:	d138      	bne.n	8012394 <UART_SetConfig+0x16c>
 8012322:	4b7a      	ldr	r3, [pc, #488]	; (801250c <UART_SetConfig+0x2e4>)
 8012324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012328:	f003 030c 	and.w	r3, r3, #12
 801232c:	2b0c      	cmp	r3, #12
 801232e:	d82d      	bhi.n	801238c <UART_SetConfig+0x164>
 8012330:	a201      	add	r2, pc, #4	; (adr r2, 8012338 <UART_SetConfig+0x110>)
 8012332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012336:	bf00      	nop
 8012338:	0801236d 	.word	0x0801236d
 801233c:	0801238d 	.word	0x0801238d
 8012340:	0801238d 	.word	0x0801238d
 8012344:	0801238d 	.word	0x0801238d
 8012348:	0801237d 	.word	0x0801237d
 801234c:	0801238d 	.word	0x0801238d
 8012350:	0801238d 	.word	0x0801238d
 8012354:	0801238d 	.word	0x0801238d
 8012358:	08012375 	.word	0x08012375
 801235c:	0801238d 	.word	0x0801238d
 8012360:	0801238d 	.word	0x0801238d
 8012364:	0801238d 	.word	0x0801238d
 8012368:	08012385 	.word	0x08012385
 801236c:	2300      	movs	r3, #0
 801236e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012372:	e0d8      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012374:	2302      	movs	r3, #2
 8012376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801237a:	e0d4      	b.n	8012526 <UART_SetConfig+0x2fe>
 801237c:	2304      	movs	r3, #4
 801237e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012382:	e0d0      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012384:	2308      	movs	r3, #8
 8012386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801238a:	e0cc      	b.n	8012526 <UART_SetConfig+0x2fe>
 801238c:	2310      	movs	r3, #16
 801238e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012392:	e0c8      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	4a5e      	ldr	r2, [pc, #376]	; (8012514 <UART_SetConfig+0x2ec>)
 801239a:	4293      	cmp	r3, r2
 801239c:	d125      	bne.n	80123ea <UART_SetConfig+0x1c2>
 801239e:	4b5b      	ldr	r3, [pc, #364]	; (801250c <UART_SetConfig+0x2e4>)
 80123a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80123a8:	2b30      	cmp	r3, #48	; 0x30
 80123aa:	d016      	beq.n	80123da <UART_SetConfig+0x1b2>
 80123ac:	2b30      	cmp	r3, #48	; 0x30
 80123ae:	d818      	bhi.n	80123e2 <UART_SetConfig+0x1ba>
 80123b0:	2b20      	cmp	r3, #32
 80123b2:	d00a      	beq.n	80123ca <UART_SetConfig+0x1a2>
 80123b4:	2b20      	cmp	r3, #32
 80123b6:	d814      	bhi.n	80123e2 <UART_SetConfig+0x1ba>
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d002      	beq.n	80123c2 <UART_SetConfig+0x19a>
 80123bc:	2b10      	cmp	r3, #16
 80123be:	d008      	beq.n	80123d2 <UART_SetConfig+0x1aa>
 80123c0:	e00f      	b.n	80123e2 <UART_SetConfig+0x1ba>
 80123c2:	2300      	movs	r3, #0
 80123c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80123c8:	e0ad      	b.n	8012526 <UART_SetConfig+0x2fe>
 80123ca:	2302      	movs	r3, #2
 80123cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80123d0:	e0a9      	b.n	8012526 <UART_SetConfig+0x2fe>
 80123d2:	2304      	movs	r3, #4
 80123d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80123d8:	e0a5      	b.n	8012526 <UART_SetConfig+0x2fe>
 80123da:	2308      	movs	r3, #8
 80123dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80123e0:	e0a1      	b.n	8012526 <UART_SetConfig+0x2fe>
 80123e2:	2310      	movs	r3, #16
 80123e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80123e8:	e09d      	b.n	8012526 <UART_SetConfig+0x2fe>
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	4a4a      	ldr	r2, [pc, #296]	; (8012518 <UART_SetConfig+0x2f0>)
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d125      	bne.n	8012440 <UART_SetConfig+0x218>
 80123f4:	4b45      	ldr	r3, [pc, #276]	; (801250c <UART_SetConfig+0x2e4>)
 80123f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80123fe:	2bc0      	cmp	r3, #192	; 0xc0
 8012400:	d016      	beq.n	8012430 <UART_SetConfig+0x208>
 8012402:	2bc0      	cmp	r3, #192	; 0xc0
 8012404:	d818      	bhi.n	8012438 <UART_SetConfig+0x210>
 8012406:	2b80      	cmp	r3, #128	; 0x80
 8012408:	d00a      	beq.n	8012420 <UART_SetConfig+0x1f8>
 801240a:	2b80      	cmp	r3, #128	; 0x80
 801240c:	d814      	bhi.n	8012438 <UART_SetConfig+0x210>
 801240e:	2b00      	cmp	r3, #0
 8012410:	d002      	beq.n	8012418 <UART_SetConfig+0x1f0>
 8012412:	2b40      	cmp	r3, #64	; 0x40
 8012414:	d008      	beq.n	8012428 <UART_SetConfig+0x200>
 8012416:	e00f      	b.n	8012438 <UART_SetConfig+0x210>
 8012418:	2300      	movs	r3, #0
 801241a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801241e:	e082      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012420:	2302      	movs	r3, #2
 8012422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012426:	e07e      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012428:	2304      	movs	r3, #4
 801242a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801242e:	e07a      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012430:	2308      	movs	r3, #8
 8012432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012436:	e076      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012438:	2310      	movs	r3, #16
 801243a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801243e:	e072      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	4a35      	ldr	r2, [pc, #212]	; (801251c <UART_SetConfig+0x2f4>)
 8012446:	4293      	cmp	r3, r2
 8012448:	d12a      	bne.n	80124a0 <UART_SetConfig+0x278>
 801244a:	4b30      	ldr	r3, [pc, #192]	; (801250c <UART_SetConfig+0x2e4>)
 801244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012458:	d01a      	beq.n	8012490 <UART_SetConfig+0x268>
 801245a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801245e:	d81b      	bhi.n	8012498 <UART_SetConfig+0x270>
 8012460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012464:	d00c      	beq.n	8012480 <UART_SetConfig+0x258>
 8012466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801246a:	d815      	bhi.n	8012498 <UART_SetConfig+0x270>
 801246c:	2b00      	cmp	r3, #0
 801246e:	d003      	beq.n	8012478 <UART_SetConfig+0x250>
 8012470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012474:	d008      	beq.n	8012488 <UART_SetConfig+0x260>
 8012476:	e00f      	b.n	8012498 <UART_SetConfig+0x270>
 8012478:	2300      	movs	r3, #0
 801247a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801247e:	e052      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012480:	2302      	movs	r3, #2
 8012482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012486:	e04e      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012488:	2304      	movs	r3, #4
 801248a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801248e:	e04a      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012490:	2308      	movs	r3, #8
 8012492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012496:	e046      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012498:	2310      	movs	r3, #16
 801249a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801249e:	e042      	b.n	8012526 <UART_SetConfig+0x2fe>
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4a17      	ldr	r2, [pc, #92]	; (8012504 <UART_SetConfig+0x2dc>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d13a      	bne.n	8012520 <UART_SetConfig+0x2f8>
 80124aa:	4b18      	ldr	r3, [pc, #96]	; (801250c <UART_SetConfig+0x2e4>)
 80124ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80124b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80124b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80124b8:	d01a      	beq.n	80124f0 <UART_SetConfig+0x2c8>
 80124ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80124be:	d81b      	bhi.n	80124f8 <UART_SetConfig+0x2d0>
 80124c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80124c4:	d00c      	beq.n	80124e0 <UART_SetConfig+0x2b8>
 80124c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80124ca:	d815      	bhi.n	80124f8 <UART_SetConfig+0x2d0>
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d003      	beq.n	80124d8 <UART_SetConfig+0x2b0>
 80124d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80124d4:	d008      	beq.n	80124e8 <UART_SetConfig+0x2c0>
 80124d6:	e00f      	b.n	80124f8 <UART_SetConfig+0x2d0>
 80124d8:	2300      	movs	r3, #0
 80124da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80124de:	e022      	b.n	8012526 <UART_SetConfig+0x2fe>
 80124e0:	2302      	movs	r3, #2
 80124e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80124e6:	e01e      	b.n	8012526 <UART_SetConfig+0x2fe>
 80124e8:	2304      	movs	r3, #4
 80124ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80124ee:	e01a      	b.n	8012526 <UART_SetConfig+0x2fe>
 80124f0:	2308      	movs	r3, #8
 80124f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80124f6:	e016      	b.n	8012526 <UART_SetConfig+0x2fe>
 80124f8:	2310      	movs	r3, #16
 80124fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80124fe:	e012      	b.n	8012526 <UART_SetConfig+0x2fe>
 8012500:	cfff69f3 	.word	0xcfff69f3
 8012504:	40008000 	.word	0x40008000
 8012508:	40013800 	.word	0x40013800
 801250c:	40021000 	.word	0x40021000
 8012510:	40004400 	.word	0x40004400
 8012514:	40004800 	.word	0x40004800
 8012518:	40004c00 	.word	0x40004c00
 801251c:	40005000 	.word	0x40005000
 8012520:	2310      	movs	r3, #16
 8012522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4ab0      	ldr	r2, [pc, #704]	; (80127ec <UART_SetConfig+0x5c4>)
 801252c:	4293      	cmp	r3, r2
 801252e:	f040 809b 	bne.w	8012668 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012536:	2b08      	cmp	r3, #8
 8012538:	d827      	bhi.n	801258a <UART_SetConfig+0x362>
 801253a:	a201      	add	r2, pc, #4	; (adr r2, 8012540 <UART_SetConfig+0x318>)
 801253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012540:	08012565 	.word	0x08012565
 8012544:	0801256d 	.word	0x0801256d
 8012548:	08012575 	.word	0x08012575
 801254c:	0801258b 	.word	0x0801258b
 8012550:	0801257b 	.word	0x0801257b
 8012554:	0801258b 	.word	0x0801258b
 8012558:	0801258b 	.word	0x0801258b
 801255c:	0801258b 	.word	0x0801258b
 8012560:	08012583 	.word	0x08012583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012564:	f7fb fd74 	bl	800e050 <HAL_RCC_GetPCLK1Freq>
 8012568:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801256a:	e014      	b.n	8012596 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801256c:	f7fb fd84 	bl	800e078 <HAL_RCC_GetPCLK2Freq>
 8012570:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012572:	e010      	b.n	8012596 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012574:	4b9e      	ldr	r3, [pc, #632]	; (80127f0 <UART_SetConfig+0x5c8>)
 8012576:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012578:	e00d      	b.n	8012596 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801257a:	f7fb fcb7 	bl	800deec <HAL_RCC_GetSysClockFreq>
 801257e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012580:	e009      	b.n	8012596 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012586:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012588:	e005      	b.n	8012596 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 801258a:	2300      	movs	r3, #0
 801258c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801258e:	2301      	movs	r3, #1
 8012590:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8012594:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012598:	2b00      	cmp	r3, #0
 801259a:	f000 8130 	beq.w	80127fe <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125a2:	4a94      	ldr	r2, [pc, #592]	; (80127f4 <UART_SetConfig+0x5cc>)
 80125a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80125a8:	461a      	mov	r2, r3
 80125aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80125b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	685a      	ldr	r2, [r3, #4]
 80125b6:	4613      	mov	r3, r2
 80125b8:	005b      	lsls	r3, r3, #1
 80125ba:	4413      	add	r3, r2
 80125bc:	69ba      	ldr	r2, [r7, #24]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d305      	bcc.n	80125ce <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80125c8:	69ba      	ldr	r2, [r7, #24]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d903      	bls.n	80125d6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80125ce:	2301      	movs	r3, #1
 80125d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80125d4:	e113      	b.n	80127fe <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80125d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d8:	2200      	movs	r2, #0
 80125da:	60bb      	str	r3, [r7, #8]
 80125dc:	60fa      	str	r2, [r7, #12]
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e2:	4a84      	ldr	r2, [pc, #528]	; (80127f4 <UART_SetConfig+0x5cc>)
 80125e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	2200      	movs	r2, #0
 80125ec:	603b      	str	r3, [r7, #0]
 80125ee:	607a      	str	r2, [r7, #4]
 80125f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80125f8:	f7ee faf0 	bl	8000bdc <__aeabi_uldivmod>
 80125fc:	4602      	mov	r2, r0
 80125fe:	460b      	mov	r3, r1
 8012600:	4610      	mov	r0, r2
 8012602:	4619      	mov	r1, r3
 8012604:	f04f 0200 	mov.w	r2, #0
 8012608:	f04f 0300 	mov.w	r3, #0
 801260c:	020b      	lsls	r3, r1, #8
 801260e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012612:	0202      	lsls	r2, r0, #8
 8012614:	6979      	ldr	r1, [r7, #20]
 8012616:	6849      	ldr	r1, [r1, #4]
 8012618:	0849      	lsrs	r1, r1, #1
 801261a:	2000      	movs	r0, #0
 801261c:	460c      	mov	r4, r1
 801261e:	4605      	mov	r5, r0
 8012620:	eb12 0804 	adds.w	r8, r2, r4
 8012624:	eb43 0905 	adc.w	r9, r3, r5
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	685b      	ldr	r3, [r3, #4]
 801262c:	2200      	movs	r2, #0
 801262e:	469a      	mov	sl, r3
 8012630:	4693      	mov	fp, r2
 8012632:	4652      	mov	r2, sl
 8012634:	465b      	mov	r3, fp
 8012636:	4640      	mov	r0, r8
 8012638:	4649      	mov	r1, r9
 801263a:	f7ee facf 	bl	8000bdc <__aeabi_uldivmod>
 801263e:	4602      	mov	r2, r0
 8012640:	460b      	mov	r3, r1
 8012642:	4613      	mov	r3, r2
 8012644:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012646:	6a3b      	ldr	r3, [r7, #32]
 8012648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801264c:	d308      	bcc.n	8012660 <UART_SetConfig+0x438>
 801264e:	6a3b      	ldr	r3, [r7, #32]
 8012650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012654:	d204      	bcs.n	8012660 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	6a3a      	ldr	r2, [r7, #32]
 801265c:	60da      	str	r2, [r3, #12]
 801265e:	e0ce      	b.n	80127fe <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8012660:	2301      	movs	r3, #1
 8012662:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012666:	e0ca      	b.n	80127fe <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	69db      	ldr	r3, [r3, #28]
 801266c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012670:	d166      	bne.n	8012740 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8012672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012676:	2b08      	cmp	r3, #8
 8012678:	d827      	bhi.n	80126ca <UART_SetConfig+0x4a2>
 801267a:	a201      	add	r2, pc, #4	; (adr r2, 8012680 <UART_SetConfig+0x458>)
 801267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012680:	080126a5 	.word	0x080126a5
 8012684:	080126ad 	.word	0x080126ad
 8012688:	080126b5 	.word	0x080126b5
 801268c:	080126cb 	.word	0x080126cb
 8012690:	080126bb 	.word	0x080126bb
 8012694:	080126cb 	.word	0x080126cb
 8012698:	080126cb 	.word	0x080126cb
 801269c:	080126cb 	.word	0x080126cb
 80126a0:	080126c3 	.word	0x080126c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80126a4:	f7fb fcd4 	bl	800e050 <HAL_RCC_GetPCLK1Freq>
 80126a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80126aa:	e014      	b.n	80126d6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80126ac:	f7fb fce4 	bl	800e078 <HAL_RCC_GetPCLK2Freq>
 80126b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80126b2:	e010      	b.n	80126d6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80126b4:	4b4e      	ldr	r3, [pc, #312]	; (80127f0 <UART_SetConfig+0x5c8>)
 80126b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80126b8:	e00d      	b.n	80126d6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80126ba:	f7fb fc17 	bl	800deec <HAL_RCC_GetSysClockFreq>
 80126be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80126c0:	e009      	b.n	80126d6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80126c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80126c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80126c8:	e005      	b.n	80126d6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80126ca:	2300      	movs	r3, #0
 80126cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80126ce:	2301      	movs	r3, #1
 80126d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80126d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80126d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f000 8090 	beq.w	80127fe <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e2:	4a44      	ldr	r2, [pc, #272]	; (80127f4 <UART_SetConfig+0x5cc>)
 80126e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126e8:	461a      	mov	r2, r3
 80126ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80126f0:	005a      	lsls	r2, r3, #1
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	085b      	lsrs	r3, r3, #1
 80126f8:	441a      	add	r2, r3
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8012702:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012704:	6a3b      	ldr	r3, [r7, #32]
 8012706:	2b0f      	cmp	r3, #15
 8012708:	d916      	bls.n	8012738 <UART_SetConfig+0x510>
 801270a:	6a3b      	ldr	r3, [r7, #32]
 801270c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012710:	d212      	bcs.n	8012738 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012712:	6a3b      	ldr	r3, [r7, #32]
 8012714:	b29b      	uxth	r3, r3
 8012716:	f023 030f 	bic.w	r3, r3, #15
 801271a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801271c:	6a3b      	ldr	r3, [r7, #32]
 801271e:	085b      	lsrs	r3, r3, #1
 8012720:	b29b      	uxth	r3, r3
 8012722:	f003 0307 	and.w	r3, r3, #7
 8012726:	b29a      	uxth	r2, r3
 8012728:	8bfb      	ldrh	r3, [r7, #30]
 801272a:	4313      	orrs	r3, r2
 801272c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	8bfa      	ldrh	r2, [r7, #30]
 8012734:	60da      	str	r2, [r3, #12]
 8012736:	e062      	b.n	80127fe <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8012738:	2301      	movs	r3, #1
 801273a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801273e:	e05e      	b.n	80127fe <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012740:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012744:	2b08      	cmp	r3, #8
 8012746:	d828      	bhi.n	801279a <UART_SetConfig+0x572>
 8012748:	a201      	add	r2, pc, #4	; (adr r2, 8012750 <UART_SetConfig+0x528>)
 801274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801274e:	bf00      	nop
 8012750:	08012775 	.word	0x08012775
 8012754:	0801277d 	.word	0x0801277d
 8012758:	08012785 	.word	0x08012785
 801275c:	0801279b 	.word	0x0801279b
 8012760:	0801278b 	.word	0x0801278b
 8012764:	0801279b 	.word	0x0801279b
 8012768:	0801279b 	.word	0x0801279b
 801276c:	0801279b 	.word	0x0801279b
 8012770:	08012793 	.word	0x08012793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012774:	f7fb fc6c 	bl	800e050 <HAL_RCC_GetPCLK1Freq>
 8012778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801277a:	e014      	b.n	80127a6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801277c:	f7fb fc7c 	bl	800e078 <HAL_RCC_GetPCLK2Freq>
 8012780:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012782:	e010      	b.n	80127a6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012784:	4b1a      	ldr	r3, [pc, #104]	; (80127f0 <UART_SetConfig+0x5c8>)
 8012786:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012788:	e00d      	b.n	80127a6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801278a:	f7fb fbaf 	bl	800deec <HAL_RCC_GetSysClockFreq>
 801278e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012790:	e009      	b.n	80127a6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012796:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012798:	e005      	b.n	80127a6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 801279a:	2300      	movs	r3, #0
 801279c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801279e:	2301      	movs	r3, #1
 80127a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80127a4:	bf00      	nop
    }

    if (pclk != 0U)
 80127a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d028      	beq.n	80127fe <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b0:	4a10      	ldr	r2, [pc, #64]	; (80127f4 <UART_SetConfig+0x5cc>)
 80127b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80127b6:	461a      	mov	r2, r3
 80127b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	085b      	lsrs	r3, r3, #1
 80127c4:	441a      	add	r2, r3
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80127ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80127d0:	6a3b      	ldr	r3, [r7, #32]
 80127d2:	2b0f      	cmp	r3, #15
 80127d4:	d910      	bls.n	80127f8 <UART_SetConfig+0x5d0>
 80127d6:	6a3b      	ldr	r3, [r7, #32]
 80127d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127dc:	d20c      	bcs.n	80127f8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80127de:	6a3b      	ldr	r3, [r7, #32]
 80127e0:	b29a      	uxth	r2, r3
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	60da      	str	r2, [r3, #12]
 80127e8:	e009      	b.n	80127fe <UART_SetConfig+0x5d6>
 80127ea:	bf00      	nop
 80127ec:	40008000 	.word	0x40008000
 80127f0:	00f42400 	.word	0x00f42400
 80127f4:	08018964 	.word	0x08018964
      }
      else
      {
        ret = HAL_ERROR;
 80127f8:	2301      	movs	r3, #1
 80127fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	2201      	movs	r2, #1
 8012802:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	2201      	movs	r2, #1
 801280a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	2200      	movs	r2, #0
 8012812:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	2200      	movs	r2, #0
 8012818:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801281a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801281e:	4618      	mov	r0, r3
 8012820:	3730      	adds	r7, #48	; 0x30
 8012822:	46bd      	mov	sp, r7
 8012824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012828:	b480      	push	{r7}
 801282a:	b083      	sub	sp, #12
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012834:	f003 0301 	and.w	r3, r3, #1
 8012838:	2b00      	cmp	r3, #0
 801283a:	d00a      	beq.n	8012852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	430a      	orrs	r2, r1
 8012850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012856:	f003 0302 	and.w	r3, r3, #2
 801285a:	2b00      	cmp	r3, #0
 801285c:	d00a      	beq.n	8012874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	430a      	orrs	r2, r1
 8012872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012878:	f003 0304 	and.w	r3, r3, #4
 801287c:	2b00      	cmp	r3, #0
 801287e:	d00a      	beq.n	8012896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	430a      	orrs	r2, r1
 8012894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801289a:	f003 0308 	and.w	r3, r3, #8
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d00a      	beq.n	80128b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	430a      	orrs	r2, r1
 80128b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128bc:	f003 0310 	and.w	r3, r3, #16
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d00a      	beq.n	80128da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	689b      	ldr	r3, [r3, #8]
 80128ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	430a      	orrs	r2, r1
 80128d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128de:	f003 0320 	and.w	r3, r3, #32
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d00a      	beq.n	80128fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	689b      	ldr	r3, [r3, #8]
 80128ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	430a      	orrs	r2, r1
 80128fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012904:	2b00      	cmp	r3, #0
 8012906:	d01a      	beq.n	801293e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	430a      	orrs	r2, r1
 801291c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012926:	d10a      	bne.n	801293e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	685b      	ldr	r3, [r3, #4]
 801292e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	430a      	orrs	r2, r1
 801293c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012946:	2b00      	cmp	r3, #0
 8012948:	d00a      	beq.n	8012960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	430a      	orrs	r2, r1
 801295e:	605a      	str	r2, [r3, #4]
  }
}
 8012960:	bf00      	nop
 8012962:	370c      	adds	r7, #12
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr

0801296c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b098      	sub	sp, #96	; 0x60
 8012970:	af02      	add	r7, sp, #8
 8012972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2200      	movs	r2, #0
 8012978:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801297c:	f7f7 fa94 	bl	8009ea8 <HAL_GetTick>
 8012980:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	f003 0308 	and.w	r3, r3, #8
 801298c:	2b08      	cmp	r3, #8
 801298e:	d12f      	bne.n	80129f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012994:	9300      	str	r3, [sp, #0]
 8012996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012998:	2200      	movs	r2, #0
 801299a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f000 f88e 	bl	8012ac0 <UART_WaitOnFlagUntilTimeout>
 80129a4:	4603      	mov	r3, r0
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d022      	beq.n	80129f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b2:	e853 3f00 	ldrex	r3, [r3]
 80129b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80129b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80129be:	653b      	str	r3, [r7, #80]	; 0x50
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	461a      	mov	r2, r3
 80129c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129c8:	647b      	str	r3, [r7, #68]	; 0x44
 80129ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129d0:	e841 2300 	strex	r3, r2, [r1]
 80129d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d1e6      	bne.n	80129aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2220      	movs	r2, #32
 80129e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2200      	movs	r2, #0
 80129e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80129ec:	2303      	movs	r3, #3
 80129ee:	e063      	b.n	8012ab8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f003 0304 	and.w	r3, r3, #4
 80129fa:	2b04      	cmp	r3, #4
 80129fc:	d149      	bne.n	8012a92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80129fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012a02:	9300      	str	r3, [sp, #0]
 8012a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a06:	2200      	movs	r2, #0
 8012a08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f000 f857 	bl	8012ac0 <UART_WaitOnFlagUntilTimeout>
 8012a12:	4603      	mov	r3, r0
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d03c      	beq.n	8012a92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a20:	e853 3f00 	ldrex	r3, [r3]
 8012a24:	623b      	str	r3, [r7, #32]
   return(result);
 8012a26:	6a3b      	ldr	r3, [r7, #32]
 8012a28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	461a      	mov	r2, r3
 8012a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a36:	633b      	str	r3, [r7, #48]	; 0x30
 8012a38:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a3e:	e841 2300 	strex	r3, r2, [r1]
 8012a42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d1e6      	bne.n	8012a18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	3308      	adds	r3, #8
 8012a50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	e853 3f00 	ldrex	r3, [r3]
 8012a58:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	f023 0301 	bic.w	r3, r3, #1
 8012a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	3308      	adds	r3, #8
 8012a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a6a:	61fa      	str	r2, [r7, #28]
 8012a6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a6e:	69b9      	ldr	r1, [r7, #24]
 8012a70:	69fa      	ldr	r2, [r7, #28]
 8012a72:	e841 2300 	strex	r3, r2, [r1]
 8012a76:	617b      	str	r3, [r7, #20]
   return(result);
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d1e5      	bne.n	8012a4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2220      	movs	r2, #32
 8012a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012a8e:	2303      	movs	r3, #3
 8012a90:	e012      	b.n	8012ab8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2220      	movs	r2, #32
 8012a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2220      	movs	r2, #32
 8012a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ab6:	2300      	movs	r3, #0
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3758      	adds	r7, #88	; 0x58
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b084      	sub	sp, #16
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	603b      	str	r3, [r7, #0]
 8012acc:	4613      	mov	r3, r2
 8012ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012ad0:	e049      	b.n	8012b66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ad2:	69bb      	ldr	r3, [r7, #24]
 8012ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ad8:	d045      	beq.n	8012b66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ada:	f7f7 f9e5 	bl	8009ea8 <HAL_GetTick>
 8012ade:	4602      	mov	r2, r0
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	1ad3      	subs	r3, r2, r3
 8012ae4:	69ba      	ldr	r2, [r7, #24]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d302      	bcc.n	8012af0 <UART_WaitOnFlagUntilTimeout+0x30>
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d101      	bne.n	8012af4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012af0:	2303      	movs	r3, #3
 8012af2:	e048      	b.n	8012b86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f003 0304 	and.w	r3, r3, #4
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d031      	beq.n	8012b66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	69db      	ldr	r3, [r3, #28]
 8012b08:	f003 0308 	and.w	r3, r3, #8
 8012b0c:	2b08      	cmp	r3, #8
 8012b0e:	d110      	bne.n	8012b32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	2208      	movs	r2, #8
 8012b16:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012b18:	68f8      	ldr	r0, [r7, #12]
 8012b1a:	f000 f95b 	bl	8012dd4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2208      	movs	r2, #8
 8012b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2200      	movs	r2, #0
 8012b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012b2e:	2301      	movs	r3, #1
 8012b30:	e029      	b.n	8012b86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	69db      	ldr	r3, [r3, #28]
 8012b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b40:	d111      	bne.n	8012b66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012b4c:	68f8      	ldr	r0, [r7, #12]
 8012b4e:	f000 f941 	bl	8012dd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	2220      	movs	r2, #32
 8012b56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012b62:	2303      	movs	r3, #3
 8012b64:	e00f      	b.n	8012b86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	69da      	ldr	r2, [r3, #28]
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	4013      	ands	r3, r2
 8012b70:	68ba      	ldr	r2, [r7, #8]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	bf0c      	ite	eq
 8012b76:	2301      	moveq	r3, #1
 8012b78:	2300      	movne	r3, #0
 8012b7a:	b2db      	uxtb	r3, r3
 8012b7c:	461a      	mov	r2, r3
 8012b7e:	79fb      	ldrb	r3, [r7, #7]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d0a6      	beq.n	8012ad2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012b84:	2300      	movs	r3, #0
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	3710      	adds	r7, #16
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}
	...

08012b90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b0a3      	sub	sp, #140	; 0x8c
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	68ba      	ldr	r2, [r7, #8]
 8012ba2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	88fa      	ldrh	r2, [r7, #6]
 8012ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	88fa      	ldrh	r2, [r7, #6]
 8012bb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	689b      	ldr	r3, [r3, #8]
 8012bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012bc2:	d10e      	bne.n	8012be2 <UART_Start_Receive_IT+0x52>
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	691b      	ldr	r3, [r3, #16]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d105      	bne.n	8012bd8 <UART_Start_Receive_IT+0x48>
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012bd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012bd6:	e02d      	b.n	8012c34 <UART_Start_Receive_IT+0xa4>
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	22ff      	movs	r2, #255	; 0xff
 8012bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012be0:	e028      	b.n	8012c34 <UART_Start_Receive_IT+0xa4>
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	689b      	ldr	r3, [r3, #8]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d10d      	bne.n	8012c06 <UART_Start_Receive_IT+0x76>
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	691b      	ldr	r3, [r3, #16]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d104      	bne.n	8012bfc <UART_Start_Receive_IT+0x6c>
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	22ff      	movs	r2, #255	; 0xff
 8012bf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012bfa:	e01b      	b.n	8012c34 <UART_Start_Receive_IT+0xa4>
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	227f      	movs	r2, #127	; 0x7f
 8012c00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012c04:	e016      	b.n	8012c34 <UART_Start_Receive_IT+0xa4>
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	689b      	ldr	r3, [r3, #8]
 8012c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012c0e:	d10d      	bne.n	8012c2c <UART_Start_Receive_IT+0x9c>
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	691b      	ldr	r3, [r3, #16]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d104      	bne.n	8012c22 <UART_Start_Receive_IT+0x92>
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	227f      	movs	r2, #127	; 0x7f
 8012c1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012c20:	e008      	b.n	8012c34 <UART_Start_Receive_IT+0xa4>
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	223f      	movs	r2, #63	; 0x3f
 8012c26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012c2a:	e003      	b.n	8012c34 <UART_Start_Receive_IT+0xa4>
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2200      	movs	r2, #0
 8012c38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2222      	movs	r2, #34	; 0x22
 8012c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	3308      	adds	r3, #8
 8012c4a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c4e:	e853 3f00 	ldrex	r3, [r3]
 8012c52:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c56:	f043 0301 	orr.w	r3, r3, #1
 8012c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	3308      	adds	r3, #8
 8012c64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012c68:	673a      	str	r2, [r7, #112]	; 0x70
 8012c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c6c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012c6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012c70:	e841 2300 	strex	r3, r2, [r1]
 8012c74:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8012c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d1e3      	bne.n	8012c44 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012c84:	d14f      	bne.n	8012d26 <UART_Start_Receive_IT+0x196>
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c8c:	88fa      	ldrh	r2, [r7, #6]
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d349      	bcc.n	8012d26 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	689b      	ldr	r3, [r3, #8]
 8012c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012c9a:	d107      	bne.n	8012cac <UART_Start_Receive_IT+0x11c>
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	691b      	ldr	r3, [r3, #16]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d103      	bne.n	8012cac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	4a47      	ldr	r2, [pc, #284]	; (8012dc4 <UART_Start_Receive_IT+0x234>)
 8012ca8:	675a      	str	r2, [r3, #116]	; 0x74
 8012caa:	e002      	b.n	8012cb2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	4a46      	ldr	r2, [pc, #280]	; (8012dc8 <UART_Start_Receive_IT+0x238>)
 8012cb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	691b      	ldr	r3, [r3, #16]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d01a      	beq.n	8012cf0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cc2:	e853 3f00 	ldrex	r3, [r3]
 8012cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012cce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012cde:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ce0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012ce2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012ce4:	e841 2300 	strex	r3, r2, [r1]
 8012ce8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d1e4      	bne.n	8012cba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	3308      	adds	r3, #8
 8012cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cfa:	e853 3f00 	ldrex	r3, [r3]
 8012cfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012d06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	3308      	adds	r3, #8
 8012d0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012d10:	64ba      	str	r2, [r7, #72]	; 0x48
 8012d12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d18:	e841 2300 	strex	r3, r2, [r1]
 8012d1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d1e5      	bne.n	8012cf0 <UART_Start_Receive_IT+0x160>
 8012d24:	e046      	b.n	8012db4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	689b      	ldr	r3, [r3, #8]
 8012d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d2e:	d107      	bne.n	8012d40 <UART_Start_Receive_IT+0x1b0>
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	691b      	ldr	r3, [r3, #16]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d103      	bne.n	8012d40 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	4a24      	ldr	r2, [pc, #144]	; (8012dcc <UART_Start_Receive_IT+0x23c>)
 8012d3c:	675a      	str	r2, [r3, #116]	; 0x74
 8012d3e:	e002      	b.n	8012d46 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	4a23      	ldr	r2, [pc, #140]	; (8012dd0 <UART_Start_Receive_IT+0x240>)
 8012d44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	691b      	ldr	r3, [r3, #16]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d019      	beq.n	8012d82 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d56:	e853 3f00 	ldrex	r3, [r3]
 8012d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8012d62:	677b      	str	r3, [r7, #116]	; 0x74
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8012d6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d74:	e841 2300 	strex	r3, r2, [r1]
 8012d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d1e6      	bne.n	8012d4e <UART_Start_Receive_IT+0x1be>
 8012d80:	e018      	b.n	8012db4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	e853 3f00 	ldrex	r3, [r3]
 8012d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	f043 0320 	orr.w	r3, r3, #32
 8012d96:	67bb      	str	r3, [r7, #120]	; 0x78
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012da0:	623b      	str	r3, [r7, #32]
 8012da2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012da4:	69f9      	ldr	r1, [r7, #28]
 8012da6:	6a3a      	ldr	r2, [r7, #32]
 8012da8:	e841 2300 	strex	r3, r2, [r1]
 8012dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8012dae:	69bb      	ldr	r3, [r7, #24]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d1e6      	bne.n	8012d82 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012db4:	2300      	movs	r3, #0
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	378c      	adds	r7, #140	; 0x8c
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc0:	4770      	bx	lr
 8012dc2:	bf00      	nop
 8012dc4:	080135f5 	.word	0x080135f5
 8012dc8:	08013295 	.word	0x08013295
 8012dcc:	080130dd 	.word	0x080130dd
 8012dd0:	08012f25 	.word	0x08012f25

08012dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b095      	sub	sp, #84	; 0x54
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012de4:	e853 3f00 	ldrex	r3, [r3]
 8012de8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	461a      	mov	r2, r3
 8012df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8012dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e02:	e841 2300 	strex	r3, r2, [r1]
 8012e06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d1e6      	bne.n	8012ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	3308      	adds	r3, #8
 8012e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e16:	6a3b      	ldr	r3, [r7, #32]
 8012e18:	e853 3f00 	ldrex	r3, [r3]
 8012e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012e24:	f023 0301 	bic.w	r3, r3, #1
 8012e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	3308      	adds	r3, #8
 8012e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012e34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e3a:	e841 2300 	strex	r3, r2, [r1]
 8012e3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d1e3      	bne.n	8012e0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d118      	bne.n	8012e80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	e853 3f00 	ldrex	r3, [r3]
 8012e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	f023 0310 	bic.w	r3, r3, #16
 8012e62:	647b      	str	r3, [r7, #68]	; 0x44
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	461a      	mov	r2, r3
 8012e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e6c:	61bb      	str	r3, [r7, #24]
 8012e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e70:	6979      	ldr	r1, [r7, #20]
 8012e72:	69ba      	ldr	r2, [r7, #24]
 8012e74:	e841 2300 	strex	r3, r2, [r1]
 8012e78:	613b      	str	r3, [r7, #16]
   return(result);
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d1e6      	bne.n	8012e4e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2220      	movs	r2, #32
 8012e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2200      	movs	r2, #0
 8012e92:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012e94:	bf00      	nop
 8012e96:	3754      	adds	r7, #84	; 0x54
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9e:	4770      	bx	lr

08012ea0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b084      	sub	sp, #16
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012ebe:	68f8      	ldr	r0, [r7, #12]
 8012ec0:	f7ff f99c 	bl	80121fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012ec4:	bf00      	nop
 8012ec6:	3710      	adds	r7, #16
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b088      	sub	sp, #32
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	e853 3f00 	ldrex	r3, [r3]
 8012ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ee8:	61fb      	str	r3, [r7, #28]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	461a      	mov	r2, r3
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	61bb      	str	r3, [r7, #24]
 8012ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ef6:	6979      	ldr	r1, [r7, #20]
 8012ef8:	69ba      	ldr	r2, [r7, #24]
 8012efa:	e841 2300 	strex	r3, r2, [r1]
 8012efe:	613b      	str	r3, [r7, #16]
   return(result);
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d1e6      	bne.n	8012ed4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2220      	movs	r2, #32
 8012f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2200      	movs	r2, #0
 8012f12:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f7ff f967 	bl	80121e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012f1a:	bf00      	nop
 8012f1c:	3720      	adds	r7, #32
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
	...

08012f24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b09c      	sub	sp, #112	; 0x70
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f32:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f3c:	2b22      	cmp	r3, #34	; 0x22
 8012f3e:	f040 80be 	bne.w	80130be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012f4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012f50:	b2d9      	uxtb	r1, r3
 8012f52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012f56:	b2da      	uxtb	r2, r3
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f5c:	400a      	ands	r2, r1
 8012f5e:	b2d2      	uxtb	r2, r2
 8012f60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f66:	1c5a      	adds	r2, r3, #1
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	3b01      	subs	r3, #1
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	f040 80a1 	bne.w	80130ce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f94:	e853 3f00 	ldrex	r3, [r3]
 8012f98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012faa:	65bb      	str	r3, [r7, #88]	; 0x58
 8012fac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012fb2:	e841 2300 	strex	r3, r2, [r1]
 8012fb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d1e6      	bne.n	8012f8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	3308      	adds	r3, #8
 8012fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc8:	e853 3f00 	ldrex	r3, [r3]
 8012fcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fd0:	f023 0301 	bic.w	r3, r3, #1
 8012fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	3308      	adds	r3, #8
 8012fdc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012fde:	647a      	str	r2, [r7, #68]	; 0x44
 8012fe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fe6:	e841 2300 	strex	r3, r2, [r1]
 8012fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d1e5      	bne.n	8012fbe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2220      	movs	r2, #32
 8012ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2200      	movs	r2, #0
 8013004:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	4a33      	ldr	r2, [pc, #204]	; (80130d8 <UART_RxISR_8BIT+0x1b4>)
 801300c:	4293      	cmp	r3, r2
 801300e:	d01f      	beq.n	8013050 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801301a:	2b00      	cmp	r3, #0
 801301c:	d018      	beq.n	8013050 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013026:	e853 3f00 	ldrex	r3, [r3]
 801302a:	623b      	str	r3, [r7, #32]
   return(result);
 801302c:	6a3b      	ldr	r3, [r7, #32]
 801302e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013032:	663b      	str	r3, [r7, #96]	; 0x60
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	461a      	mov	r2, r3
 801303a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801303c:	633b      	str	r3, [r7, #48]	; 0x30
 801303e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013044:	e841 2300 	strex	r3, r2, [r1]
 8013048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801304c:	2b00      	cmp	r3, #0
 801304e:	d1e6      	bne.n	801301e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013054:	2b01      	cmp	r3, #1
 8013056:	d12e      	bne.n	80130b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2200      	movs	r2, #0
 801305c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	e853 3f00 	ldrex	r3, [r3]
 801306a:	60fb      	str	r3, [r7, #12]
   return(result);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	f023 0310 	bic.w	r3, r3, #16
 8013072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	461a      	mov	r2, r3
 801307a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801307c:	61fb      	str	r3, [r7, #28]
 801307e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013080:	69b9      	ldr	r1, [r7, #24]
 8013082:	69fa      	ldr	r2, [r7, #28]
 8013084:	e841 2300 	strex	r3, r2, [r1]
 8013088:	617b      	str	r3, [r7, #20]
   return(result);
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d1e6      	bne.n	801305e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	69db      	ldr	r3, [r3, #28]
 8013096:	f003 0310 	and.w	r3, r3, #16
 801309a:	2b10      	cmp	r3, #16
 801309c:	d103      	bne.n	80130a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	2210      	movs	r2, #16
 80130a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80130ac:	4619      	mov	r1, r3
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f7ff f8ae 	bl	8012210 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80130b4:	e00b      	b.n	80130ce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f7ee fdda 	bl	8001c70 <HAL_UART_RxCpltCallback>
}
 80130bc:	e007      	b.n	80130ce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	699a      	ldr	r2, [r3, #24]
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	f042 0208 	orr.w	r2, r2, #8
 80130cc:	619a      	str	r2, [r3, #24]
}
 80130ce:	bf00      	nop
 80130d0:	3770      	adds	r7, #112	; 0x70
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}
 80130d6:	bf00      	nop
 80130d8:	40008000 	.word	0x40008000

080130dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b09c      	sub	sp, #112	; 0x70
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80130ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80130f4:	2b22      	cmp	r3, #34	; 0x22
 80130f6:	f040 80be 	bne.w	8013276 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013100:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013108:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801310a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801310e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013112:	4013      	ands	r3, r2
 8013114:	b29a      	uxth	r2, r3
 8013116:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013118:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801311e:	1c9a      	adds	r2, r3, #2
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801312a:	b29b      	uxth	r3, r3
 801312c:	3b01      	subs	r3, #1
 801312e:	b29a      	uxth	r2, r3
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801313c:	b29b      	uxth	r3, r3
 801313e:	2b00      	cmp	r3, #0
 8013140:	f040 80a1 	bne.w	8013286 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801314a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801314c:	e853 3f00 	ldrex	r3, [r3]
 8013150:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013158:	667b      	str	r3, [r7, #100]	; 0x64
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	461a      	mov	r2, r3
 8013160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013162:	657b      	str	r3, [r7, #84]	; 0x54
 8013164:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013166:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013168:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801316a:	e841 2300 	strex	r3, r2, [r1]
 801316e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013172:	2b00      	cmp	r3, #0
 8013174:	d1e6      	bne.n	8013144 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	3308      	adds	r3, #8
 801317c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801317e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013180:	e853 3f00 	ldrex	r3, [r3]
 8013184:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013188:	f023 0301 	bic.w	r3, r3, #1
 801318c:	663b      	str	r3, [r7, #96]	; 0x60
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	3308      	adds	r3, #8
 8013194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013196:	643a      	str	r2, [r7, #64]	; 0x40
 8013198:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801319a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801319c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801319e:	e841 2300 	strex	r3, r2, [r1]
 80131a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80131a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d1e5      	bne.n	8013176 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2220      	movs	r2, #32
 80131ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2200      	movs	r2, #0
 80131b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2200      	movs	r2, #0
 80131bc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	4a33      	ldr	r2, [pc, #204]	; (8013290 <UART_RxISR_16BIT+0x1b4>)
 80131c4:	4293      	cmp	r3, r2
 80131c6:	d01f      	beq.n	8013208 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d018      	beq.n	8013208 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131dc:	6a3b      	ldr	r3, [r7, #32]
 80131de:	e853 3f00 	ldrex	r3, [r3]
 80131e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80131ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	461a      	mov	r2, r3
 80131f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80131fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131fc:	e841 2300 	strex	r3, r2, [r1]
 8013200:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013204:	2b00      	cmp	r3, #0
 8013206:	d1e6      	bne.n	80131d6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801320c:	2b01      	cmp	r3, #1
 801320e:	d12e      	bne.n	801326e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2200      	movs	r2, #0
 8013214:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	e853 3f00 	ldrex	r3, [r3]
 8013222:	60bb      	str	r3, [r7, #8]
   return(result);
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	f023 0310 	bic.w	r3, r3, #16
 801322a:	65bb      	str	r3, [r7, #88]	; 0x58
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	461a      	mov	r2, r3
 8013232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013234:	61bb      	str	r3, [r7, #24]
 8013236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013238:	6979      	ldr	r1, [r7, #20]
 801323a:	69ba      	ldr	r2, [r7, #24]
 801323c:	e841 2300 	strex	r3, r2, [r1]
 8013240:	613b      	str	r3, [r7, #16]
   return(result);
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d1e6      	bne.n	8013216 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	69db      	ldr	r3, [r3, #28]
 801324e:	f003 0310 	and.w	r3, r3, #16
 8013252:	2b10      	cmp	r3, #16
 8013254:	d103      	bne.n	801325e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	2210      	movs	r2, #16
 801325c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013264:	4619      	mov	r1, r3
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f7fe ffd2 	bl	8012210 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801326c:	e00b      	b.n	8013286 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f7ee fcfe 	bl	8001c70 <HAL_UART_RxCpltCallback>
}
 8013274:	e007      	b.n	8013286 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	699a      	ldr	r2, [r3, #24]
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	f042 0208 	orr.w	r2, r2, #8
 8013284:	619a      	str	r2, [r3, #24]
}
 8013286:	bf00      	nop
 8013288:	3770      	adds	r7, #112	; 0x70
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	40008000 	.word	0x40008000

08013294 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b0ac      	sub	sp, #176	; 0xb0
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80132a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	69db      	ldr	r3, [r3, #28]
 80132ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	689b      	ldr	r3, [r3, #8]
 80132c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132ca:	2b22      	cmp	r3, #34	; 0x22
 80132cc:	f040 8182 	bne.w	80135d4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80132d6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80132da:	e125      	b.n	8013528 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132e2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80132e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80132ea:	b2d9      	uxtb	r1, r3
 80132ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80132f0:	b2da      	uxtb	r2, r3
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80132f6:	400a      	ands	r2, r1
 80132f8:	b2d2      	uxtb	r2, r2
 80132fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013300:	1c5a      	adds	r2, r3, #1
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801330c:	b29b      	uxth	r3, r3
 801330e:	3b01      	subs	r3, #1
 8013310:	b29a      	uxth	r2, r3
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	69db      	ldr	r3, [r3, #28]
 801331e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013326:	f003 0307 	and.w	r3, r3, #7
 801332a:	2b00      	cmp	r3, #0
 801332c:	d053      	beq.n	80133d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801332e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013332:	f003 0301 	and.w	r3, r3, #1
 8013336:	2b00      	cmp	r3, #0
 8013338:	d011      	beq.n	801335e <UART_RxISR_8BIT_FIFOEN+0xca>
 801333a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013342:	2b00      	cmp	r3, #0
 8013344:	d00b      	beq.n	801335e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2201      	movs	r2, #1
 801334c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013354:	f043 0201 	orr.w	r2, r3, #1
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801335e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013362:	f003 0302 	and.w	r3, r3, #2
 8013366:	2b00      	cmp	r3, #0
 8013368:	d011      	beq.n	801338e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801336a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801336e:	f003 0301 	and.w	r3, r3, #1
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00b      	beq.n	801338e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	2202      	movs	r2, #2
 801337c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013384:	f043 0204 	orr.w	r2, r3, #4
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801338e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013392:	f003 0304 	and.w	r3, r3, #4
 8013396:	2b00      	cmp	r3, #0
 8013398:	d011      	beq.n	80133be <UART_RxISR_8BIT_FIFOEN+0x12a>
 801339a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801339e:	f003 0301 	and.w	r3, r3, #1
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d00b      	beq.n	80133be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	2204      	movs	r2, #4
 80133ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133b4:	f043 0202 	orr.w	r2, r3, #2
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d006      	beq.n	80133d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f7fe ff17 	bl	80121fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2200      	movs	r2, #0
 80133d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80133dc:	b29b      	uxth	r3, r3
 80133de:	2b00      	cmp	r3, #0
 80133e0:	f040 80a2 	bne.w	8013528 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80133ec:	e853 3f00 	ldrex	r3, [r3]
 80133f0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80133f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80133f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	461a      	mov	r2, r3
 8013402:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013406:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013408:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801340a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801340c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801340e:	e841 2300 	strex	r3, r2, [r1]
 8013412:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8013414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013416:	2b00      	cmp	r3, #0
 8013418:	d1e4      	bne.n	80133e4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	3308      	adds	r3, #8
 8013420:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013424:	e853 3f00 	ldrex	r3, [r3]
 8013428:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801342a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801342c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013430:	f023 0301 	bic.w	r3, r3, #1
 8013434:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	3308      	adds	r3, #8
 801343e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013442:	66ba      	str	r2, [r7, #104]	; 0x68
 8013444:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013446:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013448:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801344a:	e841 2300 	strex	r3, r2, [r1]
 801344e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013452:	2b00      	cmp	r3, #0
 8013454:	d1e1      	bne.n	801341a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	2220      	movs	r2, #32
 801345a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	2200      	movs	r2, #0
 8013462:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2200      	movs	r2, #0
 8013468:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	4a5f      	ldr	r2, [pc, #380]	; (80135ec <UART_RxISR_8BIT_FIFOEN+0x358>)
 8013470:	4293      	cmp	r3, r2
 8013472:	d021      	beq.n	80134b8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801347e:	2b00      	cmp	r3, #0
 8013480:	d01a      	beq.n	80134b8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801348a:	e853 3f00 	ldrex	r3, [r3]
 801348e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013492:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	461a      	mov	r2, r3
 80134a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80134a4:	657b      	str	r3, [r7, #84]	; 0x54
 80134a6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80134aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80134ac:	e841 2300 	strex	r3, r2, [r1]
 80134b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80134b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d1e4      	bne.n	8013482 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134bc:	2b01      	cmp	r3, #1
 80134be:	d130      	bne.n	8013522 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2200      	movs	r2, #0
 80134c4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ce:	e853 3f00 	ldrex	r3, [r3]
 80134d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80134d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d6:	f023 0310 	bic.w	r3, r3, #16
 80134da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	461a      	mov	r2, r3
 80134e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80134e8:	643b      	str	r3, [r7, #64]	; 0x40
 80134ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80134ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80134f0:	e841 2300 	strex	r3, r2, [r1]
 80134f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80134f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d1e4      	bne.n	80134c6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	69db      	ldr	r3, [r3, #28]
 8013502:	f003 0310 	and.w	r3, r3, #16
 8013506:	2b10      	cmp	r3, #16
 8013508:	d103      	bne.n	8013512 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	2210      	movs	r2, #16
 8013510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013518:	4619      	mov	r1, r3
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f7fe fe78 	bl	8012210 <HAL_UARTEx_RxEventCallback>
 8013520:	e002      	b.n	8013528 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f7ee fba4 	bl	8001c70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013528:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801352c:	2b00      	cmp	r3, #0
 801352e:	d006      	beq.n	801353e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8013530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013534:	f003 0320 	and.w	r3, r3, #32
 8013538:	2b00      	cmp	r3, #0
 801353a:	f47f aecf 	bne.w	80132dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013544:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013548:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801354c:	2b00      	cmp	r3, #0
 801354e:	d049      	beq.n	80135e4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013556:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801355a:	429a      	cmp	r2, r3
 801355c:	d242      	bcs.n	80135e4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	3308      	adds	r3, #8
 8013564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013566:	6a3b      	ldr	r3, [r7, #32]
 8013568:	e853 3f00 	ldrex	r3, [r3]
 801356c:	61fb      	str	r3, [r7, #28]
   return(result);
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	3308      	adds	r3, #8
 801357e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801358a:	e841 2300 	strex	r3, r2, [r1]
 801358e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013592:	2b00      	cmp	r3, #0
 8013594:	d1e3      	bne.n	801355e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	4a15      	ldr	r2, [pc, #84]	; (80135f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801359a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	e853 3f00 	ldrex	r3, [r3]
 80135a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	f043 0320 	orr.w	r3, r3, #32
 80135b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	461a      	mov	r2, r3
 80135ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80135be:	61bb      	str	r3, [r7, #24]
 80135c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135c2:	6979      	ldr	r1, [r7, #20]
 80135c4:	69ba      	ldr	r2, [r7, #24]
 80135c6:	e841 2300 	strex	r3, r2, [r1]
 80135ca:	613b      	str	r3, [r7, #16]
   return(result);
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d1e4      	bne.n	801359c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80135d2:	e007      	b.n	80135e4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	699a      	ldr	r2, [r3, #24]
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f042 0208 	orr.w	r2, r2, #8
 80135e2:	619a      	str	r2, [r3, #24]
}
 80135e4:	bf00      	nop
 80135e6:	37b0      	adds	r7, #176	; 0xb0
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	40008000 	.word	0x40008000
 80135f0:	08012f25 	.word	0x08012f25

080135f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b0ae      	sub	sp, #184	; 0xb8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013602:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	69db      	ldr	r3, [r3, #28]
 801360c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	689b      	ldr	r3, [r3, #8]
 8013620:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801362a:	2b22      	cmp	r3, #34	; 0x22
 801362c:	f040 8186 	bne.w	801393c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013636:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801363a:	e129      	b.n	8013890 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013642:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801364a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801364e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8013652:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8013656:	4013      	ands	r3, r2
 8013658:	b29a      	uxth	r2, r3
 801365a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801365e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013664:	1c9a      	adds	r2, r3, #2
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013670:	b29b      	uxth	r3, r3
 8013672:	3b01      	subs	r3, #1
 8013674:	b29a      	uxth	r2, r3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	69db      	ldr	r3, [r3, #28]
 8013682:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801368a:	f003 0307 	and.w	r3, r3, #7
 801368e:	2b00      	cmp	r3, #0
 8013690:	d053      	beq.n	801373a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013692:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013696:	f003 0301 	and.w	r3, r3, #1
 801369a:	2b00      	cmp	r3, #0
 801369c:	d011      	beq.n	80136c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 801369e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80136a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d00b      	beq.n	80136c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	2201      	movs	r2, #1
 80136b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80136b8:	f043 0201 	orr.w	r2, r3, #1
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80136c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80136c6:	f003 0302 	and.w	r3, r3, #2
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d011      	beq.n	80136f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80136ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80136d2:	f003 0301 	and.w	r3, r3, #1
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d00b      	beq.n	80136f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2202      	movs	r2, #2
 80136e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80136e8:	f043 0204 	orr.w	r2, r3, #4
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80136f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80136f6:	f003 0304 	and.w	r3, r3, #4
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d011      	beq.n	8013722 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80136fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013702:	f003 0301 	and.w	r3, r3, #1
 8013706:	2b00      	cmp	r3, #0
 8013708:	d00b      	beq.n	8013722 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	2204      	movs	r2, #4
 8013710:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013718:	f043 0202 	orr.w	r2, r3, #2
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013728:	2b00      	cmp	r3, #0
 801372a:	d006      	beq.n	801373a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f7fe fd65 	bl	80121fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2200      	movs	r2, #0
 8013736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013740:	b29b      	uxth	r3, r3
 8013742:	2b00      	cmp	r3, #0
 8013744:	f040 80a4 	bne.w	8013890 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801374e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013750:	e853 3f00 	ldrex	r3, [r3]
 8013754:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8013756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801375c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	461a      	mov	r2, r3
 8013766:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801376a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801376e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013770:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013772:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013776:	e841 2300 	strex	r3, r2, [r1]
 801377a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801377c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801377e:	2b00      	cmp	r3, #0
 8013780:	d1e2      	bne.n	8013748 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	3308      	adds	r3, #8
 8013788:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801378a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801378c:	e853 3f00 	ldrex	r3, [r3]
 8013790:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013798:	f023 0301 	bic.w	r3, r3, #1
 801379c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	3308      	adds	r3, #8
 80137a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80137aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80137ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80137b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80137b2:	e841 2300 	strex	r3, r2, [r1]
 80137b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80137b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d1e1      	bne.n	8013782 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2220      	movs	r2, #32
 80137c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2200      	movs	r2, #0
 80137ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2200      	movs	r2, #0
 80137d0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	4a5f      	ldr	r2, [pc, #380]	; (8013954 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80137d8:	4293      	cmp	r3, r2
 80137da:	d021      	beq.n	8013820 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d01a      	beq.n	8013820 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137f2:	e853 3f00 	ldrex	r3, [r3]
 80137f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80137f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80137fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	461a      	mov	r2, r3
 8013808:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801380c:	65bb      	str	r3, [r7, #88]	; 0x58
 801380e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013810:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013812:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013814:	e841 2300 	strex	r3, r2, [r1]
 8013818:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801381a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801381c:	2b00      	cmp	r3, #0
 801381e:	d1e4      	bne.n	80137ea <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013824:	2b01      	cmp	r3, #1
 8013826:	d130      	bne.n	801388a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2200      	movs	r2, #0
 801382c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013836:	e853 3f00 	ldrex	r3, [r3]
 801383a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801383e:	f023 0310 	bic.w	r3, r3, #16
 8013842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	461a      	mov	r2, r3
 801384c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013850:	647b      	str	r3, [r7, #68]	; 0x44
 8013852:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013854:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013858:	e841 2300 	strex	r3, r2, [r1]
 801385c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801385e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013860:	2b00      	cmp	r3, #0
 8013862:	d1e4      	bne.n	801382e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	69db      	ldr	r3, [r3, #28]
 801386a:	f003 0310 	and.w	r3, r3, #16
 801386e:	2b10      	cmp	r3, #16
 8013870:	d103      	bne.n	801387a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	2210      	movs	r2, #16
 8013878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013880:	4619      	mov	r1, r3
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f7fe fcc4 	bl	8012210 <HAL_UARTEx_RxEventCallback>
 8013888:	e002      	b.n	8013890 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f7ee f9f0 	bl	8001c70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013890:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8013894:	2b00      	cmp	r3, #0
 8013896:	d006      	beq.n	80138a6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8013898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801389c:	f003 0320 	and.w	r3, r3, #32
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	f47f aecb 	bne.w	801363c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80138ac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80138b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d049      	beq.n	801394c <UART_RxISR_16BIT_FIFOEN+0x358>
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80138be:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d242      	bcs.n	801394c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	3308      	adds	r3, #8
 80138cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d0:	e853 3f00 	ldrex	r3, [r3]
 80138d4:	623b      	str	r3, [r7, #32]
   return(result);
 80138d6:	6a3b      	ldr	r3, [r7, #32]
 80138d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80138dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	3308      	adds	r3, #8
 80138e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80138ea:	633a      	str	r2, [r7, #48]	; 0x30
 80138ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80138f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138f2:	e841 2300 	strex	r3, r2, [r1]
 80138f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80138f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d1e3      	bne.n	80138c6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	4a15      	ldr	r2, [pc, #84]	; (8013958 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8013902:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	e853 3f00 	ldrex	r3, [r3]
 8013910:	60fb      	str	r3, [r7, #12]
   return(result);
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	f043 0320 	orr.w	r3, r3, #32
 8013918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	461a      	mov	r2, r3
 8013922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013926:	61fb      	str	r3, [r7, #28]
 8013928:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801392a:	69b9      	ldr	r1, [r7, #24]
 801392c:	69fa      	ldr	r2, [r7, #28]
 801392e:	e841 2300 	strex	r3, r2, [r1]
 8013932:	617b      	str	r3, [r7, #20]
   return(result);
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d1e4      	bne.n	8013904 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801393a:	e007      	b.n	801394c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	699a      	ldr	r2, [r3, #24]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	f042 0208 	orr.w	r2, r2, #8
 801394a:	619a      	str	r2, [r3, #24]
}
 801394c:	bf00      	nop
 801394e:	37b8      	adds	r7, #184	; 0xb8
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	40008000 	.word	0x40008000
 8013958:	080130dd 	.word	0x080130dd

0801395c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801395c:	b480      	push	{r7}
 801395e:	b083      	sub	sp, #12
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013964:	bf00      	nop
 8013966:	370c      	adds	r7, #12
 8013968:	46bd      	mov	sp, r7
 801396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396e:	4770      	bx	lr

08013970 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013970:	b480      	push	{r7}
 8013972:	b083      	sub	sp, #12
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013978:	bf00      	nop
 801397a:	370c      	adds	r7, #12
 801397c:	46bd      	mov	sp, r7
 801397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013982:	4770      	bx	lr

08013984 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013984:	b480      	push	{r7}
 8013986:	b083      	sub	sp, #12
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801398c:	bf00      	nop
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr

08013998 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013998:	b480      	push	{r7}
 801399a:	b085      	sub	sp, #20
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80139a6:	2b01      	cmp	r3, #1
 80139a8:	d101      	bne.n	80139ae <HAL_UARTEx_DisableFifoMode+0x16>
 80139aa:	2302      	movs	r3, #2
 80139ac:	e027      	b.n	80139fe <HAL_UARTEx_DisableFifoMode+0x66>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2201      	movs	r2, #1
 80139b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2224      	movs	r2, #36	; 0x24
 80139ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	681a      	ldr	r2, [r3, #0]
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	f022 0201 	bic.w	r2, r2, #1
 80139d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80139dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2200      	movs	r2, #0
 80139e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	68fa      	ldr	r2, [r7, #12]
 80139ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2220      	movs	r2, #32
 80139f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2200      	movs	r2, #0
 80139f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80139fc:	2300      	movs	r3, #0
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3714      	adds	r7, #20
 8013a02:	46bd      	mov	sp, r7
 8013a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a08:	4770      	bx	lr

08013a0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013a0a:	b580      	push	{r7, lr}
 8013a0c:	b084      	sub	sp, #16
 8013a0e:	af00      	add	r7, sp, #0
 8013a10:	6078      	str	r0, [r7, #4]
 8013a12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d101      	bne.n	8013a22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013a1e:	2302      	movs	r3, #2
 8013a20:	e02d      	b.n	8013a7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2201      	movs	r2, #1
 8013a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	2224      	movs	r2, #36	; 0x24
 8013a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	f022 0201 	bic.w	r2, r2, #1
 8013a48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	689b      	ldr	r3, [r3, #8]
 8013a50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	683a      	ldr	r2, [r7, #0]
 8013a5a:	430a      	orrs	r2, r1
 8013a5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 f850 	bl	8013b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	68fa      	ldr	r2, [r7, #12]
 8013a6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2220      	movs	r2, #32
 8013a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2200      	movs	r2, #0
 8013a78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013a7c:	2300      	movs	r3, #0
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3710      	adds	r7, #16
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b084      	sub	sp, #16
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
 8013a8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013a96:	2b01      	cmp	r3, #1
 8013a98:	d101      	bne.n	8013a9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013a9a:	2302      	movs	r3, #2
 8013a9c:	e02d      	b.n	8013afa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2224      	movs	r2, #36	; 0x24
 8013aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	681a      	ldr	r2, [r3, #0]
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	f022 0201 	bic.w	r2, r2, #1
 8013ac4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	689b      	ldr	r3, [r3, #8]
 8013acc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	683a      	ldr	r2, [r7, #0]
 8013ad6:	430a      	orrs	r2, r1
 8013ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f000 f812 	bl	8013b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	68fa      	ldr	r2, [r7, #12]
 8013ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2220      	movs	r2, #32
 8013aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2200      	movs	r2, #0
 8013af4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013af8:	2300      	movs	r3, #0
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3710      	adds	r7, #16
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
	...

08013b04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b085      	sub	sp, #20
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d108      	bne.n	8013b26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2201      	movs	r2, #1
 8013b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2201      	movs	r2, #1
 8013b20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013b24:	e031      	b.n	8013b8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013b26:	2308      	movs	r3, #8
 8013b28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013b2a:	2308      	movs	r3, #8
 8013b2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	689b      	ldr	r3, [r3, #8]
 8013b34:	0e5b      	lsrs	r3, r3, #25
 8013b36:	b2db      	uxtb	r3, r3
 8013b38:	f003 0307 	and.w	r3, r3, #7
 8013b3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	689b      	ldr	r3, [r3, #8]
 8013b44:	0f5b      	lsrs	r3, r3, #29
 8013b46:	b2db      	uxtb	r3, r3
 8013b48:	f003 0307 	and.w	r3, r3, #7
 8013b4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013b4e:	7bbb      	ldrb	r3, [r7, #14]
 8013b50:	7b3a      	ldrb	r2, [r7, #12]
 8013b52:	4911      	ldr	r1, [pc, #68]	; (8013b98 <UARTEx_SetNbDataToProcess+0x94>)
 8013b54:	5c8a      	ldrb	r2, [r1, r2]
 8013b56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013b5a:	7b3a      	ldrb	r2, [r7, #12]
 8013b5c:	490f      	ldr	r1, [pc, #60]	; (8013b9c <UARTEx_SetNbDataToProcess+0x98>)
 8013b5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013b60:	fb93 f3f2 	sdiv	r3, r3, r2
 8013b64:	b29a      	uxth	r2, r3
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013b6c:	7bfb      	ldrb	r3, [r7, #15]
 8013b6e:	7b7a      	ldrb	r2, [r7, #13]
 8013b70:	4909      	ldr	r1, [pc, #36]	; (8013b98 <UARTEx_SetNbDataToProcess+0x94>)
 8013b72:	5c8a      	ldrb	r2, [r1, r2]
 8013b74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013b78:	7b7a      	ldrb	r2, [r7, #13]
 8013b7a:	4908      	ldr	r1, [pc, #32]	; (8013b9c <UARTEx_SetNbDataToProcess+0x98>)
 8013b7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013b7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013b82:	b29a      	uxth	r2, r3
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013b8a:	bf00      	nop
 8013b8c:	3714      	adds	r7, #20
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b94:	4770      	bx	lr
 8013b96:	bf00      	nop
 8013b98:	0801897c 	.word	0x0801897c
 8013b9c:	08018984 	.word	0x08018984

08013ba0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8013ba0:	b480      	push	{r7}
 8013ba2:	b08b      	sub	sp, #44	; 0x2c
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	60f8      	str	r0, [r7, #12]
 8013ba8:	60b9      	str	r1, [r7, #8]
 8013baa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	fa93 f3a3 	rbit	r3, r3
 8013bba:	613b      	str	r3, [r7, #16]
  return result;
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013bc0:	69bb      	ldr	r3, [r7, #24]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d101      	bne.n	8013bca <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8013bc6:	2320      	movs	r3, #32
 8013bc8:	e003      	b.n	8013bd2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8013bca:	69bb      	ldr	r3, [r7, #24]
 8013bcc:	fab3 f383 	clz	r3, r3
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	005b      	lsls	r3, r3, #1
 8013bd4:	2103      	movs	r1, #3
 8013bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8013bda:	43db      	mvns	r3, r3
 8013bdc:	401a      	ands	r2, r3
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013be2:	6a3b      	ldr	r3, [r7, #32]
 8013be4:	fa93 f3a3 	rbit	r3, r3
 8013be8:	61fb      	str	r3, [r7, #28]
  return result;
 8013bea:	69fb      	ldr	r3, [r7, #28]
 8013bec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d101      	bne.n	8013bf8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8013bf4:	2320      	movs	r3, #32
 8013bf6:	e003      	b.n	8013c00 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8013bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfa:	fab3 f383 	clz	r3, r3
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	005b      	lsls	r3, r3, #1
 8013c02:	6879      	ldr	r1, [r7, #4]
 8013c04:	fa01 f303 	lsl.w	r3, r1, r3
 8013c08:	431a      	orrs	r2, r3
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	601a      	str	r2, [r3, #0]
}
 8013c0e:	bf00      	nop
 8013c10:	372c      	adds	r7, #44	; 0x2c
 8013c12:	46bd      	mov	sp, r7
 8013c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c18:	4770      	bx	lr

08013c1a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8013c1a:	b480      	push	{r7}
 8013c1c:	b085      	sub	sp, #20
 8013c1e:	af00      	add	r7, sp, #0
 8013c20:	60f8      	str	r0, [r7, #12]
 8013c22:	60b9      	str	r1, [r7, #8]
 8013c24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	685a      	ldr	r2, [r3, #4]
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	43db      	mvns	r3, r3
 8013c2e:	401a      	ands	r2, r3
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	6879      	ldr	r1, [r7, #4]
 8013c34:	fb01 f303 	mul.w	r3, r1, r3
 8013c38:	431a      	orrs	r2, r3
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	605a      	str	r2, [r3, #4]
}
 8013c3e:	bf00      	nop
 8013c40:	3714      	adds	r7, #20
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr

08013c4a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8013c4a:	b480      	push	{r7}
 8013c4c:	b08b      	sub	sp, #44	; 0x2c
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	60f8      	str	r0, [r7, #12]
 8013c52:	60b9      	str	r1, [r7, #8]
 8013c54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	689a      	ldr	r2, [r3, #8]
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	fa93 f3a3 	rbit	r3, r3
 8013c64:	613b      	str	r3, [r7, #16]
  return result;
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d101      	bne.n	8013c74 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8013c70:	2320      	movs	r3, #32
 8013c72:	e003      	b.n	8013c7c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8013c74:	69bb      	ldr	r3, [r7, #24]
 8013c76:	fab3 f383 	clz	r3, r3
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	005b      	lsls	r3, r3, #1
 8013c7e:	2103      	movs	r1, #3
 8013c80:	fa01 f303 	lsl.w	r3, r1, r3
 8013c84:	43db      	mvns	r3, r3
 8013c86:	401a      	ands	r2, r3
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013c8c:	6a3b      	ldr	r3, [r7, #32]
 8013c8e:	fa93 f3a3 	rbit	r3, r3
 8013c92:	61fb      	str	r3, [r7, #28]
  return result;
 8013c94:	69fb      	ldr	r3, [r7, #28]
 8013c96:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d101      	bne.n	8013ca2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8013c9e:	2320      	movs	r3, #32
 8013ca0:	e003      	b.n	8013caa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8013ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca4:	fab3 f383 	clz	r3, r3
 8013ca8:	b2db      	uxtb	r3, r3
 8013caa:	005b      	lsls	r3, r3, #1
 8013cac:	6879      	ldr	r1, [r7, #4]
 8013cae:	fa01 f303 	lsl.w	r3, r1, r3
 8013cb2:	431a      	orrs	r2, r3
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8013cb8:	bf00      	nop
 8013cba:	372c      	adds	r7, #44	; 0x2c
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc2:	4770      	bx	lr

08013cc4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b08b      	sub	sp, #44	; 0x2c
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	68da      	ldr	r2, [r3, #12]
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	fa93 f3a3 	rbit	r3, r3
 8013cde:	613b      	str	r3, [r7, #16]
  return result;
 8013ce0:	693b      	ldr	r3, [r7, #16]
 8013ce2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013ce4:	69bb      	ldr	r3, [r7, #24]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d101      	bne.n	8013cee <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8013cea:	2320      	movs	r3, #32
 8013cec:	e003      	b.n	8013cf6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8013cee:	69bb      	ldr	r3, [r7, #24]
 8013cf0:	fab3 f383 	clz	r3, r3
 8013cf4:	b2db      	uxtb	r3, r3
 8013cf6:	005b      	lsls	r3, r3, #1
 8013cf8:	2103      	movs	r1, #3
 8013cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8013cfe:	43db      	mvns	r3, r3
 8013d00:	401a      	ands	r2, r3
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d06:	6a3b      	ldr	r3, [r7, #32]
 8013d08:	fa93 f3a3 	rbit	r3, r3
 8013d0c:	61fb      	str	r3, [r7, #28]
  return result;
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d101      	bne.n	8013d1c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8013d18:	2320      	movs	r3, #32
 8013d1a:	e003      	b.n	8013d24 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8013d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d1e:	fab3 f383 	clz	r3, r3
 8013d22:	b2db      	uxtb	r3, r3
 8013d24:	005b      	lsls	r3, r3, #1
 8013d26:	6879      	ldr	r1, [r7, #4]
 8013d28:	fa01 f303 	lsl.w	r3, r1, r3
 8013d2c:	431a      	orrs	r2, r3
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	60da      	str	r2, [r3, #12]
}
 8013d32:	bf00      	nop
 8013d34:	372c      	adds	r7, #44	; 0x2c
 8013d36:	46bd      	mov	sp, r7
 8013d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3c:	4770      	bx	lr

08013d3e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8013d3e:	b480      	push	{r7}
 8013d40:	b08b      	sub	sp, #44	; 0x2c
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	60f8      	str	r0, [r7, #12]
 8013d46:	60b9      	str	r1, [r7, #8]
 8013d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	6a1a      	ldr	r2, [r3, #32]
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d52:	697b      	ldr	r3, [r7, #20]
 8013d54:	fa93 f3a3 	rbit	r3, r3
 8013d58:	613b      	str	r3, [r7, #16]
  return result;
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013d5e:	69bb      	ldr	r3, [r7, #24]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d101      	bne.n	8013d68 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8013d64:	2320      	movs	r3, #32
 8013d66:	e003      	b.n	8013d70 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8013d68:	69bb      	ldr	r3, [r7, #24]
 8013d6a:	fab3 f383 	clz	r3, r3
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	009b      	lsls	r3, r3, #2
 8013d72:	210f      	movs	r1, #15
 8013d74:	fa01 f303 	lsl.w	r3, r1, r3
 8013d78:	43db      	mvns	r3, r3
 8013d7a:	401a      	ands	r2, r3
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d80:	6a3b      	ldr	r3, [r7, #32]
 8013d82:	fa93 f3a3 	rbit	r3, r3
 8013d86:	61fb      	str	r3, [r7, #28]
  return result;
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d101      	bne.n	8013d96 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8013d92:	2320      	movs	r3, #32
 8013d94:	e003      	b.n	8013d9e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8013d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d98:	fab3 f383 	clz	r3, r3
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	009b      	lsls	r3, r3, #2
 8013da0:	6879      	ldr	r1, [r7, #4]
 8013da2:	fa01 f303 	lsl.w	r3, r1, r3
 8013da6:	431a      	orrs	r2, r3
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8013dac:	bf00      	nop
 8013dae:	372c      	adds	r7, #44	; 0x2c
 8013db0:	46bd      	mov	sp, r7
 8013db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db6:	4770      	bx	lr

08013db8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b08b      	sub	sp, #44	; 0x2c
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	60f8      	str	r0, [r7, #12]
 8013dc0:	60b9      	str	r1, [r7, #8]
 8013dc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	0a1b      	lsrs	r3, r3, #8
 8013dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	fa93 f3a3 	rbit	r3, r3
 8013dd4:	613b      	str	r3, [r7, #16]
  return result;
 8013dd6:	693b      	ldr	r3, [r7, #16]
 8013dd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d101      	bne.n	8013de4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8013de0:	2320      	movs	r3, #32
 8013de2:	e003      	b.n	8013dec <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8013de4:	69bb      	ldr	r3, [r7, #24]
 8013de6:	fab3 f383 	clz	r3, r3
 8013dea:	b2db      	uxtb	r3, r3
 8013dec:	009b      	lsls	r3, r3, #2
 8013dee:	210f      	movs	r1, #15
 8013df0:	fa01 f303 	lsl.w	r3, r1, r3
 8013df4:	43db      	mvns	r3, r3
 8013df6:	401a      	ands	r2, r3
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	0a1b      	lsrs	r3, r3, #8
 8013dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013dfe:	6a3b      	ldr	r3, [r7, #32]
 8013e00:	fa93 f3a3 	rbit	r3, r3
 8013e04:	61fb      	str	r3, [r7, #28]
  return result;
 8013e06:	69fb      	ldr	r3, [r7, #28]
 8013e08:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d101      	bne.n	8013e14 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8013e10:	2320      	movs	r3, #32
 8013e12:	e003      	b.n	8013e1c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8013e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e16:	fab3 f383 	clz	r3, r3
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	009b      	lsls	r3, r3, #2
 8013e1e:	6879      	ldr	r1, [r7, #4]
 8013e20:	fa01 f303 	lsl.w	r3, r1, r3
 8013e24:	431a      	orrs	r2, r3
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8013e2a:	bf00      	nop
 8013e2c:	372c      	adds	r7, #44	; 0x2c
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e34:	4770      	bx	lr

08013e36 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8013e36:	b580      	push	{r7, lr}
 8013e38:	b088      	sub	sp, #32
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
 8013e3e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013e46:	693b      	ldr	r3, [r7, #16]
 8013e48:	fa93 f3a3 	rbit	r3, r3
 8013e4c:	60fb      	str	r3, [r7, #12]
  return result;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d101      	bne.n	8013e5c <LL_GPIO_Init+0x26>
    return 32U;
 8013e58:	2320      	movs	r3, #32
 8013e5a:	e003      	b.n	8013e64 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	fab3 f383 	clz	r3, r3
 8013e62:	b2db      	uxtb	r3, r3
 8013e64:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8013e66:	e047      	b.n	8013ef8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	681a      	ldr	r2, [r3, #0]
 8013e6c:	2101      	movs	r1, #1
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	fa01 f303 	lsl.w	r3, r1, r3
 8013e74:	4013      	ands	r3, r2
 8013e76:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8013e78:	69bb      	ldr	r3, [r7, #24]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d039      	beq.n	8013ef2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	2b01      	cmp	r3, #1
 8013e84:	d003      	beq.n	8013e8e <LL_GPIO_Init+0x58>
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	2b02      	cmp	r3, #2
 8013e8c:	d10d      	bne.n	8013eaa <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	689b      	ldr	r3, [r3, #8]
 8013e92:	461a      	mov	r2, r3
 8013e94:	69b9      	ldr	r1, [r7, #24]
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f7ff fed7 	bl	8013c4a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	68db      	ldr	r3, [r3, #12]
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	69b9      	ldr	r1, [r7, #24]
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f7ff feb8 	bl	8013c1a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	691b      	ldr	r3, [r3, #16]
 8013eae:	461a      	mov	r2, r3
 8013eb0:	69b9      	ldr	r1, [r7, #24]
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f7ff ff06 	bl	8013cc4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	2b02      	cmp	r3, #2
 8013ebe:	d111      	bne.n	8013ee4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8013ec0:	69bb      	ldr	r3, [r7, #24]
 8013ec2:	2bff      	cmp	r3, #255	; 0xff
 8013ec4:	d807      	bhi.n	8013ed6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	695b      	ldr	r3, [r3, #20]
 8013eca:	461a      	mov	r2, r3
 8013ecc:	69b9      	ldr	r1, [r7, #24]
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f7ff ff35 	bl	8013d3e <LL_GPIO_SetAFPin_0_7>
 8013ed4:	e006      	b.n	8013ee4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8013ed6:	683b      	ldr	r3, [r7, #0]
 8013ed8:	695b      	ldr	r3, [r3, #20]
 8013eda:	461a      	mov	r2, r3
 8013edc:	69b9      	ldr	r1, [r7, #24]
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f7ff ff6a 	bl	8013db8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	685b      	ldr	r3, [r3, #4]
 8013ee8:	461a      	mov	r2, r3
 8013eea:	69b9      	ldr	r1, [r7, #24]
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f7ff fe57 	bl	8013ba0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8013ef2:	69fb      	ldr	r3, [r7, #28]
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	681a      	ldr	r2, [r3, #0]
 8013efc:	69fb      	ldr	r3, [r7, #28]
 8013efe:	fa22 f303 	lsr.w	r3, r2, r3
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d1b0      	bne.n	8013e68 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8013f06:	2300      	movs	r3, #0
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3720      	adds	r7, #32
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8013f10:	b480      	push	{r7}
 8013f12:	b085      	sub	sp, #20
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013f18:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8013f1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	43db      	mvns	r3, r3
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	4013      	ands	r3, r2
 8013f30:	b29a      	uxth	r2, r3
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8013f38:	2300      	movs	r3, #0
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3714      	adds	r7, #20
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f44:	4770      	bx	lr

08013f46 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8013f46:	b084      	sub	sp, #16
 8013f48:	b480      	push	{r7}
 8013f4a:	b083      	sub	sp, #12
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	f107 0014 	add.w	r0, r7, #20
 8013f54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2201      	movs	r2, #1
 8013f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	2200      	movs	r2, #0
 8013f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2200      	movs	r2, #0
 8013f74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8013f78:	2300      	movs	r3, #0
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	370c      	adds	r7, #12
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f84:	b004      	add	sp, #16
 8013f86:	4770      	bx	lr

08013f88 <__NVIC_SetPriority>:
{
 8013f88:	b480      	push	{r7}
 8013f8a:	b083      	sub	sp, #12
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	4603      	mov	r3, r0
 8013f90:	6039      	str	r1, [r7, #0]
 8013f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	db0a      	blt.n	8013fb2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	b2da      	uxtb	r2, r3
 8013fa0:	490c      	ldr	r1, [pc, #48]	; (8013fd4 <__NVIC_SetPriority+0x4c>)
 8013fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fa6:	0152      	lsls	r2, r2, #5
 8013fa8:	b2d2      	uxtb	r2, r2
 8013faa:	440b      	add	r3, r1
 8013fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013fb0:	e00a      	b.n	8013fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	b2da      	uxtb	r2, r3
 8013fb6:	4908      	ldr	r1, [pc, #32]	; (8013fd8 <__NVIC_SetPriority+0x50>)
 8013fb8:	79fb      	ldrb	r3, [r7, #7]
 8013fba:	f003 030f 	and.w	r3, r3, #15
 8013fbe:	3b04      	subs	r3, #4
 8013fc0:	0152      	lsls	r2, r2, #5
 8013fc2:	b2d2      	uxtb	r2, r2
 8013fc4:	440b      	add	r3, r1
 8013fc6:	761a      	strb	r2, [r3, #24]
}
 8013fc8:	bf00      	nop
 8013fca:	370c      	adds	r7, #12
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd2:	4770      	bx	lr
 8013fd4:	e000e100 	.word	0xe000e100
 8013fd8:	e000ed00 	.word	0xe000ed00

08013fdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013fe0:	4b05      	ldr	r3, [pc, #20]	; (8013ff8 <SysTick_Handler+0x1c>)
 8013fe2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013fe4:	f001 fcbc 	bl	8015960 <xTaskGetSchedulerState>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	2b01      	cmp	r3, #1
 8013fec:	d001      	beq.n	8013ff2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013fee:	f002 f911 	bl	8016214 <xPortSysTickHandler>
  }
}
 8013ff2:	bf00      	nop
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	e000e010 	.word	0xe000e010

08013ffc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014000:	2100      	movs	r1, #0
 8014002:	f06f 0004 	mvn.w	r0, #4
 8014006:	f7ff ffbf 	bl	8013f88 <__NVIC_SetPriority>
#endif
}
 801400a:	bf00      	nop
 801400c:	bd80      	pop	{r7, pc}
	...

08014010 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014016:	f3ef 8305 	mrs	r3, IPSR
 801401a:	603b      	str	r3, [r7, #0]
  return(result);
 801401c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801401e:	2b00      	cmp	r3, #0
 8014020:	d003      	beq.n	801402a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014022:	f06f 0305 	mvn.w	r3, #5
 8014026:	607b      	str	r3, [r7, #4]
 8014028:	e00c      	b.n	8014044 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801402a:	4b0a      	ldr	r3, [pc, #40]	; (8014054 <osKernelInitialize+0x44>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d105      	bne.n	801403e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014032:	4b08      	ldr	r3, [pc, #32]	; (8014054 <osKernelInitialize+0x44>)
 8014034:	2201      	movs	r2, #1
 8014036:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014038:	2300      	movs	r3, #0
 801403a:	607b      	str	r3, [r7, #4]
 801403c:	e002      	b.n	8014044 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801403e:	f04f 33ff 	mov.w	r3, #4294967295
 8014042:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014044:	687b      	ldr	r3, [r7, #4]
}
 8014046:	4618      	mov	r0, r3
 8014048:	370c      	adds	r7, #12
 801404a:	46bd      	mov	sp, r7
 801404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014050:	4770      	bx	lr
 8014052:	bf00      	nop
 8014054:	20000b64 	.word	0x20000b64

08014058 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014058:	b580      	push	{r7, lr}
 801405a:	b082      	sub	sp, #8
 801405c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801405e:	f3ef 8305 	mrs	r3, IPSR
 8014062:	603b      	str	r3, [r7, #0]
  return(result);
 8014064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014066:	2b00      	cmp	r3, #0
 8014068:	d003      	beq.n	8014072 <osKernelStart+0x1a>
    stat = osErrorISR;
 801406a:	f06f 0305 	mvn.w	r3, #5
 801406e:	607b      	str	r3, [r7, #4]
 8014070:	e010      	b.n	8014094 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014072:	4b0b      	ldr	r3, [pc, #44]	; (80140a0 <osKernelStart+0x48>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	2b01      	cmp	r3, #1
 8014078:	d109      	bne.n	801408e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801407a:	f7ff ffbf 	bl	8013ffc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801407e:	4b08      	ldr	r3, [pc, #32]	; (80140a0 <osKernelStart+0x48>)
 8014080:	2202      	movs	r2, #2
 8014082:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014084:	f001 f88e 	bl	80151a4 <vTaskStartScheduler>
      stat = osOK;
 8014088:	2300      	movs	r3, #0
 801408a:	607b      	str	r3, [r7, #4]
 801408c:	e002      	b.n	8014094 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801408e:	f04f 33ff 	mov.w	r3, #4294967295
 8014092:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014094:	687b      	ldr	r3, [r7, #4]
}
 8014096:	4618      	mov	r0, r3
 8014098:	3708      	adds	r7, #8
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}
 801409e:	bf00      	nop
 80140a0:	20000b64 	.word	0x20000b64

080140a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b08e      	sub	sp, #56	; 0x38
 80140a8:	af04      	add	r7, sp, #16
 80140aa:	60f8      	str	r0, [r7, #12]
 80140ac:	60b9      	str	r1, [r7, #8]
 80140ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80140b0:	2300      	movs	r3, #0
 80140b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80140b4:	f3ef 8305 	mrs	r3, IPSR
 80140b8:	617b      	str	r3, [r7, #20]
  return(result);
 80140ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d17e      	bne.n	80141be <osThreadNew+0x11a>
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d07b      	beq.n	80141be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80140c6:	2380      	movs	r3, #128	; 0x80
 80140c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80140ca:	2318      	movs	r3, #24
 80140cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80140ce:	2300      	movs	r3, #0
 80140d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80140d2:	f04f 33ff 	mov.w	r3, #4294967295
 80140d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d045      	beq.n	801416a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d002      	beq.n	80140ec <osThreadNew+0x48>
        name = attr->name;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	699b      	ldr	r3, [r3, #24]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d002      	beq.n	80140fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	699b      	ldr	r3, [r3, #24]
 80140f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d008      	beq.n	8014112 <osThreadNew+0x6e>
 8014100:	69fb      	ldr	r3, [r7, #28]
 8014102:	2b38      	cmp	r3, #56	; 0x38
 8014104:	d805      	bhi.n	8014112 <osThreadNew+0x6e>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	685b      	ldr	r3, [r3, #4]
 801410a:	f003 0301 	and.w	r3, r3, #1
 801410e:	2b00      	cmp	r3, #0
 8014110:	d001      	beq.n	8014116 <osThreadNew+0x72>
        return (NULL);
 8014112:	2300      	movs	r3, #0
 8014114:	e054      	b.n	80141c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	695b      	ldr	r3, [r3, #20]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d003      	beq.n	8014126 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	695b      	ldr	r3, [r3, #20]
 8014122:	089b      	lsrs	r3, r3, #2
 8014124:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	689b      	ldr	r3, [r3, #8]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d00e      	beq.n	801414c <osThreadNew+0xa8>
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	68db      	ldr	r3, [r3, #12]
 8014132:	2b5b      	cmp	r3, #91	; 0x5b
 8014134:	d90a      	bls.n	801414c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801413a:	2b00      	cmp	r3, #0
 801413c:	d006      	beq.n	801414c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	695b      	ldr	r3, [r3, #20]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d002      	beq.n	801414c <osThreadNew+0xa8>
        mem = 1;
 8014146:	2301      	movs	r3, #1
 8014148:	61bb      	str	r3, [r7, #24]
 801414a:	e010      	b.n	801416e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	689b      	ldr	r3, [r3, #8]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d10c      	bne.n	801416e <osThreadNew+0xca>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	68db      	ldr	r3, [r3, #12]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d108      	bne.n	801416e <osThreadNew+0xca>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	691b      	ldr	r3, [r3, #16]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d104      	bne.n	801416e <osThreadNew+0xca>
          mem = 0;
 8014164:	2300      	movs	r3, #0
 8014166:	61bb      	str	r3, [r7, #24]
 8014168:	e001      	b.n	801416e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801416a:	2300      	movs	r3, #0
 801416c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801416e:	69bb      	ldr	r3, [r7, #24]
 8014170:	2b01      	cmp	r3, #1
 8014172:	d110      	bne.n	8014196 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801417c:	9202      	str	r2, [sp, #8]
 801417e:	9301      	str	r3, [sp, #4]
 8014180:	69fb      	ldr	r3, [r7, #28]
 8014182:	9300      	str	r3, [sp, #0]
 8014184:	68bb      	ldr	r3, [r7, #8]
 8014186:	6a3a      	ldr	r2, [r7, #32]
 8014188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801418a:	68f8      	ldr	r0, [r7, #12]
 801418c:	f000 fd30 	bl	8014bf0 <xTaskCreateStatic>
 8014190:	4603      	mov	r3, r0
 8014192:	613b      	str	r3, [r7, #16]
 8014194:	e013      	b.n	80141be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014196:	69bb      	ldr	r3, [r7, #24]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d110      	bne.n	80141be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801419c:	6a3b      	ldr	r3, [r7, #32]
 801419e:	b29a      	uxth	r2, r3
 80141a0:	f107 0310 	add.w	r3, r7, #16
 80141a4:	9301      	str	r3, [sp, #4]
 80141a6:	69fb      	ldr	r3, [r7, #28]
 80141a8:	9300      	str	r3, [sp, #0]
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f000 fd63 	bl	8014c7a <xTaskCreate>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b01      	cmp	r3, #1
 80141b8:	d001      	beq.n	80141be <osThreadNew+0x11a>
            hTask = NULL;
 80141ba:	2300      	movs	r3, #0
 80141bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80141be:	693b      	ldr	r3, [r7, #16]
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3728      	adds	r7, #40	; 0x28
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80141c8:	b480      	push	{r7}
 80141ca:	b085      	sub	sp, #20
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	60f8      	str	r0, [r7, #12]
 80141d0:	60b9      	str	r1, [r7, #8]
 80141d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	4a07      	ldr	r2, [pc, #28]	; (80141f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80141d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	4a06      	ldr	r2, [pc, #24]	; (80141f8 <vApplicationGetIdleTaskMemory+0x30>)
 80141de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2280      	movs	r2, #128	; 0x80
 80141e4:	601a      	str	r2, [r3, #0]
}
 80141e6:	bf00      	nop
 80141e8:	3714      	adds	r7, #20
 80141ea:	46bd      	mov	sp, r7
 80141ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f0:	4770      	bx	lr
 80141f2:	bf00      	nop
 80141f4:	20000b68 	.word	0x20000b68
 80141f8:	20000bc4 	.word	0x20000bc4

080141fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80141fc:	b480      	push	{r7}
 80141fe:	b085      	sub	sp, #20
 8014200:	af00      	add	r7, sp, #0
 8014202:	60f8      	str	r0, [r7, #12]
 8014204:	60b9      	str	r1, [r7, #8]
 8014206:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	4a07      	ldr	r2, [pc, #28]	; (8014228 <vApplicationGetTimerTaskMemory+0x2c>)
 801420c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	4a06      	ldr	r2, [pc, #24]	; (801422c <vApplicationGetTimerTaskMemory+0x30>)
 8014212:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f44f 7280 	mov.w	r2, #256	; 0x100
 801421a:	601a      	str	r2, [r3, #0]
}
 801421c:	bf00      	nop
 801421e:	3714      	adds	r7, #20
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr
 8014228:	20000dc4 	.word	0x20000dc4
 801422c:	20000e20 	.word	0x20000e20

08014230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014230:	b480      	push	{r7}
 8014232:	b083      	sub	sp, #12
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f103 0208 	add.w	r2, r3, #8
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f04f 32ff 	mov.w	r2, #4294967295
 8014248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	f103 0208 	add.w	r2, r3, #8
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f103 0208 	add.w	r2, r3, #8
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2200      	movs	r2, #0
 8014262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014264:	bf00      	nop
 8014266:	370c      	adds	r7, #12
 8014268:	46bd      	mov	sp, r7
 801426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426e:	4770      	bx	lr

08014270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014270:	b480      	push	{r7}
 8014272:	b083      	sub	sp, #12
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2200      	movs	r2, #0
 801427c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801427e:	bf00      	nop
 8014280:	370c      	adds	r7, #12
 8014282:	46bd      	mov	sp, r7
 8014284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014288:	4770      	bx	lr

0801428a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801428a:	b480      	push	{r7}
 801428c:	b085      	sub	sp, #20
 801428e:	af00      	add	r7, sp, #0
 8014290:	6078      	str	r0, [r7, #4]
 8014292:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	68fa      	ldr	r2, [r7, #12]
 801429e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	689a      	ldr	r2, [r3, #8]
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	689b      	ldr	r3, [r3, #8]
 80142ac:	683a      	ldr	r2, [r7, #0]
 80142ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	683a      	ldr	r2, [r7, #0]
 80142b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	1c5a      	adds	r2, r3, #1
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	601a      	str	r2, [r3, #0]
}
 80142c6:	bf00      	nop
 80142c8:	3714      	adds	r7, #20
 80142ca:	46bd      	mov	sp, r7
 80142cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d0:	4770      	bx	lr

080142d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80142d2:	b480      	push	{r7}
 80142d4:	b085      	sub	sp, #20
 80142d6:	af00      	add	r7, sp, #0
 80142d8:	6078      	str	r0, [r7, #4]
 80142da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142e8:	d103      	bne.n	80142f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	691b      	ldr	r3, [r3, #16]
 80142ee:	60fb      	str	r3, [r7, #12]
 80142f0:	e00c      	b.n	801430c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	3308      	adds	r3, #8
 80142f6:	60fb      	str	r3, [r7, #12]
 80142f8:	e002      	b.n	8014300 <vListInsert+0x2e>
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	60fb      	str	r3, [r7, #12]
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	685b      	ldr	r3, [r3, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	68ba      	ldr	r2, [r7, #8]
 8014308:	429a      	cmp	r2, r3
 801430a:	d2f6      	bcs.n	80142fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	685a      	ldr	r2, [r3, #4]
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	683a      	ldr	r2, [r7, #0]
 801431a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	68fa      	ldr	r2, [r7, #12]
 8014320:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	683a      	ldr	r2, [r7, #0]
 8014326:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	687a      	ldr	r2, [r7, #4]
 801432c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	1c5a      	adds	r2, r3, #1
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	601a      	str	r2, [r3, #0]
}
 8014338:	bf00      	nop
 801433a:	3714      	adds	r7, #20
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014344:	b480      	push	{r7}
 8014346:	b085      	sub	sp, #20
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	691b      	ldr	r3, [r3, #16]
 8014350:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	685b      	ldr	r3, [r3, #4]
 8014356:	687a      	ldr	r2, [r7, #4]
 8014358:	6892      	ldr	r2, [r2, #8]
 801435a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	689b      	ldr	r3, [r3, #8]
 8014360:	687a      	ldr	r2, [r7, #4]
 8014362:	6852      	ldr	r2, [r2, #4]
 8014364:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	687a      	ldr	r2, [r7, #4]
 801436c:	429a      	cmp	r2, r3
 801436e:	d103      	bne.n	8014378 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	689a      	ldr	r2, [r3, #8]
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2200      	movs	r2, #0
 801437c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	1e5a      	subs	r2, r3, #1
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	681b      	ldr	r3, [r3, #0]
}
 801438c:	4618      	mov	r0, r3
 801438e:	3714      	adds	r7, #20
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d102      	bne.n	80143b2 <xQueueGenericReset+0x1a>
 80143ac:	f002 f83c 	bl	8016428 <ulSetInterruptMask>
 80143b0:	e7fe      	b.n	80143b0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80143b2:	f001 ff03 	bl	80161bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	681a      	ldr	r2, [r3, #0]
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143be:	68f9      	ldr	r1, [r7, #12]
 80143c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80143c2:	fb01 f303 	mul.w	r3, r1, r3
 80143c6:	441a      	add	r2, r3
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	2200      	movs	r2, #0
 80143d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	681a      	ldr	r2, [r3, #0]
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	681a      	ldr	r2, [r3, #0]
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143e2:	3b01      	subs	r3, #1
 80143e4:	68f9      	ldr	r1, [r7, #12]
 80143e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80143e8:	fb01 f303 	mul.w	r3, r1, r3
 80143ec:	441a      	add	r2, r3
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	22ff      	movs	r2, #255	; 0xff
 80143f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	22ff      	movs	r2, #255	; 0xff
 80143fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d10e      	bne.n	8014426 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	691b      	ldr	r3, [r3, #16]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d014      	beq.n	801443a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	3310      	adds	r3, #16
 8014414:	4618      	mov	r0, r3
 8014416:	f001 f90d 	bl	8015634 <xTaskRemoveFromEventList>
 801441a:	4603      	mov	r3, r0
 801441c:	2b00      	cmp	r3, #0
 801441e:	d00c      	beq.n	801443a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014420:	f001 feba 	bl	8016198 <vPortYield>
 8014424:	e009      	b.n	801443a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	3310      	adds	r3, #16
 801442a:	4618      	mov	r0, r3
 801442c:	f7ff ff00 	bl	8014230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	3324      	adds	r3, #36	; 0x24
 8014434:	4618      	mov	r0, r3
 8014436:	f7ff fefb 	bl	8014230 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801443a:	f001 fed1 	bl	80161e0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801443e:	2301      	movs	r3, #1
}
 8014440:	4618      	mov	r0, r3
 8014442:	3710      	adds	r7, #16
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}

08014448 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014448:	b580      	push	{r7, lr}
 801444a:	b088      	sub	sp, #32
 801444c:	af02      	add	r7, sp, #8
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	60b9      	str	r1, [r7, #8]
 8014452:	607a      	str	r2, [r7, #4]
 8014454:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d102      	bne.n	8014462 <xQueueGenericCreateStatic+0x1a>
 801445c:	f001 ffe4 	bl	8016428 <ulSetInterruptMask>
 8014460:	e7fe      	b.n	8014460 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014462:	683b      	ldr	r3, [r7, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d102      	bne.n	801446e <xQueueGenericCreateStatic+0x26>
 8014468:	f001 ffde 	bl	8016428 <ulSetInterruptMask>
 801446c:	e7fe      	b.n	801446c <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d002      	beq.n	801447a <xQueueGenericCreateStatic+0x32>
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d001      	beq.n	801447e <xQueueGenericCreateStatic+0x36>
 801447a:	2301      	movs	r3, #1
 801447c:	e000      	b.n	8014480 <xQueueGenericCreateStatic+0x38>
 801447e:	2300      	movs	r3, #0
 8014480:	2b00      	cmp	r3, #0
 8014482:	d102      	bne.n	801448a <xQueueGenericCreateStatic+0x42>
 8014484:	f001 ffd0 	bl	8016428 <ulSetInterruptMask>
 8014488:	e7fe      	b.n	8014488 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d102      	bne.n	8014496 <xQueueGenericCreateStatic+0x4e>
 8014490:	68bb      	ldr	r3, [r7, #8]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d101      	bne.n	801449a <xQueueGenericCreateStatic+0x52>
 8014496:	2301      	movs	r3, #1
 8014498:	e000      	b.n	801449c <xQueueGenericCreateStatic+0x54>
 801449a:	2300      	movs	r3, #0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d102      	bne.n	80144a6 <xQueueGenericCreateStatic+0x5e>
 80144a0:	f001 ffc2 	bl	8016428 <ulSetInterruptMask>
 80144a4:	e7fe      	b.n	80144a4 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80144a6:	2350      	movs	r3, #80	; 0x50
 80144a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80144aa:	693b      	ldr	r3, [r7, #16]
 80144ac:	2b50      	cmp	r3, #80	; 0x50
 80144ae:	d002      	beq.n	80144b6 <xQueueGenericCreateStatic+0x6e>
 80144b0:	f001 ffba 	bl	8016428 <ulSetInterruptMask>
 80144b4:	e7fe      	b.n	80144b4 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80144b6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d00d      	beq.n	80144de <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	2201      	movs	r2, #1
 80144c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80144ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	9300      	str	r3, [sp, #0]
 80144d2:	4613      	mov	r3, r2
 80144d4:	687a      	ldr	r2, [r7, #4]
 80144d6:	68b9      	ldr	r1, [r7, #8]
 80144d8:	68f8      	ldr	r0, [r7, #12]
 80144da:	f000 f805 	bl	80144e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80144de:	697b      	ldr	r3, [r7, #20]
	}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3718      	adds	r7, #24
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	60f8      	str	r0, [r7, #12]
 80144f0:	60b9      	str	r1, [r7, #8]
 80144f2:	607a      	str	r2, [r7, #4]
 80144f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d103      	bne.n	8014504 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	69ba      	ldr	r2, [r7, #24]
 8014500:	601a      	str	r2, [r3, #0]
 8014502:	e002      	b.n	801450a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014504:	69bb      	ldr	r3, [r7, #24]
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801450a:	69bb      	ldr	r3, [r7, #24]
 801450c:	68fa      	ldr	r2, [r7, #12]
 801450e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014510:	69bb      	ldr	r3, [r7, #24]
 8014512:	68ba      	ldr	r2, [r7, #8]
 8014514:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014516:	2101      	movs	r1, #1
 8014518:	69b8      	ldr	r0, [r7, #24]
 801451a:	f7ff ff3d 	bl	8014398 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	78fa      	ldrb	r2, [r7, #3]
 8014522:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014526:	bf00      	nop
 8014528:	3710      	adds	r7, #16
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}

0801452e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801452e:	b580      	push	{r7, lr}
 8014530:	b08a      	sub	sp, #40	; 0x28
 8014532:	af00      	add	r7, sp, #0
 8014534:	60f8      	str	r0, [r7, #12]
 8014536:	60b9      	str	r1, [r7, #8]
 8014538:	607a      	str	r2, [r7, #4]
 801453a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801453c:	2300      	movs	r3, #0
 801453e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8014544:	6a3b      	ldr	r3, [r7, #32]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d102      	bne.n	8014550 <xQueueGenericSend+0x22>
 801454a:	f001 ff6d 	bl	8016428 <ulSetInterruptMask>
 801454e:	e7fe      	b.n	801454e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014550:	68bb      	ldr	r3, [r7, #8]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d103      	bne.n	801455e <xQueueGenericSend+0x30>
 8014556:	6a3b      	ldr	r3, [r7, #32]
 8014558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801455a:	2b00      	cmp	r3, #0
 801455c:	d101      	bne.n	8014562 <xQueueGenericSend+0x34>
 801455e:	2301      	movs	r3, #1
 8014560:	e000      	b.n	8014564 <xQueueGenericSend+0x36>
 8014562:	2300      	movs	r3, #0
 8014564:	2b00      	cmp	r3, #0
 8014566:	d102      	bne.n	801456e <xQueueGenericSend+0x40>
 8014568:	f001 ff5e 	bl	8016428 <ulSetInterruptMask>
 801456c:	e7fe      	b.n	801456c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801456e:	683b      	ldr	r3, [r7, #0]
 8014570:	2b02      	cmp	r3, #2
 8014572:	d103      	bne.n	801457c <xQueueGenericSend+0x4e>
 8014574:	6a3b      	ldr	r3, [r7, #32]
 8014576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014578:	2b01      	cmp	r3, #1
 801457a:	d101      	bne.n	8014580 <xQueueGenericSend+0x52>
 801457c:	2301      	movs	r3, #1
 801457e:	e000      	b.n	8014582 <xQueueGenericSend+0x54>
 8014580:	2300      	movs	r3, #0
 8014582:	2b00      	cmp	r3, #0
 8014584:	d102      	bne.n	801458c <xQueueGenericSend+0x5e>
 8014586:	f001 ff4f 	bl	8016428 <ulSetInterruptMask>
 801458a:	e7fe      	b.n	801458a <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801458c:	f001 f9e8 	bl	8015960 <xTaskGetSchedulerState>
 8014590:	4603      	mov	r3, r0
 8014592:	2b00      	cmp	r3, #0
 8014594:	d102      	bne.n	801459c <xQueueGenericSend+0x6e>
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d101      	bne.n	80145a0 <xQueueGenericSend+0x72>
 801459c:	2301      	movs	r3, #1
 801459e:	e000      	b.n	80145a2 <xQueueGenericSend+0x74>
 80145a0:	2300      	movs	r3, #0
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d102      	bne.n	80145ac <xQueueGenericSend+0x7e>
 80145a6:	f001 ff3f 	bl	8016428 <ulSetInterruptMask>
 80145aa:	e7fe      	b.n	80145aa <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80145ac:	f001 fe06 	bl	80161bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80145b0:	6a3b      	ldr	r3, [r7, #32]
 80145b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80145b4:	6a3b      	ldr	r3, [r7, #32]
 80145b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d302      	bcc.n	80145c2 <xQueueGenericSend+0x94>
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	2b02      	cmp	r3, #2
 80145c0:	d11d      	bne.n	80145fe <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80145c2:	683a      	ldr	r2, [r7, #0]
 80145c4:	68b9      	ldr	r1, [r7, #8]
 80145c6:	6a38      	ldr	r0, [r7, #32]
 80145c8:	f000 f9a4 	bl	8014914 <prvCopyDataToQueue>
 80145cc:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80145ce:	6a3b      	ldr	r3, [r7, #32]
 80145d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d00a      	beq.n	80145ec <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80145d6:	6a3b      	ldr	r3, [r7, #32]
 80145d8:	3324      	adds	r3, #36	; 0x24
 80145da:	4618      	mov	r0, r3
 80145dc:	f001 f82a 	bl	8015634 <xTaskRemoveFromEventList>
 80145e0:	4603      	mov	r3, r0
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d007      	beq.n	80145f6 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80145e6:	f001 fdd7 	bl	8016198 <vPortYield>
 80145ea:	e004      	b.n	80145f6 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80145ec:	69fb      	ldr	r3, [r7, #28]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d001      	beq.n	80145f6 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80145f2:	f001 fdd1 	bl	8016198 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80145f6:	f001 fdf3 	bl	80161e0 <vPortExitCritical>
				return pdPASS;
 80145fa:	2301      	movs	r3, #1
 80145fc:	e05c      	b.n	80146b8 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d103      	bne.n	801460c <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014604:	f001 fdec 	bl	80161e0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014608:	2300      	movs	r3, #0
 801460a:	e055      	b.n	80146b8 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460e:	2b00      	cmp	r3, #0
 8014610:	d106      	bne.n	8014620 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014612:	f107 0314 	add.w	r3, r7, #20
 8014616:	4618      	mov	r0, r3
 8014618:	f001 f868 	bl	80156ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801461c:	2301      	movs	r3, #1
 801461e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014620:	f001 fdde 	bl	80161e0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014624:	f000 fe14 	bl	8015250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014628:	f001 fdc8 	bl	80161bc <vPortEnterCritical>
 801462c:	6a3b      	ldr	r3, [r7, #32]
 801462e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014632:	b25b      	sxtb	r3, r3
 8014634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014638:	d103      	bne.n	8014642 <xQueueGenericSend+0x114>
 801463a:	6a3b      	ldr	r3, [r7, #32]
 801463c:	2200      	movs	r2, #0
 801463e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014642:	6a3b      	ldr	r3, [r7, #32]
 8014644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014648:	b25b      	sxtb	r3, r3
 801464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801464e:	d103      	bne.n	8014658 <xQueueGenericSend+0x12a>
 8014650:	6a3b      	ldr	r3, [r7, #32]
 8014652:	2200      	movs	r2, #0
 8014654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014658:	f001 fdc2 	bl	80161e0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801465c:	1d3a      	adds	r2, r7, #4
 801465e:	f107 0314 	add.w	r3, r7, #20
 8014662:	4611      	mov	r1, r2
 8014664:	4618      	mov	r0, r3
 8014666:	f001 f857 	bl	8015718 <xTaskCheckForTimeOut>
 801466a:	4603      	mov	r3, r0
 801466c:	2b00      	cmp	r3, #0
 801466e:	d11d      	bne.n	80146ac <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014670:	6a38      	ldr	r0, [r7, #32]
 8014672:	f000 fa47 	bl	8014b04 <prvIsQueueFull>
 8014676:	4603      	mov	r3, r0
 8014678:	2b00      	cmp	r3, #0
 801467a:	d011      	beq.n	80146a0 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801467c:	6a3b      	ldr	r3, [r7, #32]
 801467e:	3310      	adds	r3, #16
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	4611      	mov	r1, r2
 8014684:	4618      	mov	r0, r3
 8014686:	f000 ff95 	bl	80155b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801468a:	6a38      	ldr	r0, [r7, #32]
 801468c:	f000 f9d2 	bl	8014a34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014690:	f000 fdec 	bl	801526c <xTaskResumeAll>
 8014694:	4603      	mov	r3, r0
 8014696:	2b00      	cmp	r3, #0
 8014698:	d188      	bne.n	80145ac <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 801469a:	f001 fd7d 	bl	8016198 <vPortYield>
 801469e:	e785      	b.n	80145ac <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80146a0:	6a38      	ldr	r0, [r7, #32]
 80146a2:	f000 f9c7 	bl	8014a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80146a6:	f000 fde1 	bl	801526c <xTaskResumeAll>
 80146aa:	e77f      	b.n	80145ac <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80146ac:	6a38      	ldr	r0, [r7, #32]
 80146ae:	f000 f9c1 	bl	8014a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80146b2:	f000 fddb 	bl	801526c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80146b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3728      	adds	r7, #40	; 0x28
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}

080146c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b08a      	sub	sp, #40	; 0x28
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	60f8      	str	r0, [r7, #12]
 80146c8:	60b9      	str	r1, [r7, #8]
 80146ca:	607a      	str	r2, [r7, #4]
 80146cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80146d2:	6a3b      	ldr	r3, [r7, #32]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d102      	bne.n	80146de <xQueueGenericSendFromISR+0x1e>
 80146d8:	f001 fea6 	bl	8016428 <ulSetInterruptMask>
 80146dc:	e7fe      	b.n	80146dc <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d103      	bne.n	80146ec <xQueueGenericSendFromISR+0x2c>
 80146e4:	6a3b      	ldr	r3, [r7, #32]
 80146e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d101      	bne.n	80146f0 <xQueueGenericSendFromISR+0x30>
 80146ec:	2301      	movs	r3, #1
 80146ee:	e000      	b.n	80146f2 <xQueueGenericSendFromISR+0x32>
 80146f0:	2300      	movs	r3, #0
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d102      	bne.n	80146fc <xQueueGenericSendFromISR+0x3c>
 80146f6:	f001 fe97 	bl	8016428 <ulSetInterruptMask>
 80146fa:	e7fe      	b.n	80146fa <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	2b02      	cmp	r3, #2
 8014700:	d103      	bne.n	801470a <xQueueGenericSendFromISR+0x4a>
 8014702:	6a3b      	ldr	r3, [r7, #32]
 8014704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014706:	2b01      	cmp	r3, #1
 8014708:	d101      	bne.n	801470e <xQueueGenericSendFromISR+0x4e>
 801470a:	2301      	movs	r3, #1
 801470c:	e000      	b.n	8014710 <xQueueGenericSendFromISR+0x50>
 801470e:	2300      	movs	r3, #0
 8014710:	2b00      	cmp	r3, #0
 8014712:	d102      	bne.n	801471a <xQueueGenericSendFromISR+0x5a>
 8014714:	f001 fe88 	bl	8016428 <ulSetInterruptMask>
 8014718:	e7fe      	b.n	8014718 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801471a:	f001 fe85 	bl	8016428 <ulSetInterruptMask>
 801471e:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014720:	6a3b      	ldr	r3, [r7, #32]
 8014722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014724:	6a3b      	ldr	r3, [r7, #32]
 8014726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014728:	429a      	cmp	r2, r3
 801472a:	d302      	bcc.n	8014732 <xQueueGenericSendFromISR+0x72>
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	2b02      	cmp	r3, #2
 8014730:	d12d      	bne.n	801478e <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014732:	6a3b      	ldr	r3, [r7, #32]
 8014734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014738:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801473a:	6a3b      	ldr	r3, [r7, #32]
 801473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801473e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014740:	683a      	ldr	r2, [r7, #0]
 8014742:	68b9      	ldr	r1, [r7, #8]
 8014744:	6a38      	ldr	r0, [r7, #32]
 8014746:	f000 f8e5 	bl	8014914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801474a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014752:	d112      	bne.n	801477a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014754:	6a3b      	ldr	r3, [r7, #32]
 8014756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014758:	2b00      	cmp	r3, #0
 801475a:	d015      	beq.n	8014788 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801475c:	6a3b      	ldr	r3, [r7, #32]
 801475e:	3324      	adds	r3, #36	; 0x24
 8014760:	4618      	mov	r0, r3
 8014762:	f000 ff67 	bl	8015634 <xTaskRemoveFromEventList>
 8014766:	4603      	mov	r3, r0
 8014768:	2b00      	cmp	r3, #0
 801476a:	d00d      	beq.n	8014788 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d00a      	beq.n	8014788 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2201      	movs	r2, #1
 8014776:	601a      	str	r2, [r3, #0]
 8014778:	e006      	b.n	8014788 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801477a:	7efb      	ldrb	r3, [r7, #27]
 801477c:	3301      	adds	r3, #1
 801477e:	b2db      	uxtb	r3, r3
 8014780:	b25a      	sxtb	r2, r3
 8014782:	6a3b      	ldr	r3, [r7, #32]
 8014784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014788:	2301      	movs	r3, #1
 801478a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 801478c:	e001      	b.n	8014792 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801478e:	2300      	movs	r3, #0
 8014790:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8014792:	69f8      	ldr	r0, [r7, #28]
 8014794:	f001 fe55 	bl	8016442 <vClearInterruptMask>

	return xReturn;
 8014798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801479a:	4618      	mov	r0, r3
 801479c:	3728      	adds	r7, #40	; 0x28
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}

080147a2 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80147a2:	b580      	push	{r7, lr}
 80147a4:	b08a      	sub	sp, #40	; 0x28
 80147a6:	af00      	add	r7, sp, #0
 80147a8:	60f8      	str	r0, [r7, #12]
 80147aa:	60b9      	str	r1, [r7, #8]
 80147ac:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80147ae:	2300      	movs	r3, #0
 80147b0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80147b6:	6a3b      	ldr	r3, [r7, #32]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d102      	bne.n	80147c2 <xQueueReceive+0x20>
 80147bc:	f001 fe34 	bl	8016428 <ulSetInterruptMask>
 80147c0:	e7fe      	b.n	80147c0 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d103      	bne.n	80147d0 <xQueueReceive+0x2e>
 80147c8:	6a3b      	ldr	r3, [r7, #32]
 80147ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d101      	bne.n	80147d4 <xQueueReceive+0x32>
 80147d0:	2301      	movs	r3, #1
 80147d2:	e000      	b.n	80147d6 <xQueueReceive+0x34>
 80147d4:	2300      	movs	r3, #0
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d102      	bne.n	80147e0 <xQueueReceive+0x3e>
 80147da:	f001 fe25 	bl	8016428 <ulSetInterruptMask>
 80147de:	e7fe      	b.n	80147de <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80147e0:	f001 f8be 	bl	8015960 <xTaskGetSchedulerState>
 80147e4:	4603      	mov	r3, r0
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d102      	bne.n	80147f0 <xQueueReceive+0x4e>
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d101      	bne.n	80147f4 <xQueueReceive+0x52>
 80147f0:	2301      	movs	r3, #1
 80147f2:	e000      	b.n	80147f6 <xQueueReceive+0x54>
 80147f4:	2300      	movs	r3, #0
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d102      	bne.n	8014800 <xQueueReceive+0x5e>
 80147fa:	f001 fe15 	bl	8016428 <ulSetInterruptMask>
 80147fe:	e7fe      	b.n	80147fe <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014800:	f001 fcdc 	bl	80161bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014804:	6a3b      	ldr	r3, [r7, #32]
 8014806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014808:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d019      	beq.n	8014844 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014810:	68b9      	ldr	r1, [r7, #8]
 8014812:	6a38      	ldr	r0, [r7, #32]
 8014814:	f000 f8e8 	bl	80149e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	1e5a      	subs	r2, r3, #1
 801481c:	6a3b      	ldr	r3, [r7, #32]
 801481e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014820:	6a3b      	ldr	r3, [r7, #32]
 8014822:	691b      	ldr	r3, [r3, #16]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d009      	beq.n	801483c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014828:	6a3b      	ldr	r3, [r7, #32]
 801482a:	3310      	adds	r3, #16
 801482c:	4618      	mov	r0, r3
 801482e:	f000 ff01 	bl	8015634 <xTaskRemoveFromEventList>
 8014832:	4603      	mov	r3, r0
 8014834:	2b00      	cmp	r3, #0
 8014836:	d001      	beq.n	801483c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014838:	f001 fcae 	bl	8016198 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801483c:	f001 fcd0 	bl	80161e0 <vPortExitCritical>
				return pdPASS;
 8014840:	2301      	movs	r3, #1
 8014842:	e063      	b.n	801490c <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d103      	bne.n	8014852 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801484a:	f001 fcc9 	bl	80161e0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801484e:	2300      	movs	r3, #0
 8014850:	e05c      	b.n	801490c <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014854:	2b00      	cmp	r3, #0
 8014856:	d106      	bne.n	8014866 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014858:	f107 0314 	add.w	r3, r7, #20
 801485c:	4618      	mov	r0, r3
 801485e:	f000 ff45 	bl	80156ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014862:	2301      	movs	r3, #1
 8014864:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014866:	f001 fcbb 	bl	80161e0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801486a:	f000 fcf1 	bl	8015250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801486e:	f001 fca5 	bl	80161bc <vPortEnterCritical>
 8014872:	6a3b      	ldr	r3, [r7, #32]
 8014874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014878:	b25b      	sxtb	r3, r3
 801487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801487e:	d103      	bne.n	8014888 <xQueueReceive+0xe6>
 8014880:	6a3b      	ldr	r3, [r7, #32]
 8014882:	2200      	movs	r2, #0
 8014884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014888:	6a3b      	ldr	r3, [r7, #32]
 801488a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801488e:	b25b      	sxtb	r3, r3
 8014890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014894:	d103      	bne.n	801489e <xQueueReceive+0xfc>
 8014896:	6a3b      	ldr	r3, [r7, #32]
 8014898:	2200      	movs	r2, #0
 801489a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801489e:	f001 fc9f 	bl	80161e0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80148a2:	1d3a      	adds	r2, r7, #4
 80148a4:	f107 0314 	add.w	r3, r7, #20
 80148a8:	4611      	mov	r1, r2
 80148aa:	4618      	mov	r0, r3
 80148ac:	f000 ff34 	bl	8015718 <xTaskCheckForTimeOut>
 80148b0:	4603      	mov	r3, r0
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d11d      	bne.n	80148f2 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80148b6:	6a38      	ldr	r0, [r7, #32]
 80148b8:	f000 f90e 	bl	8014ad8 <prvIsQueueEmpty>
 80148bc:	4603      	mov	r3, r0
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d011      	beq.n	80148e6 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80148c2:	6a3b      	ldr	r3, [r7, #32]
 80148c4:	3324      	adds	r3, #36	; 0x24
 80148c6:	687a      	ldr	r2, [r7, #4]
 80148c8:	4611      	mov	r1, r2
 80148ca:	4618      	mov	r0, r3
 80148cc:	f000 fe72 	bl	80155b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80148d0:	6a38      	ldr	r0, [r7, #32]
 80148d2:	f000 f8af 	bl	8014a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80148d6:	f000 fcc9 	bl	801526c <xTaskResumeAll>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d18f      	bne.n	8014800 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 80148e0:	f001 fc5a 	bl	8016198 <vPortYield>
 80148e4:	e78c      	b.n	8014800 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80148e6:	6a38      	ldr	r0, [r7, #32]
 80148e8:	f000 f8a4 	bl	8014a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80148ec:	f000 fcbe 	bl	801526c <xTaskResumeAll>
 80148f0:	e786      	b.n	8014800 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80148f2:	6a38      	ldr	r0, [r7, #32]
 80148f4:	f000 f89e 	bl	8014a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80148f8:	f000 fcb8 	bl	801526c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80148fc:	6a38      	ldr	r0, [r7, #32]
 80148fe:	f000 f8eb 	bl	8014ad8 <prvIsQueueEmpty>
 8014902:	4603      	mov	r3, r0
 8014904:	2b00      	cmp	r3, #0
 8014906:	f43f af7b 	beq.w	8014800 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801490a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801490c:	4618      	mov	r0, r3
 801490e:	3728      	adds	r7, #40	; 0x28
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b086      	sub	sp, #24
 8014918:	af00      	add	r7, sp, #0
 801491a:	60f8      	str	r0, [r7, #12]
 801491c:	60b9      	str	r1, [r7, #8]
 801491e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014920:	2300      	movs	r3, #0
 8014922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801492e:	2b00      	cmp	r3, #0
 8014930:	d10d      	bne.n	801494e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d14d      	bne.n	80149d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	689b      	ldr	r3, [r3, #8]
 801493e:	4618      	mov	r0, r3
 8014940:	f001 f82c 	bl	801599c <xTaskPriorityDisinherit>
 8014944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	2200      	movs	r2, #0
 801494a:	609a      	str	r2, [r3, #8]
 801494c:	e043      	b.n	80149d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d119      	bne.n	8014988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	6858      	ldr	r0, [r3, #4]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801495c:	461a      	mov	r2, r3
 801495e:	68b9      	ldr	r1, [r7, #8]
 8014960:	f003 f9c0 	bl	8017ce4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	685a      	ldr	r2, [r3, #4]
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801496c:	441a      	add	r2, r3
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	685a      	ldr	r2, [r3, #4]
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	689b      	ldr	r3, [r3, #8]
 801497a:	429a      	cmp	r2, r3
 801497c:	d32b      	bcc.n	80149d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	681a      	ldr	r2, [r3, #0]
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	605a      	str	r2, [r3, #4]
 8014986:	e026      	b.n	80149d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	68d8      	ldr	r0, [r3, #12]
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014990:	461a      	mov	r2, r3
 8014992:	68b9      	ldr	r1, [r7, #8]
 8014994:	f003 f9a6 	bl	8017ce4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	68da      	ldr	r2, [r3, #12]
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149a0:	425b      	negs	r3, r3
 80149a2:	441a      	add	r2, r3
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	68da      	ldr	r2, [r3, #12]
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d207      	bcs.n	80149c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	689a      	ldr	r2, [r3, #8]
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149bc:	425b      	negs	r3, r3
 80149be:	441a      	add	r2, r3
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	2b02      	cmp	r3, #2
 80149c8:	d105      	bne.n	80149d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d002      	beq.n	80149d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80149d0:	693b      	ldr	r3, [r7, #16]
 80149d2:	3b01      	subs	r3, #1
 80149d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	1c5a      	adds	r2, r3, #1
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80149de:	697b      	ldr	r3, [r7, #20]
}
 80149e0:	4618      	mov	r0, r3
 80149e2:	3718      	adds	r7, #24
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}

080149e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
 80149f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d018      	beq.n	8014a2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	68da      	ldr	r2, [r3, #12]
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a02:	441a      	add	r2, r3
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	68da      	ldr	r2, [r3, #12]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	689b      	ldr	r3, [r3, #8]
 8014a10:	429a      	cmp	r2, r3
 8014a12:	d303      	bcc.n	8014a1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681a      	ldr	r2, [r3, #0]
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	68d9      	ldr	r1, [r3, #12]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a24:	461a      	mov	r2, r3
 8014a26:	6838      	ldr	r0, [r7, #0]
 8014a28:	f003 f95c 	bl	8017ce4 <memcpy>
	}
}
 8014a2c:	bf00      	nop
 8014a2e:	3708      	adds	r7, #8
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}

08014a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b084      	sub	sp, #16
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014a3c:	f001 fbbe 	bl	80161bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014a48:	e011      	b.n	8014a6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d012      	beq.n	8014a78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	3324      	adds	r3, #36	; 0x24
 8014a56:	4618      	mov	r0, r3
 8014a58:	f000 fdec 	bl	8015634 <xTaskRemoveFromEventList>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d001      	beq.n	8014a66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014a62:	f000 feab 	bl	80157bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014a66:	7bfb      	ldrb	r3, [r7, #15]
 8014a68:	3b01      	subs	r3, #1
 8014a6a:	b2db      	uxtb	r3, r3
 8014a6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	dce9      	bgt.n	8014a4a <prvUnlockQueue+0x16>
 8014a76:	e000      	b.n	8014a7a <prvUnlockQueue+0x46>
					break;
 8014a78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	22ff      	movs	r2, #255	; 0xff
 8014a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014a82:	f001 fbad 	bl	80161e0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014a86:	f001 fb99 	bl	80161bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014a92:	e011      	b.n	8014ab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	691b      	ldr	r3, [r3, #16]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d012      	beq.n	8014ac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	3310      	adds	r3, #16
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f000 fdc7 	bl	8015634 <xTaskRemoveFromEventList>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d001      	beq.n	8014ab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014aac:	f000 fe86 	bl	80157bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014ab0:	7bbb      	ldrb	r3, [r7, #14]
 8014ab2:	3b01      	subs	r3, #1
 8014ab4:	b2db      	uxtb	r3, r3
 8014ab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	dce9      	bgt.n	8014a94 <prvUnlockQueue+0x60>
 8014ac0:	e000      	b.n	8014ac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014ac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	22ff      	movs	r2, #255	; 0xff
 8014ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014acc:	f001 fb88 	bl	80161e0 <vPortExitCritical>
}
 8014ad0:	bf00      	nop
 8014ad2:	3710      	adds	r7, #16
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b084      	sub	sp, #16
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014ae0:	f001 fb6c 	bl	80161bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d102      	bne.n	8014af2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014aec:	2301      	movs	r3, #1
 8014aee:	60fb      	str	r3, [r7, #12]
 8014af0:	e001      	b.n	8014af6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014af2:	2300      	movs	r3, #0
 8014af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014af6:	f001 fb73 	bl	80161e0 <vPortExitCritical>

	return xReturn;
 8014afa:	68fb      	ldr	r3, [r7, #12]
}
 8014afc:	4618      	mov	r0, r3
 8014afe:	3710      	adds	r7, #16
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd80      	pop	{r7, pc}

08014b04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014b0c:	f001 fb56 	bl	80161bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d102      	bne.n	8014b22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	60fb      	str	r3, [r7, #12]
 8014b20:	e001      	b.n	8014b26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014b22:	2300      	movs	r3, #0
 8014b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014b26:	f001 fb5b 	bl	80161e0 <vPortExitCritical>

	return xReturn;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3710      	adds	r7, #16
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014b34:	b480      	push	{r7}
 8014b36:	b085      	sub	sp, #20
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014b3e:	2300      	movs	r3, #0
 8014b40:	60fb      	str	r3, [r7, #12]
 8014b42:	e014      	b.n	8014b6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014b44:	4a0f      	ldr	r2, [pc, #60]	; (8014b84 <vQueueAddToRegistry+0x50>)
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d10b      	bne.n	8014b68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014b50:	490c      	ldr	r1, [pc, #48]	; (8014b84 <vQueueAddToRegistry+0x50>)
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	683a      	ldr	r2, [r7, #0]
 8014b56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014b5a:	4a0a      	ldr	r2, [pc, #40]	; (8014b84 <vQueueAddToRegistry+0x50>)
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	00db      	lsls	r3, r3, #3
 8014b60:	4413      	add	r3, r2
 8014b62:	687a      	ldr	r2, [r7, #4]
 8014b64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014b66:	e006      	b.n	8014b76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	60fb      	str	r3, [r7, #12]
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2b07      	cmp	r3, #7
 8014b72:	d9e7      	bls.n	8014b44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014b74:	bf00      	nop
 8014b76:	bf00      	nop
 8014b78:	3714      	adds	r7, #20
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b80:	4770      	bx	lr
 8014b82:	bf00      	nop
 8014b84:	20001220 	.word	0x20001220

08014b88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b086      	sub	sp, #24
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	60f8      	str	r0, [r7, #12]
 8014b90:	60b9      	str	r1, [r7, #8]
 8014b92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014b98:	f001 fb10 	bl	80161bc <vPortEnterCritical>
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014ba2:	b25b      	sxtb	r3, r3
 8014ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ba8:	d103      	bne.n	8014bb2 <vQueueWaitForMessageRestricted+0x2a>
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	2200      	movs	r2, #0
 8014bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014bb8:	b25b      	sxtb	r3, r3
 8014bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bbe:	d103      	bne.n	8014bc8 <vQueueWaitForMessageRestricted+0x40>
 8014bc0:	697b      	ldr	r3, [r7, #20]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014bc8:	f001 fb0a 	bl	80161e0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d106      	bne.n	8014be2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	3324      	adds	r3, #36	; 0x24
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	68b9      	ldr	r1, [r7, #8]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f000 fd05 	bl	80155ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014be2:	6978      	ldr	r0, [r7, #20]
 8014be4:	f7ff ff26 	bl	8014a34 <prvUnlockQueue>
	}
 8014be8:	bf00      	nop
 8014bea:	3718      	adds	r7, #24
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}

08014bf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b08c      	sub	sp, #48	; 0x30
 8014bf4:	af04      	add	r7, sp, #16
 8014bf6:	60f8      	str	r0, [r7, #12]
 8014bf8:	60b9      	str	r1, [r7, #8]
 8014bfa:	607a      	str	r2, [r7, #4]
 8014bfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d102      	bne.n	8014c0a <xTaskCreateStatic+0x1a>
 8014c04:	f001 fc10 	bl	8016428 <ulSetInterruptMask>
 8014c08:	e7fe      	b.n	8014c08 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8014c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d102      	bne.n	8014c16 <xTaskCreateStatic+0x26>
 8014c10:	f001 fc0a 	bl	8016428 <ulSetInterruptMask>
 8014c14:	e7fe      	b.n	8014c14 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014c16:	235c      	movs	r3, #92	; 0x5c
 8014c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	2b5c      	cmp	r3, #92	; 0x5c
 8014c1e:	d002      	beq.n	8014c26 <xTaskCreateStatic+0x36>
 8014c20:	f001 fc02 	bl	8016428 <ulSetInterruptMask>
 8014c24:	e7fe      	b.n	8014c24 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014c26:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d01e      	beq.n	8014c6c <xTaskCreateStatic+0x7c>
 8014c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d01b      	beq.n	8014c6c <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c36:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014c38:	69fb      	ldr	r3, [r7, #28]
 8014c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	2202      	movs	r2, #2
 8014c42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014c46:	2300      	movs	r3, #0
 8014c48:	9303      	str	r3, [sp, #12]
 8014c4a:	69fb      	ldr	r3, [r7, #28]
 8014c4c:	9302      	str	r3, [sp, #8]
 8014c4e:	f107 0318 	add.w	r3, r7, #24
 8014c52:	9301      	str	r3, [sp, #4]
 8014c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c56:	9300      	str	r3, [sp, #0]
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	687a      	ldr	r2, [r7, #4]
 8014c5c:	68b9      	ldr	r1, [r7, #8]
 8014c5e:	68f8      	ldr	r0, [r7, #12]
 8014c60:	f000 f850 	bl	8014d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014c64:	69f8      	ldr	r0, [r7, #28]
 8014c66:	f000 f8d7 	bl	8014e18 <prvAddNewTaskToReadyList>
 8014c6a:	e001      	b.n	8014c70 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014c70:	69bb      	ldr	r3, [r7, #24]
	}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3720      	adds	r7, #32
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}

08014c7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014c7a:	b580      	push	{r7, lr}
 8014c7c:	b08c      	sub	sp, #48	; 0x30
 8014c7e:	af04      	add	r7, sp, #16
 8014c80:	60f8      	str	r0, [r7, #12]
 8014c82:	60b9      	str	r1, [r7, #8]
 8014c84:	603b      	str	r3, [r7, #0]
 8014c86:	4613      	mov	r3, r2
 8014c88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014c8a:	88fb      	ldrh	r3, [r7, #6]
 8014c8c:	009b      	lsls	r3, r3, #2
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f001 fc2a 	bl	80164e8 <pvPortMalloc>
 8014c94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d00e      	beq.n	8014cba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014c9c:	205c      	movs	r0, #92	; 0x5c
 8014c9e:	f001 fc23 	bl	80164e8 <pvPortMalloc>
 8014ca2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014ca4:	69fb      	ldr	r3, [r7, #28]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d003      	beq.n	8014cb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	697a      	ldr	r2, [r7, #20]
 8014cae:	631a      	str	r2, [r3, #48]	; 0x30
 8014cb0:	e005      	b.n	8014cbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014cb2:	6978      	ldr	r0, [r7, #20]
 8014cb4:	f001 fccc 	bl	8016650 <vPortFree>
 8014cb8:	e001      	b.n	8014cbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014cba:	2300      	movs	r3, #0
 8014cbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014cbe:	69fb      	ldr	r3, [r7, #28]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d017      	beq.n	8014cf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014cc4:	69fb      	ldr	r3, [r7, #28]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014ccc:	88fa      	ldrh	r2, [r7, #6]
 8014cce:	2300      	movs	r3, #0
 8014cd0:	9303      	str	r3, [sp, #12]
 8014cd2:	69fb      	ldr	r3, [r7, #28]
 8014cd4:	9302      	str	r3, [sp, #8]
 8014cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd8:	9301      	str	r3, [sp, #4]
 8014cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cdc:	9300      	str	r3, [sp, #0]
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	68b9      	ldr	r1, [r7, #8]
 8014ce2:	68f8      	ldr	r0, [r7, #12]
 8014ce4:	f000 f80e 	bl	8014d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014ce8:	69f8      	ldr	r0, [r7, #28]
 8014cea:	f000 f895 	bl	8014e18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014cee:	2301      	movs	r3, #1
 8014cf0:	61bb      	str	r3, [r7, #24]
 8014cf2:	e002      	b.n	8014cfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8014cf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3720      	adds	r7, #32
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}

08014d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b086      	sub	sp, #24
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	60b9      	str	r1, [r7, #8]
 8014d0e:	607a      	str	r2, [r7, #4]
 8014d10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	009b      	lsls	r3, r3, #2
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	21a5      	movs	r1, #165	; 0xa5
 8014d1e:	f002 ff59 	bl	8017bd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014d2c:	3b01      	subs	r3, #1
 8014d2e:	009b      	lsls	r3, r3, #2
 8014d30:	4413      	add	r3, r2
 8014d32:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	f023 0307 	bic.w	r3, r3, #7
 8014d3a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	f003 0307 	and.w	r3, r3, #7
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d002      	beq.n	8014d4c <prvInitialiseNewTask+0x48>
 8014d46:	f001 fb6f 	bl	8016428 <ulSetInterruptMask>
 8014d4a:	e7fe      	b.n	8014d4a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d01f      	beq.n	8014d92 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d52:	2300      	movs	r3, #0
 8014d54:	617b      	str	r3, [r7, #20]
 8014d56:	e012      	b.n	8014d7e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014d58:	68ba      	ldr	r2, [r7, #8]
 8014d5a:	697b      	ldr	r3, [r7, #20]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	7819      	ldrb	r1, [r3, #0]
 8014d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d62:	697b      	ldr	r3, [r7, #20]
 8014d64:	4413      	add	r3, r2
 8014d66:	3334      	adds	r3, #52	; 0x34
 8014d68:	460a      	mov	r2, r1
 8014d6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014d6c:	68ba      	ldr	r2, [r7, #8]
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	4413      	add	r3, r2
 8014d72:	781b      	ldrb	r3, [r3, #0]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d006      	beq.n	8014d86 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	3301      	adds	r3, #1
 8014d7c:	617b      	str	r3, [r7, #20]
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	2b0f      	cmp	r3, #15
 8014d82:	d9e9      	bls.n	8014d58 <prvInitialiseNewTask+0x54>
 8014d84:	e000      	b.n	8014d88 <prvInitialiseNewTask+0x84>
			{
				break;
 8014d86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014d90:	e003      	b.n	8014d9a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d94:	2200      	movs	r2, #0
 8014d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014d9a:	6a3b      	ldr	r3, [r7, #32]
 8014d9c:	2b37      	cmp	r3, #55	; 0x37
 8014d9e:	d901      	bls.n	8014da4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014da0:	2337      	movs	r3, #55	; 0x37
 8014da2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da6:	6a3a      	ldr	r2, [r7, #32]
 8014da8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dac:	6a3a      	ldr	r2, [r7, #32]
 8014dae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db2:	2200      	movs	r2, #0
 8014db4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db8:	3304      	adds	r3, #4
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7ff fa58 	bl	8014270 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dc2:	3318      	adds	r3, #24
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7ff fa53 	bl	8014270 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014dce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dd0:	6a3b      	ldr	r3, [r7, #32]
 8014dd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014dde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de2:	2200      	movs	r2, #0
 8014de4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de8:	2200      	movs	r2, #0
 8014dea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8014dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	68fa      	ldr	r2, [r7, #12]
 8014df6:	6938      	ldr	r0, [r7, #16]
 8014df8:	f001 fa3c 	bl	8016274 <pxPortInitialiseStack>
 8014dfc:	4602      	mov	r2, r0
 8014dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d002      	beq.n	8014e0e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e0e:	bf00      	nop
 8014e10:	3718      	adds	r7, #24
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}
	...

08014e18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b082      	sub	sp, #8
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014e20:	f001 f9cc 	bl	80161bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014e24:	4b2a      	ldr	r3, [pc, #168]	; (8014ed0 <prvAddNewTaskToReadyList+0xb8>)
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	3301      	adds	r3, #1
 8014e2a:	4a29      	ldr	r2, [pc, #164]	; (8014ed0 <prvAddNewTaskToReadyList+0xb8>)
 8014e2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014e2e:	4b29      	ldr	r3, [pc, #164]	; (8014ed4 <prvAddNewTaskToReadyList+0xbc>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d109      	bne.n	8014e4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014e36:	4a27      	ldr	r2, [pc, #156]	; (8014ed4 <prvAddNewTaskToReadyList+0xbc>)
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014e3c:	4b24      	ldr	r3, [pc, #144]	; (8014ed0 <prvAddNewTaskToReadyList+0xb8>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b01      	cmp	r3, #1
 8014e42:	d110      	bne.n	8014e66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014e44:	f000 fcd6 	bl	80157f4 <prvInitialiseTaskLists>
 8014e48:	e00d      	b.n	8014e66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014e4a:	4b23      	ldr	r3, [pc, #140]	; (8014ed8 <prvAddNewTaskToReadyList+0xc0>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d109      	bne.n	8014e66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014e52:	4b20      	ldr	r3, [pc, #128]	; (8014ed4 <prvAddNewTaskToReadyList+0xbc>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d802      	bhi.n	8014e66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014e60:	4a1c      	ldr	r2, [pc, #112]	; (8014ed4 <prvAddNewTaskToReadyList+0xbc>)
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014e66:	4b1d      	ldr	r3, [pc, #116]	; (8014edc <prvAddNewTaskToReadyList+0xc4>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	4a1b      	ldr	r2, [pc, #108]	; (8014edc <prvAddNewTaskToReadyList+0xc4>)
 8014e6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014e70:	4b1a      	ldr	r3, [pc, #104]	; (8014edc <prvAddNewTaskToReadyList+0xc4>)
 8014e72:	681a      	ldr	r2, [r3, #0]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e7c:	4b18      	ldr	r3, [pc, #96]	; (8014ee0 <prvAddNewTaskToReadyList+0xc8>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d903      	bls.n	8014e8c <prvAddNewTaskToReadyList+0x74>
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e88:	4a15      	ldr	r2, [pc, #84]	; (8014ee0 <prvAddNewTaskToReadyList+0xc8>)
 8014e8a:	6013      	str	r3, [r2, #0]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e90:	4613      	mov	r3, r2
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	4413      	add	r3, r2
 8014e96:	009b      	lsls	r3, r3, #2
 8014e98:	4a12      	ldr	r2, [pc, #72]	; (8014ee4 <prvAddNewTaskToReadyList+0xcc>)
 8014e9a:	441a      	add	r2, r3
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	3304      	adds	r3, #4
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	4610      	mov	r0, r2
 8014ea4:	f7ff f9f1 	bl	801428a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014ea8:	f001 f99a 	bl	80161e0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014eac:	4b0a      	ldr	r3, [pc, #40]	; (8014ed8 <prvAddNewTaskToReadyList+0xc0>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d008      	beq.n	8014ec6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014eb4:	4b07      	ldr	r3, [pc, #28]	; (8014ed4 <prvAddNewTaskToReadyList+0xbc>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	d201      	bcs.n	8014ec6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014ec2:	f001 f969 	bl	8016198 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014ec6:	bf00      	nop
 8014ec8:	3708      	adds	r7, #8
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	20001734 	.word	0x20001734
 8014ed4:	20001260 	.word	0x20001260
 8014ed8:	20001740 	.word	0x20001740
 8014edc:	20001750 	.word	0x20001750
 8014ee0:	2000173c 	.word	0x2000173c
 8014ee4:	20001264 	.word	0x20001264

08014ee8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b086      	sub	sp, #24
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d102      	bne.n	8014f02 <vTaskDelayUntil+0x1a>
 8014efc:	f001 fa94 	bl	8016428 <ulSetInterruptMask>
 8014f00:	e7fe      	b.n	8014f00 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d102      	bne.n	8014f0e <vTaskDelayUntil+0x26>
 8014f08:	f001 fa8e 	bl	8016428 <ulSetInterruptMask>
 8014f0c:	e7fe      	b.n	8014f0c <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 8014f0e:	4b23      	ldr	r3, [pc, #140]	; (8014f9c <vTaskDelayUntil+0xb4>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d002      	beq.n	8014f1c <vTaskDelayUntil+0x34>
 8014f16:	f001 fa87 	bl	8016428 <ulSetInterruptMask>
 8014f1a:	e7fe      	b.n	8014f1a <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 8014f1c:	f000 f998 	bl	8015250 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8014f20:	4b1f      	ldr	r3, [pc, #124]	; (8014fa0 <vTaskDelayUntil+0xb8>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	683a      	ldr	r2, [r7, #0]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	693a      	ldr	r2, [r7, #16]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d20b      	bcs.n	8014f52 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	68fa      	ldr	r2, [r7, #12]
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d211      	bcs.n	8014f68 <vTaskDelayUntil+0x80>
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d90d      	bls.n	8014f68 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	617b      	str	r3, [r7, #20]
 8014f50:	e00a      	b.n	8014f68 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	68fa      	ldr	r2, [r7, #12]
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d303      	bcc.n	8014f64 <vTaskDelayUntil+0x7c>
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d901      	bls.n	8014f68 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8014f64:	2301      	movs	r3, #1
 8014f66:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	68fa      	ldr	r2, [r7, #12]
 8014f6c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d006      	beq.n	8014f82 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8014f74:	68fa      	ldr	r2, [r7, #12]
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	1ad3      	subs	r3, r2, r3
 8014f7a:	2100      	movs	r1, #0
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f000 fd6b 	bl	8015a58 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8014f82:	f000 f973 	bl	801526c <xTaskResumeAll>
 8014f86:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d101      	bne.n	8014f92 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 8014f8e:	f001 f903 	bl	8016198 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014f92:	bf00      	nop
 8014f94:	3718      	adds	r7, #24
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	2000175c 	.word	0x2000175c
 8014fa0:	20001738 	.word	0x20001738

08014fa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b084      	sub	sp, #16
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014fac:	2300      	movs	r3, #0
 8014fae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d00f      	beq.n	8014fd6 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014fb6:	4b0c      	ldr	r3, [pc, #48]	; (8014fe8 <vTaskDelay+0x44>)
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d002      	beq.n	8014fc4 <vTaskDelay+0x20>
 8014fbe:	f001 fa33 	bl	8016428 <ulSetInterruptMask>
 8014fc2:	e7fe      	b.n	8014fc2 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8014fc4:	f000 f944 	bl	8015250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014fc8:	2100      	movs	r1, #0
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f000 fd44 	bl	8015a58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014fd0:	f000 f94c 	bl	801526c <xTaskResumeAll>
 8014fd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d101      	bne.n	8014fe0 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 8014fdc:	f001 f8dc 	bl	8016198 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014fe0:	bf00      	nop
 8014fe2:	3710      	adds	r7, #16
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	2000175c 	.word	0x2000175c

08014fec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b084      	sub	sp, #16
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014ff4:	f001 f8e2 	bl	80161bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d102      	bne.n	8015004 <vTaskSuspend+0x18>
 8014ffe:	4b29      	ldr	r3, [pc, #164]	; (80150a4 <vTaskSuspend+0xb8>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	e000      	b.n	8015006 <vTaskSuspend+0x1a>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	3304      	adds	r3, #4
 801500c:	4618      	mov	r0, r3
 801500e:	f7ff f999 	bl	8014344 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015016:	2b00      	cmp	r3, #0
 8015018:	d004      	beq.n	8015024 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	3318      	adds	r3, #24
 801501e:	4618      	mov	r0, r3
 8015020:	f7ff f990 	bl	8014344 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	3304      	adds	r3, #4
 8015028:	4619      	mov	r1, r3
 801502a:	481f      	ldr	r0, [pc, #124]	; (80150a8 <vTaskSuspend+0xbc>)
 801502c:	f7ff f92d 	bl	801428a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8015036:	b2db      	uxtb	r3, r3
 8015038:	2b01      	cmp	r3, #1
 801503a:	d103      	bne.n	8015044 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	2200      	movs	r2, #0
 8015040:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8015044:	f001 f8cc 	bl	80161e0 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8015048:	4b18      	ldr	r3, [pc, #96]	; (80150ac <vTaskSuspend+0xc0>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d005      	beq.n	801505c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8015050:	f001 f8b4 	bl	80161bc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8015054:	f000 fc64 	bl	8015920 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8015058:	f001 f8c2 	bl	80161e0 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801505c:	4b11      	ldr	r3, [pc, #68]	; (80150a4 <vTaskSuspend+0xb8>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	68fa      	ldr	r2, [r7, #12]
 8015062:	429a      	cmp	r2, r3
 8015064:	d119      	bne.n	801509a <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8015066:	4b11      	ldr	r3, [pc, #68]	; (80150ac <vTaskSuspend+0xc0>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d009      	beq.n	8015082 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801506e:	4b10      	ldr	r3, [pc, #64]	; (80150b0 <vTaskSuspend+0xc4>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d002      	beq.n	801507c <vTaskSuspend+0x90>
 8015076:	f001 f9d7 	bl	8016428 <ulSetInterruptMask>
 801507a:	e7fe      	b.n	801507a <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 801507c:	f001 f88c 	bl	8016198 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015080:	e00b      	b.n	801509a <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8015082:	4b09      	ldr	r3, [pc, #36]	; (80150a8 <vTaskSuspend+0xbc>)
 8015084:	681a      	ldr	r2, [r3, #0]
 8015086:	4b0b      	ldr	r3, [pc, #44]	; (80150b4 <vTaskSuspend+0xc8>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	429a      	cmp	r2, r3
 801508c:	d103      	bne.n	8015096 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 801508e:	4b05      	ldr	r3, [pc, #20]	; (80150a4 <vTaskSuspend+0xb8>)
 8015090:	2200      	movs	r2, #0
 8015092:	601a      	str	r2, [r3, #0]
	}
 8015094:	e001      	b.n	801509a <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8015096:	f000 fa39 	bl	801550c <vTaskSwitchContext>
	}
 801509a:	bf00      	nop
 801509c:	3710      	adds	r7, #16
 801509e:	46bd      	mov	sp, r7
 80150a0:	bd80      	pop	{r7, pc}
 80150a2:	bf00      	nop
 80150a4:	20001260 	.word	0x20001260
 80150a8:	20001720 	.word	0x20001720
 80150ac:	20001740 	.word	0x20001740
 80150b0:	2000175c 	.word	0x2000175c
 80150b4:	20001734 	.word	0x20001734

080150b8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80150c0:	2300      	movs	r3, #0
 80150c2:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d102      	bne.n	80150d4 <prvTaskIsTaskSuspended+0x1c>
 80150ce:	f001 f9ab 	bl	8016428 <ulSetInterruptMask>
 80150d2:	e7fe      	b.n	80150d2 <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80150d4:	68bb      	ldr	r3, [r7, #8]
 80150d6:	695b      	ldr	r3, [r3, #20]
 80150d8:	4a09      	ldr	r2, [pc, #36]	; (8015100 <prvTaskIsTaskSuspended+0x48>)
 80150da:	4293      	cmp	r3, r2
 80150dc:	d10a      	bne.n	80150f4 <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150e2:	4a08      	ldr	r2, [pc, #32]	; (8015104 <prvTaskIsTaskSuspended+0x4c>)
 80150e4:	4293      	cmp	r3, r2
 80150e6:	d005      	beq.n	80150f4 <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d101      	bne.n	80150f4 <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 80150f0:	2301      	movs	r3, #1
 80150f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80150f4:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80150f6:	4618      	mov	r0, r3
 80150f8:	3710      	adds	r7, #16
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
 80150fe:	bf00      	nop
 8015100:	20001720 	.word	0x20001720
 8015104:	200016f4 	.word	0x200016f4

08015108 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d102      	bne.n	8015120 <vTaskResume+0x18>
 801511a:	f001 f985 	bl	8016428 <ulSetInterruptMask>
 801511e:	e7fe      	b.n	801511e <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8015120:	4b1d      	ldr	r3, [pc, #116]	; (8015198 <vTaskResume+0x90>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	68fa      	ldr	r2, [r7, #12]
 8015126:	429a      	cmp	r2, r3
 8015128:	d032      	beq.n	8015190 <vTaskResume+0x88>
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d02f      	beq.n	8015190 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8015130:	f001 f844 	bl	80161bc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	f7ff ffbf 	bl	80150b8 <prvTaskIsTaskSuspended>
 801513a:	4603      	mov	r3, r0
 801513c:	2b00      	cmp	r3, #0
 801513e:	d025      	beq.n	801518c <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	3304      	adds	r3, #4
 8015144:	4618      	mov	r0, r3
 8015146:	f7ff f8fd 	bl	8014344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801514e:	4b13      	ldr	r3, [pc, #76]	; (801519c <vTaskResume+0x94>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	429a      	cmp	r2, r3
 8015154:	d903      	bls.n	801515e <vTaskResume+0x56>
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801515a:	4a10      	ldr	r2, [pc, #64]	; (801519c <vTaskResume+0x94>)
 801515c:	6013      	str	r3, [r2, #0]
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015162:	4613      	mov	r3, r2
 8015164:	009b      	lsls	r3, r3, #2
 8015166:	4413      	add	r3, r2
 8015168:	009b      	lsls	r3, r3, #2
 801516a:	4a0d      	ldr	r2, [pc, #52]	; (80151a0 <vTaskResume+0x98>)
 801516c:	441a      	add	r2, r3
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	3304      	adds	r3, #4
 8015172:	4619      	mov	r1, r3
 8015174:	4610      	mov	r0, r2
 8015176:	f7ff f888 	bl	801428a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801517e:	4b06      	ldr	r3, [pc, #24]	; (8015198 <vTaskResume+0x90>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015184:	429a      	cmp	r2, r3
 8015186:	d301      	bcc.n	801518c <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8015188:	f001 f806 	bl	8016198 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801518c:	f001 f828 	bl	80161e0 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015190:	bf00      	nop
 8015192:	3710      	adds	r7, #16
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}
 8015198:	20001260 	.word	0x20001260
 801519c:	2000173c 	.word	0x2000173c
 80151a0:	20001264 	.word	0x20001264

080151a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b088      	sub	sp, #32
 80151a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80151aa:	2300      	movs	r3, #0
 80151ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80151ae:	2300      	movs	r3, #0
 80151b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80151b2:	463a      	mov	r2, r7
 80151b4:	1d39      	adds	r1, r7, #4
 80151b6:	f107 0308 	add.w	r3, r7, #8
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7ff f804 	bl	80141c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80151c0:	6839      	ldr	r1, [r7, #0]
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	68ba      	ldr	r2, [r7, #8]
 80151c6:	9202      	str	r2, [sp, #8]
 80151c8:	9301      	str	r3, [sp, #4]
 80151ca:	2300      	movs	r3, #0
 80151cc:	9300      	str	r3, [sp, #0]
 80151ce:	2300      	movs	r3, #0
 80151d0:	460a      	mov	r2, r1
 80151d2:	4919      	ldr	r1, [pc, #100]	; (8015238 <vTaskStartScheduler+0x94>)
 80151d4:	4819      	ldr	r0, [pc, #100]	; (801523c <vTaskStartScheduler+0x98>)
 80151d6:	f7ff fd0b 	bl	8014bf0 <xTaskCreateStatic>
 80151da:	4603      	mov	r3, r0
 80151dc:	4a18      	ldr	r2, [pc, #96]	; (8015240 <vTaskStartScheduler+0x9c>)
 80151de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80151e0:	4b17      	ldr	r3, [pc, #92]	; (8015240 <vTaskStartScheduler+0x9c>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d002      	beq.n	80151ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80151e8:	2301      	movs	r3, #1
 80151ea:	60fb      	str	r3, [r7, #12]
 80151ec:	e001      	b.n	80151f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80151ee:	2300      	movs	r3, #0
 80151f0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d102      	bne.n	80151fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80151f8:	f000 fc82 	bl	8015b00 <xTimerCreateTimerTask>
 80151fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2b01      	cmp	r3, #1
 8015202:	d10e      	bne.n	8015222 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8015204:	f001 f910 	bl	8016428 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015208:	4b0e      	ldr	r3, [pc, #56]	; (8015244 <vTaskStartScheduler+0xa0>)
 801520a:	f04f 32ff 	mov.w	r2, #4294967295
 801520e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015210:	4b0d      	ldr	r3, [pc, #52]	; (8015248 <vTaskStartScheduler+0xa4>)
 8015212:	2201      	movs	r2, #1
 8015214:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015216:	4b0d      	ldr	r3, [pc, #52]	; (801524c <vTaskStartScheduler+0xa8>)
 8015218:	2200      	movs	r2, #0
 801521a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801521c:	f001 f8b4 	bl	8016388 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015220:	e006      	b.n	8015230 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015228:	d102      	bne.n	8015230 <vTaskStartScheduler+0x8c>
 801522a:	f001 f8fd 	bl	8016428 <ulSetInterruptMask>
 801522e:	e7fe      	b.n	801522e <vTaskStartScheduler+0x8a>
}
 8015230:	bf00      	nop
 8015232:	3710      	adds	r7, #16
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}
 8015238:	08018858 	.word	0x08018858
 801523c:	080157d5 	.word	0x080157d5
 8015240:	20001758 	.word	0x20001758
 8015244:	20001754 	.word	0x20001754
 8015248:	20001740 	.word	0x20001740
 801524c:	20001738 	.word	0x20001738

08015250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015250:	b480      	push	{r7}
 8015252:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015254:	4b04      	ldr	r3, [pc, #16]	; (8015268 <vTaskSuspendAll+0x18>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	3301      	adds	r3, #1
 801525a:	4a03      	ldr	r2, [pc, #12]	; (8015268 <vTaskSuspendAll+0x18>)
 801525c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801525e:	bf00      	nop
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr
 8015268:	2000175c 	.word	0x2000175c

0801526c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b084      	sub	sp, #16
 8015270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015272:	2300      	movs	r3, #0
 8015274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015276:	2300      	movs	r3, #0
 8015278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801527a:	4b3b      	ldr	r3, [pc, #236]	; (8015368 <xTaskResumeAll+0xfc>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d102      	bne.n	8015288 <xTaskResumeAll+0x1c>
 8015282:	f001 f8d1 	bl	8016428 <ulSetInterruptMask>
 8015286:	e7fe      	b.n	8015286 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015288:	f000 ff98 	bl	80161bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801528c:	4b36      	ldr	r3, [pc, #216]	; (8015368 <xTaskResumeAll+0xfc>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	3b01      	subs	r3, #1
 8015292:	4a35      	ldr	r2, [pc, #212]	; (8015368 <xTaskResumeAll+0xfc>)
 8015294:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015296:	4b34      	ldr	r3, [pc, #208]	; (8015368 <xTaskResumeAll+0xfc>)
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d15c      	bne.n	8015358 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801529e:	4b33      	ldr	r3, [pc, #204]	; (801536c <xTaskResumeAll+0x100>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d058      	beq.n	8015358 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80152a6:	e02f      	b.n	8015308 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152a8:	4b31      	ldr	r3, [pc, #196]	; (8015370 <xTaskResumeAll+0x104>)
 80152aa:	68db      	ldr	r3, [r3, #12]
 80152ac:	68db      	ldr	r3, [r3, #12]
 80152ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	3318      	adds	r3, #24
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7ff f845 	bl	8014344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	3304      	adds	r3, #4
 80152be:	4618      	mov	r0, r3
 80152c0:	f7ff f840 	bl	8014344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152c8:	4b2a      	ldr	r3, [pc, #168]	; (8015374 <xTaskResumeAll+0x108>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	429a      	cmp	r2, r3
 80152ce:	d903      	bls.n	80152d8 <xTaskResumeAll+0x6c>
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152d4:	4a27      	ldr	r2, [pc, #156]	; (8015374 <xTaskResumeAll+0x108>)
 80152d6:	6013      	str	r3, [r2, #0]
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152dc:	4613      	mov	r3, r2
 80152de:	009b      	lsls	r3, r3, #2
 80152e0:	4413      	add	r3, r2
 80152e2:	009b      	lsls	r3, r3, #2
 80152e4:	4a24      	ldr	r2, [pc, #144]	; (8015378 <xTaskResumeAll+0x10c>)
 80152e6:	441a      	add	r2, r3
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	3304      	adds	r3, #4
 80152ec:	4619      	mov	r1, r3
 80152ee:	4610      	mov	r0, r2
 80152f0:	f7fe ffcb 	bl	801428a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152f8:	4b20      	ldr	r3, [pc, #128]	; (801537c <xTaskResumeAll+0x110>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152fe:	429a      	cmp	r2, r3
 8015300:	d302      	bcc.n	8015308 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8015302:	4b1f      	ldr	r3, [pc, #124]	; (8015380 <xTaskResumeAll+0x114>)
 8015304:	2201      	movs	r2, #1
 8015306:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015308:	4b19      	ldr	r3, [pc, #100]	; (8015370 <xTaskResumeAll+0x104>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d1cb      	bne.n	80152a8 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d001      	beq.n	801531a <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015316:	f000 fb03 	bl	8015920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801531a:	4b1a      	ldr	r3, [pc, #104]	; (8015384 <xTaskResumeAll+0x118>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d010      	beq.n	8015348 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015326:	f000 f83f 	bl	80153a8 <xTaskIncrementTick>
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d002      	beq.n	8015336 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 8015330:	4b13      	ldr	r3, [pc, #76]	; (8015380 <xTaskResumeAll+0x114>)
 8015332:	2201      	movs	r2, #1
 8015334:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	3b01      	subs	r3, #1
 801533a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d1f1      	bne.n	8015326 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8015342:	4b10      	ldr	r3, [pc, #64]	; (8015384 <xTaskResumeAll+0x118>)
 8015344:	2200      	movs	r2, #0
 8015346:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015348:	4b0d      	ldr	r3, [pc, #52]	; (8015380 <xTaskResumeAll+0x114>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d003      	beq.n	8015358 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015350:	2301      	movs	r3, #1
 8015352:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015354:	f000 ff20 	bl	8016198 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015358:	f000 ff42 	bl	80161e0 <vPortExitCritical>

	return xAlreadyYielded;
 801535c:	68bb      	ldr	r3, [r7, #8]
}
 801535e:	4618      	mov	r0, r3
 8015360:	3710      	adds	r7, #16
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}
 8015366:	bf00      	nop
 8015368:	2000175c 	.word	0x2000175c
 801536c:	20001734 	.word	0x20001734
 8015370:	200016f4 	.word	0x200016f4
 8015374:	2000173c 	.word	0x2000173c
 8015378:	20001264 	.word	0x20001264
 801537c:	20001260 	.word	0x20001260
 8015380:	20001748 	.word	0x20001748
 8015384:	20001744 	.word	0x20001744

08015388 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015388:	b480      	push	{r7}
 801538a:	b083      	sub	sp, #12
 801538c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801538e:	4b05      	ldr	r3, [pc, #20]	; (80153a4 <xTaskGetTickCount+0x1c>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015394:	687b      	ldr	r3, [r7, #4]
}
 8015396:	4618      	mov	r0, r3
 8015398:	370c      	adds	r7, #12
 801539a:	46bd      	mov	sp, r7
 801539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a0:	4770      	bx	lr
 80153a2:	bf00      	nop
 80153a4:	20001738 	.word	0x20001738

080153a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b086      	sub	sp, #24
 80153ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80153ae:	2300      	movs	r3, #0
 80153b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153b2:	4b4b      	ldr	r3, [pc, #300]	; (80154e0 <xTaskIncrementTick+0x138>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	f040 8087 	bne.w	80154ca <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80153bc:	4b49      	ldr	r3, [pc, #292]	; (80154e4 <xTaskIncrementTick+0x13c>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	3301      	adds	r3, #1
 80153c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80153c4:	4a47      	ldr	r2, [pc, #284]	; (80154e4 <xTaskIncrementTick+0x13c>)
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d118      	bne.n	8015402 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80153d0:	4b45      	ldr	r3, [pc, #276]	; (80154e8 <xTaskIncrementTick+0x140>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d002      	beq.n	80153e0 <xTaskIncrementTick+0x38>
 80153da:	f001 f825 	bl	8016428 <ulSetInterruptMask>
 80153de:	e7fe      	b.n	80153de <xTaskIncrementTick+0x36>
 80153e0:	4b41      	ldr	r3, [pc, #260]	; (80154e8 <xTaskIncrementTick+0x140>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	60fb      	str	r3, [r7, #12]
 80153e6:	4b41      	ldr	r3, [pc, #260]	; (80154ec <xTaskIncrementTick+0x144>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	4a3f      	ldr	r2, [pc, #252]	; (80154e8 <xTaskIncrementTick+0x140>)
 80153ec:	6013      	str	r3, [r2, #0]
 80153ee:	4a3f      	ldr	r2, [pc, #252]	; (80154ec <xTaskIncrementTick+0x144>)
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	6013      	str	r3, [r2, #0]
 80153f4:	4b3e      	ldr	r3, [pc, #248]	; (80154f0 <xTaskIncrementTick+0x148>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	3301      	adds	r3, #1
 80153fa:	4a3d      	ldr	r2, [pc, #244]	; (80154f0 <xTaskIncrementTick+0x148>)
 80153fc:	6013      	str	r3, [r2, #0]
 80153fe:	f000 fa8f 	bl	8015920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015402:	4b3c      	ldr	r3, [pc, #240]	; (80154f4 <xTaskIncrementTick+0x14c>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	693a      	ldr	r2, [r7, #16]
 8015408:	429a      	cmp	r2, r3
 801540a:	d349      	bcc.n	80154a0 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801540c:	4b36      	ldr	r3, [pc, #216]	; (80154e8 <xTaskIncrementTick+0x140>)
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d104      	bne.n	8015420 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015416:	4b37      	ldr	r3, [pc, #220]	; (80154f4 <xTaskIncrementTick+0x14c>)
 8015418:	f04f 32ff 	mov.w	r2, #4294967295
 801541c:	601a      	str	r2, [r3, #0]
					break;
 801541e:	e03f      	b.n	80154a0 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015420:	4b31      	ldr	r3, [pc, #196]	; (80154e8 <xTaskIncrementTick+0x140>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	68db      	ldr	r3, [r3, #12]
 8015426:	68db      	ldr	r3, [r3, #12]
 8015428:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015430:	693a      	ldr	r2, [r7, #16]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	429a      	cmp	r2, r3
 8015436:	d203      	bcs.n	8015440 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015438:	4a2e      	ldr	r2, [pc, #184]	; (80154f4 <xTaskIncrementTick+0x14c>)
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801543e:	e02f      	b.n	80154a0 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015440:	68bb      	ldr	r3, [r7, #8]
 8015442:	3304      	adds	r3, #4
 8015444:	4618      	mov	r0, r3
 8015446:	f7fe ff7d 	bl	8014344 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801544e:	2b00      	cmp	r3, #0
 8015450:	d004      	beq.n	801545c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	3318      	adds	r3, #24
 8015456:	4618      	mov	r0, r3
 8015458:	f7fe ff74 	bl	8014344 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015460:	4b25      	ldr	r3, [pc, #148]	; (80154f8 <xTaskIncrementTick+0x150>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	429a      	cmp	r2, r3
 8015466:	d903      	bls.n	8015470 <xTaskIncrementTick+0xc8>
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801546c:	4a22      	ldr	r2, [pc, #136]	; (80154f8 <xTaskIncrementTick+0x150>)
 801546e:	6013      	str	r3, [r2, #0]
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015474:	4613      	mov	r3, r2
 8015476:	009b      	lsls	r3, r3, #2
 8015478:	4413      	add	r3, r2
 801547a:	009b      	lsls	r3, r3, #2
 801547c:	4a1f      	ldr	r2, [pc, #124]	; (80154fc <xTaskIncrementTick+0x154>)
 801547e:	441a      	add	r2, r3
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	3304      	adds	r3, #4
 8015484:	4619      	mov	r1, r3
 8015486:	4610      	mov	r0, r2
 8015488:	f7fe feff 	bl	801428a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015490:	4b1b      	ldr	r3, [pc, #108]	; (8015500 <xTaskIncrementTick+0x158>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015496:	429a      	cmp	r2, r3
 8015498:	d3b8      	bcc.n	801540c <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 801549a:	2301      	movs	r3, #1
 801549c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801549e:	e7b5      	b.n	801540c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80154a0:	4b17      	ldr	r3, [pc, #92]	; (8015500 <xTaskIncrementTick+0x158>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154a6:	4915      	ldr	r1, [pc, #84]	; (80154fc <xTaskIncrementTick+0x154>)
 80154a8:	4613      	mov	r3, r2
 80154aa:	009b      	lsls	r3, r3, #2
 80154ac:	4413      	add	r3, r2
 80154ae:	009b      	lsls	r3, r3, #2
 80154b0:	440b      	add	r3, r1
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d901      	bls.n	80154bc <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 80154b8:	2301      	movs	r3, #1
 80154ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80154bc:	4b11      	ldr	r3, [pc, #68]	; (8015504 <xTaskIncrementTick+0x15c>)
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d007      	beq.n	80154d4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80154c4:	2301      	movs	r3, #1
 80154c6:	617b      	str	r3, [r7, #20]
 80154c8:	e004      	b.n	80154d4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80154ca:	4b0f      	ldr	r3, [pc, #60]	; (8015508 <xTaskIncrementTick+0x160>)
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	3301      	adds	r3, #1
 80154d0:	4a0d      	ldr	r2, [pc, #52]	; (8015508 <xTaskIncrementTick+0x160>)
 80154d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80154d4:	697b      	ldr	r3, [r7, #20]
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3718      	adds	r7, #24
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}
 80154de:	bf00      	nop
 80154e0:	2000175c 	.word	0x2000175c
 80154e4:	20001738 	.word	0x20001738
 80154e8:	200016ec 	.word	0x200016ec
 80154ec:	200016f0 	.word	0x200016f0
 80154f0:	2000174c 	.word	0x2000174c
 80154f4:	20001754 	.word	0x20001754
 80154f8:	2000173c 	.word	0x2000173c
 80154fc:	20001264 	.word	0x20001264
 8015500:	20001260 	.word	0x20001260
 8015504:	20001748 	.word	0x20001748
 8015508:	20001744 	.word	0x20001744

0801550c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b082      	sub	sp, #8
 8015510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015512:	4b23      	ldr	r3, [pc, #140]	; (80155a0 <vTaskSwitchContext+0x94>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d003      	beq.n	8015522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801551a:	4b22      	ldr	r3, [pc, #136]	; (80155a4 <vTaskSwitchContext+0x98>)
 801551c:	2201      	movs	r2, #1
 801551e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015520:	e039      	b.n	8015596 <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8015522:	4b20      	ldr	r3, [pc, #128]	; (80155a4 <vTaskSwitchContext+0x98>)
 8015524:	2200      	movs	r2, #0
 8015526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015528:	4b1f      	ldr	r3, [pc, #124]	; (80155a8 <vTaskSwitchContext+0x9c>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	607b      	str	r3, [r7, #4]
 801552e:	e008      	b.n	8015542 <vTaskSwitchContext+0x36>
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d102      	bne.n	801553c <vTaskSwitchContext+0x30>
 8015536:	f000 ff77 	bl	8016428 <ulSetInterruptMask>
 801553a:	e7fe      	b.n	801553a <vTaskSwitchContext+0x2e>
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	3b01      	subs	r3, #1
 8015540:	607b      	str	r3, [r7, #4]
 8015542:	491a      	ldr	r1, [pc, #104]	; (80155ac <vTaskSwitchContext+0xa0>)
 8015544:	687a      	ldr	r2, [r7, #4]
 8015546:	4613      	mov	r3, r2
 8015548:	009b      	lsls	r3, r3, #2
 801554a:	4413      	add	r3, r2
 801554c:	009b      	lsls	r3, r3, #2
 801554e:	440b      	add	r3, r1
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d0ec      	beq.n	8015530 <vTaskSwitchContext+0x24>
 8015556:	687a      	ldr	r2, [r7, #4]
 8015558:	4613      	mov	r3, r2
 801555a:	009b      	lsls	r3, r3, #2
 801555c:	4413      	add	r3, r2
 801555e:	009b      	lsls	r3, r3, #2
 8015560:	4a12      	ldr	r2, [pc, #72]	; (80155ac <vTaskSwitchContext+0xa0>)
 8015562:	4413      	add	r3, r2
 8015564:	603b      	str	r3, [r7, #0]
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	685b      	ldr	r3, [r3, #4]
 801556a:	685a      	ldr	r2, [r3, #4]
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	605a      	str	r2, [r3, #4]
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	685a      	ldr	r2, [r3, #4]
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	3308      	adds	r3, #8
 8015578:	429a      	cmp	r2, r3
 801557a:	d104      	bne.n	8015586 <vTaskSwitchContext+0x7a>
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	685a      	ldr	r2, [r3, #4]
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	605a      	str	r2, [r3, #4]
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	68db      	ldr	r3, [r3, #12]
 801558c:	4a08      	ldr	r2, [pc, #32]	; (80155b0 <vTaskSwitchContext+0xa4>)
 801558e:	6013      	str	r3, [r2, #0]
 8015590:	4a05      	ldr	r2, [pc, #20]	; (80155a8 <vTaskSwitchContext+0x9c>)
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6013      	str	r3, [r2, #0]
}
 8015596:	bf00      	nop
 8015598:	3708      	adds	r7, #8
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}
 801559e:	bf00      	nop
 80155a0:	2000175c 	.word	0x2000175c
 80155a4:	20001748 	.word	0x20001748
 80155a8:	2000173c 	.word	0x2000173c
 80155ac:	20001264 	.word	0x20001264
 80155b0:	20001260 	.word	0x20001260

080155b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d102      	bne.n	80155ca <vTaskPlaceOnEventList+0x16>
 80155c4:	f000 ff30 	bl	8016428 <ulSetInterruptMask>
 80155c8:	e7fe      	b.n	80155c8 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80155ca:	4b07      	ldr	r3, [pc, #28]	; (80155e8 <vTaskPlaceOnEventList+0x34>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	3318      	adds	r3, #24
 80155d0:	4619      	mov	r1, r3
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f7fe fe7d 	bl	80142d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80155d8:	2101      	movs	r1, #1
 80155da:	6838      	ldr	r0, [r7, #0]
 80155dc:	f000 fa3c 	bl	8015a58 <prvAddCurrentTaskToDelayedList>
}
 80155e0:	bf00      	nop
 80155e2:	3708      	adds	r7, #8
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	20001260 	.word	0x20001260

080155ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b084      	sub	sp, #16
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	60f8      	str	r0, [r7, #12]
 80155f4:	60b9      	str	r1, [r7, #8]
 80155f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d102      	bne.n	8015604 <vTaskPlaceOnEventListRestricted+0x18>
 80155fe:	f000 ff13 	bl	8016428 <ulSetInterruptMask>
 8015602:	e7fe      	b.n	8015602 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015604:	4b0a      	ldr	r3, [pc, #40]	; (8015630 <vTaskPlaceOnEventListRestricted+0x44>)
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	3318      	adds	r3, #24
 801560a:	4619      	mov	r1, r3
 801560c:	68f8      	ldr	r0, [r7, #12]
 801560e:	f7fe fe3c 	bl	801428a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d002      	beq.n	801561e <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 8015618:	f04f 33ff 	mov.w	r3, #4294967295
 801561c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801561e:	6879      	ldr	r1, [r7, #4]
 8015620:	68b8      	ldr	r0, [r7, #8]
 8015622:	f000 fa19 	bl	8015a58 <prvAddCurrentTaskToDelayedList>
	}
 8015626:	bf00      	nop
 8015628:	3710      	adds	r7, #16
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	20001260 	.word	0x20001260

08015634 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b084      	sub	sp, #16
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	68db      	ldr	r3, [r3, #12]
 8015640:	68db      	ldr	r3, [r3, #12]
 8015642:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d102      	bne.n	8015650 <xTaskRemoveFromEventList+0x1c>
 801564a:	f000 feed 	bl	8016428 <ulSetInterruptMask>
 801564e:	e7fe      	b.n	801564e <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	3318      	adds	r3, #24
 8015654:	4618      	mov	r0, r3
 8015656:	f7fe fe75 	bl	8014344 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801565a:	4b1e      	ldr	r3, [pc, #120]	; (80156d4 <xTaskRemoveFromEventList+0xa0>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d11d      	bne.n	801569e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015662:	68bb      	ldr	r3, [r7, #8]
 8015664:	3304      	adds	r3, #4
 8015666:	4618      	mov	r0, r3
 8015668:	f7fe fe6c 	bl	8014344 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015670:	4b19      	ldr	r3, [pc, #100]	; (80156d8 <xTaskRemoveFromEventList+0xa4>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	429a      	cmp	r2, r3
 8015676:	d903      	bls.n	8015680 <xTaskRemoveFromEventList+0x4c>
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801567c:	4a16      	ldr	r2, [pc, #88]	; (80156d8 <xTaskRemoveFromEventList+0xa4>)
 801567e:	6013      	str	r3, [r2, #0]
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015684:	4613      	mov	r3, r2
 8015686:	009b      	lsls	r3, r3, #2
 8015688:	4413      	add	r3, r2
 801568a:	009b      	lsls	r3, r3, #2
 801568c:	4a13      	ldr	r2, [pc, #76]	; (80156dc <xTaskRemoveFromEventList+0xa8>)
 801568e:	441a      	add	r2, r3
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	3304      	adds	r3, #4
 8015694:	4619      	mov	r1, r3
 8015696:	4610      	mov	r0, r2
 8015698:	f7fe fdf7 	bl	801428a <vListInsertEnd>
 801569c:	e005      	b.n	80156aa <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	3318      	adds	r3, #24
 80156a2:	4619      	mov	r1, r3
 80156a4:	480e      	ldr	r0, [pc, #56]	; (80156e0 <xTaskRemoveFromEventList+0xac>)
 80156a6:	f7fe fdf0 	bl	801428a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156ae:	4b0d      	ldr	r3, [pc, #52]	; (80156e4 <xTaskRemoveFromEventList+0xb0>)
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156b4:	429a      	cmp	r2, r3
 80156b6:	d905      	bls.n	80156c4 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80156b8:	2301      	movs	r3, #1
 80156ba:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80156bc:	4b0a      	ldr	r3, [pc, #40]	; (80156e8 <xTaskRemoveFromEventList+0xb4>)
 80156be:	2201      	movs	r2, #1
 80156c0:	601a      	str	r2, [r3, #0]
 80156c2:	e001      	b.n	80156c8 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 80156c4:	2300      	movs	r3, #0
 80156c6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80156c8:	68fb      	ldr	r3, [r7, #12]
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3710      	adds	r7, #16
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	bf00      	nop
 80156d4:	2000175c 	.word	0x2000175c
 80156d8:	2000173c 	.word	0x2000173c
 80156dc:	20001264 	.word	0x20001264
 80156e0:	200016f4 	.word	0x200016f4
 80156e4:	20001260 	.word	0x20001260
 80156e8:	20001748 	.word	0x20001748

080156ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80156ec:	b480      	push	{r7}
 80156ee:	b083      	sub	sp, #12
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80156f4:	4b06      	ldr	r3, [pc, #24]	; (8015710 <vTaskInternalSetTimeOutState+0x24>)
 80156f6:	681a      	ldr	r2, [r3, #0]
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80156fc:	4b05      	ldr	r3, [pc, #20]	; (8015714 <vTaskInternalSetTimeOutState+0x28>)
 80156fe:	681a      	ldr	r2, [r3, #0]
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	605a      	str	r2, [r3, #4]
}
 8015704:	bf00      	nop
 8015706:	370c      	adds	r7, #12
 8015708:	46bd      	mov	sp, r7
 801570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570e:	4770      	bx	lr
 8015710:	2000174c 	.word	0x2000174c
 8015714:	20001738 	.word	0x20001738

08015718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b086      	sub	sp, #24
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d102      	bne.n	801572e <xTaskCheckForTimeOut+0x16>
 8015728:	f000 fe7e 	bl	8016428 <ulSetInterruptMask>
 801572c:	e7fe      	b.n	801572c <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d102      	bne.n	801573a <xTaskCheckForTimeOut+0x22>
 8015734:	f000 fe78 	bl	8016428 <ulSetInterruptMask>
 8015738:	e7fe      	b.n	8015738 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 801573a:	f000 fd3f 	bl	80161bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801573e:	4b1d      	ldr	r3, [pc, #116]	; (80157b4 <xTaskCheckForTimeOut+0x9c>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	693a      	ldr	r2, [r7, #16]
 801574a:	1ad3      	subs	r3, r2, r3
 801574c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015756:	d102      	bne.n	801575e <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015758:	2300      	movs	r3, #0
 801575a:	617b      	str	r3, [r7, #20]
 801575c:	e023      	b.n	80157a6 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	681a      	ldr	r2, [r3, #0]
 8015762:	4b15      	ldr	r3, [pc, #84]	; (80157b8 <xTaskCheckForTimeOut+0xa0>)
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	429a      	cmp	r2, r3
 8015768:	d007      	beq.n	801577a <xTaskCheckForTimeOut+0x62>
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	685b      	ldr	r3, [r3, #4]
 801576e:	693a      	ldr	r2, [r7, #16]
 8015770:	429a      	cmp	r2, r3
 8015772:	d302      	bcc.n	801577a <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015774:	2301      	movs	r3, #1
 8015776:	617b      	str	r3, [r7, #20]
 8015778:	e015      	b.n	80157a6 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801577a:	683b      	ldr	r3, [r7, #0]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	68fa      	ldr	r2, [r7, #12]
 8015780:	429a      	cmp	r2, r3
 8015782:	d20b      	bcs.n	801579c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	681a      	ldr	r2, [r3, #0]
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	1ad2      	subs	r2, r2, r3
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f7ff ffab 	bl	80156ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015796:	2300      	movs	r3, #0
 8015798:	617b      	str	r3, [r7, #20]
 801579a:	e004      	b.n	80157a6 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	2200      	movs	r2, #0
 80157a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80157a2:	2301      	movs	r3, #1
 80157a4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80157a6:	f000 fd1b 	bl	80161e0 <vPortExitCritical>

	return xReturn;
 80157aa:	697b      	ldr	r3, [r7, #20]
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	3718      	adds	r7, #24
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	20001738 	.word	0x20001738
 80157b8:	2000174c 	.word	0x2000174c

080157bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80157bc:	b480      	push	{r7}
 80157be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80157c0:	4b03      	ldr	r3, [pc, #12]	; (80157d0 <vTaskMissedYield+0x14>)
 80157c2:	2201      	movs	r2, #1
 80157c4:	601a      	str	r2, [r3, #0]
}
 80157c6:	bf00      	nop
 80157c8:	46bd      	mov	sp, r7
 80157ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ce:	4770      	bx	lr
 80157d0:	20001748 	.word	0x20001748

080157d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b082      	sub	sp, #8
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80157dc:	f000 f84a 	bl	8015874 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80157e0:	4b03      	ldr	r3, [pc, #12]	; (80157f0 <prvIdleTask+0x1c>)
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	2b01      	cmp	r3, #1
 80157e6:	d9f9      	bls.n	80157dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80157e8:	f000 fcd6 	bl	8016198 <vPortYield>
		prvCheckTasksWaitingTermination();
 80157ec:	e7f6      	b.n	80157dc <prvIdleTask+0x8>
 80157ee:	bf00      	nop
 80157f0:	20001264 	.word	0x20001264

080157f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b082      	sub	sp, #8
 80157f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80157fa:	2300      	movs	r3, #0
 80157fc:	607b      	str	r3, [r7, #4]
 80157fe:	e00c      	b.n	801581a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015800:	687a      	ldr	r2, [r7, #4]
 8015802:	4613      	mov	r3, r2
 8015804:	009b      	lsls	r3, r3, #2
 8015806:	4413      	add	r3, r2
 8015808:	009b      	lsls	r3, r3, #2
 801580a:	4a12      	ldr	r2, [pc, #72]	; (8015854 <prvInitialiseTaskLists+0x60>)
 801580c:	4413      	add	r3, r2
 801580e:	4618      	mov	r0, r3
 8015810:	f7fe fd0e 	bl	8014230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	3301      	adds	r3, #1
 8015818:	607b      	str	r3, [r7, #4]
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	2b37      	cmp	r3, #55	; 0x37
 801581e:	d9ef      	bls.n	8015800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015820:	480d      	ldr	r0, [pc, #52]	; (8015858 <prvInitialiseTaskLists+0x64>)
 8015822:	f7fe fd05 	bl	8014230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015826:	480d      	ldr	r0, [pc, #52]	; (801585c <prvInitialiseTaskLists+0x68>)
 8015828:	f7fe fd02 	bl	8014230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801582c:	480c      	ldr	r0, [pc, #48]	; (8015860 <prvInitialiseTaskLists+0x6c>)
 801582e:	f7fe fcff 	bl	8014230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015832:	480c      	ldr	r0, [pc, #48]	; (8015864 <prvInitialiseTaskLists+0x70>)
 8015834:	f7fe fcfc 	bl	8014230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015838:	480b      	ldr	r0, [pc, #44]	; (8015868 <prvInitialiseTaskLists+0x74>)
 801583a:	f7fe fcf9 	bl	8014230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801583e:	4b0b      	ldr	r3, [pc, #44]	; (801586c <prvInitialiseTaskLists+0x78>)
 8015840:	4a05      	ldr	r2, [pc, #20]	; (8015858 <prvInitialiseTaskLists+0x64>)
 8015842:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015844:	4b0a      	ldr	r3, [pc, #40]	; (8015870 <prvInitialiseTaskLists+0x7c>)
 8015846:	4a05      	ldr	r2, [pc, #20]	; (801585c <prvInitialiseTaskLists+0x68>)
 8015848:	601a      	str	r2, [r3, #0]
}
 801584a:	bf00      	nop
 801584c:	3708      	adds	r7, #8
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}
 8015852:	bf00      	nop
 8015854:	20001264 	.word	0x20001264
 8015858:	200016c4 	.word	0x200016c4
 801585c:	200016d8 	.word	0x200016d8
 8015860:	200016f4 	.word	0x200016f4
 8015864:	20001708 	.word	0x20001708
 8015868:	20001720 	.word	0x20001720
 801586c:	200016ec 	.word	0x200016ec
 8015870:	200016f0 	.word	0x200016f0

08015874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801587a:	e019      	b.n	80158b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801587c:	f000 fc9e 	bl	80161bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015880:	4b10      	ldr	r3, [pc, #64]	; (80158c4 <prvCheckTasksWaitingTermination+0x50>)
 8015882:	68db      	ldr	r3, [r3, #12]
 8015884:	68db      	ldr	r3, [r3, #12]
 8015886:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	3304      	adds	r3, #4
 801588c:	4618      	mov	r0, r3
 801588e:	f7fe fd59 	bl	8014344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015892:	4b0d      	ldr	r3, [pc, #52]	; (80158c8 <prvCheckTasksWaitingTermination+0x54>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	3b01      	subs	r3, #1
 8015898:	4a0b      	ldr	r2, [pc, #44]	; (80158c8 <prvCheckTasksWaitingTermination+0x54>)
 801589a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801589c:	4b0b      	ldr	r3, [pc, #44]	; (80158cc <prvCheckTasksWaitingTermination+0x58>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	3b01      	subs	r3, #1
 80158a2:	4a0a      	ldr	r2, [pc, #40]	; (80158cc <prvCheckTasksWaitingTermination+0x58>)
 80158a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80158a6:	f000 fc9b 	bl	80161e0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f000 f810 	bl	80158d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80158b0:	4b06      	ldr	r3, [pc, #24]	; (80158cc <prvCheckTasksWaitingTermination+0x58>)
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d1e1      	bne.n	801587c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80158b8:	bf00      	nop
 80158ba:	bf00      	nop
 80158bc:	3708      	adds	r7, #8
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}
 80158c2:	bf00      	nop
 80158c4:	20001708 	.word	0x20001708
 80158c8:	20001734 	.word	0x20001734
 80158cc:	2000171c 	.word	0x2000171c

080158d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b082      	sub	sp, #8
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d108      	bne.n	80158f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158e6:	4618      	mov	r0, r3
 80158e8:	f000 feb2 	bl	8016650 <vPortFree>
				vPortFree( pxTCB );
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f000 feaf 	bl	8016650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80158f2:	e010      	b.n	8015916 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80158fa:	2b01      	cmp	r3, #1
 80158fc:	d103      	bne.n	8015906 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f000 fea6 	bl	8016650 <vPortFree>
	}
 8015904:	e007      	b.n	8015916 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801590c:	2b02      	cmp	r3, #2
 801590e:	d002      	beq.n	8015916 <prvDeleteTCB+0x46>
 8015910:	f000 fd8a 	bl	8016428 <ulSetInterruptMask>
 8015914:	e7fe      	b.n	8015914 <prvDeleteTCB+0x44>
	}
 8015916:	bf00      	nop
 8015918:	3708      	adds	r7, #8
 801591a:	46bd      	mov	sp, r7
 801591c:	bd80      	pop	{r7, pc}
	...

08015920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015920:	b480      	push	{r7}
 8015922:	b083      	sub	sp, #12
 8015924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015926:	4b0c      	ldr	r3, [pc, #48]	; (8015958 <prvResetNextTaskUnblockTime+0x38>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d104      	bne.n	801593a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015930:	4b0a      	ldr	r3, [pc, #40]	; (801595c <prvResetNextTaskUnblockTime+0x3c>)
 8015932:	f04f 32ff 	mov.w	r2, #4294967295
 8015936:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015938:	e008      	b.n	801594c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801593a:	4b07      	ldr	r3, [pc, #28]	; (8015958 <prvResetNextTaskUnblockTime+0x38>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	68db      	ldr	r3, [r3, #12]
 8015940:	68db      	ldr	r3, [r3, #12]
 8015942:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	4a04      	ldr	r2, [pc, #16]	; (801595c <prvResetNextTaskUnblockTime+0x3c>)
 801594a:	6013      	str	r3, [r2, #0]
}
 801594c:	bf00      	nop
 801594e:	370c      	adds	r7, #12
 8015950:	46bd      	mov	sp, r7
 8015952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015956:	4770      	bx	lr
 8015958:	200016ec 	.word	0x200016ec
 801595c:	20001754 	.word	0x20001754

08015960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015960:	b480      	push	{r7}
 8015962:	b083      	sub	sp, #12
 8015964:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015966:	4b0b      	ldr	r3, [pc, #44]	; (8015994 <xTaskGetSchedulerState+0x34>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d102      	bne.n	8015974 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801596e:	2301      	movs	r3, #1
 8015970:	607b      	str	r3, [r7, #4]
 8015972:	e008      	b.n	8015986 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015974:	4b08      	ldr	r3, [pc, #32]	; (8015998 <xTaskGetSchedulerState+0x38>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d102      	bne.n	8015982 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801597c:	2302      	movs	r3, #2
 801597e:	607b      	str	r3, [r7, #4]
 8015980:	e001      	b.n	8015986 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015982:	2300      	movs	r3, #0
 8015984:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015986:	687b      	ldr	r3, [r7, #4]
	}
 8015988:	4618      	mov	r0, r3
 801598a:	370c      	adds	r7, #12
 801598c:	46bd      	mov	sp, r7
 801598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015992:	4770      	bx	lr
 8015994:	20001740 	.word	0x20001740
 8015998:	2000175c 	.word	0x2000175c

0801599c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801599c:	b580      	push	{r7, lr}
 801599e:	b084      	sub	sp, #16
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80159a8:	2300      	movs	r3, #0
 80159aa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d046      	beq.n	8015a40 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80159b2:	4b26      	ldr	r3, [pc, #152]	; (8015a4c <xTaskPriorityDisinherit+0xb0>)
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	68ba      	ldr	r2, [r7, #8]
 80159b8:	429a      	cmp	r2, r3
 80159ba:	d002      	beq.n	80159c2 <xTaskPriorityDisinherit+0x26>
 80159bc:	f000 fd34 	bl	8016428 <ulSetInterruptMask>
 80159c0:	e7fe      	b.n	80159c0 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80159c2:	68bb      	ldr	r3, [r7, #8]
 80159c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d102      	bne.n	80159d0 <xTaskPriorityDisinherit+0x34>
 80159ca:	f000 fd2d 	bl	8016428 <ulSetInterruptMask>
 80159ce:	e7fe      	b.n	80159ce <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80159d4:	1e5a      	subs	r2, r3, #1
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d02c      	beq.n	8015a40 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80159e6:	68bb      	ldr	r3, [r7, #8]
 80159e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d128      	bne.n	8015a40 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	3304      	adds	r3, #4
 80159f2:	4618      	mov	r0, r3
 80159f4:	f7fe fca6 	bl	8014344 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a10:	4b0f      	ldr	r3, [pc, #60]	; (8015a50 <xTaskPriorityDisinherit+0xb4>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	429a      	cmp	r2, r3
 8015a16:	d903      	bls.n	8015a20 <xTaskPriorityDisinherit+0x84>
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a1c:	4a0c      	ldr	r2, [pc, #48]	; (8015a50 <xTaskPriorityDisinherit+0xb4>)
 8015a1e:	6013      	str	r3, [r2, #0]
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a24:	4613      	mov	r3, r2
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	4413      	add	r3, r2
 8015a2a:	009b      	lsls	r3, r3, #2
 8015a2c:	4a09      	ldr	r2, [pc, #36]	; (8015a54 <xTaskPriorityDisinherit+0xb8>)
 8015a2e:	441a      	add	r2, r3
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	3304      	adds	r3, #4
 8015a34:	4619      	mov	r1, r3
 8015a36:	4610      	mov	r0, r2
 8015a38:	f7fe fc27 	bl	801428a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015a40:	68fb      	ldr	r3, [r7, #12]
	}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3710      	adds	r7, #16
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}
 8015a4a:	bf00      	nop
 8015a4c:	20001260 	.word	0x20001260
 8015a50:	2000173c 	.word	0x2000173c
 8015a54:	20001264 	.word	0x20001264

08015a58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015a62:	4b21      	ldr	r3, [pc, #132]	; (8015ae8 <prvAddCurrentTaskToDelayedList+0x90>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a68:	4b20      	ldr	r3, [pc, #128]	; (8015aec <prvAddCurrentTaskToDelayedList+0x94>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	3304      	adds	r3, #4
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7fe fc68 	bl	8014344 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a7a:	d10a      	bne.n	8015a92 <prvAddCurrentTaskToDelayedList+0x3a>
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d007      	beq.n	8015a92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a82:	4b1a      	ldr	r3, [pc, #104]	; (8015aec <prvAddCurrentTaskToDelayedList+0x94>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	3304      	adds	r3, #4
 8015a88:	4619      	mov	r1, r3
 8015a8a:	4819      	ldr	r0, [pc, #100]	; (8015af0 <prvAddCurrentTaskToDelayedList+0x98>)
 8015a8c:	f7fe fbfd 	bl	801428a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015a90:	e026      	b.n	8015ae0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015a92:	68fa      	ldr	r2, [r7, #12]
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	4413      	add	r3, r2
 8015a98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015a9a:	4b14      	ldr	r3, [pc, #80]	; (8015aec <prvAddCurrentTaskToDelayedList+0x94>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	68ba      	ldr	r2, [r7, #8]
 8015aa0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015aa2:	68ba      	ldr	r2, [r7, #8]
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d209      	bcs.n	8015abe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015aaa:	4b12      	ldr	r3, [pc, #72]	; (8015af4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015aac:	681a      	ldr	r2, [r3, #0]
 8015aae:	4b0f      	ldr	r3, [pc, #60]	; (8015aec <prvAddCurrentTaskToDelayedList+0x94>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	3304      	adds	r3, #4
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	4610      	mov	r0, r2
 8015ab8:	f7fe fc0b 	bl	80142d2 <vListInsert>
}
 8015abc:	e010      	b.n	8015ae0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015abe:	4b0e      	ldr	r3, [pc, #56]	; (8015af8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015ac0:	681a      	ldr	r2, [r3, #0]
 8015ac2:	4b0a      	ldr	r3, [pc, #40]	; (8015aec <prvAddCurrentTaskToDelayedList+0x94>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	3304      	adds	r3, #4
 8015ac8:	4619      	mov	r1, r3
 8015aca:	4610      	mov	r0, r2
 8015acc:	f7fe fc01 	bl	80142d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015ad0:	4b0a      	ldr	r3, [pc, #40]	; (8015afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	68ba      	ldr	r2, [r7, #8]
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d202      	bcs.n	8015ae0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015ada:	4a08      	ldr	r2, [pc, #32]	; (8015afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	6013      	str	r3, [r2, #0]
}
 8015ae0:	bf00      	nop
 8015ae2:	3710      	adds	r7, #16
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}
 8015ae8:	20001738 	.word	0x20001738
 8015aec:	20001260 	.word	0x20001260
 8015af0:	20001720 	.word	0x20001720
 8015af4:	200016f0 	.word	0x200016f0
 8015af8:	200016ec 	.word	0x200016ec
 8015afc:	20001754 	.word	0x20001754

08015b00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b088      	sub	sp, #32
 8015b04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015b06:	2300      	movs	r3, #0
 8015b08:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015b0a:	f000 fac7 	bl	801609c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015b0e:	4b18      	ldr	r3, [pc, #96]	; (8015b70 <xTimerCreateTimerTask+0x70>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d020      	beq.n	8015b58 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015b16:	2300      	movs	r3, #0
 8015b18:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015b1e:	463a      	mov	r2, r7
 8015b20:	1d39      	adds	r1, r7, #4
 8015b22:	f107 0308 	add.w	r3, r7, #8
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7fe fb68 	bl	80141fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015b2c:	6839      	ldr	r1, [r7, #0]
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	68ba      	ldr	r2, [r7, #8]
 8015b32:	9202      	str	r2, [sp, #8]
 8015b34:	9301      	str	r3, [sp, #4]
 8015b36:	2302      	movs	r3, #2
 8015b38:	9300      	str	r3, [sp, #0]
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	460a      	mov	r2, r1
 8015b3e:	490d      	ldr	r1, [pc, #52]	; (8015b74 <xTimerCreateTimerTask+0x74>)
 8015b40:	480d      	ldr	r0, [pc, #52]	; (8015b78 <xTimerCreateTimerTask+0x78>)
 8015b42:	f7ff f855 	bl	8014bf0 <xTaskCreateStatic>
 8015b46:	4603      	mov	r3, r0
 8015b48:	4a0c      	ldr	r2, [pc, #48]	; (8015b7c <xTimerCreateTimerTask+0x7c>)
 8015b4a:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015b4c:	4b0b      	ldr	r3, [pc, #44]	; (8015b7c <xTimerCreateTimerTask+0x7c>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d001      	beq.n	8015b58 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8015b54:	2301      	movs	r3, #1
 8015b56:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d102      	bne.n	8015b64 <xTimerCreateTimerTask+0x64>
 8015b5e:	f000 fc63 	bl	8016428 <ulSetInterruptMask>
 8015b62:	e7fe      	b.n	8015b62 <xTimerCreateTimerTask+0x62>
	return xReturn;
 8015b64:	68fb      	ldr	r3, [r7, #12]
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3710      	adds	r7, #16
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}
 8015b6e:	bf00      	nop
 8015b70:	20001790 	.word	0x20001790
 8015b74:	08018860 	.word	0x08018860
 8015b78:	08015c95 	.word	0x08015c95
 8015b7c:	20001794 	.word	0x20001794

08015b80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b08a      	sub	sp, #40	; 0x28
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	60f8      	str	r0, [r7, #12]
 8015b88:	60b9      	str	r1, [r7, #8]
 8015b8a:	607a      	str	r2, [r7, #4]
 8015b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d102      	bne.n	8015b9e <xTimerGenericCommand+0x1e>
 8015b98:	f000 fc46 	bl	8016428 <ulSetInterruptMask>
 8015b9c:	e7fe      	b.n	8015b9c <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015b9e:	4b1a      	ldr	r3, [pc, #104]	; (8015c08 <xTimerGenericCommand+0x88>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d02a      	beq.n	8015bfc <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015ba6:	68bb      	ldr	r3, [r7, #8]
 8015ba8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015bb2:	68bb      	ldr	r3, [r7, #8]
 8015bb4:	2b05      	cmp	r3, #5
 8015bb6:	dc18      	bgt.n	8015bea <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015bb8:	f7ff fed2 	bl	8015960 <xTaskGetSchedulerState>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	2b02      	cmp	r3, #2
 8015bc0:	d109      	bne.n	8015bd6 <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015bc2:	4b11      	ldr	r3, [pc, #68]	; (8015c08 <xTimerGenericCommand+0x88>)
 8015bc4:	6818      	ldr	r0, [r3, #0]
 8015bc6:	f107 0114 	add.w	r1, r7, #20
 8015bca:	2300      	movs	r3, #0
 8015bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015bce:	f7fe fcae 	bl	801452e <xQueueGenericSend>
 8015bd2:	6278      	str	r0, [r7, #36]	; 0x24
 8015bd4:	e012      	b.n	8015bfc <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015bd6:	4b0c      	ldr	r3, [pc, #48]	; (8015c08 <xTimerGenericCommand+0x88>)
 8015bd8:	6818      	ldr	r0, [r3, #0]
 8015bda:	f107 0114 	add.w	r1, r7, #20
 8015bde:	2300      	movs	r3, #0
 8015be0:	2200      	movs	r2, #0
 8015be2:	f7fe fca4 	bl	801452e <xQueueGenericSend>
 8015be6:	6278      	str	r0, [r7, #36]	; 0x24
 8015be8:	e008      	b.n	8015bfc <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015bea:	4b07      	ldr	r3, [pc, #28]	; (8015c08 <xTimerGenericCommand+0x88>)
 8015bec:	6818      	ldr	r0, [r3, #0]
 8015bee:	f107 0114 	add.w	r1, r7, #20
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	683a      	ldr	r2, [r7, #0]
 8015bf6:	f7fe fd63 	bl	80146c0 <xQueueGenericSendFromISR>
 8015bfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3728      	adds	r7, #40	; 0x28
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	20001790 	.word	0x20001790

08015c0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b086      	sub	sp, #24
 8015c10:	af02      	add	r7, sp, #8
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c16:	4b1e      	ldr	r3, [pc, #120]	; (8015c90 <prvProcessExpiredTimer+0x84>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	68db      	ldr	r3, [r3, #12]
 8015c1c:	68db      	ldr	r3, [r3, #12]
 8015c1e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	3304      	adds	r3, #4
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7fe fb8d 	bl	8014344 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c30:	f003 0304 	and.w	r3, r3, #4
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d01a      	beq.n	8015c6e <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	699a      	ldr	r2, [r3, #24]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	18d1      	adds	r1, r2, r3
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	683a      	ldr	r2, [r7, #0]
 8015c44:	68f8      	ldr	r0, [r7, #12]
 8015c46:	f000 f8c1 	bl	8015dcc <prvInsertTimerInActiveList>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d017      	beq.n	8015c80 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015c50:	2300      	movs	r3, #0
 8015c52:	9300      	str	r3, [sp, #0]
 8015c54:	2300      	movs	r3, #0
 8015c56:	687a      	ldr	r2, [r7, #4]
 8015c58:	2100      	movs	r1, #0
 8015c5a:	68f8      	ldr	r0, [r7, #12]
 8015c5c:	f7ff ff90 	bl	8015b80 <xTimerGenericCommand>
 8015c60:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d10b      	bne.n	8015c80 <prvProcessExpiredTimer+0x74>
 8015c68:	f000 fbde 	bl	8016428 <ulSetInterruptMask>
 8015c6c:	e7fe      	b.n	8015c6c <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c74:	f023 0301 	bic.w	r3, r3, #1
 8015c78:	b2da      	uxtb	r2, r3
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	6a1b      	ldr	r3, [r3, #32]
 8015c84:	68f8      	ldr	r0, [r7, #12]
 8015c86:	4798      	blx	r3
}
 8015c88:	bf00      	nop
 8015c8a:	3710      	adds	r7, #16
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}
 8015c90:	20001788 	.word	0x20001788

08015c94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b084      	sub	sp, #16
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015c9c:	f107 0308 	add.w	r3, r7, #8
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f000 f84f 	bl	8015d44 <prvGetNextExpireTime>
 8015ca6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	4619      	mov	r1, r3
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f000 f803 	bl	8015cb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015cb2:	f000 f8cd 	bl	8015e50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015cb6:	e7f1      	b.n	8015c9c <prvTimerTask+0x8>

08015cb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b084      	sub	sp, #16
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015cc2:	f7ff fac5 	bl	8015250 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015cc6:	f107 0308 	add.w	r3, r7, #8
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f000 f85e 	bl	8015d8c <prvSampleTimeNow>
 8015cd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015cd2:	68bb      	ldr	r3, [r7, #8]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d12a      	bne.n	8015d2e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d10a      	bne.n	8015cf4 <prvProcessTimerOrBlockTask+0x3c>
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d806      	bhi.n	8015cf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015ce6:	f7ff fac1 	bl	801526c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015cea:	68f9      	ldr	r1, [r7, #12]
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	f7ff ff8d 	bl	8015c0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015cf2:	e01e      	b.n	8015d32 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8015cf4:	683b      	ldr	r3, [r7, #0]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d008      	beq.n	8015d0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015cfa:	4b10      	ldr	r3, [pc, #64]	; (8015d3c <prvProcessTimerOrBlockTask+0x84>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d101      	bne.n	8015d08 <prvProcessTimerOrBlockTask+0x50>
 8015d04:	2301      	movs	r3, #1
 8015d06:	e000      	b.n	8015d0a <prvProcessTimerOrBlockTask+0x52>
 8015d08:	2300      	movs	r3, #0
 8015d0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015d0c:	4b0c      	ldr	r3, [pc, #48]	; (8015d40 <prvProcessTimerOrBlockTask+0x88>)
 8015d0e:	6818      	ldr	r0, [r3, #0]
 8015d10:	687a      	ldr	r2, [r7, #4]
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	1ad3      	subs	r3, r2, r3
 8015d16:	683a      	ldr	r2, [r7, #0]
 8015d18:	4619      	mov	r1, r3
 8015d1a:	f7fe ff35 	bl	8014b88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015d1e:	f7ff faa5 	bl	801526c <xTaskResumeAll>
 8015d22:	4603      	mov	r3, r0
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d104      	bne.n	8015d32 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8015d28:	f000 fa36 	bl	8016198 <vPortYield>
}
 8015d2c:	e001      	b.n	8015d32 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8015d2e:	f7ff fa9d 	bl	801526c <xTaskResumeAll>
}
 8015d32:	bf00      	nop
 8015d34:	3710      	adds	r7, #16
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}
 8015d3a:	bf00      	nop
 8015d3c:	2000178c 	.word	0x2000178c
 8015d40:	20001790 	.word	0x20001790

08015d44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015d44:	b480      	push	{r7}
 8015d46:	b085      	sub	sp, #20
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015d4c:	4b0e      	ldr	r3, [pc, #56]	; (8015d88 <prvGetNextExpireTime+0x44>)
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d101      	bne.n	8015d5a <prvGetNextExpireTime+0x16>
 8015d56:	2201      	movs	r2, #1
 8015d58:	e000      	b.n	8015d5c <prvGetNextExpireTime+0x18>
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d105      	bne.n	8015d74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015d68:	4b07      	ldr	r3, [pc, #28]	; (8015d88 <prvGetNextExpireTime+0x44>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	68db      	ldr	r3, [r3, #12]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	60fb      	str	r3, [r7, #12]
 8015d72:	e001      	b.n	8015d78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015d74:	2300      	movs	r3, #0
 8015d76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015d78:	68fb      	ldr	r3, [r7, #12]
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	3714      	adds	r7, #20
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d84:	4770      	bx	lr
 8015d86:	bf00      	nop
 8015d88:	20001788 	.word	0x20001788

08015d8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b084      	sub	sp, #16
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015d94:	f7ff faf8 	bl	8015388 <xTaskGetTickCount>
 8015d98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015d9a:	4b0b      	ldr	r3, [pc, #44]	; (8015dc8 <prvSampleTimeNow+0x3c>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	68fa      	ldr	r2, [r7, #12]
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d205      	bcs.n	8015db0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015da4:	f000 f91e 	bl	8015fe4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	2201      	movs	r2, #1
 8015dac:	601a      	str	r2, [r3, #0]
 8015dae:	e002      	b.n	8015db6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2200      	movs	r2, #0
 8015db4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015db6:	4a04      	ldr	r2, [pc, #16]	; (8015dc8 <prvSampleTimeNow+0x3c>)
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3710      	adds	r7, #16
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}
 8015dc6:	bf00      	nop
 8015dc8:	20001798 	.word	0x20001798

08015dcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b086      	sub	sp, #24
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	60f8      	str	r0, [r7, #12]
 8015dd4:	60b9      	str	r1, [r7, #8]
 8015dd6:	607a      	str	r2, [r7, #4]
 8015dd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	68ba      	ldr	r2, [r7, #8]
 8015de2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	68fa      	ldr	r2, [r7, #12]
 8015de8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015dea:	68ba      	ldr	r2, [r7, #8]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	429a      	cmp	r2, r3
 8015df0:	d812      	bhi.n	8015e18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	1ad2      	subs	r2, r2, r3
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	699b      	ldr	r3, [r3, #24]
 8015dfc:	429a      	cmp	r2, r3
 8015dfe:	d302      	bcc.n	8015e06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015e00:	2301      	movs	r3, #1
 8015e02:	617b      	str	r3, [r7, #20]
 8015e04:	e01b      	b.n	8015e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015e06:	4b10      	ldr	r3, [pc, #64]	; (8015e48 <prvInsertTimerInActiveList+0x7c>)
 8015e08:	681a      	ldr	r2, [r3, #0]
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	3304      	adds	r3, #4
 8015e0e:	4619      	mov	r1, r3
 8015e10:	4610      	mov	r0, r2
 8015e12:	f7fe fa5e 	bl	80142d2 <vListInsert>
 8015e16:	e012      	b.n	8015e3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015e18:	687a      	ldr	r2, [r7, #4]
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d206      	bcs.n	8015e2e <prvInsertTimerInActiveList+0x62>
 8015e20:	68ba      	ldr	r2, [r7, #8]
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	429a      	cmp	r2, r3
 8015e26:	d302      	bcc.n	8015e2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015e28:	2301      	movs	r3, #1
 8015e2a:	617b      	str	r3, [r7, #20]
 8015e2c:	e007      	b.n	8015e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015e2e:	4b07      	ldr	r3, [pc, #28]	; (8015e4c <prvInsertTimerInActiveList+0x80>)
 8015e30:	681a      	ldr	r2, [r3, #0]
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	3304      	adds	r3, #4
 8015e36:	4619      	mov	r1, r3
 8015e38:	4610      	mov	r0, r2
 8015e3a:	f7fe fa4a 	bl	80142d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015e3e:	697b      	ldr	r3, [r7, #20]
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3718      	adds	r7, #24
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}
 8015e48:	2000178c 	.word	0x2000178c
 8015e4c:	20001788 	.word	0x20001788

08015e50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b08c      	sub	sp, #48	; 0x30
 8015e54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015e56:	e0b2      	b.n	8015fbe <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	da11      	bge.n	8015e82 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015e5e:	f107 0308 	add.w	r3, r7, #8
 8015e62:	3304      	adds	r3, #4
 8015e64:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d102      	bne.n	8015e72 <prvProcessReceivedCommands+0x22>
 8015e6c:	f000 fadc 	bl	8016428 <ulSetInterruptMask>
 8015e70:	e7fe      	b.n	8015e70 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e78:	6850      	ldr	r0, [r2, #4]
 8015e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e7c:	6892      	ldr	r2, [r2, #8]
 8015e7e:	4611      	mov	r1, r2
 8015e80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015e82:	68bb      	ldr	r3, [r7, #8]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	f2c0 809a 	blt.w	8015fbe <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015e8a:	693b      	ldr	r3, [r7, #16]
 8015e8c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015e8e:	6a3b      	ldr	r3, [r7, #32]
 8015e90:	695b      	ldr	r3, [r3, #20]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d004      	beq.n	8015ea0 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015e96:	6a3b      	ldr	r3, [r7, #32]
 8015e98:	3304      	adds	r3, #4
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f7fe fa52 	bl	8014344 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015ea0:	1d3b      	adds	r3, r7, #4
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	f7ff ff72 	bl	8015d8c <prvSampleTimeNow>
 8015ea8:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	2b09      	cmp	r3, #9
 8015eae:	f200 8085 	bhi.w	8015fbc <prvProcessReceivedCommands+0x16c>
 8015eb2:	a201      	add	r2, pc, #4	; (adr r2, 8015eb8 <prvProcessReceivedCommands+0x68>)
 8015eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eb8:	08015ee1 	.word	0x08015ee1
 8015ebc:	08015ee1 	.word	0x08015ee1
 8015ec0:	08015ee1 	.word	0x08015ee1
 8015ec4:	08015f45 	.word	0x08015f45
 8015ec8:	08015f59 	.word	0x08015f59
 8015ecc:	08015f93 	.word	0x08015f93
 8015ed0:	08015ee1 	.word	0x08015ee1
 8015ed4:	08015ee1 	.word	0x08015ee1
 8015ed8:	08015f45 	.word	0x08015f45
 8015edc:	08015f59 	.word	0x08015f59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015ee0:	6a3b      	ldr	r3, [r7, #32]
 8015ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ee6:	f043 0301 	orr.w	r3, r3, #1
 8015eea:	b2da      	uxtb	r2, r3
 8015eec:	6a3b      	ldr	r3, [r7, #32]
 8015eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015ef2:	68fa      	ldr	r2, [r7, #12]
 8015ef4:	6a3b      	ldr	r3, [r7, #32]
 8015ef6:	699b      	ldr	r3, [r3, #24]
 8015ef8:	18d1      	adds	r1, r2, r3
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	69fa      	ldr	r2, [r7, #28]
 8015efe:	6a38      	ldr	r0, [r7, #32]
 8015f00:	f7ff ff64 	bl	8015dcc <prvInsertTimerInActiveList>
 8015f04:	4603      	mov	r3, r0
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d059      	beq.n	8015fbe <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015f0a:	6a3b      	ldr	r3, [r7, #32]
 8015f0c:	6a1b      	ldr	r3, [r3, #32]
 8015f0e:	6a38      	ldr	r0, [r7, #32]
 8015f10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015f12:	6a3b      	ldr	r3, [r7, #32]
 8015f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f18:	f003 0304 	and.w	r3, r3, #4
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d04e      	beq.n	8015fbe <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015f20:	68fa      	ldr	r2, [r7, #12]
 8015f22:	6a3b      	ldr	r3, [r7, #32]
 8015f24:	699b      	ldr	r3, [r3, #24]
 8015f26:	441a      	add	r2, r3
 8015f28:	2300      	movs	r3, #0
 8015f2a:	9300      	str	r3, [sp, #0]
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	2100      	movs	r1, #0
 8015f30:	6a38      	ldr	r0, [r7, #32]
 8015f32:	f7ff fe25 	bl	8015b80 <xTimerGenericCommand>
 8015f36:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8015f38:	69bb      	ldr	r3, [r7, #24]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d13f      	bne.n	8015fbe <prvProcessReceivedCommands+0x16e>
 8015f3e:	f000 fa73 	bl	8016428 <ulSetInterruptMask>
 8015f42:	e7fe      	b.n	8015f42 <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015f44:	6a3b      	ldr	r3, [r7, #32]
 8015f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f4a:	f023 0301 	bic.w	r3, r3, #1
 8015f4e:	b2da      	uxtb	r2, r3
 8015f50:	6a3b      	ldr	r3, [r7, #32]
 8015f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015f56:	e032      	b.n	8015fbe <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015f58:	6a3b      	ldr	r3, [r7, #32]
 8015f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f5e:	f043 0301 	orr.w	r3, r3, #1
 8015f62:	b2da      	uxtb	r2, r3
 8015f64:	6a3b      	ldr	r3, [r7, #32]
 8015f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015f6a:	68fa      	ldr	r2, [r7, #12]
 8015f6c:	6a3b      	ldr	r3, [r7, #32]
 8015f6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015f70:	6a3b      	ldr	r3, [r7, #32]
 8015f72:	699b      	ldr	r3, [r3, #24]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d102      	bne.n	8015f7e <prvProcessReceivedCommands+0x12e>
 8015f78:	f000 fa56 	bl	8016428 <ulSetInterruptMask>
 8015f7c:	e7fe      	b.n	8015f7c <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015f7e:	6a3b      	ldr	r3, [r7, #32]
 8015f80:	699a      	ldr	r2, [r3, #24]
 8015f82:	69fb      	ldr	r3, [r7, #28]
 8015f84:	18d1      	adds	r1, r2, r3
 8015f86:	69fb      	ldr	r3, [r7, #28]
 8015f88:	69fa      	ldr	r2, [r7, #28]
 8015f8a:	6a38      	ldr	r0, [r7, #32]
 8015f8c:	f7ff ff1e 	bl	8015dcc <prvInsertTimerInActiveList>
					break;
 8015f90:	e015      	b.n	8015fbe <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015f92:	6a3b      	ldr	r3, [r7, #32]
 8015f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f98:	f003 0302 	and.w	r3, r3, #2
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d103      	bne.n	8015fa8 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8015fa0:	6a38      	ldr	r0, [r7, #32]
 8015fa2:	f000 fb55 	bl	8016650 <vPortFree>
 8015fa6:	e00a      	b.n	8015fbe <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015fa8:	6a3b      	ldr	r3, [r7, #32]
 8015faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fae:	f023 0301 	bic.w	r3, r3, #1
 8015fb2:	b2da      	uxtb	r2, r3
 8015fb4:	6a3b      	ldr	r3, [r7, #32]
 8015fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015fba:	e000      	b.n	8015fbe <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8015fbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015fbe:	4b08      	ldr	r3, [pc, #32]	; (8015fe0 <prvProcessReceivedCommands+0x190>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	f107 0108 	add.w	r1, r7, #8
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f7fe fbea 	bl	80147a2 <xQueueReceive>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	f47f af41 	bne.w	8015e58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015fd6:	bf00      	nop
 8015fd8:	bf00      	nop
 8015fda:	3728      	adds	r7, #40	; 0x28
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd80      	pop	{r7, pc}
 8015fe0:	20001790 	.word	0x20001790

08015fe4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b088      	sub	sp, #32
 8015fe8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015fea:	e040      	b.n	801606e <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015fec:	4b29      	ldr	r3, [pc, #164]	; (8016094 <prvSwitchTimerLists+0xb0>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	68db      	ldr	r3, [r3, #12]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ff6:	4b27      	ldr	r3, [pc, #156]	; (8016094 <prvSwitchTimerLists+0xb0>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	68db      	ldr	r3, [r3, #12]
 8015ffc:	68db      	ldr	r3, [r3, #12]
 8015ffe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	3304      	adds	r3, #4
 8016004:	4618      	mov	r0, r3
 8016006:	f7fe f99d 	bl	8014344 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	6a1b      	ldr	r3, [r3, #32]
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016018:	f003 0304 	and.w	r3, r3, #4
 801601c:	2b00      	cmp	r3, #0
 801601e:	d026      	beq.n	801606e <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	699b      	ldr	r3, [r3, #24]
 8016024:	693a      	ldr	r2, [r7, #16]
 8016026:	4413      	add	r3, r2
 8016028:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801602a:	68ba      	ldr	r2, [r7, #8]
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	429a      	cmp	r2, r3
 8016030:	d90e      	bls.n	8016050 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	68ba      	ldr	r2, [r7, #8]
 8016036:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	68fa      	ldr	r2, [r7, #12]
 801603c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801603e:	4b15      	ldr	r3, [pc, #84]	; (8016094 <prvSwitchTimerLists+0xb0>)
 8016040:	681a      	ldr	r2, [r3, #0]
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	3304      	adds	r3, #4
 8016046:	4619      	mov	r1, r3
 8016048:	4610      	mov	r0, r2
 801604a:	f7fe f942 	bl	80142d2 <vListInsert>
 801604e:	e00e      	b.n	801606e <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016050:	2300      	movs	r3, #0
 8016052:	9300      	str	r3, [sp, #0]
 8016054:	2300      	movs	r3, #0
 8016056:	693a      	ldr	r2, [r7, #16]
 8016058:	2100      	movs	r1, #0
 801605a:	68f8      	ldr	r0, [r7, #12]
 801605c:	f7ff fd90 	bl	8015b80 <xTimerGenericCommand>
 8016060:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d102      	bne.n	801606e <prvSwitchTimerLists+0x8a>
 8016068:	f000 f9de 	bl	8016428 <ulSetInterruptMask>
 801606c:	e7fe      	b.n	801606c <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801606e:	4b09      	ldr	r3, [pc, #36]	; (8016094 <prvSwitchTimerLists+0xb0>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d1b9      	bne.n	8015fec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016078:	4b06      	ldr	r3, [pc, #24]	; (8016094 <prvSwitchTimerLists+0xb0>)
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801607e:	4b06      	ldr	r3, [pc, #24]	; (8016098 <prvSwitchTimerLists+0xb4>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	4a04      	ldr	r2, [pc, #16]	; (8016094 <prvSwitchTimerLists+0xb0>)
 8016084:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016086:	4a04      	ldr	r2, [pc, #16]	; (8016098 <prvSwitchTimerLists+0xb4>)
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	6013      	str	r3, [r2, #0]
}
 801608c:	bf00      	nop
 801608e:	3718      	adds	r7, #24
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	20001788 	.word	0x20001788
 8016098:	2000178c 	.word	0x2000178c

0801609c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b082      	sub	sp, #8
 80160a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80160a2:	f000 f88b 	bl	80161bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80160a6:	4b15      	ldr	r3, [pc, #84]	; (80160fc <prvCheckForValidListAndQueue+0x60>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d120      	bne.n	80160f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80160ae:	4814      	ldr	r0, [pc, #80]	; (8016100 <prvCheckForValidListAndQueue+0x64>)
 80160b0:	f7fe f8be 	bl	8014230 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80160b4:	4813      	ldr	r0, [pc, #76]	; (8016104 <prvCheckForValidListAndQueue+0x68>)
 80160b6:	f7fe f8bb 	bl	8014230 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80160ba:	4b13      	ldr	r3, [pc, #76]	; (8016108 <prvCheckForValidListAndQueue+0x6c>)
 80160bc:	4a10      	ldr	r2, [pc, #64]	; (8016100 <prvCheckForValidListAndQueue+0x64>)
 80160be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80160c0:	4b12      	ldr	r3, [pc, #72]	; (801610c <prvCheckForValidListAndQueue+0x70>)
 80160c2:	4a10      	ldr	r2, [pc, #64]	; (8016104 <prvCheckForValidListAndQueue+0x68>)
 80160c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80160c6:	2300      	movs	r3, #0
 80160c8:	9300      	str	r3, [sp, #0]
 80160ca:	4b11      	ldr	r3, [pc, #68]	; (8016110 <prvCheckForValidListAndQueue+0x74>)
 80160cc:	4a11      	ldr	r2, [pc, #68]	; (8016114 <prvCheckForValidListAndQueue+0x78>)
 80160ce:	2110      	movs	r1, #16
 80160d0:	200a      	movs	r0, #10
 80160d2:	f7fe f9b9 	bl	8014448 <xQueueGenericCreateStatic>
 80160d6:	4603      	mov	r3, r0
 80160d8:	4a08      	ldr	r2, [pc, #32]	; (80160fc <prvCheckForValidListAndQueue+0x60>)
 80160da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80160dc:	4b07      	ldr	r3, [pc, #28]	; (80160fc <prvCheckForValidListAndQueue+0x60>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d005      	beq.n	80160f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80160e4:	4b05      	ldr	r3, [pc, #20]	; (80160fc <prvCheckForValidListAndQueue+0x60>)
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	490b      	ldr	r1, [pc, #44]	; (8016118 <prvCheckForValidListAndQueue+0x7c>)
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7fe fd22 	bl	8014b34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80160f0:	f000 f876 	bl	80161e0 <vPortExitCritical>
}
 80160f4:	bf00      	nop
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}
 80160fa:	bf00      	nop
 80160fc:	20001790 	.word	0x20001790
 8016100:	20001760 	.word	0x20001760
 8016104:	20001774 	.word	0x20001774
 8016108:	20001788 	.word	0x20001788
 801610c:	2000178c 	.word	0x2000178c
 8016110:	2000183c 	.word	0x2000183c
 8016114:	2000179c 	.word	0x2000179c
 8016118:	08018868 	.word	0x08018868

0801611c <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 801611c:	b480      	push	{r7}
 801611e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016120:	4b0b      	ldr	r3, [pc, #44]	; (8016150 <vPortSetupTimerInterrupt+0x34>)
 8016122:	2200      	movs	r2, #0
 8016124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016126:	4b0b      	ldr	r3, [pc, #44]	; (8016154 <vPortSetupTimerInterrupt+0x38>)
 8016128:	2200      	movs	r2, #0
 801612a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801612c:	4b0a      	ldr	r3, [pc, #40]	; (8016158 <vPortSetupTimerInterrupt+0x3c>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	4a0a      	ldr	r2, [pc, #40]	; (801615c <vPortSetupTimerInterrupt+0x40>)
 8016132:	fba2 2303 	umull	r2, r3, r2, r3
 8016136:	099b      	lsrs	r3, r3, #6
 8016138:	4a09      	ldr	r2, [pc, #36]	; (8016160 <vPortSetupTimerInterrupt+0x44>)
 801613a:	3b01      	subs	r3, #1
 801613c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801613e:	4b04      	ldr	r3, [pc, #16]	; (8016150 <vPortSetupTimerInterrupt+0x34>)
 8016140:	2207      	movs	r2, #7
 8016142:	601a      	str	r2, [r3, #0]
}
 8016144:	bf00      	nop
 8016146:	46bd      	mov	sp, r7
 8016148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614c:	4770      	bx	lr
 801614e:	bf00      	nop
 8016150:	e000e010 	.word	0xe000e010
 8016154:	e000e018 	.word	0xe000e018
 8016158:	20000078 	.word	0x20000078
 801615c:	10624dd3 	.word	0x10624dd3
 8016160:	e000e014 	.word	0xe000e014

08016164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b082      	sub	sp, #8
 8016168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801616a:	2300      	movs	r3, #0
 801616c:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 801616e:	4b09      	ldr	r3, [pc, #36]	; (8016194 <prvTaskExitError+0x30>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016176:	d002      	beq.n	801617e <prvTaskExitError+0x1a>
 8016178:	f000 f956 	bl	8016428 <ulSetInterruptMask>
 801617c:	e7fe      	b.n	801617c <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 801617e:	f000 f953 	bl	8016428 <ulSetInterruptMask>

	while( ulDummy == 0 )
 8016182:	bf00      	nop
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d0fc      	beq.n	8016184 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 801618a:	bf00      	nop
 801618c:	bf00      	nop
 801618e:	3708      	adds	r7, #8
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}
 8016194:	20000084 	.word	0x20000084

08016198 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8016198:	b480      	push	{r7}
 801619a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801619c:	4b06      	ldr	r3, [pc, #24]	; (80161b8 <vPortYield+0x20>)
 801619e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161a2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80161a4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80161a8:	f3bf 8f6f 	isb	sy
}
 80161ac:	bf00      	nop
 80161ae:	46bd      	mov	sp, r7
 80161b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b4:	4770      	bx	lr
 80161b6:	bf00      	nop
 80161b8:	e000ed04 	.word	0xe000ed04

080161bc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80161c0:	f000 f932 	bl	8016428 <ulSetInterruptMask>
	ulCriticalNesting++;
 80161c4:	4b05      	ldr	r3, [pc, #20]	; (80161dc <vPortEnterCritical+0x20>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	3301      	adds	r3, #1
 80161ca:	4a04      	ldr	r2, [pc, #16]	; (80161dc <vPortEnterCritical+0x20>)
 80161cc:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80161ce:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80161d2:	f3bf 8f6f 	isb	sy
}
 80161d6:	bf00      	nop
 80161d8:	bd80      	pop	{r7, pc}
 80161da:	bf00      	nop
 80161dc:	20000084 	.word	0x20000084

080161e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 80161e4:	4b0a      	ldr	r3, [pc, #40]	; (8016210 <vPortExitCritical+0x30>)
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d102      	bne.n	80161f2 <vPortExitCritical+0x12>
 80161ec:	f000 f91c 	bl	8016428 <ulSetInterruptMask>
 80161f0:	e7fe      	b.n	80161f0 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 80161f2:	4b07      	ldr	r3, [pc, #28]	; (8016210 <vPortExitCritical+0x30>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	3b01      	subs	r3, #1
 80161f8:	4a05      	ldr	r2, [pc, #20]	; (8016210 <vPortExitCritical+0x30>)
 80161fa:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 80161fc:	4b04      	ldr	r3, [pc, #16]	; (8016210 <vPortExitCritical+0x30>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d102      	bne.n	801620a <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8016204:	2000      	movs	r0, #0
 8016206:	f000 f91c 	bl	8016442 <vClearInterruptMask>
	}
}
 801620a:	bf00      	nop
 801620c:	bd80      	pop	{r7, pc}
 801620e:	bf00      	nop
 8016210:	20000084 	.word	0x20000084

08016214 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b082      	sub	sp, #8
 8016218:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801621a:	f000 f905 	bl	8016428 <ulSetInterruptMask>
 801621e:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016220:	f7ff f8c2 	bl	80153a8 <xTaskIncrementTick>
 8016224:	4603      	mov	r3, r0
 8016226:	2b00      	cmp	r3, #0
 8016228:	d003      	beq.n	8016232 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801622a:	4b05      	ldr	r3, [pc, #20]	; (8016240 <xPortSysTickHandler+0x2c>)
 801622c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016230:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f000 f905 	bl	8016442 <vClearInterruptMask>
}
 8016238:	bf00      	nop
 801623a:	3708      	adds	r7, #8
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}
 8016240:	e000ed04 	.word	0xe000ed04

08016244 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b084      	sub	sp, #16
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	699b      	ldr	r3, [r3, #24]
 8016250:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	3b02      	subs	r3, #2
 8016256:	781b      	ldrb	r3, [r3, #0]
 8016258:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 801625a:	7afb      	ldrb	r3, [r7, #11]
 801625c:	2b02      	cmp	r3, #2
 801625e:	d102      	bne.n	8016266 <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8016260:	f000 f8b6 	bl	80163d0 <vRestoreContextOfFirstTask>
		}
		break;
 8016264:	e002      	b.n	801626c <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8016266:	f000 f8df 	bl	8016428 <ulSetInterruptMask>
 801626a:	e7fe      	b.n	801626a <vPortSVCHandler_C+0x26>
		}
	}
}
 801626c:	bf00      	nop
 801626e:	3710      	adds	r7, #16
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}

08016274 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8016274:	b480      	push	{r7}
 8016276:	b085      	sub	sp, #20
 8016278:	af00      	add	r7, sp, #0
 801627a:	60f8      	str	r0, [r7, #12]
 801627c:	60b9      	str	r1, [r7, #8]
 801627e:	607a      	str	r2, [r7, #4]
 8016280:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	3b04      	subs	r3, #4
 8016286:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801628e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	3b04      	subs	r3, #4
 8016294:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8016296:	687a      	ldr	r2, [r7, #4]
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	3b04      	subs	r3, #4
 80162a0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80162a2:	4a38      	ldr	r2, [pc, #224]	; (8016384 <pxPortInitialiseStack+0x110>)
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	3b04      	subs	r3, #4
 80162ac:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80162b4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	3b04      	subs	r3, #4
 80162ba:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80162c2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	3b04      	subs	r3, #4
 80162c8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80162d0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	3b04      	subs	r3, #4
 80162d6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80162de:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	3b04      	subs	r3, #4
 80162e4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 80162e6:	683a      	ldr	r2, [r7, #0]
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	3b04      	subs	r3, #4
 80162f0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80162f8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	3b04      	subs	r3, #4
 80162fe:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8016306:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	3b04      	subs	r3, #4
 801630c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8016314:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	3b04      	subs	r3, #4
 801631a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8016322:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	3b04      	subs	r3, #4
 8016328:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8016330:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	3b04      	subs	r3, #4
 8016336:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 801633e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	3b04      	subs	r3, #4
 8016344:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 801634c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	3b04      	subs	r3, #4
 8016352:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 801635a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	3b04      	subs	r3, #4
 8016360:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8016368:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	3b04      	subs	r3, #4
 801636e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8016370:	68ba      	ldr	r2, [r7, #8]
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8016376:	68fb      	ldr	r3, [r7, #12]
}
 8016378:	4618      	mov	r0, r3
 801637a:	3714      	adds	r7, #20
 801637c:	46bd      	mov	sp, r7
 801637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016382:	4770      	bx	lr
 8016384:	08016165 	.word	0x08016165

08016388 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8016388:	b580      	push	{r7, lr}
 801638a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801638c:	4b0c      	ldr	r3, [pc, #48]	; (80163c0 <xPortStartScheduler+0x38>)
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	4a0b      	ldr	r2, [pc, #44]	; (80163c0 <xPortStartScheduler+0x38>)
 8016392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8016396:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016398:	4b09      	ldr	r3, [pc, #36]	; (80163c0 <xPortStartScheduler+0x38>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	4a08      	ldr	r2, [pc, #32]	; (80163c0 <xPortStartScheduler+0x38>)
 801639e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80163a2:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 80163a4:	f7ff feba 	bl	801611c <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 80163a8:	4b06      	ldr	r3, [pc, #24]	; (80163c4 <xPortStartScheduler+0x3c>)
 80163aa:	2200      	movs	r2, #0
 80163ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 80163ae:	f000 f827 	bl	8016400 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 80163b2:	f7ff f8ab 	bl	801550c <vTaskSwitchContext>
	prvTaskExitError();
 80163b6:	f7ff fed5 	bl	8016164 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 80163ba:	2300      	movs	r3, #0
}
 80163bc:	4618      	mov	r0, r3
 80163be:	bd80      	pop	{r7, pc}
 80163c0:	e000ed20 	.word	0xe000ed20
 80163c4:	20000084 	.word	0x20000084
	...

080163d0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80163d0:	4a07      	ldr	r2, [pc, #28]	; (80163f0 <pxCurrentTCBConst2>)
 80163d2:	6811      	ldr	r1, [r2, #0]
 80163d4:	6808      	ldr	r0, [r1, #0]
 80163d6:	c806      	ldmia	r0!, {r1, r2}
 80163d8:	f381 880b 	msr	PSPLIM, r1
 80163dc:	2102      	movs	r1, #2
 80163de:	f381 8814 	msr	CONTROL, r1
 80163e2:	3020      	adds	r0, #32
 80163e4:	f380 8809 	msr	PSP, r0
 80163e8:	f3bf 8f6f 	isb	sy
 80163ec:	4710      	bx	r2
 80163ee:	bf00      	nop

080163f0 <pxCurrentTCBConst2>:
 80163f0:	20001260 	.word	0x20001260
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 80163f4:	bf00      	nop
 80163f6:	bf00      	nop
	...

08016400 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8016400:	4807      	ldr	r0, [pc, #28]	; (8016420 <xVTORConst>)
 8016402:	6800      	ldr	r0, [r0, #0]
 8016404:	6800      	ldr	r0, [r0, #0]
 8016406:	f380 8808 	msr	MSP, r0
 801640a:	b662      	cpsie	i
 801640c:	b661      	cpsie	f
 801640e:	f3bf 8f4f 	dsb	sy
 8016412:	f3bf 8f6f 	isb	sy
 8016416:	df02      	svc	2
 8016418:	bf00      	nop
 801641a:	bf00      	nop
 801641c:	f3af 8000 	nop.w

08016420 <xVTORConst>:
 8016420:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8016424:	bf00      	nop
 8016426:	bf00      	nop

08016428 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8016428:	f3ef 8011 	mrs	r0, BASEPRI
 801642c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8016430:	f381 8811 	msr	BASEPRI, r1
 8016434:	f3bf 8f4f 	dsb	sy
 8016438:	f3bf 8f6f 	isb	sy
 801643c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801643e:	bf00      	nop
 8016440:	4618      	mov	r0, r3

08016442 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8016442:	f380 8811 	msr	BASEPRI, r0
 8016446:	f3bf 8f4f 	dsb	sy
 801644a:	f3bf 8f6f 	isb	sy
 801644e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8016450:	bf00      	nop
	...

08016460 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8016460:	f3ef 8009 	mrs	r0, PSP
 8016464:	f3ef 820b 	mrs	r2, PSPLIM
 8016468:	4673      	mov	r3, lr
 801646a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801646e:	4a10      	ldr	r2, [pc, #64]	; (80164b0 <pxCurrentTCBConst>)
 8016470:	6811      	ldr	r1, [r2, #0]
 8016472:	6008      	str	r0, [r1, #0]
 8016474:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8016478:	f380 8811 	msr	BASEPRI, r0
 801647c:	f3bf 8f4f 	dsb	sy
 8016480:	f3bf 8f6f 	isb	sy
 8016484:	f7ff f842 	bl	801550c <vTaskSwitchContext>
 8016488:	f04f 0000 	mov.w	r0, #0
 801648c:	f380 8811 	msr	BASEPRI, r0
 8016490:	4a07      	ldr	r2, [pc, #28]	; (80164b0 <pxCurrentTCBConst>)
 8016492:	6811      	ldr	r1, [r2, #0]
 8016494:	6808      	ldr	r0, [r1, #0]
 8016496:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801649a:	f382 880b 	msr	PSPLIM, r2
 801649e:	f380 8809 	msr	PSP, r0
 80164a2:	4718      	bx	r3
 80164a4:	f3af 8000 	nop.w
 80164a8:	f3af 8000 	nop.w
 80164ac:	f3af 8000 	nop.w

080164b0 <pxCurrentTCBConst>:
 80164b0:	20001260 	.word	0x20001260
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 80164b4:	bf00      	nop
 80164b6:	bf00      	nop
	...

080164c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80164c0:	f01e 0f04 	tst.w	lr, #4
 80164c4:	bf0c      	ite	eq
 80164c6:	f3ef 8008 	mrseq	r0, MSP
 80164ca:	f3ef 8009 	mrsne	r0, PSP
 80164ce:	4904      	ldr	r1, [pc, #16]	; (80164e0 <svchandler_address_const>)
 80164d0:	4708      	bx	r1
 80164d2:	bf00      	nop
 80164d4:	f3af 8000 	nop.w
 80164d8:	f3af 8000 	nop.w
 80164dc:	f3af 8000 	nop.w

080164e0 <svchandler_address_const>:
 80164e0:	08016245 	.word	0x08016245
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 80164e4:	bf00      	nop
 80164e6:	bf00      	nop

080164e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b086      	sub	sp, #24
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80164f0:	2300      	movs	r3, #0
 80164f2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80164f4:	f7fe feac 	bl	8015250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80164f8:	4b4f      	ldr	r3, [pc, #316]	; (8016638 <pvPortMalloc+0x150>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d101      	bne.n	8016504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016500:	f000 f8f8 	bl	80166f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016504:	4b4d      	ldr	r3, [pc, #308]	; (801663c <pvPortMalloc+0x154>)
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	4013      	ands	r3, r2
 801650c:	2b00      	cmp	r3, #0
 801650e:	f040 8083 	bne.w	8016618 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d015      	beq.n	8016544 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8016518:	2208      	movs	r2, #8
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	4413      	add	r3, r2
 801651e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f003 0307 	and.w	r3, r3, #7
 8016526:	2b00      	cmp	r3, #0
 8016528:	d00c      	beq.n	8016544 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f023 0307 	bic.w	r3, r3, #7
 8016530:	3308      	adds	r3, #8
 8016532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f003 0307 	and.w	r3, r3, #7
 801653a:	2b00      	cmp	r3, #0
 801653c:	d002      	beq.n	8016544 <pvPortMalloc+0x5c>
 801653e:	f7ff ff73 	bl	8016428 <ulSetInterruptMask>
 8016542:	e7fe      	b.n	8016542 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d066      	beq.n	8016618 <pvPortMalloc+0x130>
 801654a:	4b3d      	ldr	r3, [pc, #244]	; (8016640 <pvPortMalloc+0x158>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	687a      	ldr	r2, [r7, #4]
 8016550:	429a      	cmp	r2, r3
 8016552:	d861      	bhi.n	8016618 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016554:	4b3b      	ldr	r3, [pc, #236]	; (8016644 <pvPortMalloc+0x15c>)
 8016556:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8016558:	4b3a      	ldr	r3, [pc, #232]	; (8016644 <pvPortMalloc+0x15c>)
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801655e:	e004      	b.n	801656a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016564:	697b      	ldr	r3, [r7, #20]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801656a:	697b      	ldr	r3, [r7, #20]
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	687a      	ldr	r2, [r7, #4]
 8016570:	429a      	cmp	r2, r3
 8016572:	d903      	bls.n	801657c <pvPortMalloc+0x94>
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d1f1      	bne.n	8016560 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801657c:	4b2e      	ldr	r3, [pc, #184]	; (8016638 <pvPortMalloc+0x150>)
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	697a      	ldr	r2, [r7, #20]
 8016582:	429a      	cmp	r2, r3
 8016584:	d048      	beq.n	8016618 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	2208      	movs	r2, #8
 801658c:	4413      	add	r3, r2
 801658e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	681a      	ldr	r2, [r3, #0]
 8016594:	693b      	ldr	r3, [r7, #16]
 8016596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	685a      	ldr	r2, [r3, #4]
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	1ad2      	subs	r2, r2, r3
 80165a0:	2308      	movs	r3, #8
 80165a2:	005b      	lsls	r3, r3, #1
 80165a4:	429a      	cmp	r2, r3
 80165a6:	d917      	bls.n	80165d8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80165a8:	697a      	ldr	r2, [r7, #20]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	4413      	add	r3, r2
 80165ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	f003 0307 	and.w	r3, r3, #7
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d002      	beq.n	80165c0 <pvPortMalloc+0xd8>
 80165ba:	f7ff ff35 	bl	8016428 <ulSetInterruptMask>
 80165be:	e7fe      	b.n	80165be <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80165c0:	697b      	ldr	r3, [r7, #20]
 80165c2:	685a      	ldr	r2, [r3, #4]
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	1ad2      	subs	r2, r2, r3
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80165cc:	697b      	ldr	r3, [r7, #20]
 80165ce:	687a      	ldr	r2, [r7, #4]
 80165d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80165d2:	68b8      	ldr	r0, [r7, #8]
 80165d4:	f000 f8f0 	bl	80167b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80165d8:	4b19      	ldr	r3, [pc, #100]	; (8016640 <pvPortMalloc+0x158>)
 80165da:	681a      	ldr	r2, [r3, #0]
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	685b      	ldr	r3, [r3, #4]
 80165e0:	1ad3      	subs	r3, r2, r3
 80165e2:	4a17      	ldr	r2, [pc, #92]	; (8016640 <pvPortMalloc+0x158>)
 80165e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80165e6:	4b16      	ldr	r3, [pc, #88]	; (8016640 <pvPortMalloc+0x158>)
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	4b17      	ldr	r3, [pc, #92]	; (8016648 <pvPortMalloc+0x160>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d203      	bcs.n	80165fa <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80165f2:	4b13      	ldr	r3, [pc, #76]	; (8016640 <pvPortMalloc+0x158>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	4a14      	ldr	r2, [pc, #80]	; (8016648 <pvPortMalloc+0x160>)
 80165f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80165fa:	697b      	ldr	r3, [r7, #20]
 80165fc:	685a      	ldr	r2, [r3, #4]
 80165fe:	4b0f      	ldr	r3, [pc, #60]	; (801663c <pvPortMalloc+0x154>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	431a      	orrs	r2, r3
 8016604:	697b      	ldr	r3, [r7, #20]
 8016606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	2200      	movs	r2, #0
 801660c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801660e:	4b0f      	ldr	r3, [pc, #60]	; (801664c <pvPortMalloc+0x164>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	3301      	adds	r3, #1
 8016614:	4a0d      	ldr	r2, [pc, #52]	; (801664c <pvPortMalloc+0x164>)
 8016616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016618:	f7fe fe28 	bl	801526c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	f003 0307 	and.w	r3, r3, #7
 8016622:	2b00      	cmp	r3, #0
 8016624:	d002      	beq.n	801662c <pvPortMalloc+0x144>
 8016626:	f7ff feff 	bl	8016428 <ulSetInterruptMask>
 801662a:	e7fe      	b.n	801662a <pvPortMalloc+0x142>
	return pvReturn;
 801662c:	68fb      	ldr	r3, [r7, #12]
}
 801662e:	4618      	mov	r0, r3
 8016630:	3718      	adds	r7, #24
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	20003894 	.word	0x20003894
 801663c:	200038a8 	.word	0x200038a8
 8016640:	20003898 	.word	0x20003898
 8016644:	2000388c 	.word	0x2000388c
 8016648:	2000389c 	.word	0x2000389c
 801664c:	200038a0 	.word	0x200038a0

08016650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b084      	sub	sp, #16
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d03d      	beq.n	80166de <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016662:	2308      	movs	r3, #8
 8016664:	425b      	negs	r3, r3
 8016666:	68fa      	ldr	r2, [r7, #12]
 8016668:	4413      	add	r3, r2
 801666a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	685a      	ldr	r2, [r3, #4]
 8016674:	4b1c      	ldr	r3, [pc, #112]	; (80166e8 <vPortFree+0x98>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	4013      	ands	r3, r2
 801667a:	2b00      	cmp	r3, #0
 801667c:	d102      	bne.n	8016684 <vPortFree+0x34>
 801667e:	f7ff fed3 	bl	8016428 <ulSetInterruptMask>
 8016682:	e7fe      	b.n	8016682 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d002      	beq.n	8016692 <vPortFree+0x42>
 801668c:	f7ff fecc 	bl	8016428 <ulSetInterruptMask>
 8016690:	e7fe      	b.n	8016690 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016692:	68bb      	ldr	r3, [r7, #8]
 8016694:	685a      	ldr	r2, [r3, #4]
 8016696:	4b14      	ldr	r3, [pc, #80]	; (80166e8 <vPortFree+0x98>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	4013      	ands	r3, r2
 801669c:	2b00      	cmp	r3, #0
 801669e:	d01e      	beq.n	80166de <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80166a0:	68bb      	ldr	r3, [r7, #8]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d11a      	bne.n	80166de <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	685a      	ldr	r2, [r3, #4]
 80166ac:	4b0e      	ldr	r3, [pc, #56]	; (80166e8 <vPortFree+0x98>)
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	43db      	mvns	r3, r3
 80166b2:	401a      	ands	r2, r3
 80166b4:	68bb      	ldr	r3, [r7, #8]
 80166b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80166b8:	f7fe fdca 	bl	8015250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	685a      	ldr	r2, [r3, #4]
 80166c0:	4b0a      	ldr	r3, [pc, #40]	; (80166ec <vPortFree+0x9c>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	4413      	add	r3, r2
 80166c6:	4a09      	ldr	r2, [pc, #36]	; (80166ec <vPortFree+0x9c>)
 80166c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80166ca:	68b8      	ldr	r0, [r7, #8]
 80166cc:	f000 f874 	bl	80167b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80166d0:	4b07      	ldr	r3, [pc, #28]	; (80166f0 <vPortFree+0xa0>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	3301      	adds	r3, #1
 80166d6:	4a06      	ldr	r2, [pc, #24]	; (80166f0 <vPortFree+0xa0>)
 80166d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80166da:	f7fe fdc7 	bl	801526c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80166de:	bf00      	nop
 80166e0:	3710      	adds	r7, #16
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}
 80166e6:	bf00      	nop
 80166e8:	200038a8 	.word	0x200038a8
 80166ec:	20003898 	.word	0x20003898
 80166f0:	200038a4 	.word	0x200038a4

080166f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80166f4:	b480      	push	{r7}
 80166f6:	b085      	sub	sp, #20
 80166f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80166fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80166fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016700:	4b27      	ldr	r3, [pc, #156]	; (80167a0 <prvHeapInit+0xac>)
 8016702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	f003 0307 	and.w	r3, r3, #7
 801670a:	2b00      	cmp	r3, #0
 801670c:	d00c      	beq.n	8016728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	3307      	adds	r3, #7
 8016712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	f023 0307 	bic.w	r3, r3, #7
 801671a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801671c:	68ba      	ldr	r2, [r7, #8]
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	1ad3      	subs	r3, r2, r3
 8016722:	4a1f      	ldr	r2, [pc, #124]	; (80167a0 <prvHeapInit+0xac>)
 8016724:	4413      	add	r3, r2
 8016726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801672c:	4a1d      	ldr	r2, [pc, #116]	; (80167a4 <prvHeapInit+0xb0>)
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016732:	4b1c      	ldr	r3, [pc, #112]	; (80167a4 <prvHeapInit+0xb0>)
 8016734:	2200      	movs	r2, #0
 8016736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	68ba      	ldr	r2, [r7, #8]
 801673c:	4413      	add	r3, r2
 801673e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016740:	2208      	movs	r2, #8
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	1a9b      	subs	r3, r3, r2
 8016746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	f023 0307 	bic.w	r3, r3, #7
 801674e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	4a15      	ldr	r2, [pc, #84]	; (80167a8 <prvHeapInit+0xb4>)
 8016754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016756:	4b14      	ldr	r3, [pc, #80]	; (80167a8 <prvHeapInit+0xb4>)
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	2200      	movs	r2, #0
 801675c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801675e:	4b12      	ldr	r3, [pc, #72]	; (80167a8 <prvHeapInit+0xb4>)
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	2200      	movs	r2, #0
 8016764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	68fa      	ldr	r2, [r7, #12]
 801676e:	1ad2      	subs	r2, r2, r3
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016774:	4b0c      	ldr	r3, [pc, #48]	; (80167a8 <prvHeapInit+0xb4>)
 8016776:	681a      	ldr	r2, [r3, #0]
 8016778:	683b      	ldr	r3, [r7, #0]
 801677a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801677c:	683b      	ldr	r3, [r7, #0]
 801677e:	685b      	ldr	r3, [r3, #4]
 8016780:	4a0a      	ldr	r2, [pc, #40]	; (80167ac <prvHeapInit+0xb8>)
 8016782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016784:	683b      	ldr	r3, [r7, #0]
 8016786:	685b      	ldr	r3, [r3, #4]
 8016788:	4a09      	ldr	r2, [pc, #36]	; (80167b0 <prvHeapInit+0xbc>)
 801678a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801678c:	4b09      	ldr	r3, [pc, #36]	; (80167b4 <prvHeapInit+0xc0>)
 801678e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016792:	601a      	str	r2, [r3, #0]
}
 8016794:	bf00      	nop
 8016796:	3714      	adds	r7, #20
 8016798:	46bd      	mov	sp, r7
 801679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679e:	4770      	bx	lr
 80167a0:	2000188c 	.word	0x2000188c
 80167a4:	2000388c 	.word	0x2000388c
 80167a8:	20003894 	.word	0x20003894
 80167ac:	2000389c 	.word	0x2000389c
 80167b0:	20003898 	.word	0x20003898
 80167b4:	200038a8 	.word	0x200038a8

080167b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80167b8:	b480      	push	{r7}
 80167ba:	b085      	sub	sp, #20
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80167c0:	4b28      	ldr	r3, [pc, #160]	; (8016864 <prvInsertBlockIntoFreeList+0xac>)
 80167c2:	60fb      	str	r3, [r7, #12]
 80167c4:	e002      	b.n	80167cc <prvInsertBlockIntoFreeList+0x14>
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	60fb      	str	r3, [r7, #12]
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d8f7      	bhi.n	80167c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	685b      	ldr	r3, [r3, #4]
 80167de:	68ba      	ldr	r2, [r7, #8]
 80167e0:	4413      	add	r3, r2
 80167e2:	687a      	ldr	r2, [r7, #4]
 80167e4:	429a      	cmp	r2, r3
 80167e6:	d108      	bne.n	80167fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	685a      	ldr	r2, [r3, #4]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	685b      	ldr	r3, [r3, #4]
 80167f0:	441a      	add	r2, r3
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	685b      	ldr	r3, [r3, #4]
 8016802:	68ba      	ldr	r2, [r7, #8]
 8016804:	441a      	add	r2, r3
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	429a      	cmp	r2, r3
 801680c:	d118      	bne.n	8016840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	681a      	ldr	r2, [r3, #0]
 8016812:	4b15      	ldr	r3, [pc, #84]	; (8016868 <prvInsertBlockIntoFreeList+0xb0>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	429a      	cmp	r2, r3
 8016818:	d00d      	beq.n	8016836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	685a      	ldr	r2, [r3, #4]
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	685b      	ldr	r3, [r3, #4]
 8016824:	441a      	add	r2, r3
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	681a      	ldr	r2, [r3, #0]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	601a      	str	r2, [r3, #0]
 8016834:	e008      	b.n	8016848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016836:	4b0c      	ldr	r3, [pc, #48]	; (8016868 <prvInsertBlockIntoFreeList+0xb0>)
 8016838:	681a      	ldr	r2, [r3, #0]
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	601a      	str	r2, [r3, #0]
 801683e:	e003      	b.n	8016848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	681a      	ldr	r2, [r3, #0]
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016848:	68fa      	ldr	r2, [r7, #12]
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	429a      	cmp	r2, r3
 801684e:	d002      	beq.n	8016856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016856:	bf00      	nop
 8016858:	3714      	adds	r7, #20
 801685a:	46bd      	mov	sp, r7
 801685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016860:	4770      	bx	lr
 8016862:	bf00      	nop
 8016864:	2000388c 	.word	0x2000388c
 8016868:	20003894 	.word	0x20003894

0801686c <_ZdlPv>:
 801686c:	f001 b8b6 	b.w	80179dc <free>

08016870 <_ZdlPvj>:
 8016870:	f7ff bffc 	b.w	801686c <_ZdlPv>

08016874 <_Znwj>:
 8016874:	2801      	cmp	r0, #1
 8016876:	bf38      	it	cc
 8016878:	2001      	movcc	r0, #1
 801687a:	b510      	push	{r4, lr}
 801687c:	4604      	mov	r4, r0
 801687e:	4620      	mov	r0, r4
 8016880:	f001 f8a4 	bl	80179cc <malloc>
 8016884:	b100      	cbz	r0, 8016888 <_Znwj+0x14>
 8016886:	bd10      	pop	{r4, pc}
 8016888:	f000 f812 	bl	80168b0 <_ZSt15get_new_handlerv>
 801688c:	b908      	cbnz	r0, 8016892 <_Znwj+0x1e>
 801688e:	f001 f895 	bl	80179bc <abort>
 8016892:	4780      	blx	r0
 8016894:	e7f3      	b.n	801687e <_Znwj+0xa>

08016896 <_ZNSaIcEC1Ev>:
 8016896:	4770      	bx	lr

08016898 <_ZNSaIcEC1ERKS_>:
 8016898:	4770      	bx	lr

0801689a <_ZNSaIcED1Ev>:
 801689a:	4770      	bx	lr

0801689c <_ZSt17__throw_bad_allocv>:
 801689c:	b508      	push	{r3, lr}
 801689e:	f001 f88d 	bl	80179bc <abort>

080168a2 <_ZSt28__throw_bad_array_new_lengthv>:
 80168a2:	b508      	push	{r3, lr}
 80168a4:	f001 f88a 	bl	80179bc <abort>

080168a8 <_ZSt20__throw_length_errorPKc>:
 80168a8:	b508      	push	{r3, lr}
 80168aa:	f001 f887 	bl	80179bc <abort>
	...

080168b0 <_ZSt15get_new_handlerv>:
 80168b0:	4b01      	ldr	r3, [pc, #4]	; (80168b8 <_ZSt15get_new_handlerv+0x8>)
 80168b2:	e8d3 0faf 	lda	r0, [r3]
 80168b6:	4770      	bx	lr
 80168b8:	200038ac 	.word	0x200038ac

080168bc <fmod>:
 80168bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168be:	ec57 6b10 	vmov	r6, r7, d0
 80168c2:	ec55 4b11 	vmov	r4, r5, d1
 80168c6:	ed2d 8b02 	vpush	{d8}
 80168ca:	f000 f8a1 	bl	8016a10 <__ieee754_fmod>
 80168ce:	4622      	mov	r2, r4
 80168d0:	462b      	mov	r3, r5
 80168d2:	4630      	mov	r0, r6
 80168d4:	4639      	mov	r1, r7
 80168d6:	eeb0 8a40 	vmov.f32	s16, s0
 80168da:	eef0 8a60 	vmov.f32	s17, s1
 80168de:	f7ea f917 	bl	8000b10 <__aeabi_dcmpun>
 80168e2:	b990      	cbnz	r0, 801690a <fmod+0x4e>
 80168e4:	2200      	movs	r2, #0
 80168e6:	2300      	movs	r3, #0
 80168e8:	4620      	mov	r0, r4
 80168ea:	4629      	mov	r1, r5
 80168ec:	f7ea f8de 	bl	8000aac <__aeabi_dcmpeq>
 80168f0:	b158      	cbz	r0, 801690a <fmod+0x4e>
 80168f2:	f001 f9cb 	bl	8017c8c <__errno>
 80168f6:	2321      	movs	r3, #33	; 0x21
 80168f8:	2200      	movs	r2, #0
 80168fa:	6003      	str	r3, [r0, #0]
 80168fc:	2300      	movs	r3, #0
 80168fe:	4610      	mov	r0, r2
 8016900:	4619      	mov	r1, r3
 8016902:	f7e9 ff95 	bl	8000830 <__aeabi_ddiv>
 8016906:	ec41 0b18 	vmov	d8, r0, r1
 801690a:	eeb0 0a48 	vmov.f32	s0, s16
 801690e:	eef0 0a68 	vmov.f32	s1, s17
 8016912:	ecbd 8b02 	vpop	{d8}
 8016916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016918 <pow>:
 8016918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801691a:	ec55 4b11 	vmov	r4, r5, d1
 801691e:	ed2d 8b02 	vpush	{d8}
 8016922:	eeb0 8a40 	vmov.f32	s16, s0
 8016926:	eef0 8a60 	vmov.f32	s17, s1
 801692a:	f000 f981 	bl	8016c30 <__ieee754_pow>
 801692e:	4622      	mov	r2, r4
 8016930:	462b      	mov	r3, r5
 8016932:	4620      	mov	r0, r4
 8016934:	4629      	mov	r1, r5
 8016936:	ec57 6b10 	vmov	r6, r7, d0
 801693a:	f7ea f8e9 	bl	8000b10 <__aeabi_dcmpun>
 801693e:	2800      	cmp	r0, #0
 8016940:	d13b      	bne.n	80169ba <pow+0xa2>
 8016942:	2200      	movs	r2, #0
 8016944:	2300      	movs	r3, #0
 8016946:	ec51 0b18 	vmov	r0, r1, d8
 801694a:	f7ea f8af 	bl	8000aac <__aeabi_dcmpeq>
 801694e:	b1b8      	cbz	r0, 8016980 <pow+0x68>
 8016950:	2200      	movs	r2, #0
 8016952:	2300      	movs	r3, #0
 8016954:	4620      	mov	r0, r4
 8016956:	4629      	mov	r1, r5
 8016958:	f7ea f8a8 	bl	8000aac <__aeabi_dcmpeq>
 801695c:	2800      	cmp	r0, #0
 801695e:	d146      	bne.n	80169ee <pow+0xd6>
 8016960:	ec45 4b10 	vmov	d0, r4, r5
 8016964:	f000 f848 	bl	80169f8 <finite>
 8016968:	b338      	cbz	r0, 80169ba <pow+0xa2>
 801696a:	2200      	movs	r2, #0
 801696c:	2300      	movs	r3, #0
 801696e:	4620      	mov	r0, r4
 8016970:	4629      	mov	r1, r5
 8016972:	f7ea f8a5 	bl	8000ac0 <__aeabi_dcmplt>
 8016976:	b300      	cbz	r0, 80169ba <pow+0xa2>
 8016978:	f001 f988 	bl	8017c8c <__errno>
 801697c:	2322      	movs	r3, #34	; 0x22
 801697e:	e01b      	b.n	80169b8 <pow+0xa0>
 8016980:	ec47 6b10 	vmov	d0, r6, r7
 8016984:	f000 f838 	bl	80169f8 <finite>
 8016988:	b9e0      	cbnz	r0, 80169c4 <pow+0xac>
 801698a:	eeb0 0a48 	vmov.f32	s0, s16
 801698e:	eef0 0a68 	vmov.f32	s1, s17
 8016992:	f000 f831 	bl	80169f8 <finite>
 8016996:	b1a8      	cbz	r0, 80169c4 <pow+0xac>
 8016998:	ec45 4b10 	vmov	d0, r4, r5
 801699c:	f000 f82c 	bl	80169f8 <finite>
 80169a0:	b180      	cbz	r0, 80169c4 <pow+0xac>
 80169a2:	4632      	mov	r2, r6
 80169a4:	463b      	mov	r3, r7
 80169a6:	4630      	mov	r0, r6
 80169a8:	4639      	mov	r1, r7
 80169aa:	f7ea f8b1 	bl	8000b10 <__aeabi_dcmpun>
 80169ae:	2800      	cmp	r0, #0
 80169b0:	d0e2      	beq.n	8016978 <pow+0x60>
 80169b2:	f001 f96b 	bl	8017c8c <__errno>
 80169b6:	2321      	movs	r3, #33	; 0x21
 80169b8:	6003      	str	r3, [r0, #0]
 80169ba:	ecbd 8b02 	vpop	{d8}
 80169be:	ec47 6b10 	vmov	d0, r6, r7
 80169c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169c4:	2200      	movs	r2, #0
 80169c6:	2300      	movs	r3, #0
 80169c8:	4630      	mov	r0, r6
 80169ca:	4639      	mov	r1, r7
 80169cc:	f7ea f86e 	bl	8000aac <__aeabi_dcmpeq>
 80169d0:	2800      	cmp	r0, #0
 80169d2:	d0f2      	beq.n	80169ba <pow+0xa2>
 80169d4:	eeb0 0a48 	vmov.f32	s0, s16
 80169d8:	eef0 0a68 	vmov.f32	s1, s17
 80169dc:	f000 f80c 	bl	80169f8 <finite>
 80169e0:	2800      	cmp	r0, #0
 80169e2:	d0ea      	beq.n	80169ba <pow+0xa2>
 80169e4:	ec45 4b10 	vmov	d0, r4, r5
 80169e8:	f000 f806 	bl	80169f8 <finite>
 80169ec:	e7c3      	b.n	8016976 <pow+0x5e>
 80169ee:	2600      	movs	r6, #0
 80169f0:	4f00      	ldr	r7, [pc, #0]	; (80169f4 <pow+0xdc>)
 80169f2:	e7e2      	b.n	80169ba <pow+0xa2>
 80169f4:	3ff00000 	.word	0x3ff00000

080169f8 <finite>:
 80169f8:	b082      	sub	sp, #8
 80169fa:	ed8d 0b00 	vstr	d0, [sp]
 80169fe:	9801      	ldr	r0, [sp, #4]
 8016a00:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016a04:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016a08:	0fc0      	lsrs	r0, r0, #31
 8016a0a:	b002      	add	sp, #8
 8016a0c:	4770      	bx	lr
	...

08016a10 <__ieee754_fmod>:
 8016a10:	ec53 2b11 	vmov	r2, r3, d1
 8016a14:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8016a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a1c:	ea5c 0402 	orrs.w	r4, ip, r2
 8016a20:	461e      	mov	r6, r3
 8016a22:	ee11 7a10 	vmov	r7, s2
 8016a26:	ee11 ea10 	vmov	lr, s2
 8016a2a:	ec51 0b10 	vmov	r0, r1, d0
 8016a2e:	d00c      	beq.n	8016a4a <__ieee754_fmod+0x3a>
 8016a30:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8016a34:	4c77      	ldr	r4, [pc, #476]	; (8016c14 <__ieee754_fmod+0x204>)
 8016a36:	4689      	mov	r9, r1
 8016a38:	45a0      	cmp	r8, r4
 8016a3a:	dc06      	bgt.n	8016a4a <__ieee754_fmod+0x3a>
 8016a3c:	4254      	negs	r4, r2
 8016a3e:	4d76      	ldr	r5, [pc, #472]	; (8016c18 <__ieee754_fmod+0x208>)
 8016a40:	4314      	orrs	r4, r2
 8016a42:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8016a46:	42ac      	cmp	r4, r5
 8016a48:	d909      	bls.n	8016a5e <__ieee754_fmod+0x4e>
 8016a4a:	f7e9 fdc7 	bl	80005dc <__aeabi_dmul>
 8016a4e:	4602      	mov	r2, r0
 8016a50:	460b      	mov	r3, r1
 8016a52:	f7e9 feed 	bl	8000830 <__aeabi_ddiv>
 8016a56:	ec41 0b10 	vmov	d0, r0, r1
 8016a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a5e:	45e0      	cmp	r8, ip
 8016a60:	ee10 aa10 	vmov	sl, s0
 8016a64:	ee10 4a10 	vmov	r4, s0
 8016a68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8016a6c:	dc09      	bgt.n	8016a82 <__ieee754_fmod+0x72>
 8016a6e:	dbf2      	blt.n	8016a56 <__ieee754_fmod+0x46>
 8016a70:	4290      	cmp	r0, r2
 8016a72:	d3f0      	bcc.n	8016a56 <__ieee754_fmod+0x46>
 8016a74:	d105      	bne.n	8016a82 <__ieee754_fmod+0x72>
 8016a76:	4b69      	ldr	r3, [pc, #420]	; (8016c1c <__ieee754_fmod+0x20c>)
 8016a78:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8016a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016a80:	e7e9      	b.n	8016a56 <__ieee754_fmod+0x46>
 8016a82:	4a65      	ldr	r2, [pc, #404]	; (8016c18 <__ieee754_fmod+0x208>)
 8016a84:	ea19 0f02 	tst.w	r9, r2
 8016a88:	d148      	bne.n	8016b1c <__ieee754_fmod+0x10c>
 8016a8a:	f1b8 0f00 	cmp.w	r8, #0
 8016a8e:	d13d      	bne.n	8016b0c <__ieee754_fmod+0xfc>
 8016a90:	4653      	mov	r3, sl
 8016a92:	4963      	ldr	r1, [pc, #396]	; (8016c20 <__ieee754_fmod+0x210>)
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	dc36      	bgt.n	8016b06 <__ieee754_fmod+0xf6>
 8016a98:	4216      	tst	r6, r2
 8016a9a:	d14f      	bne.n	8016b3c <__ieee754_fmod+0x12c>
 8016a9c:	f1bc 0f00 	cmp.w	ip, #0
 8016aa0:	d144      	bne.n	8016b2c <__ieee754_fmod+0x11c>
 8016aa2:	463b      	mov	r3, r7
 8016aa4:	4a5e      	ldr	r2, [pc, #376]	; (8016c20 <__ieee754_fmod+0x210>)
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	dc3d      	bgt.n	8016b26 <__ieee754_fmod+0x116>
 8016aaa:	485e      	ldr	r0, [pc, #376]	; (8016c24 <__ieee754_fmod+0x214>)
 8016aac:	4281      	cmp	r1, r0
 8016aae:	db4a      	blt.n	8016b46 <__ieee754_fmod+0x136>
 8016ab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016ab8:	485a      	ldr	r0, [pc, #360]	; (8016c24 <__ieee754_fmod+0x214>)
 8016aba:	4282      	cmp	r2, r0
 8016abc:	db57      	blt.n	8016b6e <__ieee754_fmod+0x15e>
 8016abe:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8016ac2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8016ac6:	1a89      	subs	r1, r1, r2
 8016ac8:	1b98      	subs	r0, r3, r6
 8016aca:	eba4 070e 	sub.w	r7, r4, lr
 8016ace:	2900      	cmp	r1, #0
 8016ad0:	d162      	bne.n	8016b98 <__ieee754_fmod+0x188>
 8016ad2:	4574      	cmp	r4, lr
 8016ad4:	bf38      	it	cc
 8016ad6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8016ada:	2800      	cmp	r0, #0
 8016adc:	bfa4      	itt	ge
 8016ade:	463c      	movge	r4, r7
 8016ae0:	4603      	movge	r3, r0
 8016ae2:	ea53 0104 	orrs.w	r1, r3, r4
 8016ae6:	d0c6      	beq.n	8016a76 <__ieee754_fmod+0x66>
 8016ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016aec:	db69      	blt.n	8016bc2 <__ieee754_fmod+0x1b2>
 8016aee:	494d      	ldr	r1, [pc, #308]	; (8016c24 <__ieee754_fmod+0x214>)
 8016af0:	428a      	cmp	r2, r1
 8016af2:	db6c      	blt.n	8016bce <__ieee754_fmod+0x1be>
 8016af4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016af8:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8016afc:	4620      	mov	r0, r4
 8016afe:	432b      	orrs	r3, r5
 8016b00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016b04:	e7a7      	b.n	8016a56 <__ieee754_fmod+0x46>
 8016b06:	3901      	subs	r1, #1
 8016b08:	005b      	lsls	r3, r3, #1
 8016b0a:	e7c3      	b.n	8016a94 <__ieee754_fmod+0x84>
 8016b0c:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8016b10:	4944      	ldr	r1, [pc, #272]	; (8016c24 <__ieee754_fmod+0x214>)
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	ddc0      	ble.n	8016a98 <__ieee754_fmod+0x88>
 8016b16:	3901      	subs	r1, #1
 8016b18:	005b      	lsls	r3, r3, #1
 8016b1a:	e7fa      	b.n	8016b12 <__ieee754_fmod+0x102>
 8016b1c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8016b20:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016b24:	e7b8      	b.n	8016a98 <__ieee754_fmod+0x88>
 8016b26:	3a01      	subs	r2, #1
 8016b28:	005b      	lsls	r3, r3, #1
 8016b2a:	e7bc      	b.n	8016aa6 <__ieee754_fmod+0x96>
 8016b2c:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8016b30:	4a3c      	ldr	r2, [pc, #240]	; (8016c24 <__ieee754_fmod+0x214>)
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	ddb9      	ble.n	8016aaa <__ieee754_fmod+0x9a>
 8016b36:	3a01      	subs	r2, #1
 8016b38:	005b      	lsls	r3, r3, #1
 8016b3a:	e7fa      	b.n	8016b32 <__ieee754_fmod+0x122>
 8016b3c:	ea4f 522c 	mov.w	r2, ip, asr #20
 8016b40:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016b44:	e7b1      	b.n	8016aaa <__ieee754_fmod+0x9a>
 8016b46:	1a40      	subs	r0, r0, r1
 8016b48:	281f      	cmp	r0, #31
 8016b4a:	dc0a      	bgt.n	8016b62 <__ieee754_fmod+0x152>
 8016b4c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8016b50:	fa08 f800 	lsl.w	r8, r8, r0
 8016b54:	fa0a f400 	lsl.w	r4, sl, r0
 8016b58:	fa2a f303 	lsr.w	r3, sl, r3
 8016b5c:	ea43 0308 	orr.w	r3, r3, r8
 8016b60:	e7aa      	b.n	8016ab8 <__ieee754_fmod+0xa8>
 8016b62:	4b31      	ldr	r3, [pc, #196]	; (8016c28 <__ieee754_fmod+0x218>)
 8016b64:	2400      	movs	r4, #0
 8016b66:	1a5b      	subs	r3, r3, r1
 8016b68:	fa0a f303 	lsl.w	r3, sl, r3
 8016b6c:	e7a4      	b.n	8016ab8 <__ieee754_fmod+0xa8>
 8016b6e:	1a80      	subs	r0, r0, r2
 8016b70:	281f      	cmp	r0, #31
 8016b72:	dc0a      	bgt.n	8016b8a <__ieee754_fmod+0x17a>
 8016b74:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8016b78:	fa0c fc00 	lsl.w	ip, ip, r0
 8016b7c:	fa07 fe00 	lsl.w	lr, r7, r0
 8016b80:	fa27 f606 	lsr.w	r6, r7, r6
 8016b84:	ea46 060c 	orr.w	r6, r6, ip
 8016b88:	e79d      	b.n	8016ac6 <__ieee754_fmod+0xb6>
 8016b8a:	4e27      	ldr	r6, [pc, #156]	; (8016c28 <__ieee754_fmod+0x218>)
 8016b8c:	f04f 0e00 	mov.w	lr, #0
 8016b90:	1ab6      	subs	r6, r6, r2
 8016b92:	fa07 f606 	lsl.w	r6, r7, r6
 8016b96:	e796      	b.n	8016ac6 <__ieee754_fmod+0xb6>
 8016b98:	4574      	cmp	r4, lr
 8016b9a:	bf38      	it	cc
 8016b9c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8016ba0:	2800      	cmp	r0, #0
 8016ba2:	da05      	bge.n	8016bb0 <__ieee754_fmod+0x1a0>
 8016ba4:	0fe0      	lsrs	r0, r4, #31
 8016ba6:	0064      	lsls	r4, r4, #1
 8016ba8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016bac:	3901      	subs	r1, #1
 8016bae:	e78b      	b.n	8016ac8 <__ieee754_fmod+0xb8>
 8016bb0:	ea50 0307 	orrs.w	r3, r0, r7
 8016bb4:	f43f af5f 	beq.w	8016a76 <__ieee754_fmod+0x66>
 8016bb8:	0ffb      	lsrs	r3, r7, #31
 8016bba:	007c      	lsls	r4, r7, #1
 8016bbc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8016bc0:	e7f4      	b.n	8016bac <__ieee754_fmod+0x19c>
 8016bc2:	0fe1      	lsrs	r1, r4, #31
 8016bc4:	3a01      	subs	r2, #1
 8016bc6:	0064      	lsls	r4, r4, #1
 8016bc8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8016bcc:	e78c      	b.n	8016ae8 <__ieee754_fmod+0xd8>
 8016bce:	1a89      	subs	r1, r1, r2
 8016bd0:	2914      	cmp	r1, #20
 8016bd2:	dc0a      	bgt.n	8016bea <__ieee754_fmod+0x1da>
 8016bd4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8016bd8:	40cc      	lsrs	r4, r1
 8016bda:	fa03 f202 	lsl.w	r2, r3, r2
 8016bde:	410b      	asrs	r3, r1
 8016be0:	4322      	orrs	r2, r4
 8016be2:	ea43 0105 	orr.w	r1, r3, r5
 8016be6:	4610      	mov	r0, r2
 8016be8:	e735      	b.n	8016a56 <__ieee754_fmod+0x46>
 8016bea:	291f      	cmp	r1, #31
 8016bec:	dc07      	bgt.n	8016bfe <__ieee754_fmod+0x1ee>
 8016bee:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8016bf2:	40cc      	lsrs	r4, r1
 8016bf4:	fa03 f202 	lsl.w	r2, r3, r2
 8016bf8:	4322      	orrs	r2, r4
 8016bfa:	462b      	mov	r3, r5
 8016bfc:	e7f1      	b.n	8016be2 <__ieee754_fmod+0x1d2>
 8016bfe:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8016c02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016c06:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8016c0a:	32e2      	adds	r2, #226	; 0xe2
 8016c0c:	fa43 f202 	asr.w	r2, r3, r2
 8016c10:	e7f3      	b.n	8016bfa <__ieee754_fmod+0x1ea>
 8016c12:	bf00      	nop
 8016c14:	7fefffff 	.word	0x7fefffff
 8016c18:	7ff00000 	.word	0x7ff00000
 8016c1c:	08018990 	.word	0x08018990
 8016c20:	fffffbed 	.word	0xfffffbed
 8016c24:	fffffc02 	.word	0xfffffc02
 8016c28:	fffffbe2 	.word	0xfffffbe2
 8016c2c:	00000000 	.word	0x00000000

08016c30 <__ieee754_pow>:
 8016c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c34:	ed2d 8b06 	vpush	{d8-d10}
 8016c38:	b089      	sub	sp, #36	; 0x24
 8016c3a:	ed8d 1b00 	vstr	d1, [sp]
 8016c3e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016c42:	ec57 6b10 	vmov	r6, r7, d0
 8016c46:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016c4a:	ea58 0102 	orrs.w	r1, r8, r2
 8016c4e:	d115      	bne.n	8016c7c <__ieee754_pow+0x4c>
 8016c50:	19b3      	adds	r3, r6, r6
 8016c52:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8016c56:	4152      	adcs	r2, r2
 8016c58:	4299      	cmp	r1, r3
 8016c5a:	4b89      	ldr	r3, [pc, #548]	; (8016e80 <__ieee754_pow+0x250>)
 8016c5c:	4193      	sbcs	r3, r2
 8016c5e:	f080 84d2 	bcs.w	8017606 <__ieee754_pow+0x9d6>
 8016c62:	4630      	mov	r0, r6
 8016c64:	4639      	mov	r1, r7
 8016c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c6a:	f7e9 fb01 	bl	8000270 <__adddf3>
 8016c6e:	ec41 0b10 	vmov	d0, r0, r1
 8016c72:	b009      	add	sp, #36	; 0x24
 8016c74:	ecbd 8b06 	vpop	{d8-d10}
 8016c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c7c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016c80:	4b80      	ldr	r3, [pc, #512]	; (8016e84 <__ieee754_pow+0x254>)
 8016c82:	463d      	mov	r5, r7
 8016c84:	ee10 aa10 	vmov	sl, s0
 8016c88:	429c      	cmp	r4, r3
 8016c8a:	dc06      	bgt.n	8016c9a <__ieee754_pow+0x6a>
 8016c8c:	d101      	bne.n	8016c92 <__ieee754_pow+0x62>
 8016c8e:	2e00      	cmp	r6, #0
 8016c90:	d1e7      	bne.n	8016c62 <__ieee754_pow+0x32>
 8016c92:	4598      	cmp	r8, r3
 8016c94:	dc01      	bgt.n	8016c9a <__ieee754_pow+0x6a>
 8016c96:	d10f      	bne.n	8016cb8 <__ieee754_pow+0x88>
 8016c98:	b172      	cbz	r2, 8016cb8 <__ieee754_pow+0x88>
 8016c9a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8016c9e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8016ca2:	ea55 050a 	orrs.w	r5, r5, sl
 8016ca6:	d1dc      	bne.n	8016c62 <__ieee754_pow+0x32>
 8016ca8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016cac:	18db      	adds	r3, r3, r3
 8016cae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8016cb2:	4152      	adcs	r2, r2
 8016cb4:	429d      	cmp	r5, r3
 8016cb6:	e7d0      	b.n	8016c5a <__ieee754_pow+0x2a>
 8016cb8:	2d00      	cmp	r5, #0
 8016cba:	da3b      	bge.n	8016d34 <__ieee754_pow+0x104>
 8016cbc:	4b72      	ldr	r3, [pc, #456]	; (8016e88 <__ieee754_pow+0x258>)
 8016cbe:	4598      	cmp	r8, r3
 8016cc0:	dc51      	bgt.n	8016d66 <__ieee754_pow+0x136>
 8016cc2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016cc6:	4598      	cmp	r8, r3
 8016cc8:	f340 84ac 	ble.w	8017624 <__ieee754_pow+0x9f4>
 8016ccc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016cd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016cd4:	2b14      	cmp	r3, #20
 8016cd6:	dd0f      	ble.n	8016cf8 <__ieee754_pow+0xc8>
 8016cd8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016cdc:	fa22 f103 	lsr.w	r1, r2, r3
 8016ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8016ce4:	4293      	cmp	r3, r2
 8016ce6:	f040 849d 	bne.w	8017624 <__ieee754_pow+0x9f4>
 8016cea:	f001 0101 	and.w	r1, r1, #1
 8016cee:	f1c1 0302 	rsb	r3, r1, #2
 8016cf2:	9304      	str	r3, [sp, #16]
 8016cf4:	b182      	cbz	r2, 8016d18 <__ieee754_pow+0xe8>
 8016cf6:	e05f      	b.n	8016db8 <__ieee754_pow+0x188>
 8016cf8:	2a00      	cmp	r2, #0
 8016cfa:	d15b      	bne.n	8016db4 <__ieee754_pow+0x184>
 8016cfc:	f1c3 0314 	rsb	r3, r3, #20
 8016d00:	fa48 f103 	asr.w	r1, r8, r3
 8016d04:	fa01 f303 	lsl.w	r3, r1, r3
 8016d08:	4543      	cmp	r3, r8
 8016d0a:	f040 8488 	bne.w	801761e <__ieee754_pow+0x9ee>
 8016d0e:	f001 0101 	and.w	r1, r1, #1
 8016d12:	f1c1 0302 	rsb	r3, r1, #2
 8016d16:	9304      	str	r3, [sp, #16]
 8016d18:	4b5c      	ldr	r3, [pc, #368]	; (8016e8c <__ieee754_pow+0x25c>)
 8016d1a:	4598      	cmp	r8, r3
 8016d1c:	d132      	bne.n	8016d84 <__ieee754_pow+0x154>
 8016d1e:	f1b9 0f00 	cmp.w	r9, #0
 8016d22:	f280 8478 	bge.w	8017616 <__ieee754_pow+0x9e6>
 8016d26:	4632      	mov	r2, r6
 8016d28:	463b      	mov	r3, r7
 8016d2a:	2000      	movs	r0, #0
 8016d2c:	4957      	ldr	r1, [pc, #348]	; (8016e8c <__ieee754_pow+0x25c>)
 8016d2e:	f7e9 fd7f 	bl	8000830 <__aeabi_ddiv>
 8016d32:	e79c      	b.n	8016c6e <__ieee754_pow+0x3e>
 8016d34:	2300      	movs	r3, #0
 8016d36:	9304      	str	r3, [sp, #16]
 8016d38:	2a00      	cmp	r2, #0
 8016d3a:	d13d      	bne.n	8016db8 <__ieee754_pow+0x188>
 8016d3c:	4b51      	ldr	r3, [pc, #324]	; (8016e84 <__ieee754_pow+0x254>)
 8016d3e:	4598      	cmp	r8, r3
 8016d40:	d1ea      	bne.n	8016d18 <__ieee754_pow+0xe8>
 8016d42:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016d46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016d4a:	ea53 030a 	orrs.w	r3, r3, sl
 8016d4e:	f000 845a 	beq.w	8017606 <__ieee754_pow+0x9d6>
 8016d52:	4b4f      	ldr	r3, [pc, #316]	; (8016e90 <__ieee754_pow+0x260>)
 8016d54:	429c      	cmp	r4, r3
 8016d56:	dd08      	ble.n	8016d6a <__ieee754_pow+0x13a>
 8016d58:	f1b9 0f00 	cmp.w	r9, #0
 8016d5c:	f2c0 8457 	blt.w	801760e <__ieee754_pow+0x9de>
 8016d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d64:	e783      	b.n	8016c6e <__ieee754_pow+0x3e>
 8016d66:	2302      	movs	r3, #2
 8016d68:	e7e5      	b.n	8016d36 <__ieee754_pow+0x106>
 8016d6a:	f1b9 0f00 	cmp.w	r9, #0
 8016d6e:	f04f 0000 	mov.w	r0, #0
 8016d72:	f04f 0100 	mov.w	r1, #0
 8016d76:	f6bf af7a 	bge.w	8016c6e <__ieee754_pow+0x3e>
 8016d7a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016d7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016d82:	e774      	b.n	8016c6e <__ieee754_pow+0x3e>
 8016d84:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016d88:	d106      	bne.n	8016d98 <__ieee754_pow+0x168>
 8016d8a:	4632      	mov	r2, r6
 8016d8c:	463b      	mov	r3, r7
 8016d8e:	4630      	mov	r0, r6
 8016d90:	4639      	mov	r1, r7
 8016d92:	f7e9 fc23 	bl	80005dc <__aeabi_dmul>
 8016d96:	e76a      	b.n	8016c6e <__ieee754_pow+0x3e>
 8016d98:	4b3e      	ldr	r3, [pc, #248]	; (8016e94 <__ieee754_pow+0x264>)
 8016d9a:	4599      	cmp	r9, r3
 8016d9c:	d10c      	bne.n	8016db8 <__ieee754_pow+0x188>
 8016d9e:	2d00      	cmp	r5, #0
 8016da0:	db0a      	blt.n	8016db8 <__ieee754_pow+0x188>
 8016da2:	ec47 6b10 	vmov	d0, r6, r7
 8016da6:	b009      	add	sp, #36	; 0x24
 8016da8:	ecbd 8b06 	vpop	{d8-d10}
 8016dac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db0:	f000 bd24 	b.w	80177fc <__ieee754_sqrt>
 8016db4:	2300      	movs	r3, #0
 8016db6:	9304      	str	r3, [sp, #16]
 8016db8:	ec47 6b10 	vmov	d0, r6, r7
 8016dbc:	f000 fc66 	bl	801768c <fabs>
 8016dc0:	ec51 0b10 	vmov	r0, r1, d0
 8016dc4:	f1ba 0f00 	cmp.w	sl, #0
 8016dc8:	d129      	bne.n	8016e1e <__ieee754_pow+0x1ee>
 8016dca:	b124      	cbz	r4, 8016dd6 <__ieee754_pow+0x1a6>
 8016dcc:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016dd0:	4b2e      	ldr	r3, [pc, #184]	; (8016e8c <__ieee754_pow+0x25c>)
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d123      	bne.n	8016e1e <__ieee754_pow+0x1ee>
 8016dd6:	f1b9 0f00 	cmp.w	r9, #0
 8016dda:	da05      	bge.n	8016de8 <__ieee754_pow+0x1b8>
 8016ddc:	4602      	mov	r2, r0
 8016dde:	460b      	mov	r3, r1
 8016de0:	2000      	movs	r0, #0
 8016de2:	492a      	ldr	r1, [pc, #168]	; (8016e8c <__ieee754_pow+0x25c>)
 8016de4:	f7e9 fd24 	bl	8000830 <__aeabi_ddiv>
 8016de8:	2d00      	cmp	r5, #0
 8016dea:	f6bf af40 	bge.w	8016c6e <__ieee754_pow+0x3e>
 8016dee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016df2:	9b04      	ldr	r3, [sp, #16]
 8016df4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016df8:	431c      	orrs	r4, r3
 8016dfa:	d108      	bne.n	8016e0e <__ieee754_pow+0x1de>
 8016dfc:	4602      	mov	r2, r0
 8016dfe:	460b      	mov	r3, r1
 8016e00:	4610      	mov	r0, r2
 8016e02:	4619      	mov	r1, r3
 8016e04:	f7e9 fa32 	bl	800026c <__aeabi_dsub>
 8016e08:	4602      	mov	r2, r0
 8016e0a:	460b      	mov	r3, r1
 8016e0c:	e78f      	b.n	8016d2e <__ieee754_pow+0xfe>
 8016e0e:	9b04      	ldr	r3, [sp, #16]
 8016e10:	2b01      	cmp	r3, #1
 8016e12:	f47f af2c 	bne.w	8016c6e <__ieee754_pow+0x3e>
 8016e16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016e1a:	4619      	mov	r1, r3
 8016e1c:	e727      	b.n	8016c6e <__ieee754_pow+0x3e>
 8016e1e:	0feb      	lsrs	r3, r5, #31
 8016e20:	3b01      	subs	r3, #1
 8016e22:	9306      	str	r3, [sp, #24]
 8016e24:	9a06      	ldr	r2, [sp, #24]
 8016e26:	9b04      	ldr	r3, [sp, #16]
 8016e28:	4313      	orrs	r3, r2
 8016e2a:	d102      	bne.n	8016e32 <__ieee754_pow+0x202>
 8016e2c:	4632      	mov	r2, r6
 8016e2e:	463b      	mov	r3, r7
 8016e30:	e7e6      	b.n	8016e00 <__ieee754_pow+0x1d0>
 8016e32:	4b19      	ldr	r3, [pc, #100]	; (8016e98 <__ieee754_pow+0x268>)
 8016e34:	4598      	cmp	r8, r3
 8016e36:	f340 80fb 	ble.w	8017030 <__ieee754_pow+0x400>
 8016e3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016e3e:	4598      	cmp	r8, r3
 8016e40:	4b13      	ldr	r3, [pc, #76]	; (8016e90 <__ieee754_pow+0x260>)
 8016e42:	dd0c      	ble.n	8016e5e <__ieee754_pow+0x22e>
 8016e44:	429c      	cmp	r4, r3
 8016e46:	dc0f      	bgt.n	8016e68 <__ieee754_pow+0x238>
 8016e48:	f1b9 0f00 	cmp.w	r9, #0
 8016e4c:	da0f      	bge.n	8016e6e <__ieee754_pow+0x23e>
 8016e4e:	2000      	movs	r0, #0
 8016e50:	b009      	add	sp, #36	; 0x24
 8016e52:	ecbd 8b06 	vpop	{d8-d10}
 8016e56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e5a:	f000 bcc6 	b.w	80177ea <__math_oflow>
 8016e5e:	429c      	cmp	r4, r3
 8016e60:	dbf2      	blt.n	8016e48 <__ieee754_pow+0x218>
 8016e62:	4b0a      	ldr	r3, [pc, #40]	; (8016e8c <__ieee754_pow+0x25c>)
 8016e64:	429c      	cmp	r4, r3
 8016e66:	dd19      	ble.n	8016e9c <__ieee754_pow+0x26c>
 8016e68:	f1b9 0f00 	cmp.w	r9, #0
 8016e6c:	dcef      	bgt.n	8016e4e <__ieee754_pow+0x21e>
 8016e6e:	2000      	movs	r0, #0
 8016e70:	b009      	add	sp, #36	; 0x24
 8016e72:	ecbd 8b06 	vpop	{d8-d10}
 8016e76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e7a:	f000 bcad 	b.w	80177d8 <__math_uflow>
 8016e7e:	bf00      	nop
 8016e80:	fff00000 	.word	0xfff00000
 8016e84:	7ff00000 	.word	0x7ff00000
 8016e88:	433fffff 	.word	0x433fffff
 8016e8c:	3ff00000 	.word	0x3ff00000
 8016e90:	3fefffff 	.word	0x3fefffff
 8016e94:	3fe00000 	.word	0x3fe00000
 8016e98:	41e00000 	.word	0x41e00000
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	4b60      	ldr	r3, [pc, #384]	; (8017020 <__ieee754_pow+0x3f0>)
 8016ea0:	f7e9 f9e4 	bl	800026c <__aeabi_dsub>
 8016ea4:	4604      	mov	r4, r0
 8016ea6:	460d      	mov	r5, r1
 8016ea8:	a353      	add	r3, pc, #332	; (adr r3, 8016ff8 <__ieee754_pow+0x3c8>)
 8016eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eae:	f7e9 fb95 	bl	80005dc <__aeabi_dmul>
 8016eb2:	4606      	mov	r6, r0
 8016eb4:	460f      	mov	r7, r1
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	4629      	mov	r1, r5
 8016eba:	a351      	add	r3, pc, #324	; (adr r3, 8017000 <__ieee754_pow+0x3d0>)
 8016ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ec0:	f7e9 fb8c 	bl	80005dc <__aeabi_dmul>
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	4682      	mov	sl, r0
 8016ec8:	468b      	mov	fp, r1
 8016eca:	4b56      	ldr	r3, [pc, #344]	; (8017024 <__ieee754_pow+0x3f4>)
 8016ecc:	4620      	mov	r0, r4
 8016ece:	4629      	mov	r1, r5
 8016ed0:	f7e9 fb84 	bl	80005dc <__aeabi_dmul>
 8016ed4:	4602      	mov	r2, r0
 8016ed6:	460b      	mov	r3, r1
 8016ed8:	a14b      	add	r1, pc, #300	; (adr r1, 8017008 <__ieee754_pow+0x3d8>)
 8016eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ede:	f7e9 f9c5 	bl	800026c <__aeabi_dsub>
 8016ee2:	4622      	mov	r2, r4
 8016ee4:	462b      	mov	r3, r5
 8016ee6:	f7e9 fb79 	bl	80005dc <__aeabi_dmul>
 8016eea:	4602      	mov	r2, r0
 8016eec:	460b      	mov	r3, r1
 8016eee:	2000      	movs	r0, #0
 8016ef0:	494d      	ldr	r1, [pc, #308]	; (8017028 <__ieee754_pow+0x3f8>)
 8016ef2:	f7e9 f9bb 	bl	800026c <__aeabi_dsub>
 8016ef6:	4680      	mov	r8, r0
 8016ef8:	4689      	mov	r9, r1
 8016efa:	4622      	mov	r2, r4
 8016efc:	462b      	mov	r3, r5
 8016efe:	4620      	mov	r0, r4
 8016f00:	4629      	mov	r1, r5
 8016f02:	f7e9 fb6b 	bl	80005dc <__aeabi_dmul>
 8016f06:	4602      	mov	r2, r0
 8016f08:	460b      	mov	r3, r1
 8016f0a:	4640      	mov	r0, r8
 8016f0c:	4649      	mov	r1, r9
 8016f0e:	f7e9 fb65 	bl	80005dc <__aeabi_dmul>
 8016f12:	a33f      	add	r3, pc, #252	; (adr r3, 8017010 <__ieee754_pow+0x3e0>)
 8016f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f18:	f7e9 fb60 	bl	80005dc <__aeabi_dmul>
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	460b      	mov	r3, r1
 8016f20:	4650      	mov	r0, sl
 8016f22:	4659      	mov	r1, fp
 8016f24:	f7e9 f9a2 	bl	800026c <__aeabi_dsub>
 8016f28:	4602      	mov	r2, r0
 8016f2a:	460b      	mov	r3, r1
 8016f2c:	4680      	mov	r8, r0
 8016f2e:	4689      	mov	r9, r1
 8016f30:	4630      	mov	r0, r6
 8016f32:	4639      	mov	r1, r7
 8016f34:	f7e9 f99c 	bl	8000270 <__adddf3>
 8016f38:	2000      	movs	r0, #0
 8016f3a:	4632      	mov	r2, r6
 8016f3c:	463b      	mov	r3, r7
 8016f3e:	4604      	mov	r4, r0
 8016f40:	460d      	mov	r5, r1
 8016f42:	f7e9 f993 	bl	800026c <__aeabi_dsub>
 8016f46:	4602      	mov	r2, r0
 8016f48:	460b      	mov	r3, r1
 8016f4a:	4640      	mov	r0, r8
 8016f4c:	4649      	mov	r1, r9
 8016f4e:	f7e9 f98d 	bl	800026c <__aeabi_dsub>
 8016f52:	9b04      	ldr	r3, [sp, #16]
 8016f54:	9a06      	ldr	r2, [sp, #24]
 8016f56:	4682      	mov	sl, r0
 8016f58:	3b01      	subs	r3, #1
 8016f5a:	468b      	mov	fp, r1
 8016f5c:	4313      	orrs	r3, r2
 8016f5e:	f040 81e7 	bne.w	8017330 <__ieee754_pow+0x700>
 8016f62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017018 <__ieee754_pow+0x3e8>
 8016f66:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016f6a:	2600      	movs	r6, #0
 8016f6c:	eeb0 8a47 	vmov.f32	s16, s14
 8016f70:	eef0 8a67 	vmov.f32	s17, s15
 8016f74:	463b      	mov	r3, r7
 8016f76:	4632      	mov	r2, r6
 8016f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f7c:	f7e9 f976 	bl	800026c <__aeabi_dsub>
 8016f80:	4622      	mov	r2, r4
 8016f82:	462b      	mov	r3, r5
 8016f84:	f7e9 fb2a 	bl	80005dc <__aeabi_dmul>
 8016f88:	4680      	mov	r8, r0
 8016f8a:	4689      	mov	r9, r1
 8016f8c:	4650      	mov	r0, sl
 8016f8e:	4659      	mov	r1, fp
 8016f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f94:	f7e9 fb22 	bl	80005dc <__aeabi_dmul>
 8016f98:	4602      	mov	r2, r0
 8016f9a:	460b      	mov	r3, r1
 8016f9c:	4640      	mov	r0, r8
 8016f9e:	4649      	mov	r1, r9
 8016fa0:	f7e9 f966 	bl	8000270 <__adddf3>
 8016fa4:	4680      	mov	r8, r0
 8016fa6:	4689      	mov	r9, r1
 8016fa8:	4632      	mov	r2, r6
 8016faa:	463b      	mov	r3, r7
 8016fac:	4620      	mov	r0, r4
 8016fae:	4629      	mov	r1, r5
 8016fb0:	f7e9 fb14 	bl	80005dc <__aeabi_dmul>
 8016fb4:	460b      	mov	r3, r1
 8016fb6:	4604      	mov	r4, r0
 8016fb8:	460d      	mov	r5, r1
 8016fba:	4602      	mov	r2, r0
 8016fbc:	4649      	mov	r1, r9
 8016fbe:	4640      	mov	r0, r8
 8016fc0:	f7e9 f956 	bl	8000270 <__adddf3>
 8016fc4:	4b19      	ldr	r3, [pc, #100]	; (801702c <__ieee754_pow+0x3fc>)
 8016fc6:	4606      	mov	r6, r0
 8016fc8:	460f      	mov	r7, r1
 8016fca:	4299      	cmp	r1, r3
 8016fcc:	468b      	mov	fp, r1
 8016fce:	ec45 4b19 	vmov	d9, r4, r5
 8016fd2:	f340 82f1 	ble.w	80175b8 <__ieee754_pow+0x988>
 8016fd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016fda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016fde:	4303      	orrs	r3, r0
 8016fe0:	f000 81e4 	beq.w	80173ac <__ieee754_pow+0x77c>
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	ec51 0b18 	vmov	r0, r1, d8
 8016fec:	f7e9 fd68 	bl	8000ac0 <__aeabi_dcmplt>
 8016ff0:	3800      	subs	r0, #0
 8016ff2:	bf18      	it	ne
 8016ff4:	2001      	movne	r0, #1
 8016ff6:	e72b      	b.n	8016e50 <__ieee754_pow+0x220>
 8016ff8:	60000000 	.word	0x60000000
 8016ffc:	3ff71547 	.word	0x3ff71547
 8017000:	f85ddf44 	.word	0xf85ddf44
 8017004:	3e54ae0b 	.word	0x3e54ae0b
 8017008:	55555555 	.word	0x55555555
 801700c:	3fd55555 	.word	0x3fd55555
 8017010:	652b82fe 	.word	0x652b82fe
 8017014:	3ff71547 	.word	0x3ff71547
 8017018:	00000000 	.word	0x00000000
 801701c:	bff00000 	.word	0xbff00000
 8017020:	3ff00000 	.word	0x3ff00000
 8017024:	3fd00000 	.word	0x3fd00000
 8017028:	3fe00000 	.word	0x3fe00000
 801702c:	408fffff 	.word	0x408fffff
 8017030:	4bd5      	ldr	r3, [pc, #852]	; (8017388 <__ieee754_pow+0x758>)
 8017032:	2200      	movs	r2, #0
 8017034:	402b      	ands	r3, r5
 8017036:	b92b      	cbnz	r3, 8017044 <__ieee754_pow+0x414>
 8017038:	4bd4      	ldr	r3, [pc, #848]	; (801738c <__ieee754_pow+0x75c>)
 801703a:	f7e9 facf 	bl	80005dc <__aeabi_dmul>
 801703e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017042:	460c      	mov	r4, r1
 8017044:	1523      	asrs	r3, r4, #20
 8017046:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801704a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801704e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017052:	4413      	add	r3, r2
 8017054:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017058:	9305      	str	r3, [sp, #20]
 801705a:	4bcd      	ldr	r3, [pc, #820]	; (8017390 <__ieee754_pow+0x760>)
 801705c:	429c      	cmp	r4, r3
 801705e:	dd08      	ble.n	8017072 <__ieee754_pow+0x442>
 8017060:	4bcc      	ldr	r3, [pc, #816]	; (8017394 <__ieee754_pow+0x764>)
 8017062:	429c      	cmp	r4, r3
 8017064:	f340 8162 	ble.w	801732c <__ieee754_pow+0x6fc>
 8017068:	9b05      	ldr	r3, [sp, #20]
 801706a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801706e:	3301      	adds	r3, #1
 8017070:	9305      	str	r3, [sp, #20]
 8017072:	2400      	movs	r4, #0
 8017074:	00e3      	lsls	r3, r4, #3
 8017076:	4682      	mov	sl, r0
 8017078:	4629      	mov	r1, r5
 801707a:	46ab      	mov	fp, r5
 801707c:	9307      	str	r3, [sp, #28]
 801707e:	4bc6      	ldr	r3, [pc, #792]	; (8017398 <__ieee754_pow+0x768>)
 8017080:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017084:	ed93 7b00 	vldr	d7, [r3]
 8017088:	eeb0 9a47 	vmov.f32	s18, s14
 801708c:	eef0 9a67 	vmov.f32	s19, s15
 8017090:	ec53 2b17 	vmov	r2, r3, d7
 8017094:	f7e9 f8ea 	bl	800026c <__aeabi_dsub>
 8017098:	4652      	mov	r2, sl
 801709a:	4606      	mov	r6, r0
 801709c:	460f      	mov	r7, r1
 801709e:	462b      	mov	r3, r5
 80170a0:	106d      	asrs	r5, r5, #1
 80170a2:	ec51 0b19 	vmov	r0, r1, d9
 80170a6:	f7e9 f8e3 	bl	8000270 <__adddf3>
 80170aa:	4602      	mov	r2, r0
 80170ac:	460b      	mov	r3, r1
 80170ae:	2000      	movs	r0, #0
 80170b0:	49ba      	ldr	r1, [pc, #744]	; (801739c <__ieee754_pow+0x76c>)
 80170b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80170b6:	f7e9 fbbb 	bl	8000830 <__aeabi_ddiv>
 80170ba:	4602      	mov	r2, r0
 80170bc:	460b      	mov	r3, r1
 80170be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80170c2:	ec41 0b1a 	vmov	d10, r0, r1
 80170c6:	4630      	mov	r0, r6
 80170c8:	4639      	mov	r1, r7
 80170ca:	f7e9 fa87 	bl	80005dc <__aeabi_dmul>
 80170ce:	2300      	movs	r3, #0
 80170d0:	2200      	movs	r2, #0
 80170d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80170d6:	9302      	str	r3, [sp, #8]
 80170d8:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80170dc:	4614      	mov	r4, r2
 80170de:	461d      	mov	r5, r3
 80170e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80170e4:	ec41 0b18 	vmov	d8, r0, r1
 80170e8:	4640      	mov	r0, r8
 80170ea:	4649      	mov	r1, r9
 80170ec:	f7e9 fa76 	bl	80005dc <__aeabi_dmul>
 80170f0:	4602      	mov	r2, r0
 80170f2:	460b      	mov	r3, r1
 80170f4:	4630      	mov	r0, r6
 80170f6:	4639      	mov	r1, r7
 80170f8:	f7e9 f8b8 	bl	800026c <__aeabi_dsub>
 80170fc:	4606      	mov	r6, r0
 80170fe:	460f      	mov	r7, r1
 8017100:	4620      	mov	r0, r4
 8017102:	4629      	mov	r1, r5
 8017104:	ec53 2b19 	vmov	r2, r3, d9
 8017108:	f7e9 f8b0 	bl	800026c <__aeabi_dsub>
 801710c:	4602      	mov	r2, r0
 801710e:	460b      	mov	r3, r1
 8017110:	4650      	mov	r0, sl
 8017112:	4659      	mov	r1, fp
 8017114:	f7e9 f8aa 	bl	800026c <__aeabi_dsub>
 8017118:	4642      	mov	r2, r8
 801711a:	464b      	mov	r3, r9
 801711c:	f7e9 fa5e 	bl	80005dc <__aeabi_dmul>
 8017120:	4602      	mov	r2, r0
 8017122:	460b      	mov	r3, r1
 8017124:	4630      	mov	r0, r6
 8017126:	4639      	mov	r1, r7
 8017128:	f7e9 f8a0 	bl	800026c <__aeabi_dsub>
 801712c:	ec53 2b1a 	vmov	r2, r3, d10
 8017130:	f7e9 fa54 	bl	80005dc <__aeabi_dmul>
 8017134:	ec53 2b18 	vmov	r2, r3, d8
 8017138:	ec41 0b19 	vmov	d9, r0, r1
 801713c:	ec51 0b18 	vmov	r0, r1, d8
 8017140:	f7e9 fa4c 	bl	80005dc <__aeabi_dmul>
 8017144:	4604      	mov	r4, r0
 8017146:	460d      	mov	r5, r1
 8017148:	a37b      	add	r3, pc, #492	; (adr r3, 8017338 <__ieee754_pow+0x708>)
 801714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801714e:	f7e9 fa45 	bl	80005dc <__aeabi_dmul>
 8017152:	a37b      	add	r3, pc, #492	; (adr r3, 8017340 <__ieee754_pow+0x710>)
 8017154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017158:	f7e9 f88a 	bl	8000270 <__adddf3>
 801715c:	4622      	mov	r2, r4
 801715e:	462b      	mov	r3, r5
 8017160:	f7e9 fa3c 	bl	80005dc <__aeabi_dmul>
 8017164:	a378      	add	r3, pc, #480	; (adr r3, 8017348 <__ieee754_pow+0x718>)
 8017166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801716a:	f7e9 f881 	bl	8000270 <__adddf3>
 801716e:	4622      	mov	r2, r4
 8017170:	462b      	mov	r3, r5
 8017172:	f7e9 fa33 	bl	80005dc <__aeabi_dmul>
 8017176:	a376      	add	r3, pc, #472	; (adr r3, 8017350 <__ieee754_pow+0x720>)
 8017178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801717c:	f7e9 f878 	bl	8000270 <__adddf3>
 8017180:	4622      	mov	r2, r4
 8017182:	462b      	mov	r3, r5
 8017184:	f7e9 fa2a 	bl	80005dc <__aeabi_dmul>
 8017188:	a373      	add	r3, pc, #460	; (adr r3, 8017358 <__ieee754_pow+0x728>)
 801718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801718e:	f7e9 f86f 	bl	8000270 <__adddf3>
 8017192:	4622      	mov	r2, r4
 8017194:	462b      	mov	r3, r5
 8017196:	f7e9 fa21 	bl	80005dc <__aeabi_dmul>
 801719a:	a371      	add	r3, pc, #452	; (adr r3, 8017360 <__ieee754_pow+0x730>)
 801719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a0:	f7e9 f866 	bl	8000270 <__adddf3>
 80171a4:	4606      	mov	r6, r0
 80171a6:	460f      	mov	r7, r1
 80171a8:	4622      	mov	r2, r4
 80171aa:	462b      	mov	r3, r5
 80171ac:	4620      	mov	r0, r4
 80171ae:	4629      	mov	r1, r5
 80171b0:	f7e9 fa14 	bl	80005dc <__aeabi_dmul>
 80171b4:	4602      	mov	r2, r0
 80171b6:	460b      	mov	r3, r1
 80171b8:	4630      	mov	r0, r6
 80171ba:	4639      	mov	r1, r7
 80171bc:	f7e9 fa0e 	bl	80005dc <__aeabi_dmul>
 80171c0:	4642      	mov	r2, r8
 80171c2:	4604      	mov	r4, r0
 80171c4:	460d      	mov	r5, r1
 80171c6:	464b      	mov	r3, r9
 80171c8:	ec51 0b18 	vmov	r0, r1, d8
 80171cc:	f7e9 f850 	bl	8000270 <__adddf3>
 80171d0:	ec53 2b19 	vmov	r2, r3, d9
 80171d4:	f7e9 fa02 	bl	80005dc <__aeabi_dmul>
 80171d8:	4622      	mov	r2, r4
 80171da:	462b      	mov	r3, r5
 80171dc:	f7e9 f848 	bl	8000270 <__adddf3>
 80171e0:	4642      	mov	r2, r8
 80171e2:	4682      	mov	sl, r0
 80171e4:	468b      	mov	fp, r1
 80171e6:	464b      	mov	r3, r9
 80171e8:	4640      	mov	r0, r8
 80171ea:	4649      	mov	r1, r9
 80171ec:	f7e9 f9f6 	bl	80005dc <__aeabi_dmul>
 80171f0:	2200      	movs	r2, #0
 80171f2:	4b6b      	ldr	r3, [pc, #428]	; (80173a0 <__ieee754_pow+0x770>)
 80171f4:	4606      	mov	r6, r0
 80171f6:	460f      	mov	r7, r1
 80171f8:	f7e9 f83a 	bl	8000270 <__adddf3>
 80171fc:	4652      	mov	r2, sl
 80171fe:	465b      	mov	r3, fp
 8017200:	f7e9 f836 	bl	8000270 <__adddf3>
 8017204:	2000      	movs	r0, #0
 8017206:	460d      	mov	r5, r1
 8017208:	460b      	mov	r3, r1
 801720a:	4604      	mov	r4, r0
 801720c:	4602      	mov	r2, r0
 801720e:	4649      	mov	r1, r9
 8017210:	4640      	mov	r0, r8
 8017212:	f7e9 f9e3 	bl	80005dc <__aeabi_dmul>
 8017216:	2200      	movs	r2, #0
 8017218:	4680      	mov	r8, r0
 801721a:	4689      	mov	r9, r1
 801721c:	4b60      	ldr	r3, [pc, #384]	; (80173a0 <__ieee754_pow+0x770>)
 801721e:	4620      	mov	r0, r4
 8017220:	4629      	mov	r1, r5
 8017222:	f7e9 f823 	bl	800026c <__aeabi_dsub>
 8017226:	4632      	mov	r2, r6
 8017228:	463b      	mov	r3, r7
 801722a:	f7e9 f81f 	bl	800026c <__aeabi_dsub>
 801722e:	4602      	mov	r2, r0
 8017230:	460b      	mov	r3, r1
 8017232:	4650      	mov	r0, sl
 8017234:	4659      	mov	r1, fp
 8017236:	f7e9 f819 	bl	800026c <__aeabi_dsub>
 801723a:	ec53 2b18 	vmov	r2, r3, d8
 801723e:	f7e9 f9cd 	bl	80005dc <__aeabi_dmul>
 8017242:	4606      	mov	r6, r0
 8017244:	460f      	mov	r7, r1
 8017246:	4622      	mov	r2, r4
 8017248:	462b      	mov	r3, r5
 801724a:	ec51 0b19 	vmov	r0, r1, d9
 801724e:	f7e9 f9c5 	bl	80005dc <__aeabi_dmul>
 8017252:	4602      	mov	r2, r0
 8017254:	460b      	mov	r3, r1
 8017256:	4630      	mov	r0, r6
 8017258:	4639      	mov	r1, r7
 801725a:	f7e9 f809 	bl	8000270 <__adddf3>
 801725e:	4606      	mov	r6, r0
 8017260:	460f      	mov	r7, r1
 8017262:	4602      	mov	r2, r0
 8017264:	460b      	mov	r3, r1
 8017266:	4640      	mov	r0, r8
 8017268:	4649      	mov	r1, r9
 801726a:	f7e9 f801 	bl	8000270 <__adddf3>
 801726e:	2000      	movs	r0, #0
 8017270:	460d      	mov	r5, r1
 8017272:	4604      	mov	r4, r0
 8017274:	a33c      	add	r3, pc, #240	; (adr r3, 8017368 <__ieee754_pow+0x738>)
 8017276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801727a:	f7e9 f9af 	bl	80005dc <__aeabi_dmul>
 801727e:	4642      	mov	r2, r8
 8017280:	464b      	mov	r3, r9
 8017282:	ec41 0b18 	vmov	d8, r0, r1
 8017286:	4620      	mov	r0, r4
 8017288:	4629      	mov	r1, r5
 801728a:	f7e8 ffef 	bl	800026c <__aeabi_dsub>
 801728e:	4602      	mov	r2, r0
 8017290:	460b      	mov	r3, r1
 8017292:	4630      	mov	r0, r6
 8017294:	4639      	mov	r1, r7
 8017296:	f7e8 ffe9 	bl	800026c <__aeabi_dsub>
 801729a:	a335      	add	r3, pc, #212	; (adr r3, 8017370 <__ieee754_pow+0x740>)
 801729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a0:	f7e9 f99c 	bl	80005dc <__aeabi_dmul>
 80172a4:	4606      	mov	r6, r0
 80172a6:	460f      	mov	r7, r1
 80172a8:	4620      	mov	r0, r4
 80172aa:	4629      	mov	r1, r5
 80172ac:	a332      	add	r3, pc, #200	; (adr r3, 8017378 <__ieee754_pow+0x748>)
 80172ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b2:	f7e9 f993 	bl	80005dc <__aeabi_dmul>
 80172b6:	4602      	mov	r2, r0
 80172b8:	460b      	mov	r3, r1
 80172ba:	4630      	mov	r0, r6
 80172bc:	4639      	mov	r1, r7
 80172be:	f7e8 ffd7 	bl	8000270 <__adddf3>
 80172c2:	9a07      	ldr	r2, [sp, #28]
 80172c4:	4b37      	ldr	r3, [pc, #220]	; (80173a4 <__ieee754_pow+0x774>)
 80172c6:	4413      	add	r3, r2
 80172c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172cc:	f7e8 ffd0 	bl	8000270 <__adddf3>
 80172d0:	4682      	mov	sl, r0
 80172d2:	9805      	ldr	r0, [sp, #20]
 80172d4:	468b      	mov	fp, r1
 80172d6:	f7e9 f917 	bl	8000508 <__aeabi_i2d>
 80172da:	9a07      	ldr	r2, [sp, #28]
 80172dc:	4b32      	ldr	r3, [pc, #200]	; (80173a8 <__ieee754_pow+0x778>)
 80172de:	4606      	mov	r6, r0
 80172e0:	460f      	mov	r7, r1
 80172e2:	4413      	add	r3, r2
 80172e4:	4652      	mov	r2, sl
 80172e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80172ea:	ec51 0b18 	vmov	r0, r1, d8
 80172ee:	465b      	mov	r3, fp
 80172f0:	f7e8 ffbe 	bl	8000270 <__adddf3>
 80172f4:	4642      	mov	r2, r8
 80172f6:	464b      	mov	r3, r9
 80172f8:	f7e8 ffba 	bl	8000270 <__adddf3>
 80172fc:	4632      	mov	r2, r6
 80172fe:	463b      	mov	r3, r7
 8017300:	f7e8 ffb6 	bl	8000270 <__adddf3>
 8017304:	2000      	movs	r0, #0
 8017306:	4632      	mov	r2, r6
 8017308:	463b      	mov	r3, r7
 801730a:	4604      	mov	r4, r0
 801730c:	460d      	mov	r5, r1
 801730e:	f7e8 ffad 	bl	800026c <__aeabi_dsub>
 8017312:	4642      	mov	r2, r8
 8017314:	464b      	mov	r3, r9
 8017316:	f7e8 ffa9 	bl	800026c <__aeabi_dsub>
 801731a:	ec53 2b18 	vmov	r2, r3, d8
 801731e:	f7e8 ffa5 	bl	800026c <__aeabi_dsub>
 8017322:	4602      	mov	r2, r0
 8017324:	460b      	mov	r3, r1
 8017326:	4650      	mov	r0, sl
 8017328:	4659      	mov	r1, fp
 801732a:	e610      	b.n	8016f4e <__ieee754_pow+0x31e>
 801732c:	2401      	movs	r4, #1
 801732e:	e6a1      	b.n	8017074 <__ieee754_pow+0x444>
 8017330:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8017380 <__ieee754_pow+0x750>
 8017334:	e617      	b.n	8016f66 <__ieee754_pow+0x336>
 8017336:	bf00      	nop
 8017338:	4a454eef 	.word	0x4a454eef
 801733c:	3fca7e28 	.word	0x3fca7e28
 8017340:	93c9db65 	.word	0x93c9db65
 8017344:	3fcd864a 	.word	0x3fcd864a
 8017348:	a91d4101 	.word	0xa91d4101
 801734c:	3fd17460 	.word	0x3fd17460
 8017350:	518f264d 	.word	0x518f264d
 8017354:	3fd55555 	.word	0x3fd55555
 8017358:	db6fabff 	.word	0xdb6fabff
 801735c:	3fdb6db6 	.word	0x3fdb6db6
 8017360:	33333303 	.word	0x33333303
 8017364:	3fe33333 	.word	0x3fe33333
 8017368:	e0000000 	.word	0xe0000000
 801736c:	3feec709 	.word	0x3feec709
 8017370:	dc3a03fd 	.word	0xdc3a03fd
 8017374:	3feec709 	.word	0x3feec709
 8017378:	145b01f5 	.word	0x145b01f5
 801737c:	be3e2fe0 	.word	0xbe3e2fe0
 8017380:	00000000 	.word	0x00000000
 8017384:	3ff00000 	.word	0x3ff00000
 8017388:	7ff00000 	.word	0x7ff00000
 801738c:	43400000 	.word	0x43400000
 8017390:	0003988e 	.word	0x0003988e
 8017394:	000bb679 	.word	0x000bb679
 8017398:	080189a0 	.word	0x080189a0
 801739c:	3ff00000 	.word	0x3ff00000
 80173a0:	40080000 	.word	0x40080000
 80173a4:	080189c0 	.word	0x080189c0
 80173a8:	080189b0 	.word	0x080189b0
 80173ac:	a3b5      	add	r3, pc, #724	; (adr r3, 8017684 <__ieee754_pow+0xa54>)
 80173ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173b2:	4640      	mov	r0, r8
 80173b4:	4649      	mov	r1, r9
 80173b6:	f7e8 ff5b 	bl	8000270 <__adddf3>
 80173ba:	4622      	mov	r2, r4
 80173bc:	462b      	mov	r3, r5
 80173be:	ec41 0b1a 	vmov	d10, r0, r1
 80173c2:	4630      	mov	r0, r6
 80173c4:	4639      	mov	r1, r7
 80173c6:	f7e8 ff51 	bl	800026c <__aeabi_dsub>
 80173ca:	4602      	mov	r2, r0
 80173cc:	460b      	mov	r3, r1
 80173ce:	ec51 0b1a 	vmov	r0, r1, d10
 80173d2:	f7e9 fb93 	bl	8000afc <__aeabi_dcmpgt>
 80173d6:	2800      	cmp	r0, #0
 80173d8:	f47f ae04 	bne.w	8016fe4 <__ieee754_pow+0x3b4>
 80173dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80173e0:	4aa3      	ldr	r2, [pc, #652]	; (8017670 <__ieee754_pow+0xa40>)
 80173e2:	4293      	cmp	r3, r2
 80173e4:	f340 8108 	ble.w	80175f8 <__ieee754_pow+0x9c8>
 80173e8:	151b      	asrs	r3, r3, #20
 80173ea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80173ee:	48a1      	ldr	r0, [pc, #644]	; (8017674 <__ieee754_pow+0xa44>)
 80173f0:	f1bb 0f00 	cmp.w	fp, #0
 80173f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80173f8:	f04f 0200 	mov.w	r2, #0
 80173fc:	fa4a fa03 	asr.w	sl, sl, r3
 8017400:	44da      	add	sl, fp
 8017402:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8017406:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801740a:	fa40 f001 	asr.w	r0, r0, r1
 801740e:	f1c1 0114 	rsb	r1, r1, #20
 8017412:	ea00 030a 	and.w	r3, r0, sl
 8017416:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801741a:	4620      	mov	r0, r4
 801741c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017420:	fa4a fa01 	asr.w	sl, sl, r1
 8017424:	4629      	mov	r1, r5
 8017426:	bfb8      	it	lt
 8017428:	f1ca 0a00 	rsblt	sl, sl, #0
 801742c:	f7e8 ff1e 	bl	800026c <__aeabi_dsub>
 8017430:	ec41 0b19 	vmov	d9, r0, r1
 8017434:	4642      	mov	r2, r8
 8017436:	464b      	mov	r3, r9
 8017438:	ec51 0b19 	vmov	r0, r1, d9
 801743c:	f7e8 ff18 	bl	8000270 <__adddf3>
 8017440:	2000      	movs	r0, #0
 8017442:	460d      	mov	r5, r1
 8017444:	4604      	mov	r4, r0
 8017446:	a37a      	add	r3, pc, #488	; (adr r3, 8017630 <__ieee754_pow+0xa00>)
 8017448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801744c:	f7e9 f8c6 	bl	80005dc <__aeabi_dmul>
 8017450:	4606      	mov	r6, r0
 8017452:	460f      	mov	r7, r1
 8017454:	4620      	mov	r0, r4
 8017456:	4629      	mov	r1, r5
 8017458:	ec53 2b19 	vmov	r2, r3, d9
 801745c:	f7e8 ff06 	bl	800026c <__aeabi_dsub>
 8017460:	4602      	mov	r2, r0
 8017462:	460b      	mov	r3, r1
 8017464:	4640      	mov	r0, r8
 8017466:	4649      	mov	r1, r9
 8017468:	f7e8 ff00 	bl	800026c <__aeabi_dsub>
 801746c:	a372      	add	r3, pc, #456	; (adr r3, 8017638 <__ieee754_pow+0xa08>)
 801746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017472:	f7e9 f8b3 	bl	80005dc <__aeabi_dmul>
 8017476:	4680      	mov	r8, r0
 8017478:	4689      	mov	r9, r1
 801747a:	4620      	mov	r0, r4
 801747c:	4629      	mov	r1, r5
 801747e:	a370      	add	r3, pc, #448	; (adr r3, 8017640 <__ieee754_pow+0xa10>)
 8017480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017484:	f7e9 f8aa 	bl	80005dc <__aeabi_dmul>
 8017488:	4602      	mov	r2, r0
 801748a:	460b      	mov	r3, r1
 801748c:	4640      	mov	r0, r8
 801748e:	4649      	mov	r1, r9
 8017490:	f7e8 feee 	bl	8000270 <__adddf3>
 8017494:	4604      	mov	r4, r0
 8017496:	460d      	mov	r5, r1
 8017498:	4602      	mov	r2, r0
 801749a:	460b      	mov	r3, r1
 801749c:	4630      	mov	r0, r6
 801749e:	4639      	mov	r1, r7
 80174a0:	f7e8 fee6 	bl	8000270 <__adddf3>
 80174a4:	4632      	mov	r2, r6
 80174a6:	4680      	mov	r8, r0
 80174a8:	4689      	mov	r9, r1
 80174aa:	463b      	mov	r3, r7
 80174ac:	f7e8 fede 	bl	800026c <__aeabi_dsub>
 80174b0:	4602      	mov	r2, r0
 80174b2:	460b      	mov	r3, r1
 80174b4:	4620      	mov	r0, r4
 80174b6:	4629      	mov	r1, r5
 80174b8:	f7e8 fed8 	bl	800026c <__aeabi_dsub>
 80174bc:	4642      	mov	r2, r8
 80174be:	4606      	mov	r6, r0
 80174c0:	460f      	mov	r7, r1
 80174c2:	464b      	mov	r3, r9
 80174c4:	4640      	mov	r0, r8
 80174c6:	4649      	mov	r1, r9
 80174c8:	f7e9 f888 	bl	80005dc <__aeabi_dmul>
 80174cc:	4604      	mov	r4, r0
 80174ce:	460d      	mov	r5, r1
 80174d0:	a35d      	add	r3, pc, #372	; (adr r3, 8017648 <__ieee754_pow+0xa18>)
 80174d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174d6:	f7e9 f881 	bl	80005dc <__aeabi_dmul>
 80174da:	a35d      	add	r3, pc, #372	; (adr r3, 8017650 <__ieee754_pow+0xa20>)
 80174dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e0:	f7e8 fec4 	bl	800026c <__aeabi_dsub>
 80174e4:	4622      	mov	r2, r4
 80174e6:	462b      	mov	r3, r5
 80174e8:	f7e9 f878 	bl	80005dc <__aeabi_dmul>
 80174ec:	a35a      	add	r3, pc, #360	; (adr r3, 8017658 <__ieee754_pow+0xa28>)
 80174ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174f2:	f7e8 febd 	bl	8000270 <__adddf3>
 80174f6:	4622      	mov	r2, r4
 80174f8:	462b      	mov	r3, r5
 80174fa:	f7e9 f86f 	bl	80005dc <__aeabi_dmul>
 80174fe:	a358      	add	r3, pc, #352	; (adr r3, 8017660 <__ieee754_pow+0xa30>)
 8017500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017504:	f7e8 feb2 	bl	800026c <__aeabi_dsub>
 8017508:	4622      	mov	r2, r4
 801750a:	462b      	mov	r3, r5
 801750c:	f7e9 f866 	bl	80005dc <__aeabi_dmul>
 8017510:	a355      	add	r3, pc, #340	; (adr r3, 8017668 <__ieee754_pow+0xa38>)
 8017512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017516:	f7e8 feab 	bl	8000270 <__adddf3>
 801751a:	4622      	mov	r2, r4
 801751c:	462b      	mov	r3, r5
 801751e:	f7e9 f85d 	bl	80005dc <__aeabi_dmul>
 8017522:	4602      	mov	r2, r0
 8017524:	460b      	mov	r3, r1
 8017526:	4640      	mov	r0, r8
 8017528:	4649      	mov	r1, r9
 801752a:	f7e8 fe9f 	bl	800026c <__aeabi_dsub>
 801752e:	4604      	mov	r4, r0
 8017530:	460d      	mov	r5, r1
 8017532:	4602      	mov	r2, r0
 8017534:	460b      	mov	r3, r1
 8017536:	4640      	mov	r0, r8
 8017538:	4649      	mov	r1, r9
 801753a:	f7e9 f84f 	bl	80005dc <__aeabi_dmul>
 801753e:	2200      	movs	r2, #0
 8017540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017544:	ec41 0b19 	vmov	d9, r0, r1
 8017548:	4620      	mov	r0, r4
 801754a:	4629      	mov	r1, r5
 801754c:	f7e8 fe8e 	bl	800026c <__aeabi_dsub>
 8017550:	4602      	mov	r2, r0
 8017552:	460b      	mov	r3, r1
 8017554:	ec51 0b19 	vmov	r0, r1, d9
 8017558:	f7e9 f96a 	bl	8000830 <__aeabi_ddiv>
 801755c:	4632      	mov	r2, r6
 801755e:	4604      	mov	r4, r0
 8017560:	460d      	mov	r5, r1
 8017562:	463b      	mov	r3, r7
 8017564:	4640      	mov	r0, r8
 8017566:	4649      	mov	r1, r9
 8017568:	f7e9 f838 	bl	80005dc <__aeabi_dmul>
 801756c:	4632      	mov	r2, r6
 801756e:	463b      	mov	r3, r7
 8017570:	f7e8 fe7e 	bl	8000270 <__adddf3>
 8017574:	4602      	mov	r2, r0
 8017576:	460b      	mov	r3, r1
 8017578:	4620      	mov	r0, r4
 801757a:	4629      	mov	r1, r5
 801757c:	f7e8 fe76 	bl	800026c <__aeabi_dsub>
 8017580:	4642      	mov	r2, r8
 8017582:	464b      	mov	r3, r9
 8017584:	f7e8 fe72 	bl	800026c <__aeabi_dsub>
 8017588:	460b      	mov	r3, r1
 801758a:	4602      	mov	r2, r0
 801758c:	493a      	ldr	r1, [pc, #232]	; (8017678 <__ieee754_pow+0xa48>)
 801758e:	2000      	movs	r0, #0
 8017590:	f7e8 fe6c 	bl	800026c <__aeabi_dsub>
 8017594:	ec41 0b10 	vmov	d0, r0, r1
 8017598:	ee10 3a90 	vmov	r3, s1
 801759c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80175a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80175a4:	da2b      	bge.n	80175fe <__ieee754_pow+0x9ce>
 80175a6:	4650      	mov	r0, sl
 80175a8:	f000 f87a 	bl	80176a0 <scalbn>
 80175ac:	ec51 0b10 	vmov	r0, r1, d0
 80175b0:	ec53 2b18 	vmov	r2, r3, d8
 80175b4:	f7ff bbed 	b.w	8016d92 <__ieee754_pow+0x162>
 80175b8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80175bc:	4b2f      	ldr	r3, [pc, #188]	; (801767c <__ieee754_pow+0xa4c>)
 80175be:	429e      	cmp	r6, r3
 80175c0:	f77f af0c 	ble.w	80173dc <__ieee754_pow+0x7ac>
 80175c4:	4b2e      	ldr	r3, [pc, #184]	; (8017680 <__ieee754_pow+0xa50>)
 80175c6:	440b      	add	r3, r1
 80175c8:	4303      	orrs	r3, r0
 80175ca:	d009      	beq.n	80175e0 <__ieee754_pow+0x9b0>
 80175cc:	2200      	movs	r2, #0
 80175ce:	2300      	movs	r3, #0
 80175d0:	ec51 0b18 	vmov	r0, r1, d8
 80175d4:	f7e9 fa74 	bl	8000ac0 <__aeabi_dcmplt>
 80175d8:	3800      	subs	r0, #0
 80175da:	bf18      	it	ne
 80175dc:	2001      	movne	r0, #1
 80175de:	e447      	b.n	8016e70 <__ieee754_pow+0x240>
 80175e0:	4622      	mov	r2, r4
 80175e2:	462b      	mov	r3, r5
 80175e4:	f7e8 fe42 	bl	800026c <__aeabi_dsub>
 80175e8:	4642      	mov	r2, r8
 80175ea:	464b      	mov	r3, r9
 80175ec:	f7e9 fa7c 	bl	8000ae8 <__aeabi_dcmpge>
 80175f0:	2800      	cmp	r0, #0
 80175f2:	f43f aef3 	beq.w	80173dc <__ieee754_pow+0x7ac>
 80175f6:	e7e9      	b.n	80175cc <__ieee754_pow+0x99c>
 80175f8:	f04f 0a00 	mov.w	sl, #0
 80175fc:	e71a      	b.n	8017434 <__ieee754_pow+0x804>
 80175fe:	ec51 0b10 	vmov	r0, r1, d0
 8017602:	4619      	mov	r1, r3
 8017604:	e7d4      	b.n	80175b0 <__ieee754_pow+0x980>
 8017606:	2000      	movs	r0, #0
 8017608:	491b      	ldr	r1, [pc, #108]	; (8017678 <__ieee754_pow+0xa48>)
 801760a:	f7ff bb30 	b.w	8016c6e <__ieee754_pow+0x3e>
 801760e:	2000      	movs	r0, #0
 8017610:	2100      	movs	r1, #0
 8017612:	f7ff bb2c 	b.w	8016c6e <__ieee754_pow+0x3e>
 8017616:	4630      	mov	r0, r6
 8017618:	4639      	mov	r1, r7
 801761a:	f7ff bb28 	b.w	8016c6e <__ieee754_pow+0x3e>
 801761e:	9204      	str	r2, [sp, #16]
 8017620:	f7ff bb7a 	b.w	8016d18 <__ieee754_pow+0xe8>
 8017624:	2300      	movs	r3, #0
 8017626:	f7ff bb64 	b.w	8016cf2 <__ieee754_pow+0xc2>
 801762a:	bf00      	nop
 801762c:	f3af 8000 	nop.w
 8017630:	00000000 	.word	0x00000000
 8017634:	3fe62e43 	.word	0x3fe62e43
 8017638:	fefa39ef 	.word	0xfefa39ef
 801763c:	3fe62e42 	.word	0x3fe62e42
 8017640:	0ca86c39 	.word	0x0ca86c39
 8017644:	be205c61 	.word	0xbe205c61
 8017648:	72bea4d0 	.word	0x72bea4d0
 801764c:	3e663769 	.word	0x3e663769
 8017650:	c5d26bf1 	.word	0xc5d26bf1
 8017654:	3ebbbd41 	.word	0x3ebbbd41
 8017658:	af25de2c 	.word	0xaf25de2c
 801765c:	3f11566a 	.word	0x3f11566a
 8017660:	16bebd93 	.word	0x16bebd93
 8017664:	3f66c16c 	.word	0x3f66c16c
 8017668:	5555553e 	.word	0x5555553e
 801766c:	3fc55555 	.word	0x3fc55555
 8017670:	3fe00000 	.word	0x3fe00000
 8017674:	fff00000 	.word	0xfff00000
 8017678:	3ff00000 	.word	0x3ff00000
 801767c:	4090cbff 	.word	0x4090cbff
 8017680:	3f6f3400 	.word	0x3f6f3400
 8017684:	652b82fe 	.word	0x652b82fe
 8017688:	3c971547 	.word	0x3c971547

0801768c <fabs>:
 801768c:	ec51 0b10 	vmov	r0, r1, d0
 8017690:	ee10 2a10 	vmov	r2, s0
 8017694:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017698:	ec43 2b10 	vmov	d0, r2, r3
 801769c:	4770      	bx	lr
	...

080176a0 <scalbn>:
 80176a0:	b570      	push	{r4, r5, r6, lr}
 80176a2:	ec55 4b10 	vmov	r4, r5, d0
 80176a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80176aa:	4606      	mov	r6, r0
 80176ac:	462b      	mov	r3, r5
 80176ae:	b999      	cbnz	r1, 80176d8 <scalbn+0x38>
 80176b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80176b4:	4323      	orrs	r3, r4
 80176b6:	d03f      	beq.n	8017738 <scalbn+0x98>
 80176b8:	4b35      	ldr	r3, [pc, #212]	; (8017790 <scalbn+0xf0>)
 80176ba:	4629      	mov	r1, r5
 80176bc:	2200      	movs	r2, #0
 80176be:	ee10 0a10 	vmov	r0, s0
 80176c2:	f7e8 ff8b 	bl	80005dc <__aeabi_dmul>
 80176c6:	4b33      	ldr	r3, [pc, #204]	; (8017794 <scalbn+0xf4>)
 80176c8:	4604      	mov	r4, r0
 80176ca:	460d      	mov	r5, r1
 80176cc:	429e      	cmp	r6, r3
 80176ce:	da10      	bge.n	80176f2 <scalbn+0x52>
 80176d0:	a327      	add	r3, pc, #156	; (adr r3, 8017770 <scalbn+0xd0>)
 80176d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176d6:	e01f      	b.n	8017718 <scalbn+0x78>
 80176d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80176dc:	4291      	cmp	r1, r2
 80176de:	d10c      	bne.n	80176fa <scalbn+0x5a>
 80176e0:	ee10 2a10 	vmov	r2, s0
 80176e4:	4620      	mov	r0, r4
 80176e6:	4629      	mov	r1, r5
 80176e8:	f7e8 fdc2 	bl	8000270 <__adddf3>
 80176ec:	4604      	mov	r4, r0
 80176ee:	460d      	mov	r5, r1
 80176f0:	e022      	b.n	8017738 <scalbn+0x98>
 80176f2:	460b      	mov	r3, r1
 80176f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80176f8:	3936      	subs	r1, #54	; 0x36
 80176fa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80176fe:	4296      	cmp	r6, r2
 8017700:	dd0d      	ble.n	801771e <scalbn+0x7e>
 8017702:	2d00      	cmp	r5, #0
 8017704:	a11c      	add	r1, pc, #112	; (adr r1, 8017778 <scalbn+0xd8>)
 8017706:	e9d1 0100 	ldrd	r0, r1, [r1]
 801770a:	da02      	bge.n	8017712 <scalbn+0x72>
 801770c:	a11c      	add	r1, pc, #112	; (adr r1, 8017780 <scalbn+0xe0>)
 801770e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017712:	a319      	add	r3, pc, #100	; (adr r3, 8017778 <scalbn+0xd8>)
 8017714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017718:	f7e8 ff60 	bl	80005dc <__aeabi_dmul>
 801771c:	e7e6      	b.n	80176ec <scalbn+0x4c>
 801771e:	1872      	adds	r2, r6, r1
 8017720:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017724:	428a      	cmp	r2, r1
 8017726:	dcec      	bgt.n	8017702 <scalbn+0x62>
 8017728:	2a00      	cmp	r2, #0
 801772a:	dd08      	ble.n	801773e <scalbn+0x9e>
 801772c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017730:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017734:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017738:	ec45 4b10 	vmov	d0, r4, r5
 801773c:	bd70      	pop	{r4, r5, r6, pc}
 801773e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017742:	da08      	bge.n	8017756 <scalbn+0xb6>
 8017744:	2d00      	cmp	r5, #0
 8017746:	a10a      	add	r1, pc, #40	; (adr r1, 8017770 <scalbn+0xd0>)
 8017748:	e9d1 0100 	ldrd	r0, r1, [r1]
 801774c:	dac0      	bge.n	80176d0 <scalbn+0x30>
 801774e:	a10e      	add	r1, pc, #56	; (adr r1, 8017788 <scalbn+0xe8>)
 8017750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017754:	e7bc      	b.n	80176d0 <scalbn+0x30>
 8017756:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801775a:	3236      	adds	r2, #54	; 0x36
 801775c:	4620      	mov	r0, r4
 801775e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017762:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017766:	2200      	movs	r2, #0
 8017768:	4b0b      	ldr	r3, [pc, #44]	; (8017798 <scalbn+0xf8>)
 801776a:	e7d5      	b.n	8017718 <scalbn+0x78>
 801776c:	f3af 8000 	nop.w
 8017770:	c2f8f359 	.word	0xc2f8f359
 8017774:	01a56e1f 	.word	0x01a56e1f
 8017778:	8800759c 	.word	0x8800759c
 801777c:	7e37e43c 	.word	0x7e37e43c
 8017780:	8800759c 	.word	0x8800759c
 8017784:	fe37e43c 	.word	0xfe37e43c
 8017788:	c2f8f359 	.word	0xc2f8f359
 801778c:	81a56e1f 	.word	0x81a56e1f
 8017790:	43500000 	.word	0x43500000
 8017794:	ffff3cb0 	.word	0xffff3cb0
 8017798:	3c900000 	.word	0x3c900000

0801779c <with_errno>:
 801779c:	b570      	push	{r4, r5, r6, lr}
 801779e:	4604      	mov	r4, r0
 80177a0:	460d      	mov	r5, r1
 80177a2:	4616      	mov	r6, r2
 80177a4:	f000 fa72 	bl	8017c8c <__errno>
 80177a8:	4629      	mov	r1, r5
 80177aa:	6006      	str	r6, [r0, #0]
 80177ac:	4620      	mov	r0, r4
 80177ae:	bd70      	pop	{r4, r5, r6, pc}

080177b0 <xflow>:
 80177b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177b2:	4614      	mov	r4, r2
 80177b4:	461d      	mov	r5, r3
 80177b6:	b108      	cbz	r0, 80177bc <xflow+0xc>
 80177b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80177bc:	4620      	mov	r0, r4
 80177be:	4629      	mov	r1, r5
 80177c0:	e9cd 2300 	strd	r2, r3, [sp]
 80177c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177c8:	f7e8 ff08 	bl	80005dc <__aeabi_dmul>
 80177cc:	2222      	movs	r2, #34	; 0x22
 80177ce:	b003      	add	sp, #12
 80177d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80177d4:	f7ff bfe2 	b.w	801779c <with_errno>

080177d8 <__math_uflow>:
 80177d8:	b508      	push	{r3, lr}
 80177da:	2200      	movs	r2, #0
 80177dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80177e0:	f7ff ffe6 	bl	80177b0 <xflow>
 80177e4:	ec41 0b10 	vmov	d0, r0, r1
 80177e8:	bd08      	pop	{r3, pc}

080177ea <__math_oflow>:
 80177ea:	b508      	push	{r3, lr}
 80177ec:	2200      	movs	r2, #0
 80177ee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80177f2:	f7ff ffdd 	bl	80177b0 <xflow>
 80177f6:	ec41 0b10 	vmov	d0, r0, r1
 80177fa:	bd08      	pop	{r3, pc}

080177fc <__ieee754_sqrt>:
 80177fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017800:	4e6b      	ldr	r6, [pc, #428]	; (80179b0 <__ieee754_sqrt+0x1b4>)
 8017802:	ee10 0a10 	vmov	r0, s0
 8017806:	ee10 2a10 	vmov	r2, s0
 801780a:	ec55 4b10 	vmov	r4, r5, d0
 801780e:	43ae      	bics	r6, r5
 8017810:	4629      	mov	r1, r5
 8017812:	462b      	mov	r3, r5
 8017814:	d10d      	bne.n	8017832 <__ieee754_sqrt+0x36>
 8017816:	f7e8 fee1 	bl	80005dc <__aeabi_dmul>
 801781a:	4602      	mov	r2, r0
 801781c:	460b      	mov	r3, r1
 801781e:	4620      	mov	r0, r4
 8017820:	4629      	mov	r1, r5
 8017822:	f7e8 fd25 	bl	8000270 <__adddf3>
 8017826:	4604      	mov	r4, r0
 8017828:	460d      	mov	r5, r1
 801782a:	ec45 4b10 	vmov	d0, r4, r5
 801782e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017832:	2d00      	cmp	r5, #0
 8017834:	dc0b      	bgt.n	801784e <__ieee754_sqrt+0x52>
 8017836:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801783a:	4326      	orrs	r6, r4
 801783c:	d0f5      	beq.n	801782a <__ieee754_sqrt+0x2e>
 801783e:	b135      	cbz	r5, 801784e <__ieee754_sqrt+0x52>
 8017840:	f7e8 fd14 	bl	800026c <__aeabi_dsub>
 8017844:	4602      	mov	r2, r0
 8017846:	460b      	mov	r3, r1
 8017848:	f7e8 fff2 	bl	8000830 <__aeabi_ddiv>
 801784c:	e7eb      	b.n	8017826 <__ieee754_sqrt+0x2a>
 801784e:	1509      	asrs	r1, r1, #20
 8017850:	f000 8091 	beq.w	8017976 <__ieee754_sqrt+0x17a>
 8017854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017858:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801785c:	07c9      	lsls	r1, r1, #31
 801785e:	f04f 0500 	mov.w	r5, #0
 8017862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017866:	ea4f 0666 	mov.w	r6, r6, asr #1
 801786a:	f04f 0e16 	mov.w	lr, #22
 801786e:	46ac      	mov	ip, r5
 8017870:	bf58      	it	pl
 8017872:	005b      	lslpl	r3, r3, #1
 8017874:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8017878:	bf5c      	itt	pl
 801787a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801787e:	0052      	lslpl	r2, r2, #1
 8017880:	005b      	lsls	r3, r3, #1
 8017882:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8017886:	0052      	lsls	r2, r2, #1
 8017888:	eb0c 0001 	add.w	r0, ip, r1
 801788c:	4298      	cmp	r0, r3
 801788e:	bfde      	ittt	le
 8017890:	1a1b      	suble	r3, r3, r0
 8017892:	eb00 0c01 	addle.w	ip, r0, r1
 8017896:	186d      	addle	r5, r5, r1
 8017898:	f1be 0e01 	subs.w	lr, lr, #1
 801789c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80178a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80178a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80178a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80178ac:	d1ec      	bne.n	8017888 <__ieee754_sqrt+0x8c>
 80178ae:	4674      	mov	r4, lr
 80178b0:	2720      	movs	r7, #32
 80178b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80178b6:	4563      	cmp	r3, ip
 80178b8:	eb01 000e 	add.w	r0, r1, lr
 80178bc:	dc02      	bgt.n	80178c4 <__ieee754_sqrt+0xc8>
 80178be:	d114      	bne.n	80178ea <__ieee754_sqrt+0xee>
 80178c0:	4290      	cmp	r0, r2
 80178c2:	d812      	bhi.n	80178ea <__ieee754_sqrt+0xee>
 80178c4:	2800      	cmp	r0, #0
 80178c6:	eb00 0e01 	add.w	lr, r0, r1
 80178ca:	da59      	bge.n	8017980 <__ieee754_sqrt+0x184>
 80178cc:	f1be 0f00 	cmp.w	lr, #0
 80178d0:	db56      	blt.n	8017980 <__ieee754_sqrt+0x184>
 80178d2:	f10c 0801 	add.w	r8, ip, #1
 80178d6:	eba3 030c 	sub.w	r3, r3, ip
 80178da:	4290      	cmp	r0, r2
 80178dc:	440c      	add	r4, r1
 80178de:	eba2 0200 	sub.w	r2, r2, r0
 80178e2:	bf88      	it	hi
 80178e4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80178e8:	46c4      	mov	ip, r8
 80178ea:	005b      	lsls	r3, r3, #1
 80178ec:	3f01      	subs	r7, #1
 80178ee:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80178f2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80178f6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80178fa:	d1dc      	bne.n	80178b6 <__ieee754_sqrt+0xba>
 80178fc:	4313      	orrs	r3, r2
 80178fe:	d01b      	beq.n	8017938 <__ieee754_sqrt+0x13c>
 8017900:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80179b4 <__ieee754_sqrt+0x1b8>
 8017904:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80179b8 <__ieee754_sqrt+0x1bc>
 8017908:	e9da 0100 	ldrd	r0, r1, [sl]
 801790c:	e9db 2300 	ldrd	r2, r3, [fp]
 8017910:	e9da 8900 	ldrd	r8, r9, [sl]
 8017914:	f7e8 fcaa 	bl	800026c <__aeabi_dsub>
 8017918:	4602      	mov	r2, r0
 801791a:	460b      	mov	r3, r1
 801791c:	4640      	mov	r0, r8
 801791e:	4649      	mov	r1, r9
 8017920:	f7e9 f8d8 	bl	8000ad4 <__aeabi_dcmple>
 8017924:	b140      	cbz	r0, 8017938 <__ieee754_sqrt+0x13c>
 8017926:	f1b4 3fff 	cmp.w	r4, #4294967295
 801792a:	e9da 0100 	ldrd	r0, r1, [sl]
 801792e:	e9db 2300 	ldrd	r2, r3, [fp]
 8017932:	d127      	bne.n	8017984 <__ieee754_sqrt+0x188>
 8017934:	3501      	adds	r5, #1
 8017936:	463c      	mov	r4, r7
 8017938:	106a      	asrs	r2, r5, #1
 801793a:	07e9      	lsls	r1, r5, #31
 801793c:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8017940:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017944:	bf48      	it	mi
 8017946:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801794a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801794e:	461c      	mov	r4, r3
 8017950:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8017954:	e769      	b.n	801782a <__ieee754_sqrt+0x2e>
 8017956:	0ad3      	lsrs	r3, r2, #11
 8017958:	3815      	subs	r0, #21
 801795a:	0552      	lsls	r2, r2, #21
 801795c:	2b00      	cmp	r3, #0
 801795e:	d0fa      	beq.n	8017956 <__ieee754_sqrt+0x15a>
 8017960:	02dc      	lsls	r4, r3, #11
 8017962:	d50a      	bpl.n	801797a <__ieee754_sqrt+0x17e>
 8017964:	f1c1 0420 	rsb	r4, r1, #32
 8017968:	1e4d      	subs	r5, r1, #1
 801796a:	fa22 f404 	lsr.w	r4, r2, r4
 801796e:	408a      	lsls	r2, r1
 8017970:	1b41      	subs	r1, r0, r5
 8017972:	4323      	orrs	r3, r4
 8017974:	e76e      	b.n	8017854 <__ieee754_sqrt+0x58>
 8017976:	4608      	mov	r0, r1
 8017978:	e7f0      	b.n	801795c <__ieee754_sqrt+0x160>
 801797a:	005b      	lsls	r3, r3, #1
 801797c:	3101      	adds	r1, #1
 801797e:	e7ef      	b.n	8017960 <__ieee754_sqrt+0x164>
 8017980:	46e0      	mov	r8, ip
 8017982:	e7a8      	b.n	80178d6 <__ieee754_sqrt+0xda>
 8017984:	e9da 8900 	ldrd	r8, r9, [sl]
 8017988:	f7e8 fc72 	bl	8000270 <__adddf3>
 801798c:	4602      	mov	r2, r0
 801798e:	460b      	mov	r3, r1
 8017990:	4640      	mov	r0, r8
 8017992:	4649      	mov	r1, r9
 8017994:	f7e9 f894 	bl	8000ac0 <__aeabi_dcmplt>
 8017998:	b128      	cbz	r0, 80179a6 <__ieee754_sqrt+0x1aa>
 801799a:	1ca0      	adds	r0, r4, #2
 801799c:	f104 0402 	add.w	r4, r4, #2
 80179a0:	bf08      	it	eq
 80179a2:	3501      	addeq	r5, #1
 80179a4:	e7c8      	b.n	8017938 <__ieee754_sqrt+0x13c>
 80179a6:	3401      	adds	r4, #1
 80179a8:	f024 0401 	bic.w	r4, r4, #1
 80179ac:	e7c4      	b.n	8017938 <__ieee754_sqrt+0x13c>
 80179ae:	bf00      	nop
 80179b0:	7ff00000 	.word	0x7ff00000
 80179b4:	20000088 	.word	0x20000088
 80179b8:	20000090 	.word	0x20000090

080179bc <abort>:
 80179bc:	2006      	movs	r0, #6
 80179be:	b508      	push	{r3, lr}
 80179c0:	f000 f938 	bl	8017c34 <raise>
 80179c4:	2001      	movs	r0, #1
 80179c6:	f7f2 f917 	bl	8009bf8 <_exit>
	...

080179cc <malloc>:
 80179cc:	4b02      	ldr	r3, [pc, #8]	; (80179d8 <malloc+0xc>)
 80179ce:	4601      	mov	r1, r0
 80179d0:	6818      	ldr	r0, [r3, #0]
 80179d2:	f000 b82b 	b.w	8017a2c <_malloc_r>
 80179d6:	bf00      	nop
 80179d8:	200000e4 	.word	0x200000e4

080179dc <free>:
 80179dc:	4b02      	ldr	r3, [pc, #8]	; (80179e8 <free+0xc>)
 80179de:	4601      	mov	r1, r0
 80179e0:	6818      	ldr	r0, [r3, #0]
 80179e2:	f000 b98d 	b.w	8017d00 <_free_r>
 80179e6:	bf00      	nop
 80179e8:	200000e4 	.word	0x200000e4

080179ec <sbrk_aligned>:
 80179ec:	b570      	push	{r4, r5, r6, lr}
 80179ee:	4e0e      	ldr	r6, [pc, #56]	; (8017a28 <sbrk_aligned+0x3c>)
 80179f0:	460c      	mov	r4, r1
 80179f2:	4605      	mov	r5, r0
 80179f4:	6831      	ldr	r1, [r6, #0]
 80179f6:	b911      	cbnz	r1, 80179fe <sbrk_aligned+0x12>
 80179f8:	f000 f938 	bl	8017c6c <_sbrk_r>
 80179fc:	6030      	str	r0, [r6, #0]
 80179fe:	4621      	mov	r1, r4
 8017a00:	4628      	mov	r0, r5
 8017a02:	f000 f933 	bl	8017c6c <_sbrk_r>
 8017a06:	1c43      	adds	r3, r0, #1
 8017a08:	d00a      	beq.n	8017a20 <sbrk_aligned+0x34>
 8017a0a:	1cc4      	adds	r4, r0, #3
 8017a0c:	f024 0403 	bic.w	r4, r4, #3
 8017a10:	42a0      	cmp	r0, r4
 8017a12:	d007      	beq.n	8017a24 <sbrk_aligned+0x38>
 8017a14:	1a21      	subs	r1, r4, r0
 8017a16:	4628      	mov	r0, r5
 8017a18:	f000 f928 	bl	8017c6c <_sbrk_r>
 8017a1c:	3001      	adds	r0, #1
 8017a1e:	d101      	bne.n	8017a24 <sbrk_aligned+0x38>
 8017a20:	f04f 34ff 	mov.w	r4, #4294967295
 8017a24:	4620      	mov	r0, r4
 8017a26:	bd70      	pop	{r4, r5, r6, pc}
 8017a28:	200038b4 	.word	0x200038b4

08017a2c <_malloc_r>:
 8017a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a30:	1ccd      	adds	r5, r1, #3
 8017a32:	4607      	mov	r7, r0
 8017a34:	f025 0503 	bic.w	r5, r5, #3
 8017a38:	3508      	adds	r5, #8
 8017a3a:	2d0c      	cmp	r5, #12
 8017a3c:	bf38      	it	cc
 8017a3e:	250c      	movcc	r5, #12
 8017a40:	2d00      	cmp	r5, #0
 8017a42:	db01      	blt.n	8017a48 <_malloc_r+0x1c>
 8017a44:	42a9      	cmp	r1, r5
 8017a46:	d905      	bls.n	8017a54 <_malloc_r+0x28>
 8017a48:	230c      	movs	r3, #12
 8017a4a:	2600      	movs	r6, #0
 8017a4c:	603b      	str	r3, [r7, #0]
 8017a4e:	4630      	mov	r0, r6
 8017a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017b28 <_malloc_r+0xfc>
 8017a58:	f000 f868 	bl	8017b2c <__malloc_lock>
 8017a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8017a60:	461c      	mov	r4, r3
 8017a62:	bb5c      	cbnz	r4, 8017abc <_malloc_r+0x90>
 8017a64:	4629      	mov	r1, r5
 8017a66:	4638      	mov	r0, r7
 8017a68:	f7ff ffc0 	bl	80179ec <sbrk_aligned>
 8017a6c:	1c43      	adds	r3, r0, #1
 8017a6e:	4604      	mov	r4, r0
 8017a70:	d155      	bne.n	8017b1e <_malloc_r+0xf2>
 8017a72:	f8d8 4000 	ldr.w	r4, [r8]
 8017a76:	4626      	mov	r6, r4
 8017a78:	2e00      	cmp	r6, #0
 8017a7a:	d145      	bne.n	8017b08 <_malloc_r+0xdc>
 8017a7c:	2c00      	cmp	r4, #0
 8017a7e:	d048      	beq.n	8017b12 <_malloc_r+0xe6>
 8017a80:	6823      	ldr	r3, [r4, #0]
 8017a82:	4631      	mov	r1, r6
 8017a84:	4638      	mov	r0, r7
 8017a86:	eb04 0903 	add.w	r9, r4, r3
 8017a8a:	f000 f8ef 	bl	8017c6c <_sbrk_r>
 8017a8e:	4581      	cmp	r9, r0
 8017a90:	d13f      	bne.n	8017b12 <_malloc_r+0xe6>
 8017a92:	6821      	ldr	r1, [r4, #0]
 8017a94:	4638      	mov	r0, r7
 8017a96:	1a6d      	subs	r5, r5, r1
 8017a98:	4629      	mov	r1, r5
 8017a9a:	f7ff ffa7 	bl	80179ec <sbrk_aligned>
 8017a9e:	3001      	adds	r0, #1
 8017aa0:	d037      	beq.n	8017b12 <_malloc_r+0xe6>
 8017aa2:	6823      	ldr	r3, [r4, #0]
 8017aa4:	442b      	add	r3, r5
 8017aa6:	6023      	str	r3, [r4, #0]
 8017aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d038      	beq.n	8017b22 <_malloc_r+0xf6>
 8017ab0:	685a      	ldr	r2, [r3, #4]
 8017ab2:	42a2      	cmp	r2, r4
 8017ab4:	d12b      	bne.n	8017b0e <_malloc_r+0xe2>
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	605a      	str	r2, [r3, #4]
 8017aba:	e00f      	b.n	8017adc <_malloc_r+0xb0>
 8017abc:	6822      	ldr	r2, [r4, #0]
 8017abe:	1b52      	subs	r2, r2, r5
 8017ac0:	d41f      	bmi.n	8017b02 <_malloc_r+0xd6>
 8017ac2:	2a0b      	cmp	r2, #11
 8017ac4:	d917      	bls.n	8017af6 <_malloc_r+0xca>
 8017ac6:	1961      	adds	r1, r4, r5
 8017ac8:	42a3      	cmp	r3, r4
 8017aca:	6025      	str	r5, [r4, #0]
 8017acc:	bf18      	it	ne
 8017ace:	6059      	strne	r1, [r3, #4]
 8017ad0:	6863      	ldr	r3, [r4, #4]
 8017ad2:	bf08      	it	eq
 8017ad4:	f8c8 1000 	streq.w	r1, [r8]
 8017ad8:	5162      	str	r2, [r4, r5]
 8017ada:	604b      	str	r3, [r1, #4]
 8017adc:	f104 060b 	add.w	r6, r4, #11
 8017ae0:	4638      	mov	r0, r7
 8017ae2:	f000 f829 	bl	8017b38 <__malloc_unlock>
 8017ae6:	1d23      	adds	r3, r4, #4
 8017ae8:	f026 0607 	bic.w	r6, r6, #7
 8017aec:	1af2      	subs	r2, r6, r3
 8017aee:	d0ae      	beq.n	8017a4e <_malloc_r+0x22>
 8017af0:	1b9b      	subs	r3, r3, r6
 8017af2:	50a3      	str	r3, [r4, r2]
 8017af4:	e7ab      	b.n	8017a4e <_malloc_r+0x22>
 8017af6:	42a3      	cmp	r3, r4
 8017af8:	6862      	ldr	r2, [r4, #4]
 8017afa:	d1dd      	bne.n	8017ab8 <_malloc_r+0x8c>
 8017afc:	f8c8 2000 	str.w	r2, [r8]
 8017b00:	e7ec      	b.n	8017adc <_malloc_r+0xb0>
 8017b02:	4623      	mov	r3, r4
 8017b04:	6864      	ldr	r4, [r4, #4]
 8017b06:	e7ac      	b.n	8017a62 <_malloc_r+0x36>
 8017b08:	4634      	mov	r4, r6
 8017b0a:	6876      	ldr	r6, [r6, #4]
 8017b0c:	e7b4      	b.n	8017a78 <_malloc_r+0x4c>
 8017b0e:	4613      	mov	r3, r2
 8017b10:	e7cc      	b.n	8017aac <_malloc_r+0x80>
 8017b12:	230c      	movs	r3, #12
 8017b14:	4638      	mov	r0, r7
 8017b16:	603b      	str	r3, [r7, #0]
 8017b18:	f000 f80e 	bl	8017b38 <__malloc_unlock>
 8017b1c:	e797      	b.n	8017a4e <_malloc_r+0x22>
 8017b1e:	6025      	str	r5, [r4, #0]
 8017b20:	e7dc      	b.n	8017adc <_malloc_r+0xb0>
 8017b22:	605b      	str	r3, [r3, #4]
 8017b24:	deff      	udf	#255	; 0xff
 8017b26:	bf00      	nop
 8017b28:	200038b0 	.word	0x200038b0

08017b2c <__malloc_lock>:
 8017b2c:	4801      	ldr	r0, [pc, #4]	; (8017b34 <__malloc_lock+0x8>)
 8017b2e:	f000 b8d7 	b.w	8017ce0 <__retarget_lock_acquire_recursive>
 8017b32:	bf00      	nop
 8017b34:	200039f4 	.word	0x200039f4

08017b38 <__malloc_unlock>:
 8017b38:	4801      	ldr	r0, [pc, #4]	; (8017b40 <__malloc_unlock+0x8>)
 8017b3a:	f000 b8d2 	b.w	8017ce2 <__retarget_lock_release_recursive>
 8017b3e:	bf00      	nop
 8017b40:	200039f4 	.word	0x200039f4

08017b44 <siscanf>:
 8017b44:	b40e      	push	{r1, r2, r3}
 8017b46:	b510      	push	{r4, lr}
 8017b48:	b09f      	sub	sp, #124	; 0x7c
 8017b4a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017b4e:	ac21      	add	r4, sp, #132	; 0x84
 8017b50:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017b54:	9004      	str	r0, [sp, #16]
 8017b56:	f854 2b04 	ldr.w	r2, [r4], #4
 8017b5a:	9008      	str	r0, [sp, #32]
 8017b5c:	9201      	str	r2, [sp, #4]
 8017b5e:	f7e8 fb79 	bl	8000254 <strlen>
 8017b62:	4b0c      	ldr	r3, [pc, #48]	; (8017b94 <siscanf+0x50>)
 8017b64:	a904      	add	r1, sp, #16
 8017b66:	9005      	str	r0, [sp, #20]
 8017b68:	930d      	str	r3, [sp, #52]	; 0x34
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	9009      	str	r0, [sp, #36]	; 0x24
 8017b6e:	9311      	str	r3, [sp, #68]	; 0x44
 8017b70:	9316      	str	r3, [sp, #88]	; 0x58
 8017b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b76:	4808      	ldr	r0, [pc, #32]	; (8017b98 <siscanf+0x54>)
 8017b78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017b7c:	4623      	mov	r3, r4
 8017b7e:	9a01      	ldr	r2, [sp, #4]
 8017b80:	6800      	ldr	r0, [r0, #0]
 8017b82:	9403      	str	r4, [sp, #12]
 8017b84:	f000 f962 	bl	8017e4c <__ssvfiscanf_r>
 8017b88:	b01f      	add	sp, #124	; 0x7c
 8017b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b8e:	b003      	add	sp, #12
 8017b90:	4770      	bx	lr
 8017b92:	bf00      	nop
 8017b94:	08017b9d 	.word	0x08017b9d
 8017b98:	200000e4 	.word	0x200000e4

08017b9c <__seofread>:
 8017b9c:	2000      	movs	r0, #0
 8017b9e:	4770      	bx	lr

08017ba0 <memmove>:
 8017ba0:	4288      	cmp	r0, r1
 8017ba2:	b510      	push	{r4, lr}
 8017ba4:	eb01 0402 	add.w	r4, r1, r2
 8017ba8:	d902      	bls.n	8017bb0 <memmove+0x10>
 8017baa:	4284      	cmp	r4, r0
 8017bac:	4623      	mov	r3, r4
 8017bae:	d807      	bhi.n	8017bc0 <memmove+0x20>
 8017bb0:	1e43      	subs	r3, r0, #1
 8017bb2:	42a1      	cmp	r1, r4
 8017bb4:	d008      	beq.n	8017bc8 <memmove+0x28>
 8017bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017bbe:	e7f8      	b.n	8017bb2 <memmove+0x12>
 8017bc0:	4402      	add	r2, r0
 8017bc2:	4601      	mov	r1, r0
 8017bc4:	428a      	cmp	r2, r1
 8017bc6:	d100      	bne.n	8017bca <memmove+0x2a>
 8017bc8:	bd10      	pop	{r4, pc}
 8017bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017bd2:	e7f7      	b.n	8017bc4 <memmove+0x24>

08017bd4 <memset>:
 8017bd4:	4402      	add	r2, r0
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	4293      	cmp	r3, r2
 8017bda:	d100      	bne.n	8017bde <memset+0xa>
 8017bdc:	4770      	bx	lr
 8017bde:	f803 1b01 	strb.w	r1, [r3], #1
 8017be2:	e7f9      	b.n	8017bd8 <memset+0x4>

08017be4 <_raise_r>:
 8017be4:	291f      	cmp	r1, #31
 8017be6:	b538      	push	{r3, r4, r5, lr}
 8017be8:	4604      	mov	r4, r0
 8017bea:	460d      	mov	r5, r1
 8017bec:	d904      	bls.n	8017bf8 <_raise_r+0x14>
 8017bee:	2316      	movs	r3, #22
 8017bf0:	6003      	str	r3, [r0, #0]
 8017bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8017bf6:	bd38      	pop	{r3, r4, r5, pc}
 8017bf8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017bfa:	b112      	cbz	r2, 8017c02 <_raise_r+0x1e>
 8017bfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c00:	b94b      	cbnz	r3, 8017c16 <_raise_r+0x32>
 8017c02:	4620      	mov	r0, r4
 8017c04:	f000 f830 	bl	8017c68 <_getpid_r>
 8017c08:	462a      	mov	r2, r5
 8017c0a:	4601      	mov	r1, r0
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c12:	f000 b817 	b.w	8017c44 <_kill_r>
 8017c16:	2b01      	cmp	r3, #1
 8017c18:	d00a      	beq.n	8017c30 <_raise_r+0x4c>
 8017c1a:	1c59      	adds	r1, r3, #1
 8017c1c:	d103      	bne.n	8017c26 <_raise_r+0x42>
 8017c1e:	2316      	movs	r3, #22
 8017c20:	6003      	str	r3, [r0, #0]
 8017c22:	2001      	movs	r0, #1
 8017c24:	e7e7      	b.n	8017bf6 <_raise_r+0x12>
 8017c26:	2400      	movs	r4, #0
 8017c28:	4628      	mov	r0, r5
 8017c2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017c2e:	4798      	blx	r3
 8017c30:	2000      	movs	r0, #0
 8017c32:	e7e0      	b.n	8017bf6 <_raise_r+0x12>

08017c34 <raise>:
 8017c34:	4b02      	ldr	r3, [pc, #8]	; (8017c40 <raise+0xc>)
 8017c36:	4601      	mov	r1, r0
 8017c38:	6818      	ldr	r0, [r3, #0]
 8017c3a:	f7ff bfd3 	b.w	8017be4 <_raise_r>
 8017c3e:	bf00      	nop
 8017c40:	200000e4 	.word	0x200000e4

08017c44 <_kill_r>:
 8017c44:	b538      	push	{r3, r4, r5, lr}
 8017c46:	2300      	movs	r3, #0
 8017c48:	4d06      	ldr	r5, [pc, #24]	; (8017c64 <_kill_r+0x20>)
 8017c4a:	4604      	mov	r4, r0
 8017c4c:	4608      	mov	r0, r1
 8017c4e:	4611      	mov	r1, r2
 8017c50:	602b      	str	r3, [r5, #0]
 8017c52:	f7f1 ffc1 	bl	8009bd8 <_kill>
 8017c56:	1c43      	adds	r3, r0, #1
 8017c58:	d102      	bne.n	8017c60 <_kill_r+0x1c>
 8017c5a:	682b      	ldr	r3, [r5, #0]
 8017c5c:	b103      	cbz	r3, 8017c60 <_kill_r+0x1c>
 8017c5e:	6023      	str	r3, [r4, #0]
 8017c60:	bd38      	pop	{r3, r4, r5, pc}
 8017c62:	bf00      	nop
 8017c64:	200039f0 	.word	0x200039f0

08017c68 <_getpid_r>:
 8017c68:	f7f1 bfae 	b.w	8009bc8 <_getpid>

08017c6c <_sbrk_r>:
 8017c6c:	b538      	push	{r3, r4, r5, lr}
 8017c6e:	2300      	movs	r3, #0
 8017c70:	4d05      	ldr	r5, [pc, #20]	; (8017c88 <_sbrk_r+0x1c>)
 8017c72:	4604      	mov	r4, r0
 8017c74:	4608      	mov	r0, r1
 8017c76:	602b      	str	r3, [r5, #0]
 8017c78:	f7f1 ffc8 	bl	8009c0c <_sbrk>
 8017c7c:	1c43      	adds	r3, r0, #1
 8017c7e:	d102      	bne.n	8017c86 <_sbrk_r+0x1a>
 8017c80:	682b      	ldr	r3, [r5, #0]
 8017c82:	b103      	cbz	r3, 8017c86 <_sbrk_r+0x1a>
 8017c84:	6023      	str	r3, [r4, #0]
 8017c86:	bd38      	pop	{r3, r4, r5, pc}
 8017c88:	200039f0 	.word	0x200039f0

08017c8c <__errno>:
 8017c8c:	4b01      	ldr	r3, [pc, #4]	; (8017c94 <__errno+0x8>)
 8017c8e:	6818      	ldr	r0, [r3, #0]
 8017c90:	4770      	bx	lr
 8017c92:	bf00      	nop
 8017c94:	200000e4 	.word	0x200000e4

08017c98 <__libc_init_array>:
 8017c98:	b570      	push	{r4, r5, r6, lr}
 8017c9a:	4d0d      	ldr	r5, [pc, #52]	; (8017cd0 <__libc_init_array+0x38>)
 8017c9c:	2600      	movs	r6, #0
 8017c9e:	4c0d      	ldr	r4, [pc, #52]	; (8017cd4 <__libc_init_array+0x3c>)
 8017ca0:	1b64      	subs	r4, r4, r5
 8017ca2:	10a4      	asrs	r4, r4, #2
 8017ca4:	42a6      	cmp	r6, r4
 8017ca6:	d109      	bne.n	8017cbc <__libc_init_array+0x24>
 8017ca8:	4d0b      	ldr	r5, [pc, #44]	; (8017cd8 <__libc_init_array+0x40>)
 8017caa:	2600      	movs	r6, #0
 8017cac:	4c0b      	ldr	r4, [pc, #44]	; (8017cdc <__libc_init_array+0x44>)
 8017cae:	f000 fd3f 	bl	8018730 <_init>
 8017cb2:	1b64      	subs	r4, r4, r5
 8017cb4:	10a4      	asrs	r4, r4, #2
 8017cb6:	42a6      	cmp	r6, r4
 8017cb8:	d105      	bne.n	8017cc6 <__libc_init_array+0x2e>
 8017cba:	bd70      	pop	{r4, r5, r6, pc}
 8017cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cc0:	3601      	adds	r6, #1
 8017cc2:	4798      	blx	r3
 8017cc4:	e7ee      	b.n	8017ca4 <__libc_init_array+0xc>
 8017cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cca:	3601      	adds	r6, #1
 8017ccc:	4798      	blx	r3
 8017cce:	e7f2      	b.n	8017cb6 <__libc_init_array+0x1e>
 8017cd0:	08018af8 	.word	0x08018af8
 8017cd4:	08018af8 	.word	0x08018af8
 8017cd8:	08018af8 	.word	0x08018af8
 8017cdc:	08018afc 	.word	0x08018afc

08017ce0 <__retarget_lock_acquire_recursive>:
 8017ce0:	4770      	bx	lr

08017ce2 <__retarget_lock_release_recursive>:
 8017ce2:	4770      	bx	lr

08017ce4 <memcpy>:
 8017ce4:	440a      	add	r2, r1
 8017ce6:	1e43      	subs	r3, r0, #1
 8017ce8:	4291      	cmp	r1, r2
 8017cea:	d100      	bne.n	8017cee <memcpy+0xa>
 8017cec:	4770      	bx	lr
 8017cee:	b510      	push	{r4, lr}
 8017cf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cf4:	4291      	cmp	r1, r2
 8017cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017cfa:	d1f9      	bne.n	8017cf0 <memcpy+0xc>
 8017cfc:	bd10      	pop	{r4, pc}
	...

08017d00 <_free_r>:
 8017d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d02:	2900      	cmp	r1, #0
 8017d04:	d043      	beq.n	8017d8e <_free_r+0x8e>
 8017d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d0a:	1f0c      	subs	r4, r1, #4
 8017d0c:	9001      	str	r0, [sp, #4]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	bfb8      	it	lt
 8017d12:	18e4      	addlt	r4, r4, r3
 8017d14:	f7ff ff0a 	bl	8017b2c <__malloc_lock>
 8017d18:	4a1e      	ldr	r2, [pc, #120]	; (8017d94 <_free_r+0x94>)
 8017d1a:	9801      	ldr	r0, [sp, #4]
 8017d1c:	6813      	ldr	r3, [r2, #0]
 8017d1e:	b933      	cbnz	r3, 8017d2e <_free_r+0x2e>
 8017d20:	6063      	str	r3, [r4, #4]
 8017d22:	6014      	str	r4, [r2, #0]
 8017d24:	b003      	add	sp, #12
 8017d26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d2a:	f7ff bf05 	b.w	8017b38 <__malloc_unlock>
 8017d2e:	42a3      	cmp	r3, r4
 8017d30:	d908      	bls.n	8017d44 <_free_r+0x44>
 8017d32:	6825      	ldr	r5, [r4, #0]
 8017d34:	1961      	adds	r1, r4, r5
 8017d36:	428b      	cmp	r3, r1
 8017d38:	bf01      	itttt	eq
 8017d3a:	6819      	ldreq	r1, [r3, #0]
 8017d3c:	685b      	ldreq	r3, [r3, #4]
 8017d3e:	1949      	addeq	r1, r1, r5
 8017d40:	6021      	streq	r1, [r4, #0]
 8017d42:	e7ed      	b.n	8017d20 <_free_r+0x20>
 8017d44:	461a      	mov	r2, r3
 8017d46:	685b      	ldr	r3, [r3, #4]
 8017d48:	b10b      	cbz	r3, 8017d4e <_free_r+0x4e>
 8017d4a:	42a3      	cmp	r3, r4
 8017d4c:	d9fa      	bls.n	8017d44 <_free_r+0x44>
 8017d4e:	6811      	ldr	r1, [r2, #0]
 8017d50:	1855      	adds	r5, r2, r1
 8017d52:	42a5      	cmp	r5, r4
 8017d54:	d10b      	bne.n	8017d6e <_free_r+0x6e>
 8017d56:	6824      	ldr	r4, [r4, #0]
 8017d58:	4421      	add	r1, r4
 8017d5a:	1854      	adds	r4, r2, r1
 8017d5c:	6011      	str	r1, [r2, #0]
 8017d5e:	42a3      	cmp	r3, r4
 8017d60:	d1e0      	bne.n	8017d24 <_free_r+0x24>
 8017d62:	681c      	ldr	r4, [r3, #0]
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	440c      	add	r4, r1
 8017d68:	6053      	str	r3, [r2, #4]
 8017d6a:	6014      	str	r4, [r2, #0]
 8017d6c:	e7da      	b.n	8017d24 <_free_r+0x24>
 8017d6e:	d902      	bls.n	8017d76 <_free_r+0x76>
 8017d70:	230c      	movs	r3, #12
 8017d72:	6003      	str	r3, [r0, #0]
 8017d74:	e7d6      	b.n	8017d24 <_free_r+0x24>
 8017d76:	6825      	ldr	r5, [r4, #0]
 8017d78:	1961      	adds	r1, r4, r5
 8017d7a:	428b      	cmp	r3, r1
 8017d7c:	bf02      	ittt	eq
 8017d7e:	6819      	ldreq	r1, [r3, #0]
 8017d80:	685b      	ldreq	r3, [r3, #4]
 8017d82:	1949      	addeq	r1, r1, r5
 8017d84:	6063      	str	r3, [r4, #4]
 8017d86:	bf08      	it	eq
 8017d88:	6021      	streq	r1, [r4, #0]
 8017d8a:	6054      	str	r4, [r2, #4]
 8017d8c:	e7ca      	b.n	8017d24 <_free_r+0x24>
 8017d8e:	b003      	add	sp, #12
 8017d90:	bd30      	pop	{r4, r5, pc}
 8017d92:	bf00      	nop
 8017d94:	200038b0 	.word	0x200038b0

08017d98 <_sungetc_r>:
 8017d98:	b538      	push	{r3, r4, r5, lr}
 8017d9a:	1c4b      	adds	r3, r1, #1
 8017d9c:	4614      	mov	r4, r2
 8017d9e:	d103      	bne.n	8017da8 <_sungetc_r+0x10>
 8017da0:	f04f 35ff 	mov.w	r5, #4294967295
 8017da4:	4628      	mov	r0, r5
 8017da6:	bd38      	pop	{r3, r4, r5, pc}
 8017da8:	8993      	ldrh	r3, [r2, #12]
 8017daa:	b2cd      	uxtb	r5, r1
 8017dac:	f023 0320 	bic.w	r3, r3, #32
 8017db0:	8193      	strh	r3, [r2, #12]
 8017db2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017db4:	6852      	ldr	r2, [r2, #4]
 8017db6:	b18b      	cbz	r3, 8017ddc <_sungetc_r+0x44>
 8017db8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017dba:	4293      	cmp	r3, r2
 8017dbc:	dd08      	ble.n	8017dd0 <_sungetc_r+0x38>
 8017dbe:	6823      	ldr	r3, [r4, #0]
 8017dc0:	1e5a      	subs	r2, r3, #1
 8017dc2:	6022      	str	r2, [r4, #0]
 8017dc4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017dc8:	6863      	ldr	r3, [r4, #4]
 8017dca:	3301      	adds	r3, #1
 8017dcc:	6063      	str	r3, [r4, #4]
 8017dce:	e7e9      	b.n	8017da4 <_sungetc_r+0xc>
 8017dd0:	4621      	mov	r1, r4
 8017dd2:	f000 fb38 	bl	8018446 <__submore>
 8017dd6:	2800      	cmp	r0, #0
 8017dd8:	d0f1      	beq.n	8017dbe <_sungetc_r+0x26>
 8017dda:	e7e1      	b.n	8017da0 <_sungetc_r+0x8>
 8017ddc:	6921      	ldr	r1, [r4, #16]
 8017dde:	6823      	ldr	r3, [r4, #0]
 8017de0:	b151      	cbz	r1, 8017df8 <_sungetc_r+0x60>
 8017de2:	4299      	cmp	r1, r3
 8017de4:	d208      	bcs.n	8017df8 <_sungetc_r+0x60>
 8017de6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017dea:	42a9      	cmp	r1, r5
 8017dec:	d104      	bne.n	8017df8 <_sungetc_r+0x60>
 8017dee:	3b01      	subs	r3, #1
 8017df0:	3201      	adds	r2, #1
 8017df2:	6023      	str	r3, [r4, #0]
 8017df4:	6062      	str	r2, [r4, #4]
 8017df6:	e7d5      	b.n	8017da4 <_sungetc_r+0xc>
 8017df8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e00:	6363      	str	r3, [r4, #52]	; 0x34
 8017e02:	2303      	movs	r3, #3
 8017e04:	63a3      	str	r3, [r4, #56]	; 0x38
 8017e06:	4623      	mov	r3, r4
 8017e08:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017e0c:	6023      	str	r3, [r4, #0]
 8017e0e:	2301      	movs	r3, #1
 8017e10:	e7dc      	b.n	8017dcc <_sungetc_r+0x34>

08017e12 <__ssrefill_r>:
 8017e12:	b510      	push	{r4, lr}
 8017e14:	460c      	mov	r4, r1
 8017e16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017e18:	b169      	cbz	r1, 8017e36 <__ssrefill_r+0x24>
 8017e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e1e:	4299      	cmp	r1, r3
 8017e20:	d001      	beq.n	8017e26 <__ssrefill_r+0x14>
 8017e22:	f7ff ff6d 	bl	8017d00 <_free_r>
 8017e26:	2000      	movs	r0, #0
 8017e28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017e2a:	6360      	str	r0, [r4, #52]	; 0x34
 8017e2c:	6063      	str	r3, [r4, #4]
 8017e2e:	b113      	cbz	r3, 8017e36 <__ssrefill_r+0x24>
 8017e30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017e32:	6023      	str	r3, [r4, #0]
 8017e34:	bd10      	pop	{r4, pc}
 8017e36:	6923      	ldr	r3, [r4, #16]
 8017e38:	f04f 30ff 	mov.w	r0, #4294967295
 8017e3c:	6023      	str	r3, [r4, #0]
 8017e3e:	2300      	movs	r3, #0
 8017e40:	6063      	str	r3, [r4, #4]
 8017e42:	89a3      	ldrh	r3, [r4, #12]
 8017e44:	f043 0320 	orr.w	r3, r3, #32
 8017e48:	81a3      	strh	r3, [r4, #12]
 8017e4a:	e7f3      	b.n	8017e34 <__ssrefill_r+0x22>

08017e4c <__ssvfiscanf_r>:
 8017e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e50:	460c      	mov	r4, r1
 8017e52:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017e56:	2100      	movs	r1, #0
 8017e58:	4606      	mov	r6, r0
 8017e5a:	f10d 0804 	add.w	r8, sp, #4
 8017e5e:	4fa6      	ldr	r7, [pc, #664]	; (80180f8 <__ssvfiscanf_r+0x2ac>)
 8017e60:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8018104 <__ssvfiscanf_r+0x2b8>
 8017e64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017e68:	9300      	str	r3, [sp, #0]
 8017e6a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017e6e:	49a3      	ldr	r1, [pc, #652]	; (80180fc <__ssvfiscanf_r+0x2b0>)
 8017e70:	91a0      	str	r1, [sp, #640]	; 0x280
 8017e72:	49a3      	ldr	r1, [pc, #652]	; (8018100 <__ssvfiscanf_r+0x2b4>)
 8017e74:	91a1      	str	r1, [sp, #644]	; 0x284
 8017e76:	7813      	ldrb	r3, [r2, #0]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	f000 815a 	beq.w	8018132 <__ssvfiscanf_r+0x2e6>
 8017e7e:	5cf9      	ldrb	r1, [r7, r3]
 8017e80:	1c55      	adds	r5, r2, #1
 8017e82:	f011 0108 	ands.w	r1, r1, #8
 8017e86:	d019      	beq.n	8017ebc <__ssvfiscanf_r+0x70>
 8017e88:	6863      	ldr	r3, [r4, #4]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	dd0f      	ble.n	8017eae <__ssvfiscanf_r+0x62>
 8017e8e:	6823      	ldr	r3, [r4, #0]
 8017e90:	781a      	ldrb	r2, [r3, #0]
 8017e92:	5cba      	ldrb	r2, [r7, r2]
 8017e94:	0712      	lsls	r2, r2, #28
 8017e96:	d401      	bmi.n	8017e9c <__ssvfiscanf_r+0x50>
 8017e98:	462a      	mov	r2, r5
 8017e9a:	e7ec      	b.n	8017e76 <__ssvfiscanf_r+0x2a>
 8017e9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017e9e:	3301      	adds	r3, #1
 8017ea0:	3201      	adds	r2, #1
 8017ea2:	6023      	str	r3, [r4, #0]
 8017ea4:	9245      	str	r2, [sp, #276]	; 0x114
 8017ea6:	6862      	ldr	r2, [r4, #4]
 8017ea8:	3a01      	subs	r2, #1
 8017eaa:	6062      	str	r2, [r4, #4]
 8017eac:	e7ec      	b.n	8017e88 <__ssvfiscanf_r+0x3c>
 8017eae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017eb0:	4621      	mov	r1, r4
 8017eb2:	4630      	mov	r0, r6
 8017eb4:	4798      	blx	r3
 8017eb6:	2800      	cmp	r0, #0
 8017eb8:	d0e9      	beq.n	8017e8e <__ssvfiscanf_r+0x42>
 8017eba:	e7ed      	b.n	8017e98 <__ssvfiscanf_r+0x4c>
 8017ebc:	2b25      	cmp	r3, #37	; 0x25
 8017ebe:	d012      	beq.n	8017ee6 <__ssvfiscanf_r+0x9a>
 8017ec0:	469a      	mov	sl, r3
 8017ec2:	6863      	ldr	r3, [r4, #4]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	f340 8092 	ble.w	8017fee <__ssvfiscanf_r+0x1a2>
 8017eca:	6822      	ldr	r2, [r4, #0]
 8017ecc:	7813      	ldrb	r3, [r2, #0]
 8017ece:	4553      	cmp	r3, sl
 8017ed0:	f040 812f 	bne.w	8018132 <__ssvfiscanf_r+0x2e6>
 8017ed4:	6863      	ldr	r3, [r4, #4]
 8017ed6:	3201      	adds	r2, #1
 8017ed8:	3b01      	subs	r3, #1
 8017eda:	6022      	str	r2, [r4, #0]
 8017edc:	6063      	str	r3, [r4, #4]
 8017ede:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017ee0:	3301      	adds	r3, #1
 8017ee2:	9345      	str	r3, [sp, #276]	; 0x114
 8017ee4:	e7d8      	b.n	8017e98 <__ssvfiscanf_r+0x4c>
 8017ee6:	9141      	str	r1, [sp, #260]	; 0x104
 8017ee8:	9143      	str	r1, [sp, #268]	; 0x10c
 8017eea:	7853      	ldrb	r3, [r2, #1]
 8017eec:	2b2a      	cmp	r3, #42	; 0x2a
 8017eee:	bf04      	itt	eq
 8017ef0:	2310      	moveq	r3, #16
 8017ef2:	1c95      	addeq	r5, r2, #2
 8017ef4:	f04f 020a 	mov.w	r2, #10
 8017ef8:	bf08      	it	eq
 8017efa:	9341      	streq	r3, [sp, #260]	; 0x104
 8017efc:	46aa      	mov	sl, r5
 8017efe:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017f02:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017f06:	2b09      	cmp	r3, #9
 8017f08:	d91c      	bls.n	8017f44 <__ssvfiscanf_r+0xf8>
 8017f0a:	2203      	movs	r2, #3
 8017f0c:	487d      	ldr	r0, [pc, #500]	; (8018104 <__ssvfiscanf_r+0x2b8>)
 8017f0e:	f000 fad1 	bl	80184b4 <memchr>
 8017f12:	b138      	cbz	r0, 8017f24 <__ssvfiscanf_r+0xd8>
 8017f14:	eba0 0009 	sub.w	r0, r0, r9
 8017f18:	2301      	movs	r3, #1
 8017f1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017f1c:	4655      	mov	r5, sl
 8017f1e:	4083      	lsls	r3, r0
 8017f20:	4313      	orrs	r3, r2
 8017f22:	9341      	str	r3, [sp, #260]	; 0x104
 8017f24:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017f28:	2b78      	cmp	r3, #120	; 0x78
 8017f2a:	d806      	bhi.n	8017f3a <__ssvfiscanf_r+0xee>
 8017f2c:	2b57      	cmp	r3, #87	; 0x57
 8017f2e:	d810      	bhi.n	8017f52 <__ssvfiscanf_r+0x106>
 8017f30:	2b25      	cmp	r3, #37	; 0x25
 8017f32:	d0c5      	beq.n	8017ec0 <__ssvfiscanf_r+0x74>
 8017f34:	d856      	bhi.n	8017fe4 <__ssvfiscanf_r+0x198>
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d064      	beq.n	8018004 <__ssvfiscanf_r+0x1b8>
 8017f3a:	2303      	movs	r3, #3
 8017f3c:	9347      	str	r3, [sp, #284]	; 0x11c
 8017f3e:	230a      	movs	r3, #10
 8017f40:	9342      	str	r3, [sp, #264]	; 0x108
 8017f42:	e075      	b.n	8018030 <__ssvfiscanf_r+0x1e4>
 8017f44:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017f46:	4655      	mov	r5, sl
 8017f48:	fb02 1103 	mla	r1, r2, r3, r1
 8017f4c:	3930      	subs	r1, #48	; 0x30
 8017f4e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017f50:	e7d4      	b.n	8017efc <__ssvfiscanf_r+0xb0>
 8017f52:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017f56:	2a20      	cmp	r2, #32
 8017f58:	d8ef      	bhi.n	8017f3a <__ssvfiscanf_r+0xee>
 8017f5a:	a101      	add	r1, pc, #4	; (adr r1, 8017f60 <__ssvfiscanf_r+0x114>)
 8017f5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017f60:	08018013 	.word	0x08018013
 8017f64:	08017f3b 	.word	0x08017f3b
 8017f68:	08017f3b 	.word	0x08017f3b
 8017f6c:	08018071 	.word	0x08018071
 8017f70:	08017f3b 	.word	0x08017f3b
 8017f74:	08017f3b 	.word	0x08017f3b
 8017f78:	08017f3b 	.word	0x08017f3b
 8017f7c:	08017f3b 	.word	0x08017f3b
 8017f80:	08017f3b 	.word	0x08017f3b
 8017f84:	08017f3b 	.word	0x08017f3b
 8017f88:	08017f3b 	.word	0x08017f3b
 8017f8c:	08018087 	.word	0x08018087
 8017f90:	0801806d 	.word	0x0801806d
 8017f94:	08017feb 	.word	0x08017feb
 8017f98:	08017feb 	.word	0x08017feb
 8017f9c:	08017feb 	.word	0x08017feb
 8017fa0:	08017f3b 	.word	0x08017f3b
 8017fa4:	08018029 	.word	0x08018029
 8017fa8:	08017f3b 	.word	0x08017f3b
 8017fac:	08017f3b 	.word	0x08017f3b
 8017fb0:	08017f3b 	.word	0x08017f3b
 8017fb4:	08017f3b 	.word	0x08017f3b
 8017fb8:	08018097 	.word	0x08018097
 8017fbc:	08018065 	.word	0x08018065
 8017fc0:	0801800b 	.word	0x0801800b
 8017fc4:	08017f3b 	.word	0x08017f3b
 8017fc8:	08017f3b 	.word	0x08017f3b
 8017fcc:	08018093 	.word	0x08018093
 8017fd0:	08017f3b 	.word	0x08017f3b
 8017fd4:	0801806d 	.word	0x0801806d
 8017fd8:	08017f3b 	.word	0x08017f3b
 8017fdc:	08017f3b 	.word	0x08017f3b
 8017fe0:	08018013 	.word	0x08018013
 8017fe4:	3b45      	subs	r3, #69	; 0x45
 8017fe6:	2b02      	cmp	r3, #2
 8017fe8:	d8a7      	bhi.n	8017f3a <__ssvfiscanf_r+0xee>
 8017fea:	2305      	movs	r3, #5
 8017fec:	e01f      	b.n	801802e <__ssvfiscanf_r+0x1e2>
 8017fee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017ff0:	4621      	mov	r1, r4
 8017ff2:	4630      	mov	r0, r6
 8017ff4:	4798      	blx	r3
 8017ff6:	2800      	cmp	r0, #0
 8017ff8:	f43f af67 	beq.w	8017eca <__ssvfiscanf_r+0x7e>
 8017ffc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017ffe:	2800      	cmp	r0, #0
 8018000:	f040 808d 	bne.w	801811e <__ssvfiscanf_r+0x2d2>
 8018004:	f04f 30ff 	mov.w	r0, #4294967295
 8018008:	e08f      	b.n	801812a <__ssvfiscanf_r+0x2de>
 801800a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801800c:	f042 0220 	orr.w	r2, r2, #32
 8018010:	9241      	str	r2, [sp, #260]	; 0x104
 8018012:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018018:	9241      	str	r2, [sp, #260]	; 0x104
 801801a:	2210      	movs	r2, #16
 801801c:	2b6f      	cmp	r3, #111	; 0x6f
 801801e:	9242      	str	r2, [sp, #264]	; 0x108
 8018020:	bf34      	ite	cc
 8018022:	2303      	movcc	r3, #3
 8018024:	2304      	movcs	r3, #4
 8018026:	e002      	b.n	801802e <__ssvfiscanf_r+0x1e2>
 8018028:	2300      	movs	r3, #0
 801802a:	9342      	str	r3, [sp, #264]	; 0x108
 801802c:	2303      	movs	r3, #3
 801802e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018030:	6863      	ldr	r3, [r4, #4]
 8018032:	2b00      	cmp	r3, #0
 8018034:	dd3e      	ble.n	80180b4 <__ssvfiscanf_r+0x268>
 8018036:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018038:	0659      	lsls	r1, r3, #25
 801803a:	d404      	bmi.n	8018046 <__ssvfiscanf_r+0x1fa>
 801803c:	6823      	ldr	r3, [r4, #0]
 801803e:	781a      	ldrb	r2, [r3, #0]
 8018040:	5cba      	ldrb	r2, [r7, r2]
 8018042:	0712      	lsls	r2, r2, #28
 8018044:	d43d      	bmi.n	80180c2 <__ssvfiscanf_r+0x276>
 8018046:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018048:	2b02      	cmp	r3, #2
 801804a:	dc4c      	bgt.n	80180e6 <__ssvfiscanf_r+0x29a>
 801804c:	466b      	mov	r3, sp
 801804e:	4622      	mov	r2, r4
 8018050:	a941      	add	r1, sp, #260	; 0x104
 8018052:	4630      	mov	r0, r6
 8018054:	f000 f872 	bl	801813c <_scanf_chars>
 8018058:	2801      	cmp	r0, #1
 801805a:	d06a      	beq.n	8018132 <__ssvfiscanf_r+0x2e6>
 801805c:	2802      	cmp	r0, #2
 801805e:	f47f af1b 	bne.w	8017e98 <__ssvfiscanf_r+0x4c>
 8018062:	e7cb      	b.n	8017ffc <__ssvfiscanf_r+0x1b0>
 8018064:	2308      	movs	r3, #8
 8018066:	9342      	str	r3, [sp, #264]	; 0x108
 8018068:	2304      	movs	r3, #4
 801806a:	e7e0      	b.n	801802e <__ssvfiscanf_r+0x1e2>
 801806c:	220a      	movs	r2, #10
 801806e:	e7d5      	b.n	801801c <__ssvfiscanf_r+0x1d0>
 8018070:	4629      	mov	r1, r5
 8018072:	4640      	mov	r0, r8
 8018074:	f000 f9ae 	bl	80183d4 <__sccl>
 8018078:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801807a:	4605      	mov	r5, r0
 801807c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018080:	9341      	str	r3, [sp, #260]	; 0x104
 8018082:	2301      	movs	r3, #1
 8018084:	e7d3      	b.n	801802e <__ssvfiscanf_r+0x1e2>
 8018086:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801808c:	9341      	str	r3, [sp, #260]	; 0x104
 801808e:	2300      	movs	r3, #0
 8018090:	e7cd      	b.n	801802e <__ssvfiscanf_r+0x1e2>
 8018092:	2302      	movs	r3, #2
 8018094:	e7cb      	b.n	801802e <__ssvfiscanf_r+0x1e2>
 8018096:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018098:	06c3      	lsls	r3, r0, #27
 801809a:	f53f aefd 	bmi.w	8017e98 <__ssvfiscanf_r+0x4c>
 801809e:	9b00      	ldr	r3, [sp, #0]
 80180a0:	07c0      	lsls	r0, r0, #31
 80180a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80180a4:	f103 0104 	add.w	r1, r3, #4
 80180a8:	9100      	str	r1, [sp, #0]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	bf4c      	ite	mi
 80180ae:	801a      	strhmi	r2, [r3, #0]
 80180b0:	601a      	strpl	r2, [r3, #0]
 80180b2:	e6f1      	b.n	8017e98 <__ssvfiscanf_r+0x4c>
 80180b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80180b6:	4621      	mov	r1, r4
 80180b8:	4630      	mov	r0, r6
 80180ba:	4798      	blx	r3
 80180bc:	2800      	cmp	r0, #0
 80180be:	d0ba      	beq.n	8018036 <__ssvfiscanf_r+0x1ea>
 80180c0:	e79c      	b.n	8017ffc <__ssvfiscanf_r+0x1b0>
 80180c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80180c4:	3201      	adds	r2, #1
 80180c6:	9245      	str	r2, [sp, #276]	; 0x114
 80180c8:	6862      	ldr	r2, [r4, #4]
 80180ca:	3a01      	subs	r2, #1
 80180cc:	2a00      	cmp	r2, #0
 80180ce:	6062      	str	r2, [r4, #4]
 80180d0:	dd02      	ble.n	80180d8 <__ssvfiscanf_r+0x28c>
 80180d2:	3301      	adds	r3, #1
 80180d4:	6023      	str	r3, [r4, #0]
 80180d6:	e7b1      	b.n	801803c <__ssvfiscanf_r+0x1f0>
 80180d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80180da:	4621      	mov	r1, r4
 80180dc:	4630      	mov	r0, r6
 80180de:	4798      	blx	r3
 80180e0:	2800      	cmp	r0, #0
 80180e2:	d0ab      	beq.n	801803c <__ssvfiscanf_r+0x1f0>
 80180e4:	e78a      	b.n	8017ffc <__ssvfiscanf_r+0x1b0>
 80180e6:	2b04      	cmp	r3, #4
 80180e8:	dc0e      	bgt.n	8018108 <__ssvfiscanf_r+0x2bc>
 80180ea:	466b      	mov	r3, sp
 80180ec:	4622      	mov	r2, r4
 80180ee:	a941      	add	r1, sp, #260	; 0x104
 80180f0:	4630      	mov	r0, r6
 80180f2:	f000 f87d 	bl	80181f0 <_scanf_i>
 80180f6:	e7af      	b.n	8018058 <__ssvfiscanf_r+0x20c>
 80180f8:	080189f0 	.word	0x080189f0
 80180fc:	08017d99 	.word	0x08017d99
 8018100:	08017e13 	.word	0x08017e13
 8018104:	080189d0 	.word	0x080189d0
 8018108:	4b0b      	ldr	r3, [pc, #44]	; (8018138 <__ssvfiscanf_r+0x2ec>)
 801810a:	2b00      	cmp	r3, #0
 801810c:	f43f aec4 	beq.w	8017e98 <__ssvfiscanf_r+0x4c>
 8018110:	466b      	mov	r3, sp
 8018112:	4622      	mov	r2, r4
 8018114:	a941      	add	r1, sp, #260	; 0x104
 8018116:	4630      	mov	r0, r6
 8018118:	f3af 8000 	nop.w
 801811c:	e79c      	b.n	8018058 <__ssvfiscanf_r+0x20c>
 801811e:	89a3      	ldrh	r3, [r4, #12]
 8018120:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018124:	bf18      	it	ne
 8018126:	f04f 30ff 	movne.w	r0, #4294967295
 801812a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801812e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018132:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018134:	e7f9      	b.n	801812a <__ssvfiscanf_r+0x2de>
 8018136:	bf00      	nop
 8018138:	00000000 	.word	0x00000000

0801813c <_scanf_chars>:
 801813c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018140:	4615      	mov	r5, r2
 8018142:	688a      	ldr	r2, [r1, #8]
 8018144:	4680      	mov	r8, r0
 8018146:	460c      	mov	r4, r1
 8018148:	b932      	cbnz	r2, 8018158 <_scanf_chars+0x1c>
 801814a:	698a      	ldr	r2, [r1, #24]
 801814c:	2a00      	cmp	r2, #0
 801814e:	bf0c      	ite	eq
 8018150:	2201      	moveq	r2, #1
 8018152:	f04f 32ff 	movne.w	r2, #4294967295
 8018156:	608a      	str	r2, [r1, #8]
 8018158:	6822      	ldr	r2, [r4, #0]
 801815a:	2700      	movs	r7, #0
 801815c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80181ec <_scanf_chars+0xb0>
 8018160:	06d1      	lsls	r1, r2, #27
 8018162:	bf5f      	itttt	pl
 8018164:	681a      	ldrpl	r2, [r3, #0]
 8018166:	1d11      	addpl	r1, r2, #4
 8018168:	6019      	strpl	r1, [r3, #0]
 801816a:	6816      	ldrpl	r6, [r2, #0]
 801816c:	69a0      	ldr	r0, [r4, #24]
 801816e:	b188      	cbz	r0, 8018194 <_scanf_chars+0x58>
 8018170:	2801      	cmp	r0, #1
 8018172:	d107      	bne.n	8018184 <_scanf_chars+0x48>
 8018174:	682a      	ldr	r2, [r5, #0]
 8018176:	7811      	ldrb	r1, [r2, #0]
 8018178:	6962      	ldr	r2, [r4, #20]
 801817a:	5c52      	ldrb	r2, [r2, r1]
 801817c:	b952      	cbnz	r2, 8018194 <_scanf_chars+0x58>
 801817e:	2f00      	cmp	r7, #0
 8018180:	d031      	beq.n	80181e6 <_scanf_chars+0xaa>
 8018182:	e022      	b.n	80181ca <_scanf_chars+0x8e>
 8018184:	2802      	cmp	r0, #2
 8018186:	d120      	bne.n	80181ca <_scanf_chars+0x8e>
 8018188:	682b      	ldr	r3, [r5, #0]
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018190:	071b      	lsls	r3, r3, #28
 8018192:	d41a      	bmi.n	80181ca <_scanf_chars+0x8e>
 8018194:	6823      	ldr	r3, [r4, #0]
 8018196:	3701      	adds	r7, #1
 8018198:	06da      	lsls	r2, r3, #27
 801819a:	bf5e      	ittt	pl
 801819c:	682b      	ldrpl	r3, [r5, #0]
 801819e:	781b      	ldrbpl	r3, [r3, #0]
 80181a0:	f806 3b01 	strbpl.w	r3, [r6], #1
 80181a4:	682a      	ldr	r2, [r5, #0]
 80181a6:	686b      	ldr	r3, [r5, #4]
 80181a8:	3201      	adds	r2, #1
 80181aa:	3b01      	subs	r3, #1
 80181ac:	602a      	str	r2, [r5, #0]
 80181ae:	68a2      	ldr	r2, [r4, #8]
 80181b0:	606b      	str	r3, [r5, #4]
 80181b2:	3a01      	subs	r2, #1
 80181b4:	60a2      	str	r2, [r4, #8]
 80181b6:	b142      	cbz	r2, 80181ca <_scanf_chars+0x8e>
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	dcd7      	bgt.n	801816c <_scanf_chars+0x30>
 80181bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80181c0:	4629      	mov	r1, r5
 80181c2:	4640      	mov	r0, r8
 80181c4:	4798      	blx	r3
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d0d0      	beq.n	801816c <_scanf_chars+0x30>
 80181ca:	6823      	ldr	r3, [r4, #0]
 80181cc:	f013 0310 	ands.w	r3, r3, #16
 80181d0:	d105      	bne.n	80181de <_scanf_chars+0xa2>
 80181d2:	68e2      	ldr	r2, [r4, #12]
 80181d4:	3201      	adds	r2, #1
 80181d6:	60e2      	str	r2, [r4, #12]
 80181d8:	69a2      	ldr	r2, [r4, #24]
 80181da:	b102      	cbz	r2, 80181de <_scanf_chars+0xa2>
 80181dc:	7033      	strb	r3, [r6, #0]
 80181de:	6923      	ldr	r3, [r4, #16]
 80181e0:	2000      	movs	r0, #0
 80181e2:	443b      	add	r3, r7
 80181e4:	6123      	str	r3, [r4, #16]
 80181e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181ea:	bf00      	nop
 80181ec:	080189f0 	.word	0x080189f0

080181f0 <_scanf_i>:
 80181f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181f4:	4698      	mov	r8, r3
 80181f6:	b087      	sub	sp, #28
 80181f8:	4b72      	ldr	r3, [pc, #456]	; (80183c4 <_scanf_i+0x1d4>)
 80181fa:	460c      	mov	r4, r1
 80181fc:	4682      	mov	sl, r0
 80181fe:	4616      	mov	r6, r2
 8018200:	4627      	mov	r7, r4
 8018202:	f04f 0b00 	mov.w	fp, #0
 8018206:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801820a:	ab03      	add	r3, sp, #12
 801820c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018210:	4b6d      	ldr	r3, [pc, #436]	; (80183c8 <_scanf_i+0x1d8>)
 8018212:	69a1      	ldr	r1, [r4, #24]
 8018214:	4a6d      	ldr	r2, [pc, #436]	; (80183cc <_scanf_i+0x1dc>)
 8018216:	2903      	cmp	r1, #3
 8018218:	bf18      	it	ne
 801821a:	461a      	movne	r2, r3
 801821c:	68a3      	ldr	r3, [r4, #8]
 801821e:	9201      	str	r2, [sp, #4]
 8018220:	1e5a      	subs	r2, r3, #1
 8018222:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018226:	bf89      	itett	hi
 8018228:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801822c:	f04f 0900 	movls.w	r9, #0
 8018230:	eb03 0905 	addhi.w	r9, r3, r5
 8018234:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018238:	bf88      	it	hi
 801823a:	60a3      	strhi	r3, [r4, #8]
 801823c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018240:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018244:	463d      	mov	r5, r7
 8018246:	6023      	str	r3, [r4, #0]
 8018248:	6831      	ldr	r1, [r6, #0]
 801824a:	ab03      	add	r3, sp, #12
 801824c:	2202      	movs	r2, #2
 801824e:	7809      	ldrb	r1, [r1, #0]
 8018250:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018254:	f000 f92e 	bl	80184b4 <memchr>
 8018258:	b328      	cbz	r0, 80182a6 <_scanf_i+0xb6>
 801825a:	f1bb 0f01 	cmp.w	fp, #1
 801825e:	d159      	bne.n	8018314 <_scanf_i+0x124>
 8018260:	6862      	ldr	r2, [r4, #4]
 8018262:	b92a      	cbnz	r2, 8018270 <_scanf_i+0x80>
 8018264:	6822      	ldr	r2, [r4, #0]
 8018266:	2308      	movs	r3, #8
 8018268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801826c:	6063      	str	r3, [r4, #4]
 801826e:	6022      	str	r2, [r4, #0]
 8018270:	6822      	ldr	r2, [r4, #0]
 8018272:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018276:	6022      	str	r2, [r4, #0]
 8018278:	68a2      	ldr	r2, [r4, #8]
 801827a:	1e51      	subs	r1, r2, #1
 801827c:	60a1      	str	r1, [r4, #8]
 801827e:	b192      	cbz	r2, 80182a6 <_scanf_i+0xb6>
 8018280:	6832      	ldr	r2, [r6, #0]
 8018282:	1c51      	adds	r1, r2, #1
 8018284:	6031      	str	r1, [r6, #0]
 8018286:	7812      	ldrb	r2, [r2, #0]
 8018288:	f805 2b01 	strb.w	r2, [r5], #1
 801828c:	6872      	ldr	r2, [r6, #4]
 801828e:	3a01      	subs	r2, #1
 8018290:	2a00      	cmp	r2, #0
 8018292:	6072      	str	r2, [r6, #4]
 8018294:	dc07      	bgt.n	80182a6 <_scanf_i+0xb6>
 8018296:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801829a:	4631      	mov	r1, r6
 801829c:	4650      	mov	r0, sl
 801829e:	4790      	blx	r2
 80182a0:	2800      	cmp	r0, #0
 80182a2:	f040 8085 	bne.w	80183b0 <_scanf_i+0x1c0>
 80182a6:	f10b 0b01 	add.w	fp, fp, #1
 80182aa:	f1bb 0f03 	cmp.w	fp, #3
 80182ae:	d1cb      	bne.n	8018248 <_scanf_i+0x58>
 80182b0:	6863      	ldr	r3, [r4, #4]
 80182b2:	b90b      	cbnz	r3, 80182b8 <_scanf_i+0xc8>
 80182b4:	230a      	movs	r3, #10
 80182b6:	6063      	str	r3, [r4, #4]
 80182b8:	6863      	ldr	r3, [r4, #4]
 80182ba:	f04f 0b00 	mov.w	fp, #0
 80182be:	4944      	ldr	r1, [pc, #272]	; (80183d0 <_scanf_i+0x1e0>)
 80182c0:	6960      	ldr	r0, [r4, #20]
 80182c2:	1ac9      	subs	r1, r1, r3
 80182c4:	f000 f886 	bl	80183d4 <__sccl>
 80182c8:	68a3      	ldr	r3, [r4, #8]
 80182ca:	6822      	ldr	r2, [r4, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d03d      	beq.n	801834c <_scanf_i+0x15c>
 80182d0:	6831      	ldr	r1, [r6, #0]
 80182d2:	6960      	ldr	r0, [r4, #20]
 80182d4:	f891 c000 	ldrb.w	ip, [r1]
 80182d8:	f810 000c 	ldrb.w	r0, [r0, ip]
 80182dc:	2800      	cmp	r0, #0
 80182de:	d035      	beq.n	801834c <_scanf_i+0x15c>
 80182e0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80182e4:	d124      	bne.n	8018330 <_scanf_i+0x140>
 80182e6:	0510      	lsls	r0, r2, #20
 80182e8:	d522      	bpl.n	8018330 <_scanf_i+0x140>
 80182ea:	f10b 0b01 	add.w	fp, fp, #1
 80182ee:	f1b9 0f00 	cmp.w	r9, #0
 80182f2:	d003      	beq.n	80182fc <_scanf_i+0x10c>
 80182f4:	3301      	adds	r3, #1
 80182f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80182fa:	60a3      	str	r3, [r4, #8]
 80182fc:	6873      	ldr	r3, [r6, #4]
 80182fe:	3b01      	subs	r3, #1
 8018300:	2b00      	cmp	r3, #0
 8018302:	6073      	str	r3, [r6, #4]
 8018304:	dd1b      	ble.n	801833e <_scanf_i+0x14e>
 8018306:	6833      	ldr	r3, [r6, #0]
 8018308:	3301      	adds	r3, #1
 801830a:	6033      	str	r3, [r6, #0]
 801830c:	68a3      	ldr	r3, [r4, #8]
 801830e:	3b01      	subs	r3, #1
 8018310:	60a3      	str	r3, [r4, #8]
 8018312:	e7d9      	b.n	80182c8 <_scanf_i+0xd8>
 8018314:	f1bb 0f02 	cmp.w	fp, #2
 8018318:	d1ae      	bne.n	8018278 <_scanf_i+0x88>
 801831a:	6822      	ldr	r2, [r4, #0]
 801831c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018320:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018324:	d1bf      	bne.n	80182a6 <_scanf_i+0xb6>
 8018326:	2310      	movs	r3, #16
 8018328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801832c:	6063      	str	r3, [r4, #4]
 801832e:	e7a2      	b.n	8018276 <_scanf_i+0x86>
 8018330:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018334:	6022      	str	r2, [r4, #0]
 8018336:	780b      	ldrb	r3, [r1, #0]
 8018338:	f805 3b01 	strb.w	r3, [r5], #1
 801833c:	e7de      	b.n	80182fc <_scanf_i+0x10c>
 801833e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018342:	4631      	mov	r1, r6
 8018344:	4650      	mov	r0, sl
 8018346:	4798      	blx	r3
 8018348:	2800      	cmp	r0, #0
 801834a:	d0df      	beq.n	801830c <_scanf_i+0x11c>
 801834c:	6823      	ldr	r3, [r4, #0]
 801834e:	05d9      	lsls	r1, r3, #23
 8018350:	d50d      	bpl.n	801836e <_scanf_i+0x17e>
 8018352:	42bd      	cmp	r5, r7
 8018354:	d909      	bls.n	801836a <_scanf_i+0x17a>
 8018356:	f105 39ff 	add.w	r9, r5, #4294967295
 801835a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801835e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018362:	4632      	mov	r2, r6
 8018364:	464d      	mov	r5, r9
 8018366:	4650      	mov	r0, sl
 8018368:	4798      	blx	r3
 801836a:	42bd      	cmp	r5, r7
 801836c:	d028      	beq.n	80183c0 <_scanf_i+0x1d0>
 801836e:	6822      	ldr	r2, [r4, #0]
 8018370:	f012 0210 	ands.w	r2, r2, #16
 8018374:	d113      	bne.n	801839e <_scanf_i+0x1ae>
 8018376:	702a      	strb	r2, [r5, #0]
 8018378:	4639      	mov	r1, r7
 801837a:	6863      	ldr	r3, [r4, #4]
 801837c:	4650      	mov	r0, sl
 801837e:	9e01      	ldr	r6, [sp, #4]
 8018380:	47b0      	blx	r6
 8018382:	f8d8 3000 	ldr.w	r3, [r8]
 8018386:	6821      	ldr	r1, [r4, #0]
 8018388:	1d1a      	adds	r2, r3, #4
 801838a:	f011 0f20 	tst.w	r1, #32
 801838e:	f8c8 2000 	str.w	r2, [r8]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	d00f      	beq.n	80183b6 <_scanf_i+0x1c6>
 8018396:	6018      	str	r0, [r3, #0]
 8018398:	68e3      	ldr	r3, [r4, #12]
 801839a:	3301      	adds	r3, #1
 801839c:	60e3      	str	r3, [r4, #12]
 801839e:	1bed      	subs	r5, r5, r7
 80183a0:	6923      	ldr	r3, [r4, #16]
 80183a2:	2000      	movs	r0, #0
 80183a4:	445d      	add	r5, fp
 80183a6:	442b      	add	r3, r5
 80183a8:	6123      	str	r3, [r4, #16]
 80183aa:	b007      	add	sp, #28
 80183ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183b0:	f04f 0b00 	mov.w	fp, #0
 80183b4:	e7ca      	b.n	801834c <_scanf_i+0x15c>
 80183b6:	07ca      	lsls	r2, r1, #31
 80183b8:	bf4c      	ite	mi
 80183ba:	8018      	strhmi	r0, [r3, #0]
 80183bc:	6018      	strpl	r0, [r3, #0]
 80183be:	e7eb      	b.n	8018398 <_scanf_i+0x1a8>
 80183c0:	2001      	movs	r0, #1
 80183c2:	e7f2      	b.n	80183aa <_scanf_i+0x1ba>
 80183c4:	08018870 	.word	0x08018870
 80183c8:	0801871d 	.word	0x0801871d
 80183cc:	08018635 	.word	0x08018635
 80183d0:	080189e4 	.word	0x080189e4

080183d4 <__sccl>:
 80183d4:	b570      	push	{r4, r5, r6, lr}
 80183d6:	780b      	ldrb	r3, [r1, #0]
 80183d8:	4604      	mov	r4, r0
 80183da:	3801      	subs	r0, #1
 80183dc:	2b5e      	cmp	r3, #94	; 0x5e
 80183de:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80183e2:	bf13      	iteet	ne
 80183e4:	1c4a      	addne	r2, r1, #1
 80183e6:	1c8a      	addeq	r2, r1, #2
 80183e8:	784b      	ldrbeq	r3, [r1, #1]
 80183ea:	2100      	movne	r1, #0
 80183ec:	bf08      	it	eq
 80183ee:	2101      	moveq	r1, #1
 80183f0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80183f4:	42a8      	cmp	r0, r5
 80183f6:	d1fb      	bne.n	80183f0 <__sccl+0x1c>
 80183f8:	b90b      	cbnz	r3, 80183fe <__sccl+0x2a>
 80183fa:	1e50      	subs	r0, r2, #1
 80183fc:	bd70      	pop	{r4, r5, r6, pc}
 80183fe:	f081 0101 	eor.w	r1, r1, #1
 8018402:	4610      	mov	r0, r2
 8018404:	54e1      	strb	r1, [r4, r3]
 8018406:	4602      	mov	r2, r0
 8018408:	f812 5b01 	ldrb.w	r5, [r2], #1
 801840c:	2d2d      	cmp	r5, #45	; 0x2d
 801840e:	d005      	beq.n	801841c <__sccl+0x48>
 8018410:	2d5d      	cmp	r5, #93	; 0x5d
 8018412:	d016      	beq.n	8018442 <__sccl+0x6e>
 8018414:	2d00      	cmp	r5, #0
 8018416:	d0f1      	beq.n	80183fc <__sccl+0x28>
 8018418:	462b      	mov	r3, r5
 801841a:	e7f2      	b.n	8018402 <__sccl+0x2e>
 801841c:	7846      	ldrb	r6, [r0, #1]
 801841e:	2e5d      	cmp	r6, #93	; 0x5d
 8018420:	d0fa      	beq.n	8018418 <__sccl+0x44>
 8018422:	42b3      	cmp	r3, r6
 8018424:	dcf8      	bgt.n	8018418 <__sccl+0x44>
 8018426:	3002      	adds	r0, #2
 8018428:	461a      	mov	r2, r3
 801842a:	3201      	adds	r2, #1
 801842c:	4296      	cmp	r6, r2
 801842e:	54a1      	strb	r1, [r4, r2]
 8018430:	dcfb      	bgt.n	801842a <__sccl+0x56>
 8018432:	1af2      	subs	r2, r6, r3
 8018434:	1c5d      	adds	r5, r3, #1
 8018436:	3a01      	subs	r2, #1
 8018438:	42b3      	cmp	r3, r6
 801843a:	bfa8      	it	ge
 801843c:	2200      	movge	r2, #0
 801843e:	18ab      	adds	r3, r5, r2
 8018440:	e7e1      	b.n	8018406 <__sccl+0x32>
 8018442:	4610      	mov	r0, r2
 8018444:	e7da      	b.n	80183fc <__sccl+0x28>

08018446 <__submore>:
 8018446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801844a:	460c      	mov	r4, r1
 801844c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801844e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018452:	4299      	cmp	r1, r3
 8018454:	d11a      	bne.n	801848c <__submore+0x46>
 8018456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801845a:	f7ff fae7 	bl	8017a2c <_malloc_r>
 801845e:	b918      	cbnz	r0, 8018468 <__submore+0x22>
 8018460:	f04f 30ff 	mov.w	r0, #4294967295
 8018464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801846c:	6360      	str	r0, [r4, #52]	; 0x34
 801846e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018472:	63a3      	str	r3, [r4, #56]	; 0x38
 8018474:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018478:	7083      	strb	r3, [r0, #2]
 801847a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801847e:	7043      	strb	r3, [r0, #1]
 8018480:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018484:	7003      	strb	r3, [r0, #0]
 8018486:	6020      	str	r0, [r4, #0]
 8018488:	2000      	movs	r0, #0
 801848a:	e7eb      	b.n	8018464 <__submore+0x1e>
 801848c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801848e:	0077      	lsls	r7, r6, #1
 8018490:	463a      	mov	r2, r7
 8018492:	f000 f81d 	bl	80184d0 <_realloc_r>
 8018496:	4605      	mov	r5, r0
 8018498:	2800      	cmp	r0, #0
 801849a:	d0e1      	beq.n	8018460 <__submore+0x1a>
 801849c:	eb00 0806 	add.w	r8, r0, r6
 80184a0:	4601      	mov	r1, r0
 80184a2:	4632      	mov	r2, r6
 80184a4:	4640      	mov	r0, r8
 80184a6:	f7ff fc1d 	bl	8017ce4 <memcpy>
 80184aa:	f8c4 8000 	str.w	r8, [r4]
 80184ae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80184b2:	e7e9      	b.n	8018488 <__submore+0x42>

080184b4 <memchr>:
 80184b4:	b2c9      	uxtb	r1, r1
 80184b6:	4402      	add	r2, r0
 80184b8:	b510      	push	{r4, lr}
 80184ba:	4290      	cmp	r0, r2
 80184bc:	4603      	mov	r3, r0
 80184be:	d101      	bne.n	80184c4 <memchr+0x10>
 80184c0:	2300      	movs	r3, #0
 80184c2:	e003      	b.n	80184cc <memchr+0x18>
 80184c4:	781c      	ldrb	r4, [r3, #0]
 80184c6:	3001      	adds	r0, #1
 80184c8:	428c      	cmp	r4, r1
 80184ca:	d1f6      	bne.n	80184ba <memchr+0x6>
 80184cc:	4618      	mov	r0, r3
 80184ce:	bd10      	pop	{r4, pc}

080184d0 <_realloc_r>:
 80184d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184d4:	4680      	mov	r8, r0
 80184d6:	4614      	mov	r4, r2
 80184d8:	460e      	mov	r6, r1
 80184da:	b921      	cbnz	r1, 80184e6 <_realloc_r+0x16>
 80184dc:	4611      	mov	r1, r2
 80184de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184e2:	f7ff baa3 	b.w	8017a2c <_malloc_r>
 80184e6:	b92a      	cbnz	r2, 80184f4 <_realloc_r+0x24>
 80184e8:	4625      	mov	r5, r4
 80184ea:	f7ff fc09 	bl	8017d00 <_free_r>
 80184ee:	4628      	mov	r0, r5
 80184f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184f4:	f000 f914 	bl	8018720 <_malloc_usable_size_r>
 80184f8:	4284      	cmp	r4, r0
 80184fa:	4607      	mov	r7, r0
 80184fc:	d802      	bhi.n	8018504 <_realloc_r+0x34>
 80184fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018502:	d812      	bhi.n	801852a <_realloc_r+0x5a>
 8018504:	4621      	mov	r1, r4
 8018506:	4640      	mov	r0, r8
 8018508:	f7ff fa90 	bl	8017a2c <_malloc_r>
 801850c:	4605      	mov	r5, r0
 801850e:	2800      	cmp	r0, #0
 8018510:	d0ed      	beq.n	80184ee <_realloc_r+0x1e>
 8018512:	42bc      	cmp	r4, r7
 8018514:	4622      	mov	r2, r4
 8018516:	4631      	mov	r1, r6
 8018518:	bf28      	it	cs
 801851a:	463a      	movcs	r2, r7
 801851c:	f7ff fbe2 	bl	8017ce4 <memcpy>
 8018520:	4631      	mov	r1, r6
 8018522:	4640      	mov	r0, r8
 8018524:	f7ff fbec 	bl	8017d00 <_free_r>
 8018528:	e7e1      	b.n	80184ee <_realloc_r+0x1e>
 801852a:	4635      	mov	r5, r6
 801852c:	e7df      	b.n	80184ee <_realloc_r+0x1e>
	...

08018530 <_strtol_l.constprop.0>:
 8018530:	2b01      	cmp	r3, #1
 8018532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018536:	d001      	beq.n	801853c <_strtol_l.constprop.0+0xc>
 8018538:	2b24      	cmp	r3, #36	; 0x24
 801853a:	d906      	bls.n	801854a <_strtol_l.constprop.0+0x1a>
 801853c:	f7ff fba6 	bl	8017c8c <__errno>
 8018540:	2316      	movs	r3, #22
 8018542:	6003      	str	r3, [r0, #0]
 8018544:	2000      	movs	r0, #0
 8018546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801854a:	460d      	mov	r5, r1
 801854c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8018630 <_strtol_l.constprop.0+0x100>
 8018550:	462e      	mov	r6, r5
 8018552:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018556:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801855a:	f017 0708 	ands.w	r7, r7, #8
 801855e:	d1f7      	bne.n	8018550 <_strtol_l.constprop.0+0x20>
 8018560:	2c2d      	cmp	r4, #45	; 0x2d
 8018562:	d132      	bne.n	80185ca <_strtol_l.constprop.0+0x9a>
 8018564:	782c      	ldrb	r4, [r5, #0]
 8018566:	2701      	movs	r7, #1
 8018568:	1cb5      	adds	r5, r6, #2
 801856a:	2b00      	cmp	r3, #0
 801856c:	d05b      	beq.n	8018626 <_strtol_l.constprop.0+0xf6>
 801856e:	2b10      	cmp	r3, #16
 8018570:	d109      	bne.n	8018586 <_strtol_l.constprop.0+0x56>
 8018572:	2c30      	cmp	r4, #48	; 0x30
 8018574:	d107      	bne.n	8018586 <_strtol_l.constprop.0+0x56>
 8018576:	782c      	ldrb	r4, [r5, #0]
 8018578:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801857c:	2c58      	cmp	r4, #88	; 0x58
 801857e:	d14d      	bne.n	801861c <_strtol_l.constprop.0+0xec>
 8018580:	786c      	ldrb	r4, [r5, #1]
 8018582:	2310      	movs	r3, #16
 8018584:	3502      	adds	r5, #2
 8018586:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801858a:	f04f 0e00 	mov.w	lr, #0
 801858e:	f108 38ff 	add.w	r8, r8, #4294967295
 8018592:	4676      	mov	r6, lr
 8018594:	fbb8 f9f3 	udiv	r9, r8, r3
 8018598:	fb03 8a19 	mls	sl, r3, r9, r8
 801859c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80185a0:	f1bc 0f09 	cmp.w	ip, #9
 80185a4:	d816      	bhi.n	80185d4 <_strtol_l.constprop.0+0xa4>
 80185a6:	4664      	mov	r4, ip
 80185a8:	42a3      	cmp	r3, r4
 80185aa:	dd24      	ble.n	80185f6 <_strtol_l.constprop.0+0xc6>
 80185ac:	f1be 3fff 	cmp.w	lr, #4294967295
 80185b0:	d008      	beq.n	80185c4 <_strtol_l.constprop.0+0x94>
 80185b2:	45b1      	cmp	r9, r6
 80185b4:	d31c      	bcc.n	80185f0 <_strtol_l.constprop.0+0xc0>
 80185b6:	d101      	bne.n	80185bc <_strtol_l.constprop.0+0x8c>
 80185b8:	45a2      	cmp	sl, r4
 80185ba:	db19      	blt.n	80185f0 <_strtol_l.constprop.0+0xc0>
 80185bc:	fb06 4603 	mla	r6, r6, r3, r4
 80185c0:	f04f 0e01 	mov.w	lr, #1
 80185c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80185c8:	e7e8      	b.n	801859c <_strtol_l.constprop.0+0x6c>
 80185ca:	2c2b      	cmp	r4, #43	; 0x2b
 80185cc:	bf04      	itt	eq
 80185ce:	782c      	ldrbeq	r4, [r5, #0]
 80185d0:	1cb5      	addeq	r5, r6, #2
 80185d2:	e7ca      	b.n	801856a <_strtol_l.constprop.0+0x3a>
 80185d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80185d8:	f1bc 0f19 	cmp.w	ip, #25
 80185dc:	d801      	bhi.n	80185e2 <_strtol_l.constprop.0+0xb2>
 80185de:	3c37      	subs	r4, #55	; 0x37
 80185e0:	e7e2      	b.n	80185a8 <_strtol_l.constprop.0+0x78>
 80185e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80185e6:	f1bc 0f19 	cmp.w	ip, #25
 80185ea:	d804      	bhi.n	80185f6 <_strtol_l.constprop.0+0xc6>
 80185ec:	3c57      	subs	r4, #87	; 0x57
 80185ee:	e7db      	b.n	80185a8 <_strtol_l.constprop.0+0x78>
 80185f0:	f04f 3eff 	mov.w	lr, #4294967295
 80185f4:	e7e6      	b.n	80185c4 <_strtol_l.constprop.0+0x94>
 80185f6:	f1be 3fff 	cmp.w	lr, #4294967295
 80185fa:	d105      	bne.n	8018608 <_strtol_l.constprop.0+0xd8>
 80185fc:	2322      	movs	r3, #34	; 0x22
 80185fe:	4646      	mov	r6, r8
 8018600:	6003      	str	r3, [r0, #0]
 8018602:	b942      	cbnz	r2, 8018616 <_strtol_l.constprop.0+0xe6>
 8018604:	4630      	mov	r0, r6
 8018606:	e79e      	b.n	8018546 <_strtol_l.constprop.0+0x16>
 8018608:	b107      	cbz	r7, 801860c <_strtol_l.constprop.0+0xdc>
 801860a:	4276      	negs	r6, r6
 801860c:	2a00      	cmp	r2, #0
 801860e:	d0f9      	beq.n	8018604 <_strtol_l.constprop.0+0xd4>
 8018610:	f1be 0f00 	cmp.w	lr, #0
 8018614:	d000      	beq.n	8018618 <_strtol_l.constprop.0+0xe8>
 8018616:	1e69      	subs	r1, r5, #1
 8018618:	6011      	str	r1, [r2, #0]
 801861a:	e7f3      	b.n	8018604 <_strtol_l.constprop.0+0xd4>
 801861c:	2430      	movs	r4, #48	; 0x30
 801861e:	2b00      	cmp	r3, #0
 8018620:	d1b1      	bne.n	8018586 <_strtol_l.constprop.0+0x56>
 8018622:	2308      	movs	r3, #8
 8018624:	e7af      	b.n	8018586 <_strtol_l.constprop.0+0x56>
 8018626:	2c30      	cmp	r4, #48	; 0x30
 8018628:	d0a5      	beq.n	8018576 <_strtol_l.constprop.0+0x46>
 801862a:	230a      	movs	r3, #10
 801862c:	e7ab      	b.n	8018586 <_strtol_l.constprop.0+0x56>
 801862e:	bf00      	nop
 8018630:	080189f0 	.word	0x080189f0

08018634 <_strtol_r>:
 8018634:	f7ff bf7c 	b.w	8018530 <_strtol_l.constprop.0>

08018638 <_strtoul_l.constprop.0>:
 8018638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801863c:	4686      	mov	lr, r0
 801863e:	460d      	mov	r5, r1
 8018640:	4f35      	ldr	r7, [pc, #212]	; (8018718 <_strtoul_l.constprop.0+0xe0>)
 8018642:	4628      	mov	r0, r5
 8018644:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018648:	5d3e      	ldrb	r6, [r7, r4]
 801864a:	f016 0608 	ands.w	r6, r6, #8
 801864e:	d1f8      	bne.n	8018642 <_strtoul_l.constprop.0+0xa>
 8018650:	2c2d      	cmp	r4, #45	; 0x2d
 8018652:	d130      	bne.n	80186b6 <_strtoul_l.constprop.0+0x7e>
 8018654:	782c      	ldrb	r4, [r5, #0]
 8018656:	2601      	movs	r6, #1
 8018658:	1c85      	adds	r5, r0, #2
 801865a:	2b00      	cmp	r3, #0
 801865c:	d057      	beq.n	801870e <_strtoul_l.constprop.0+0xd6>
 801865e:	2b10      	cmp	r3, #16
 8018660:	d109      	bne.n	8018676 <_strtoul_l.constprop.0+0x3e>
 8018662:	2c30      	cmp	r4, #48	; 0x30
 8018664:	d107      	bne.n	8018676 <_strtoul_l.constprop.0+0x3e>
 8018666:	7828      	ldrb	r0, [r5, #0]
 8018668:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801866c:	2858      	cmp	r0, #88	; 0x58
 801866e:	d149      	bne.n	8018704 <_strtoul_l.constprop.0+0xcc>
 8018670:	786c      	ldrb	r4, [r5, #1]
 8018672:	2310      	movs	r3, #16
 8018674:	3502      	adds	r5, #2
 8018676:	f04f 38ff 	mov.w	r8, #4294967295
 801867a:	2700      	movs	r7, #0
 801867c:	fbb8 f8f3 	udiv	r8, r8, r3
 8018680:	fb03 f908 	mul.w	r9, r3, r8
 8018684:	4638      	mov	r0, r7
 8018686:	ea6f 0909 	mvn.w	r9, r9
 801868a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801868e:	f1bc 0f09 	cmp.w	ip, #9
 8018692:	d815      	bhi.n	80186c0 <_strtoul_l.constprop.0+0x88>
 8018694:	4664      	mov	r4, ip
 8018696:	42a3      	cmp	r3, r4
 8018698:	dd23      	ble.n	80186e2 <_strtoul_l.constprop.0+0xaa>
 801869a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801869e:	d007      	beq.n	80186b0 <_strtoul_l.constprop.0+0x78>
 80186a0:	4580      	cmp	r8, r0
 80186a2:	d31b      	bcc.n	80186dc <_strtoul_l.constprop.0+0xa4>
 80186a4:	d101      	bne.n	80186aa <_strtoul_l.constprop.0+0x72>
 80186a6:	45a1      	cmp	r9, r4
 80186a8:	db18      	blt.n	80186dc <_strtoul_l.constprop.0+0xa4>
 80186aa:	fb00 4003 	mla	r0, r0, r3, r4
 80186ae:	2701      	movs	r7, #1
 80186b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80186b4:	e7e9      	b.n	801868a <_strtoul_l.constprop.0+0x52>
 80186b6:	2c2b      	cmp	r4, #43	; 0x2b
 80186b8:	bf04      	itt	eq
 80186ba:	782c      	ldrbeq	r4, [r5, #0]
 80186bc:	1c85      	addeq	r5, r0, #2
 80186be:	e7cc      	b.n	801865a <_strtoul_l.constprop.0+0x22>
 80186c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80186c4:	f1bc 0f19 	cmp.w	ip, #25
 80186c8:	d801      	bhi.n	80186ce <_strtoul_l.constprop.0+0x96>
 80186ca:	3c37      	subs	r4, #55	; 0x37
 80186cc:	e7e3      	b.n	8018696 <_strtoul_l.constprop.0+0x5e>
 80186ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80186d2:	f1bc 0f19 	cmp.w	ip, #25
 80186d6:	d804      	bhi.n	80186e2 <_strtoul_l.constprop.0+0xaa>
 80186d8:	3c57      	subs	r4, #87	; 0x57
 80186da:	e7dc      	b.n	8018696 <_strtoul_l.constprop.0+0x5e>
 80186dc:	f04f 37ff 	mov.w	r7, #4294967295
 80186e0:	e7e6      	b.n	80186b0 <_strtoul_l.constprop.0+0x78>
 80186e2:	1c7b      	adds	r3, r7, #1
 80186e4:	d106      	bne.n	80186f4 <_strtoul_l.constprop.0+0xbc>
 80186e6:	2322      	movs	r3, #34	; 0x22
 80186e8:	4638      	mov	r0, r7
 80186ea:	f8ce 3000 	str.w	r3, [lr]
 80186ee:	b932      	cbnz	r2, 80186fe <_strtoul_l.constprop.0+0xc6>
 80186f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186f4:	b106      	cbz	r6, 80186f8 <_strtoul_l.constprop.0+0xc0>
 80186f6:	4240      	negs	r0, r0
 80186f8:	2a00      	cmp	r2, #0
 80186fa:	d0f9      	beq.n	80186f0 <_strtoul_l.constprop.0+0xb8>
 80186fc:	b107      	cbz	r7, 8018700 <_strtoul_l.constprop.0+0xc8>
 80186fe:	1e69      	subs	r1, r5, #1
 8018700:	6011      	str	r1, [r2, #0]
 8018702:	e7f5      	b.n	80186f0 <_strtoul_l.constprop.0+0xb8>
 8018704:	2430      	movs	r4, #48	; 0x30
 8018706:	2b00      	cmp	r3, #0
 8018708:	d1b5      	bne.n	8018676 <_strtoul_l.constprop.0+0x3e>
 801870a:	2308      	movs	r3, #8
 801870c:	e7b3      	b.n	8018676 <_strtoul_l.constprop.0+0x3e>
 801870e:	2c30      	cmp	r4, #48	; 0x30
 8018710:	d0a9      	beq.n	8018666 <_strtoul_l.constprop.0+0x2e>
 8018712:	230a      	movs	r3, #10
 8018714:	e7af      	b.n	8018676 <_strtoul_l.constprop.0+0x3e>
 8018716:	bf00      	nop
 8018718:	080189f0 	.word	0x080189f0

0801871c <_strtoul_r>:
 801871c:	f7ff bf8c 	b.w	8018638 <_strtoul_l.constprop.0>

08018720 <_malloc_usable_size_r>:
 8018720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018724:	1f18      	subs	r0, r3, #4
 8018726:	2b00      	cmp	r3, #0
 8018728:	bfbc      	itt	lt
 801872a:	580b      	ldrlt	r3, [r1, r0]
 801872c:	18c0      	addlt	r0, r0, r3
 801872e:	4770      	bx	lr

08018730 <_init>:
 8018730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018732:	bf00      	nop
 8018734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018736:	bc08      	pop	{r3}
 8018738:	469e      	mov	lr, r3
 801873a:	4770      	bx	lr

0801873c <_fini>:
 801873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801873e:	bf00      	nop
 8018740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018742:	bc08      	pop	{r3}
 8018744:	469e      	mov	lr, r3
 8018746:	4770      	bx	lr
