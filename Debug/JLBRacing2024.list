
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e50c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0800e70c  0800e70c  0001e70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e970  0800e970  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800e970  0800e970  0001e970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e978  0800e978  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e978  0800e978  0001e978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e97c  0800e97c  0001e97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800e980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037b4  20000064  0800e9e4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003818  0800e9e4  00023818  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033a15  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063b5  00000000  00000000  00053af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002aa0  00000000  00000000  00059ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002105  00000000  00000000  0005c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033972  00000000  00000000  0005ea4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033bca  00000000  00000000  000923bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00145abe  00000000  00000000  000c5f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bca0  00000000  00000000  0020ba48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  002176e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e6f4 	.word	0x0800e6f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	0800e6f4 	.word	0x0800e6f4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b982 	b.w	8000580 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000298:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d146      	bne.n	8000332 <__udivmoddi4+0x9e>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d95e      	bls.n	8000368 <__udivmoddi4+0xd4>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	409c      	lsls	r4, r3
 80002bc:	fa20 f202 	lsr.w	r2, r0, r2
 80002c0:	4317      	orrs	r7, r2
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	0c22      	lsrs	r2, r4, #16
 80002cc:	fbb7 f1fe 	udiv	r1, r7, lr
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	fb01 f005 	mul.w	r0, r1, r5
 80002d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002dc:	4290      	cmp	r0, r2
 80002de:	d908      	bls.n	80002f2 <__udivmoddi4+0x5e>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	d202      	bcs.n	80002f0 <__udivmoddi4+0x5c>
 80002ea:	4290      	cmp	r0, r2
 80002ec:	f200 8134 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 80002f0:	4639      	mov	r1, r7
 80002f2:	1a12      	subs	r2, r2, r0
 80002f4:	b2a4      	uxth	r4, r4
 80002f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002fe:	fb00 f505 	mul.w	r5, r0, r5
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	42a5      	cmp	r5, r4
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x88>
 800030a:	eb1c 0404 	adds.w	r4, ip, r4
 800030e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x86>
 8000314:	42a5      	cmp	r5, r4
 8000316:	f200 8119 	bhi.w	800054c <__udivmoddi4+0x2b8>
 800031a:	4610      	mov	r0, r2
 800031c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	2100      	movs	r1, #0
 8000324:	b11e      	cbz	r6, 800032e <__udivmoddi4+0x9a>
 8000326:	40dc      	lsrs	r4, r3
 8000328:	2300      	movs	r3, #0
 800032a:	e9c6 4300 	strd	r4, r3, [r6]
 800032e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0xb4>
 8000336:	2e00      	cmp	r6, #0
 8000338:	f000 80fc 	beq.w	8000534 <__udivmoddi4+0x2a0>
 800033c:	2100      	movs	r1, #0
 800033e:	e9c6 0500 	strd	r0, r5, [r6]
 8000342:	4608      	mov	r0, r1
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	fab3 f183 	clz	r1, r3
 800034c:	2900      	cmp	r1, #0
 800034e:	d14c      	bne.n	80003ea <__udivmoddi4+0x156>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f0c0 80f2 	bcc.w	800053a <__udivmoddi4+0x2a6>
 8000356:	4282      	cmp	r2, r0
 8000358:	f240 80ef 	bls.w	800053a <__udivmoddi4+0x2a6>
 800035c:	4608      	mov	r0, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d0e5      	beq.n	800032e <__udivmoddi4+0x9a>
 8000362:	e9c6 4700 	strd	r4, r7, [r6]
 8000366:	e7e2      	b.n	800032e <__udivmoddi4+0x9a>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xd8>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f382 	clz	r3, r2
 8000370:	2b00      	cmp	r3, #0
 8000372:	f040 809f 	bne.w	80004b4 <__udivmoddi4+0x220>
 8000376:	1a8a      	subs	r2, r1, r2
 8000378:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037c:	fa1f f78c 	uxth.w	r7, ip
 8000380:	2101      	movs	r1, #1
 8000382:	fbb2 f5fe 	udiv	r5, r2, lr
 8000386:	fb0e 2015 	mls	r0, lr, r5, r2
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000390:	fb07 f005 	mul.w	r0, r7, r5
 8000394:	4290      	cmp	r0, r2
 8000396:	d90f      	bls.n	80003b8 <__udivmoddi4+0x124>
 8000398:	eb1c 0202 	adds.w	r2, ip, r2
 800039c:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a0:	bf2c      	ite	cs
 80003a2:	f04f 0901 	movcs.w	r9, #1
 80003a6:	f04f 0900 	movcc.w	r9, #0
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d903      	bls.n	80003b6 <__udivmoddi4+0x122>
 80003ae:	f1b9 0f00 	cmp.w	r9, #0
 80003b2:	f000 80ce 	beq.w	8000552 <__udivmoddi4+0x2be>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0fe 	udiv	r0, r2, lr
 80003c0:	fb0e 2210 	mls	r2, lr, r0, r2
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003cc:	42a7      	cmp	r7, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	42a7      	cmp	r7, r4
 80003dc:	f200 80b3 	bhi.w	8000546 <__udivmoddi4+0x2b2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	1be4      	subs	r4, r4, r7
 80003e4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003e8:	e79c      	b.n	8000324 <__udivmoddi4+0x90>
 80003ea:	f1c1 0420 	rsb	r4, r1, #32
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003f4:	fa22 f704 	lsr.w	r7, r2, r4
 80003f8:	40e5      	lsrs	r5, r4
 80003fa:	408a      	lsls	r2, r1
 80003fc:	431f      	orrs	r7, r3
 80003fe:	fa20 f304 	lsr.w	r3, r0, r4
 8000402:	4088      	lsls	r0, r1
 8000404:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb5 fef8 	udiv	lr, r5, r8
 8000418:	fb08 551e 	mls	r5, r8, lr, r5
 800041c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000420:	fb0e f90c 	mul.w	r9, lr, ip
 8000424:	45a9      	cmp	r9, r5
 8000426:	d90e      	bls.n	8000446 <__udivmoddi4+0x1b2>
 8000428:	197d      	adds	r5, r7, r5
 800042a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042e:	bf2c      	ite	cs
 8000430:	f04f 0b01 	movcs.w	fp, #1
 8000434:	f04f 0b00 	movcc.w	fp, #0
 8000438:	45a9      	cmp	r9, r5
 800043a:	d903      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800043c:	f1bb 0f00 	cmp.w	fp, #0
 8000440:	f000 808d 	beq.w	800055e <__udivmoddi4+0x2ca>
 8000444:	46d6      	mov	lr, sl
 8000446:	eba5 0509 	sub.w	r5, r5, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000452:	fb08 5513 	mls	r5, r8, r3, r5
 8000456:	fb03 fc0c 	mul.w	ip, r3, ip
 800045a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800045e:	45ac      	cmp	ip, r5
 8000460:	d906      	bls.n	8000470 <__udivmoddi4+0x1dc>
 8000462:	197d      	adds	r5, r7, r5
 8000464:	f103 38ff 	add.w	r8, r3, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x1da>
 800046a:	45ac      	cmp	ip, r5
 800046c:	d87e      	bhi.n	800056c <__udivmoddi4+0x2d8>
 800046e:	4643      	mov	r3, r8
 8000470:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000474:	eba5 050c 	sub.w	r5, r5, ip
 8000478:	fba3 9802 	umull	r9, r8, r3, r2
 800047c:	4545      	cmp	r5, r8
 800047e:	46ce      	mov	lr, r9
 8000480:	46c4      	mov	ip, r8
 8000482:	d302      	bcc.n	800048a <__udivmoddi4+0x1f6>
 8000484:	d106      	bne.n	8000494 <__udivmoddi4+0x200>
 8000486:	4548      	cmp	r0, r9
 8000488:	d204      	bcs.n	8000494 <__udivmoddi4+0x200>
 800048a:	3b01      	subs	r3, #1
 800048c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000490:	eb68 0c07 	sbc.w	ip, r8, r7
 8000494:	2e00      	cmp	r6, #0
 8000496:	d06f      	beq.n	8000578 <__udivmoddi4+0x2e4>
 8000498:	ebb0 020e 	subs.w	r2, r0, lr
 800049c:	eb65 050c 	sbc.w	r5, r5, ip
 80004a0:	40ca      	lsrs	r2, r1
 80004a2:	fa05 f404 	lsl.w	r4, r5, r4
 80004a6:	40cd      	lsrs	r5, r1
 80004a8:	4618      	mov	r0, r3
 80004aa:	4314      	orrs	r4, r2
 80004ac:	2100      	movs	r1, #0
 80004ae:	e9c6 4500 	strd	r4, r5, [r6]
 80004b2:	e73c      	b.n	800032e <__udivmoddi4+0x9a>
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	f1c3 0220 	rsb	r2, r3, #32
 80004bc:	4099      	lsls	r1, r3
 80004be:	409c      	lsls	r4, r3
 80004c0:	40d5      	lsrs	r5, r2
 80004c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004c6:	fa20 f202 	lsr.w	r2, r0, r2
 80004ca:	fa1f f78c 	uxth.w	r7, ip
 80004ce:	fbb5 f0fe 	udiv	r0, r5, lr
 80004d2:	430a      	orrs	r2, r1
 80004d4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f507 	mul.w	r5, r0, r7
 80004e2:	428d      	cmp	r5, r1
 80004e4:	d90e      	bls.n	8000504 <__udivmoddi4+0x270>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	bf2c      	ite	cs
 80004f0:	f04f 0901 	movcs.w	r9, #1
 80004f4:	f04f 0900 	movcc.w	r9, #0
 80004f8:	428d      	cmp	r5, r1
 80004fa:	d902      	bls.n	8000502 <__udivmoddi4+0x26e>
 80004fc:	f1b9 0f00 	cmp.w	r9, #0
 8000500:	d031      	beq.n	8000566 <__udivmoddi4+0x2d2>
 8000502:	4640      	mov	r0, r8
 8000504:	1b49      	subs	r1, r1, r5
 8000506:	b292      	uxth	r2, r2
 8000508:	fbb1 f5fe 	udiv	r5, r1, lr
 800050c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000510:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000514:	fb05 f107 	mul.w	r1, r5, r7
 8000518:	4291      	cmp	r1, r2
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x298>
 800051c:	eb1c 0202 	adds.w	r2, ip, r2
 8000520:	f105 38ff 	add.w	r8, r5, #4294967295
 8000524:	d201      	bcs.n	800052a <__udivmoddi4+0x296>
 8000526:	4291      	cmp	r1, r2
 8000528:	d823      	bhi.n	8000572 <__udivmoddi4+0x2de>
 800052a:	4645      	mov	r5, r8
 800052c:	1a52      	subs	r2, r2, r1
 800052e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000532:	e726      	b.n	8000382 <__udivmoddi4+0xee>
 8000534:	4631      	mov	r1, r6
 8000536:	4630      	mov	r0, r6
 8000538:	e6f9      	b.n	800032e <__udivmoddi4+0x9a>
 800053a:	1a84      	subs	r4, r0, r2
 800053c:	eb65 0203 	sbc.w	r2, r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	4617      	mov	r7, r2
 8000544:	e70b      	b.n	800035e <__udivmoddi4+0xca>
 8000546:	4464      	add	r4, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74a      	b.n	80003e2 <__udivmoddi4+0x14e>
 800054c:	4464      	add	r4, ip
 800054e:	3802      	subs	r0, #2
 8000550:	e6e4      	b.n	800031c <__udivmoddi4+0x88>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	3902      	subs	r1, #2
 800055a:	4462      	add	r2, ip
 800055c:	e6c9      	b.n	80002f2 <__udivmoddi4+0x5e>
 800055e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000562:	443d      	add	r5, r7
 8000564:	e76f      	b.n	8000446 <__udivmoddi4+0x1b2>
 8000566:	3802      	subs	r0, #2
 8000568:	4461      	add	r1, ip
 800056a:	e7cb      	b.n	8000504 <__udivmoddi4+0x270>
 800056c:	3b02      	subs	r3, #2
 800056e:	443d      	add	r5, r7
 8000570:	e77e      	b.n	8000470 <__udivmoddi4+0x1dc>
 8000572:	3d02      	subs	r5, #2
 8000574:	4462      	add	r2, ip
 8000576:	e7d9      	b.n	800052c <__udivmoddi4+0x298>
 8000578:	4618      	mov	r0, r3
 800057a:	4631      	mov	r1, r6
 800057c:	e6d7      	b.n	800032e <__udivmoddi4+0x9a>
 800057e:	bf00      	nop

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_ADC_ConvCpltCallback>:
extern uint16_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800058e:	881a      	ldrh	r2, [r3, #0]
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x60>)
 8000592:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000596:	885a      	ldrh	r2, [r3, #2]
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x60>)
 800059a:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 800059c:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800059e:	889a      	ldrh	r2, [r3, #4]
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x60>)
 80005a2:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[3];
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_ADC_ConvCpltCallback+0x5c>)
 80005a6:	88da      	ldrh	r2, [r3, #6]
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x60>)
 80005aa:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[4];
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_ADC_ConvCpltCallback+0x5c>)
 80005ae:	891a      	ldrh	r2, [r3, #8]
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x60>)
 80005b2:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[5];
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_ADC_ConvCpltCallback+0x5c>)
 80005b6:	895a      	ldrh	r2, [r3, #10]
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x60>)
 80005ba:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_ADC_ConvCpltCallback+0x5c>)
 80005be:	899a      	ldrh	r2, [r3, #12]
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x60>)
 80005c2:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_ADC_ConvCpltCallback+0x5c>)
 80005c6:	89da      	ldrh	r2, [r3, #14]
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x60>)
 80005ca:	81da      	strh	r2, [r3, #14]

	vTaskResume(mainTaskHandle);
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f00b fe9d 	bl	800c310 <vTaskResume>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000924 	.word	0x20000924
 80005e4:	20000080 	.word	0x20000080
 80005e8:	200000c4 	.word	0x200000c4

080005ec <MotorControlTask>:
extern TIM_HandleTypeDef htim5;

float pi_integral_error = 0;

void MotorControlTask()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2108      	movs	r1, #8
 80005f6:	4835      	ldr	r0, [pc, #212]	; (80006cc <MotorControlTask+0xe0>)
 80005f8:	f004 fbb2 	bl	8004d60 <HAL_GPIO_WritePin>
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 80005fc:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <MotorControlTask+0xe4>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	ee07 3a90 	vmov	s15, r3
 8000604:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000608:	eddf 6a32 	vldr	s13, [pc, #200]	; 80006d4 <MotorControlTask+0xe8>
 800060c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000610:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80006d8 <MotorControlTask+0xec>
 8000614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000618:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80006dc <MotorControlTask+0xf0>
 800061c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000620:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MotorControlTask+0xf4>)
 8000622:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)(adc_values.motor_curr_raw)) / 4096.0f * 3.3f - MOTOR_CURR_NULL) * MOTOR_CURR_SENSITIVITY;
 8000626:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <MotorControlTask+0xe4>)
 8000628:	885b      	ldrh	r3, [r3, #2]
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000632:	eddf 6a28 	vldr	s13, [pc, #160]	; 80006d4 <MotorControlTask+0xe8>
 8000636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800063a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80006d8 <MotorControlTask+0xec>
 800063e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000642:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80006e4 <MotorControlTask+0xf8>
 8000646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800064a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80006e8 <MotorControlTask+0xfc>
 800064e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <MotorControlTask+0xf4>)
 8000654:	edc3 7a01 	vstr	s15, [r3, #4]

	float pi_error = motorcontrol.target_velocity - motorcontrol.actual_velocity;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MotorControlTask+0xf4>)
 800065a:	ed93 7a03 	vldr	s14, [r3, #12]
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MotorControlTask+0xf4>)
 8000660:	edd3 7a02 	vldr	s15, [r3, #8]
 8000664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000668:	edc7 7a03 	vstr	s15, [r7, #12]
	float pi_proportional_error = pi_error * SPEED_CONTROLER_KP;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	60bb      	str	r3, [r7, #8]
	pi_integral_error = pi_error * SPEED_CONTROLLER_KI / MOTOR_CONTROL_TASK_FREQ;
 8000670:	ed97 7a03 	vldr	s14, [r7, #12]
 8000674:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80006ec <MotorControlTask+0x100>
 8000678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MotorControlTask+0x104>)
 800067e:	edc3 7a00 	vstr	s15, [r3]

	//float duty_cycle = pi_integral_error + pi_proportional_error;
	float duty_cycle = 0.42f;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MotorControlTask+0x108>)
 8000684:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, duty_cycle * PWM_COUNTER_PREIOD);
 8000686:	edd7 7a01 	vldr	s15, [r7, #4]
 800068a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80006f8 <MotorControlTask+0x10c>
 800068e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MotorControlTask+0x110>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800069a:	ee17 2a90 	vmov	r2, s15
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (duty_cycle * PWM_COUNTER_PREIOD));
 80006a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006a4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80006f8 <MotorControlTask+0x10c>
 80006a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ac:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80006f8 <MotorControlTask+0x10c>
 80006b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MotorControlTask+0x110>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006bc:	ee17 2a90 	vmov	r2, s15
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34

}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	42021400 	.word	0x42021400
 80006d0:	20000080 	.word	0x20000080
 80006d4:	45800000 	.word	0x45800000
 80006d8:	40533333 	.word	0x40533333
 80006dc:	40b66666 	.word	0x40b66666
 80006e0:	20000090 	.word	0x20000090
 80006e4:	3fd47ae1 	.word	0x3fd47ae1
 80006e8:	3c112989 	.word	0x3c112989
 80006ec:	43480000 	.word	0x43480000
 80006f0:	200000a4 	.word	0x200000a4
 80006f4:	3ed70a3d 	.word	0x3ed70a3d
 80006f8:	44e54000 	.word	0x44e54000
 80006fc:	20000594 	.word	0x20000594

08000700 <Radio_Init>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 8000704:	220c      	movs	r2, #12
 8000706:	4903      	ldr	r1, [pc, #12]	; (8000714 <Radio_Init+0x14>)
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <Radio_Init+0x18>)
 800070a:	f008 fb25 	bl	8008d58 <HAL_UART_Receive_IT>

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000a8 	.word	0x200000a8
 8000718:	20000280 	.word	0x20000280

0800071c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 8000724:	220c      	movs	r2, #12
 8000726:	4922      	ldr	r1, [pc, #136]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 8000728:	4822      	ldr	r0, [pc, #136]	; (80007b4 <HAL_UART_RxCpltCallback+0x98>)
 800072a:	f008 fb15 	bl	8008d58 <HAL_UART_Receive_IT>
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e009      	b.n	8000748 <HAL_UART_RxCpltCallback+0x2c>
    {
    	if(radio_rxBuffer[i] == '\r')
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 8000738:	5cd3      	ldrb	r3, [r2, r3]
 800073a:	2b0d      	cmp	r3, #13
 800073c:	d101      	bne.n	8000742 <HAL_UART_RxCpltCallback+0x26>
    	{
    		length = i;
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3301      	adds	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b0b      	cmp	r3, #11
 800074c:	d9f2      	bls.n	8000734 <HAL_UART_RxCpltCallback+0x18>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 800074e:	7bbb      	ldrb	r3, [r7, #14]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d103      	bne.n	800075c <HAL_UART_RxCpltCallback+0x40>
    {
    	countdown_value = radio_rxBuffer[0];
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_UART_RxCpltCallback+0x9c>)
 800075a:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 800075c:	7bbb      	ldrb	r3, [r7, #14]
 800075e:	2b06      	cmp	r3, #6
 8000760:	d115      	bne.n	800078e <HAL_UART_RxCpltCallback+0x72>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", radio_rxBuffer))
 8000762:	4913      	ldr	r1, [pc, #76]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 8000764:	4815      	ldr	r0, [pc, #84]	; (80007bc <HAL_UART_RxCpltCallback+0xa0>)
 8000766:	f7ff fd6b 	bl	8000240 <strcmp>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d103      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x5c>
    	{
    		flood_active = true;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <HAL_UART_RxCpltCallback+0xa4>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e010      	b.n	800079a <HAL_UART_RxCpltCallback+0x7e>
    	}
    	else
    	{
    		sscanf(radio_rxBuffer, "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_UART_RxCpltCallback+0xa8>)
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_UART_RxCpltCallback+0xac>)
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_UART_RxCpltCallback+0xb0>)
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <HAL_UART_RxCpltCallback+0xb4>)
 8000784:	4913      	ldr	r1, [pc, #76]	; (80007d4 <HAL_UART_RxCpltCallback+0xb8>)
 8000786:	480a      	ldr	r0, [pc, #40]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 8000788:	f00d f970 	bl	800da6c <siscanf>
 800078c:	e005      	b.n	800079a <HAL_UART_RxCpltCallback+0x7e>
    	}
    }

    else
    {
    	flood_counter++;
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_UART_RxCpltCallback+0xbc>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_UART_RxCpltCallback+0xbc>)
 8000798:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_UART_RxCpltCallback+0xbc>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b0a      	cmp	r3, #10
 80007a0:	d902      	bls.n	80007a8 <HAL_UART_RxCpltCallback+0x8c>
    {
    	flood_active = false;
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <HAL_UART_RxCpltCallback+0xa4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
    }

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000a8 	.word	0x200000a8
 80007b4:	20000280 	.word	0x20000280
 80007b8:	20000000 	.word	0x20000000
 80007bc:	0800e70c 	.word	0x0800e70c
 80007c0:	200000b4 	.word	0x200000b4
 80007c4:	200000bc 	.word	0x200000bc
 80007c8:	200000b8 	.word	0x200000b8
 80007cc:	200000b7 	.word	0x200000b7
 80007d0:	200000b6 	.word	0x200000b6
 80007d4:	0800e714 	.word	0x0800e714
 80007d8:	200000b5 	.word	0x200000b5

080007dc <SetSteeringAngle>:
#include "main.h"

extern TIM_HandleTypeDef htim1;
/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = SERVO_NULL + (angle / 90.0f * SERVO_RANGE);
 80007e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80007ea:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000820 <SetSteeringAngle+0x44>
 80007ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000824 <SetSteeringAngle+0x48>
 80007f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007fa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000828 <SetSteeringAngle+0x4c>
 80007fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000806:	ee17 3a90 	vmov	r3, s15
 800080a:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare);
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <SetSteeringAngle+0x50>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	89fa      	ldrh	r2, [r7, #14]
 8000812:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	42b40000 	.word	0x42b40000
 8000824:	442f0000 	.word	0x442f0000
 8000828:	44bb8000 	.word	0x44bb8000
 800082c:	200004fc 	.word	0x200004fc

08000830 <RegistrateUserTasks>:
osThreadId_t mainTaskHandle;
const osThreadAttr_t mainTask_attributes =
{ .name = "MainTask", .priority = (osPriority_t) osPriorityRealtime1, .stack_size = 512 * 4 };

void RegistrateUserTasks()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <RegistrateUserTasks+0x28>)
 8000836:	2100      	movs	r1, #0
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <RegistrateUserTasks+0x2c>)
 800083a:	f00a fd5b 	bl	800b2f4 <osThreadNew>
 800083e:	4603      	mov	r3, r0
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <RegistrateUserTasks+0x30>)
 8000842:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <RegistrateUserTasks+0x34>)
 8000846:	2100      	movs	r1, #0
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <RegistrateUserTasks+0x38>)
 800084a:	f00a fd53 	bl	800b2f4 <osThreadNew>
 800084e:	4603      	mov	r3, r0
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <RegistrateUserTasks+0x3c>)
 8000852:	6013      	str	r3, [r2, #0]

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	0800e764 	.word	0x0800e764
 800085c:	08000871 	.word	0x08000871
 8000860:	200000c0 	.word	0x200000c0
 8000864:	0800e788 	.word	0x0800e788
 8000868:	080008a1 	.word	0x080008a1
 800086c:	200000c4 	.word	0x200000c4

08000870 <ADCTask>:

void ADCTask(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000878:	f00b fe8a 	bl	800c590 <xTaskGetTickCount>
 800087c:	4603      	mov	r3, r0
 800087e:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8000880:	2208      	movs	r2, #8
 8000882:	4905      	ldr	r1, [pc, #20]	; (8000898 <ADCTask+0x28>)
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <ADCTask+0x2c>)
 8000886:	f002 fa83 	bl	8002d90 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2105      	movs	r1, #5
 8000890:	4618      	mov	r0, r3
 8000892:	f00b fc51 	bl	800c138 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8000896:	e7f3      	b.n	8000880 <ADCTask+0x10>
 8000898:	20000924 	.word	0x20000924
 800089c:	200000c8 	.word	0x200000c8

080008a0 <MainTask>:
	}
}

void MainTask(void * argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	static uint8_t direction = 1u;
	for (;;)
	{
		SetSteeringAngle(5.0f);
 80008a8:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80008ac:	f7ff ff96 	bl	80007dc <SetSteeringAngle>
		}
		else
		{
			pwm_servo_test-= 0.1f;
		}*/
		MotorControlTask();
 80008b0:	f7ff fe9c 	bl	80005ec <MotorControlTask>

		vTaskSuspend(mainTaskHandle);
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <MainTask+0x20>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00b fc9b 	bl	800c1f4 <vTaskSuspend>
		SetSteeringAngle(5.0f);
 80008be:	e7f3      	b.n	80008a8 <MainTask+0x8>
 80008c0:	200000c4 	.word	0x200000c4

080008c4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4013      	ands	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	40021000 	.word	0x40021000

080008f4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <LL_APB1_GRP2_EnableClock+0x2c>)
 80008fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000900:	4907      	ldr	r1, [pc, #28]	; (8000920 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <LL_APB1_GRP2_EnableClock+0x2c>)
 800090a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4013      	ands	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40021000 	.word	0x40021000

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f001 fe7b 	bl	8002622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f854 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f000 fe64 	bl	80015fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000934:	f000 fe38 	bl	80015a8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000938:	f000 fa00 	bl	8000d3c <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800093c:	f000 fae4 	bl	8000f08 <MX_RTC_Init>
  MX_UCPD1_Init();
 8000940:	f000 fdd4 	bl	80014ec <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000944:	f000 fe08 	bl	8001558 <MX_USB_PCD_Init>
  MX_UART4_Init();
 8000948:	f000 fa46 	bl	8000dd8 <MX_UART4_Init>
  MX_SPI1_Init();
 800094c:	f000 fb26 	bl	8000f9c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000950:	f000 fb62 	bl	8001018 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000954:	f000 fb9e 	bl	8001094 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000958:	f000 fbda 	bl	8001110 <MX_TIM1_Init>
  MX_TIM3_Init();
 800095c:	f000 fcb8 	bl	80012d0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000960:	f000 fa86 	bl	8000e70 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000964:	f000 f89a 	bl	8000a9c <MX_ADC1_Init>
  MX_TIM5_Init();
 8000968:	f000 fd08 	bl	800137c <MX_TIM5_Init>
  MX_I2C1_Init();
 800096c:	f000 f992 	bl	8000c94 <MX_I2C1_Init>
  MX_ICACHE_Init();
 8000970:	f000 f9d0 	bl	8000d14 <MX_ICACHE_Init>
  MX_TIM6_Init();
 8000974:	f000 fd84 	bl	8001480 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 8000978:	f7ff fec2 	bl	8000700 <Radio_Init>
	HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800097c:	2208      	movs	r2, #8
 800097e:	490f      	ldr	r1, [pc, #60]	; (80009bc <main+0x98>)
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <main+0x9c>)
 8000982:	f002 fa05 	bl	8002d90 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000986:	2100      	movs	r1, #0
 8000988:	480e      	ldr	r0, [pc, #56]	; (80009c4 <main+0xa0>)
 800098a:	f006 fd2b 	bl	80073e4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800098e:	2100      	movs	r1, #0
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <main+0xa4>)
 8000992:	f006 fd27 	bl	80073e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8000996:	210c      	movs	r1, #12
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <main+0xa4>)
 800099a:	f006 fd23 	bl	80073e4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800099e:	f00a fc5f 	bl	800b260 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <main+0xa8>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480a      	ldr	r0, [pc, #40]	; (80009d0 <main+0xac>)
 80009a8:	f00a fca4 	bl	800b2f4 <osThreadNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <main+0xb0>)
 80009b0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  RegistrateUserTasks();
 80009b2:	f7ff ff3d 	bl	8000830 <RegistrateUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009b6:	f00a fc77 	bl	800b2a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009ba:	e7fe      	b.n	80009ba <main+0x96>
 80009bc:	20000924 	.word	0x20000924
 80009c0:	200000c8 	.word	0x200000c8
 80009c4:	200004fc 	.word	0x200004fc
 80009c8:	20000594 	.word	0x20000594
 80009cc:	0800e7ac 	.word	0x0800e7ac
 80009d0:	08001861 	.word	0x08001861
 80009d4:	20000920 	.word	0x20000920

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b098      	sub	sp, #96	; 0x60
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0318 	add.w	r3, r7, #24
 80009e2:	2248      	movs	r2, #72	; 0x48
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00d f86e 	bl	800dac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80009fa:	2000      	movs	r0, #0
 80009fc:	f004 fc5a 	bl	80052b4 <HAL_PWREx_ControlVoltageScaling>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000a06:	f000 ff50 	bl	80018aa <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a0a:	f004 fc35 	bl	8005278 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <SystemClock_Config+0xc0>)
 8000a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a14:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <SystemClock_Config+0xc0>)
 8000a16:	f023 0318 	bic.w	r3, r3, #24
 8000a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000a1e:	2334      	movs	r3, #52	; 0x34
 8000a20:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a22:	2381      	movs	r3, #129	; 0x81
 8000a24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a26:	2301      	movs	r3, #1
 8000a28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a32:	2360      	movs	r3, #96	; 0x60
 8000a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000a42:	2337      	movs	r3, #55	; 0x37
 8000a44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a46:	2307      	movs	r3, #7
 8000a48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a52:	f107 0318 	add.w	r3, r7, #24
 8000a56:	4618      	mov	r0, r3
 8000a58:	f004 fcbc 	bl	80053d4 <HAL_RCC_OscConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a62:	f000 ff22 	bl	80018aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	230f      	movs	r3, #15
 8000a68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 f97e 	bl	8005d80 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a8a:	f000 ff0e 	bl	80018aa <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3760      	adds	r7, #96	; 0x60
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000abe:	4b6b      	ldr	r3, [pc, #428]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000ac0:	4a6b      	ldr	r2, [pc, #428]	; (8000c70 <MX_ADC1_Init+0x1d4>)
 8000ac2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ac4:	4b69      	ldr	r3, [pc, #420]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000ac6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000acc:	4b67      	ldr	r3, [pc, #412]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad2:	4b66      	ldr	r3, [pc, #408]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ad8:	4b64      	ldr	r3, [pc, #400]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ade:	4b63      	ldr	r3, [pc, #396]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000ae4:	4b61      	ldr	r3, [pc, #388]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aea:	4b60      	ldr	r3, [pc, #384]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8000af0:	4b5e      	ldr	r3, [pc, #376]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000af2:	2208      	movs	r2, #8
 8000af4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af6:	4b5d      	ldr	r3, [pc, #372]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afe:	4b5b      	ldr	r3, [pc, #364]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b04:	4b59      	ldr	r3, [pc, #356]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b0a:	4b58      	ldr	r3, [pc, #352]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b12:	4b56      	ldr	r3, [pc, #344]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000b1a:	4b54      	ldr	r3, [pc, #336]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8000b22:	4b52      	ldr	r3, [pc, #328]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b24:	2214      	movs	r2, #20
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8000b28:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b2a:	22c0      	movs	r2, #192	; 0xc0
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000b2e:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000b34:	4b4d      	ldr	r3, [pc, #308]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b3a:	484c      	ldr	r0, [pc, #304]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b3c:	f001 ffdc 	bl	8002af8 <HAL_ADC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000b46:	f000 feb0 	bl	80018aa <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4845      	ldr	r0, [pc, #276]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b56:	f003 fa51 	bl	8003ffc <HAL_ADCEx_MultiModeConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000b60:	f000 fea3 	bl	80018aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b64:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <MX_ADC1_Init+0x1d8>)
 8000b66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b68:	2306      	movs	r3, #6
 8000b6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b70:	237f      	movs	r3, #127	; 0x7f
 8000b72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b74:	2304      	movs	r3, #4
 8000b76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	483a      	ldr	r0, [pc, #232]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b82:	f002 fbf1 	bl	8003368 <HAL_ADC_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000b8c:	f000 fe8d 	bl	80018aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b90:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <MX_ADC1_Init+0x1dc>)
 8000b92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b94:	230c      	movs	r3, #12
 8000b96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4833      	ldr	r0, [pc, #204]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000b9e:	f002 fbe3 	bl	8003368 <HAL_ADC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000ba8:	f000 fe7f 	bl	80018aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <MX_ADC1_Init+0x1e0>)
 8000bae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bb0:	2312      	movs	r3, #18
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	482c      	ldr	r0, [pc, #176]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000bba:	f002 fbd5 	bl	8003368 <HAL_ADC_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000bc4:	f000 fe71 	bl	80018aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <MX_ADC1_Init+0x1e4>)
 8000bca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bcc:	2318      	movs	r3, #24
 8000bce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4825      	ldr	r0, [pc, #148]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000bd6:	f002 fbc7 	bl	8003368 <HAL_ADC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8000be0:	f000 fe63 	bl	80018aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_ADC1_Init+0x1e8>)
 8000be6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481e      	ldr	r0, [pc, #120]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000bf4:	f002 fbb8 	bl	8003368 <HAL_ADC_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8000bfe:	f000 fe54 	bl	80018aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_ADC1_Init+0x1ec>)
 8000c04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c06:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4816      	ldr	r0, [pc, #88]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000c12:	f002 fba9 	bl	8003368 <HAL_ADC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0x184>
  {
    Error_Handler();
 8000c1c:	f000 fe45 	bl	80018aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ADC1_Init+0x1f0>)
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c24:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000c28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480f      	ldr	r0, [pc, #60]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000c30:	f002 fb9a 	bl	8003368 <HAL_ADC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 8000c3a:	f000 fe36 	bl	80018aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_ADC1_Init+0x1f4>)
 8000c40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c42:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000c46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000c4e:	f002 fb8b 	bl	8003368 <HAL_ADC_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC1_Init+0x1c0>
  {
    Error_Handler();
 8000c58:	f000 fe27 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c5c:	217f      	movs	r1, #127	; 0x7f
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <MX_ADC1_Init+0x1d0>)
 8000c60:	f003 f938 	bl	8003ed4 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000c8 	.word	0x200000c8
 8000c70:	42028000 	.word	0x42028000
 8000c74:	04300002 	.word	0x04300002
 8000c78:	08600004 	.word	0x08600004
 8000c7c:	0c900008 	.word	0x0c900008
 8000c80:	1d500080 	.word	0x1d500080
 8000c84:	21800100 	.word	0x21800100
 8000c88:	25b00200 	.word	0x25b00200
 8000c8c:	32601000 	.word	0x32601000
 8000c90:	43210000 	.word	0x43210000

08000c94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <MX_I2C1_Init+0x78>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A21D58;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <MX_I2C1_Init+0x7c>)
 8000ca2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cce:	480e      	ldr	r0, [pc, #56]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cd0:	f004 f878 	bl	8004dc4 <HAL_I2C_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cda:	f000 fde6 	bl	80018aa <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000ce2:	f004 f8fe 	bl	8004ee2 <HAL_I2CEx_ConfigAnalogFilter>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cec:	f000 fddd 	bl	80018aa <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_I2C1_Init+0x74>)
 8000cf4:	f004 f940 	bl	8004f78 <HAL_I2CEx_ConfigDigitalFilter>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cfe:	f000 fdd4 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000198 	.word	0x20000198
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	10a21d58 	.word	0x10a21d58

08000d14 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f004 f979 	bl	8005010 <HAL_ICACHE_ConfigAssociativityMode>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d24:	f000 fdc1 	bl	80018aa <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d28:	f004 f992 	bl	8005050 <HAL_ICACHE_Enable>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d32:	f000 fdba 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d42:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <MX_LPUART1_UART_Init+0x94>)
 8000d44:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d48:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <MX_LPUART1_UART_Init+0x98>)
 8000d4a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d60:	220c      	movs	r2, #12
 8000d62:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d84:	f007 ff98 	bl	8008cb8 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000d8e:	f000 fd8c 	bl	80018aa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000d96:	f009 ff60 	bl	800ac5a <HAL_UARTEx_SetTxFifoThreshold>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000da0:	f000 fd83 	bl	80018aa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da4:	2100      	movs	r1, #0
 8000da6:	4809      	ldr	r0, [pc, #36]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000da8:	f009 ff95 	bl	800acd6 <HAL_UARTEx_SetRxFifoThreshold>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000db2:	f000 fd7a 	bl	80018aa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_LPUART1_UART_Init+0x90>)
 8000db8:	f009 ff16 	bl	800abe8 <HAL_UARTEx_DisableFifoMode>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000dc2:	f000 fd72 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200001ec 	.word	0x200001ec
 8000dd0:	40008000 	.word	0x40008000
 8000dd4:	00033324 	.word	0x00033324

08000dd8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_UART4_Init+0x90>)
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <MX_UART4_Init+0x94>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_UART4_Init+0x90>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_UART4_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_UART4_Init+0x90>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_UART4_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_UART4_Init+0x90>)
 8000dfe:	2204      	movs	r2, #4
 8000e00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e20:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e22:	f007 ff49 	bl	8008cb8 <HAL_UART_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000e2c:	f000 fd3d 	bl	80018aa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e34:	f009 ff11 	bl	800ac5a <HAL_UARTEx_SetTxFifoThreshold>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e3e:	f000 fd34 	bl	80018aa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e42:	2100      	movs	r1, #0
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e46:	f009 ff46 	bl	800acd6 <HAL_UARTEx_SetRxFifoThreshold>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e50:	f000 fd2b 	bl	80018aa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e56:	f009 fec7 	bl	800abe8 <HAL_UARTEx_DisableFifoMode>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e60:	f000 fd23 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000280 	.word	0x20000280
 8000e6c:	40004c00 	.word	0x40004c00

08000e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000e76:	4a23      	ldr	r2, [pc, #140]	; (8000f04 <MX_USART2_UART_Init+0x94>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000eba:	f007 fefd 	bl	8008cb8 <HAL_UART_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ec4:	f000 fcf1 	bl	80018aa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000ecc:	f009 fec5 	bl	800ac5a <HAL_UARTEx_SetTxFifoThreshold>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ed6:	f000 fce8 	bl	80018aa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000ede:	f009 fefa 	bl	800acd6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ee8:	f000 fcdf 	bl	80018aa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_USART2_UART_Init+0x90>)
 8000eee:	f009 fe7b 	bl	800abe8 <HAL_UARTEx_DisableFifoMode>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ef8:	f000 fcd7 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000314 	.word	0x20000314
 8000f04:	40004400 	.word	0x40004400

08000f08 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
 8000f1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f20:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <MX_RTC_Init+0x90>)
 8000f22:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f2c:	227f      	movs	r2, #127	; 0x7f
 8000f2e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f58:	f005 ff3e 	bl	8006dd8 <HAL_RTC_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000f62:	f000 fca2 	bl	80018aa <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <MX_RTC_Init+0x8c>)
 8000f7c:	f006 f83a 	bl	8006ff4 <HAL_RTCEx_PrivilegeModeSet>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000f86:	f000 fc90 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200003a8 	.word	0x200003a8
 8000f98:	40002800 	.word	0x40002800

08000f9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <MX_SPI1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_SPI1_Init+0x74>)
 8000fea:	2207      	movs	r2, #7
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <MX_SPI1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_SPI1_Init+0x74>)
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_SPI1_Init+0x74>)
 8000ffc:	f006 f826 	bl	800704c <HAL_SPI_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 fc50 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200003d0 	.word	0x200003d0
 8001014:	40013000 	.word	0x40013000

08001018 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_SPI2_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <MX_SPI2_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_SPI2_Init+0x74>)
 8001024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001028:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_SPI2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_SPI2_Init+0x74>)
 8001032:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001036:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_SPI2_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_SPI2_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_SPI2_Init+0x74>)
 8001046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_SPI2_Init+0x74>)
 800104e:	2218      	movs	r2, #24
 8001050:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_SPI2_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_SPI2_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_SPI2_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_SPI2_Init+0x74>)
 8001066:	2207      	movs	r2, #7
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_SPI2_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_SPI2_Init+0x74>)
 8001072:	2208      	movs	r2, #8
 8001074:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_SPI2_Init+0x74>)
 8001078:	f005 ffe8 	bl	800704c <HAL_SPI_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 fc12 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000434 	.word	0x20000434
 8001090:	40003800 	.word	0x40003800

08001094 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_SPI3_Init+0x74>)
 800109a:	4a1c      	ldr	r2, [pc, #112]	; (800110c <MX_SPI3_Init+0x78>)
 800109c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_SPI3_Init+0x74>)
 80010a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_SPI3_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_SPI3_Init+0x74>)
 80010ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_SPI3_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_SPI3_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_SPI3_Init+0x74>)
 80010c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_SPI3_Init+0x74>)
 80010ca:	2218      	movs	r2, #24
 80010cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_SPI3_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_SPI3_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_SPI3_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_SPI3_Init+0x74>)
 80010e2:	2207      	movs	r2, #7
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_SPI3_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_SPI3_Init+0x74>)
 80010ee:	2208      	movs	r2, #8
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_SPI3_Init+0x74>)
 80010f4:	f005 ffaa 	bl	800704c <HAL_SPI_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010fe:	f000 fbd4 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000498 	.word	0x20000498
 800110c:	40003c00 	.word	0x40003c00

08001110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0a0      	sub	sp, #128	; 0x80
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001130:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001144:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2234      	movs	r2, #52	; 0x34
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f00c fcb5 	bl	800dac8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115e:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 8001160:	4a5a      	ldr	r2, [pc, #360]	; (80012cc <MX_TIM1_Init+0x1bc>)
 8001162:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 8001164:	4b58      	ldr	r3, [pc, #352]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 8001166:	226e      	movs	r2, #110	; 0x6e
 8001168:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8001170:	4b55      	ldr	r3, [pc, #340]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 8001172:	f241 3288 	movw	r2, #5000	; 0x1388
 8001176:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117e:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001184:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118a:	484f      	ldr	r0, [pc, #316]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 800118c:	f006 f801 	bl	8007192 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001196:	f000 fb88 	bl	80018aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011a4:	4619      	mov	r1, r3
 80011a6:	4848      	ldr	r0, [pc, #288]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 80011a8:	f006 fdf8 	bl	8007d9c <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011b2:	f000 fb7a 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b6:	4844      	ldr	r0, [pc, #272]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 80011b8:	f006 f8b2 	bl	8007320 <HAL_TIM_PWM_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80011c2:	f000 fb72 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011c6:	4840      	ldr	r0, [pc, #256]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 80011c8:	f006 fa12 	bl	80075f0 <HAL_TIM_IC_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80011d2:	f000 fb6a 	bl	80018aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	66bb      	str	r3, [r7, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011e6:	4619      	mov	r1, r3
 80011e8:	4837      	ldr	r0, [pc, #220]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 80011ea:	f007 fc1f 	bl	8008a2c <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 80011f4:	f000 fb59 	bl	80018aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f8:	2360      	movs	r3, #96	; 0x60
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.Pulse = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001200:	2300      	movs	r3, #0
 8001202:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001204:	2300      	movs	r3, #0
 8001206:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001214:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	482a      	ldr	r0, [pc, #168]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 800121e:	f006 fca9 	bl	8007b74 <HAL_TIM_PWM_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001228:	f000 fb3f 	bl	80018aa <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800122c:	2300      	movs	r3, #0
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001230:	2301      	movs	r3, #1
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICFilter = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800123c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001240:	2208      	movs	r2, #8
 8001242:	4619      	mov	r1, r3
 8001244:	4820      	ldr	r0, [pc, #128]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 8001246:	f006 fbf9 	bl	8007a3c <HAL_TIM_IC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001250:	f000 fb2b 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001254:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001258:	220c      	movs	r2, #12
 800125a:	4619      	mov	r1, r3
 800125c:	481a      	ldr	r0, [pc, #104]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 800125e:	f006 fbed 	bl	8007a3c <HAL_TIM_IC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001268:	f000 fb1f 	bl	80018aa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001284:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 80012aa:	f007 fc47 	bl	8008b3c <HAL_TIMEx_ConfigBreakDeadTime>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 80012b4:	f000 faf9 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <MX_TIM1_Init+0x1b8>)
 80012ba:	f000 ff2b 	bl	8002114 <HAL_TIM_MspPostInit>

}
 80012be:	bf00      	nop
 80012c0:	3780      	adds	r7, #128	; 0x80
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200004fc 	.word	0x200004fc
 80012cc:	40012c00 	.word	0x40012c00

080012d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f00c fbf2 	bl	800dac8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_TIM3_Init+0xa4>)
 80012f0:	4a21      	ldr	r2, [pc, #132]	; (8001378 <MX_TIM3_Init+0xa8>)
 80012f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <MX_TIM3_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_TIM3_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_TIM3_Init+0xa4>)
 8001302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001306:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_TIM3_Init+0xa4>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM3_Init+0xa4>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001314:	2303      	movs	r3, #3
 8001316:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800131c:	2301      	movs	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800132c:	2301      	movs	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_TIM3_Init+0xa4>)
 8001340:	f006 f9b7 	bl	80076b2 <HAL_TIM_Encoder_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800134a:	f000 faae 	bl	80018aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_TIM3_Init+0xa4>)
 800135c:	f007 fb66 	bl	8008a2c <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001366:	f000 faa0 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3730      	adds	r7, #48	; 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000548 	.word	0x20000548
 8001378:	40000400 	.word	0x40000400

0800137c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139c:	463b      	mov	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <MX_TIM5_Init+0xfc>)
 80013b0:	4a32      	ldr	r2, [pc, #200]	; (800147c <MX_TIM5_Init+0x100>)
 80013b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <MX_TIM5_Init+0xfc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <MX_TIM5_Init+0xfc>)
 80013bc:	2220      	movs	r2, #32
 80013be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 80013c0:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_TIM5_Init+0xfc>)
 80013c2:	f240 722a 	movw	r2, #1834	; 0x72a
 80013c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <MX_TIM5_Init+0xfc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <MX_TIM5_Init+0xfc>)
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013d4:	4828      	ldr	r0, [pc, #160]	; (8001478 <MX_TIM5_Init+0xfc>)
 80013d6:	f005 fedc 	bl	8007192 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80013e0:	f000 fa63 	bl	80018aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4821      	ldr	r0, [pc, #132]	; (8001478 <MX_TIM5_Init+0xfc>)
 80013f2:	f006 fcd3 	bl	8007d9c <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013fc:	f000 fa55 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001400:	481d      	ldr	r0, [pc, #116]	; (8001478 <MX_TIM5_Init+0xfc>)
 8001402:	f005 ff8d 	bl	8007320 <HAL_TIM_PWM_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800140c:	f000 fa4d 	bl	80018aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	4816      	ldr	r0, [pc, #88]	; (8001478 <MX_TIM5_Init+0xfc>)
 8001420:	f007 fb04 	bl	8008a2c <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800142a:	f000 fa3e 	bl	80018aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142e:	2360      	movs	r3, #96	; 0x60
 8001430:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <MX_TIM5_Init+0xfc>)
 8001446:	f006 fb95 	bl	8007b74 <HAL_TIM_PWM_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001450:	f000 fa2b 	bl	80018aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	220c      	movs	r2, #12
 8001458:	4619      	mov	r1, r3
 800145a:	4807      	ldr	r0, [pc, #28]	; (8001478 <MX_TIM5_Init+0xfc>)
 800145c:	f006 fb8a 	bl	8007b74 <HAL_TIM_PWM_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8001466:	f000 fa20 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800146a:	4803      	ldr	r0, [pc, #12]	; (8001478 <MX_TIM5_Init+0xfc>)
 800146c:	f000 fe52 	bl	8002114 <HAL_TIM_MspPostInit>

}
 8001470:	bf00      	nop
 8001472:	3738      	adds	r7, #56	; 0x38
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000594 	.word	0x20000594
 800147c:	40000c00 	.word	0x40000c00

08001480 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_TIM6_Init+0x64>)
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <MX_TIM6_Init+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_TIM6_Init+0x64>)
 8001498:	226e      	movs	r2, #110	; 0x6e
 800149a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_TIM6_Init+0x64>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <MX_TIM6_Init+0x64>)
 80014a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_TIM6_Init+0x64>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <MX_TIM6_Init+0x64>)
 80014b2:	f005 fe6e 	bl	8007192 <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014bc:	f000 f9f5 	bl	80018aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_TIM6_Init+0x64>)
 80014ce:	f007 faad 	bl	8008a2c <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014d8:	f000 f9e7 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200005e0 	.word	0x200005e0
 80014e8:	40001000 	.word	0x40001000

080014ec <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	463b      	mov	r3, r7
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001502:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001506:	f7ff f9f5 	bl	80008f4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800150a:	2002      	movs	r0, #2
 800150c:	f7ff f9da 	bl	80008c4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff f9d7 	bl	80008c4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800151c:	2303      	movs	r3, #3
 800151e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <MX_UCPD1_Init+0x64>)
 800152a:	f009 fdac 	bl	800b086 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800152e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001532:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001534:	2303      	movs	r3, #3
 8001536:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <MX_UCPD1_Init+0x68>)
 8001542:	f009 fda0 	bl	800b086 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	42020400 	.word	0x42020400
 8001554:	42020000 	.word	0x42020000

08001558 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_USB_PCD_Init+0x48>)
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <MX_USB_PCD_Init+0x4c>)
 8001560:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_USB_PCD_Init+0x48>)
 8001564:	2208      	movs	r2, #8
 8001566:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <MX_USB_PCD_Init+0x48>)
 800156a:	2202      	movs	r2, #2
 800156c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USB_PCD_Init+0x48>)
 8001570:	2202      	movs	r2, #2
 8001572:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <MX_USB_PCD_Init+0x48>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USB_PCD_Init+0x48>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <MX_USB_PCD_Init+0x48>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USB_PCD_Init+0x48>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_USB_PCD_Init+0x48>)
 800158e:	f003 fd6f 	bl	8005070 <HAL_PCD_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001598:	f000 f987 	bl	80018aa <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000062c 	.word	0x2000062c
 80015a4:	4000d400 	.word	0x4000d400

080015a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_DMA_Init+0x50>)
 80015b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b2:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <MX_DMA_Init+0x50>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6493      	str	r3, [r2, #72]	; 0x48
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_DMA_Init+0x50>)
 80015bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_DMA_Init+0x50>)
 80015c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <MX_DMA_Init+0x50>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6493      	str	r3, [r2, #72]	; 0x48
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_DMA_Init+0x50>)
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2105      	movs	r1, #5
 80015e2:	201d      	movs	r0, #29
 80015e4:	f002 fe66 	bl	80042b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015e8:	201d      	movs	r0, #29
 80015ea:	f002 fe7d 	bl	80042e8 <HAL_NVIC_EnableIRQ>

}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001612:	4b8b      	ldr	r3, [pc, #556]	; (8001840 <MX_GPIO_Init+0x244>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	4a8a      	ldr	r2, [pc, #552]	; (8001840 <MX_GPIO_Init+0x244>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <MX_GPIO_Init+0x244>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	4b85      	ldr	r3, [pc, #532]	; (8001840 <MX_GPIO_Init+0x244>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	4a84      	ldr	r2, [pc, #528]	; (8001840 <MX_GPIO_Init+0x244>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001636:	4b82      	ldr	r3, [pc, #520]	; (8001840 <MX_GPIO_Init+0x244>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	4b7f      	ldr	r3, [pc, #508]	; (8001840 <MX_GPIO_Init+0x244>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	4a7e      	ldr	r2, [pc, #504]	; (8001840 <MX_GPIO_Init+0x244>)
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164e:	4b7c      	ldr	r3, [pc, #496]	; (8001840 <MX_GPIO_Init+0x244>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b79      	ldr	r3, [pc, #484]	; (8001840 <MX_GPIO_Init+0x244>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a78      	ldr	r2, [pc, #480]	; (8001840 <MX_GPIO_Init+0x244>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <MX_GPIO_Init+0x244>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4b73      	ldr	r3, [pc, #460]	; (8001840 <MX_GPIO_Init+0x244>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a72      	ldr	r2, [pc, #456]	; (8001840 <MX_GPIO_Init+0x244>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <MX_GPIO_Init+0x244>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168a:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <MX_GPIO_Init+0x244>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a6c      	ldr	r2, [pc, #432]	; (8001840 <MX_GPIO_Init+0x244>)
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <MX_GPIO_Init+0x244>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016a2:	4b67      	ldr	r3, [pc, #412]	; (8001840 <MX_GPIO_Init+0x244>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a66      	ldr	r2, [pc, #408]	; (8001840 <MX_GPIO_Init+0x244>)
 80016a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b64      	ldr	r3, [pc, #400]	; (8001840 <MX_GPIO_Init+0x244>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80016ba:	f003 fe57 	bl	800536c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f24e 0108 	movw	r1, #57352	; 0xe008
 80016c4:	485f      	ldr	r0, [pc, #380]	; (8001844 <MX_GPIO_Init+0x248>)
 80016c6:	f003 fb4b 	bl	8004d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	21a4      	movs	r1, #164	; 0xa4
 80016ce:	485e      	ldr	r0, [pc, #376]	; (8001848 <MX_GPIO_Init+0x24c>)
 80016d0:	f003 fb46 	bl	8004d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 80016d4:	2200      	movs	r2, #0
 80016d6:	f64f 7187 	movw	r1, #65415	; 0xff87
 80016da:	485c      	ldr	r0, [pc, #368]	; (800184c <MX_GPIO_Init+0x250>)
 80016dc:	f003 fb40 	bl	8004d60 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |LED_LE_F_Pin|INFRA_LE_F_Pin|LED_OE_F_Pin|INFRA_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	485a      	ldr	r0, [pc, #360]	; (8001850 <MX_GPIO_Init+0x254>)
 80016e6:	f003 fb3b 	bl	8004d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f0:	4858      	ldr	r0, [pc, #352]	; (8001854 <MX_GPIO_Init+0x258>)
 80016f2:	f003 fb35 	bl	8004d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_LE_R_Pin|INFRA_LE_R_Pin|LED_OE_R_Pin|INFRA_OE_R_Pin
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 80016fc:	4856      	ldr	r0, [pc, #344]	; (8001858 <MX_GPIO_Init+0x25c>)
 80016fe:	f003 fb2f 	bl	8004d60 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 8001702:	2308      	movs	r3, #8
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	484a      	ldr	r0, [pc, #296]	; (8001844 <MX_GPIO_Init+0x248>)
 800171a:	f003 f9a1 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 800171e:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4844      	ldr	r0, [pc, #272]	; (8001844 <MX_GPIO_Init+0x248>)
 8001734:	f003 f994 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 8001738:	23a4      	movs	r3, #164	; 0xa4
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	483e      	ldr	r0, [pc, #248]	; (8001848 <MX_GPIO_Init+0x24c>)
 8001750:	f003 f986 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 8001754:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4835      	ldr	r0, [pc, #212]	; (8001844 <MX_GPIO_Init+0x248>)
 800176e:	f003 f977 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 8001772:	f643 6301 	movw	r3, #15873	; 0x3e01
 8001776:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	4835      	ldr	r0, [pc, #212]	; (800185c <MX_GPIO_Init+0x260>)
 8001788:	f003 f96a 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800178c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001792:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	4829      	ldr	r0, [pc, #164]	; (8001848 <MX_GPIO_Init+0x24c>)
 80017a4:	f003 f95c 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           LED_LE_F_Pin INFRA_LE_F_Pin LED_OE_F_Pin INFRA_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 80017a8:	f64f 7387 	movw	r3, #65415	; 0xff87
 80017ac:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |LED_LE_F_Pin|INFRA_LE_F_Pin|LED_OE_F_Pin|INFRA_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4822      	ldr	r0, [pc, #136]	; (800184c <MX_GPIO_Init+0x250>)
 80017c2:	f003 f94d 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 80017c6:	2370      	movs	r3, #112	; 0x70
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	481f      	ldr	r0, [pc, #124]	; (8001858 <MX_GPIO_Init+0x25c>)
 80017da:	f003 f941 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4816      	ldr	r0, [pc, #88]	; (8001850 <MX_GPIO_Init+0x254>)
 80017f6:	f003 f933 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80017fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4810      	ldr	r0, [pc, #64]	; (8001854 <MX_GPIO_Init+0x258>)
 8001814:	f003 f924 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LE_R_Pin INFRA_LE_R_Pin LED_OE_R_Pin INFRA_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED_LE_R_Pin|INFRA_LE_R_Pin|LED_OE_R_Pin|INFRA_OE_R_Pin
 8001818:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 800181c:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <MX_GPIO_Init+0x25c>)
 8001832:	f003 f915 	bl	8004a60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001836:	bf00      	nop
 8001838:	3730      	adds	r7, #48	; 0x30
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	42021400 	.word	0x42021400
 8001848:	42020400 	.word	0x42020400
 800184c:	42020c00 	.word	0x42020c00
 8001850:	42020800 	.word	0x42020800
 8001854:	42020000 	.word	0x42020000
 8001858:	42021800 	.word	0x42021800
 800185c:	42021000 	.word	0x42021000

08001860 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8001868:	f00a fe92 	bl	800c590 <xTaskGetTickCount>
 800186c:	4603      	mov	r3, r0
 800186e:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <StartDefaultTask+0x28>)
 8001876:	f003 fa8b 	bl	8004d90 <HAL_GPIO_TogglePin>

		vTaskDelayUntil(&xLastWakeTime, 100u);
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	2164      	movs	r1, #100	; 0x64
 8001880:	4618      	mov	r0, r3
 8001882:	f00a fc59 	bl	800c138 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001886:	e7f3      	b.n	8001870 <StartDefaultTask+0x10>
 8001888:	42020000 	.word	0x42020000

0800188c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189c:	d101      	bne.n	80018a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800189e:	f000 fedb 	bl	8002658 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ae:	b672      	cpsid	i
}
 80018b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018b2:	e7fe      	b.n	80018b2 <Error_Handler+0x8>

080018b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_MspInit+0x4c>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <HAL_MspInit+0x4c>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6613      	str	r3, [r2, #96]	; 0x60
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_MspInit+0x4c>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_MspInit+0x4c>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_MspInit+0x4c>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018dc:	6593      	str	r3, [r2, #88]	; 0x58
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_MspInit+0x4c>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2107      	movs	r1, #7
 80018ee:	f06f 0001 	mvn.w	r0, #1
 80018f2:	f002 fcdf 	bl	80042b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000

08001904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	; 0x30
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a4b      	ldr	r2, [pc, #300]	; (8001a50 <HAL_ADC_MspInit+0x14c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	f040 8090 	bne.w	8001a48 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001928:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	4a49      	ldr	r2, [pc, #292]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 800192e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001934:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001940:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	4a43      	ldr	r2, [pc, #268]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194c:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	4a3d      	ldr	r2, [pc, #244]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001970:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	4a37      	ldr	r2, [pc, #220]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197c:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <HAL_ADC_MspInit+0x150>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 8001988:	230f      	movs	r3, #15
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198c:	2303      	movs	r3, #3
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	482f      	ldr	r0, [pc, #188]	; (8001a58 <HAL_ADC_MspInit+0x154>)
 800199c:	f003 f860 	bl	8004a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 80019a0:	239c      	movs	r3, #156	; 0x9c
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	482a      	ldr	r0, [pc, #168]	; (8001a5c <HAL_ADC_MspInit+0x158>)
 80019b4:	f003 f854 	bl	8004a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 80019b8:	2303      	movs	r3, #3
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4825      	ldr	r0, [pc, #148]	; (8001a60 <HAL_ADC_MspInit+0x15c>)
 80019cc:	f003 f848 	bl	8004a60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 80019d2:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <HAL_ADC_MspInit+0x164>)
 80019d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 80019d8:	2205      	movs	r2, #5
 80019da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 80019f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 80019f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a0a:	4816      	ldr	r0, [pc, #88]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 8001a0c:	f002 fc7a 	bl	8004304 <HAL_DMA_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8001a16:	f7ff ff48 	bl	80018aa <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	4811      	ldr	r0, [pc, #68]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 8001a1e:	f002 ff4f 	bl	80048c0 <HAL_DMA_ConfigChannelAttributes>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8001a28:	f7ff ff3f 	bl	80018aa <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 8001a30:	651a      	str	r2, [r3, #80]	; 0x50
 8001a32:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <HAL_ADC_MspInit+0x160>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2105      	movs	r1, #5
 8001a3c:	2025      	movs	r0, #37	; 0x25
 8001a3e:	f002 fc39 	bl	80042b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a42:	2025      	movs	r0, #37	; 0x25
 8001a44:	f002 fc50 	bl	80042e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3730      	adds	r7, #48	; 0x30
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	42028000 	.word	0x42028000
 8001a54:	40021000 	.word	0x40021000
 8001a58:	42020800 	.word	0x42020800
 8001a5c:	42020000 	.word	0x42020000
 8001a60:	42020400 	.word	0x42020400
 8001a64:	20000130 	.word	0x20000130
 8001a68:	40020008 	.word	0x40020008

08001a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0ae      	sub	sp, #184	; 0xb8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	2294      	movs	r2, #148	; 0x94
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00c f81b 	bl	800dac8 <memset>
  if(hi2c->Instance==I2C1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <HAL_I2C_MspInit+0xb0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d13b      	bne.n	8001b14 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a9c:	2340      	movs	r3, #64	; 0x40
 8001a9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fc7f 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ab4:	f7ff fef9 	bl	80018aa <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_I2C_MspInit+0xb4>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <HAL_I2C_MspInit+0xb4>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_I2C_MspInit+0xb4>)
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ad0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad8:	2312      	movs	r3, #18
 8001ada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aea:	2304      	movs	r3, #4
 8001aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001af4:	4619      	mov	r1, r3
 8001af6:	480b      	ldr	r0, [pc, #44]	; (8001b24 <HAL_I2C_MspInit+0xb8>)
 8001af8:	f002 ffb2 	bl	8004a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_I2C_MspInit+0xb4>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_I2C_MspInit+0xb4>)
 8001b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b06:	6593      	str	r3, [r2, #88]	; 0x58
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_I2C_MspInit+0xb4>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	37b8      	adds	r7, #184	; 0xb8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	40021000 	.word	0x40021000
 8001b24:	42020400 	.word	0x42020400

08001b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b0b2      	sub	sp, #200	; 0xc8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b40:	f107 0320 	add.w	r3, r7, #32
 8001b44:	2294      	movs	r2, #148	; 0x94
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f00b ffbd 	bl	800dac8 <memset>
  if(huart->Instance==LPUART1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a67      	ldr	r2, [pc, #412]	; (8001cf0 <HAL_UART_MspInit+0x1c8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d13e      	bne.n	8001bd6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	4618      	mov	r0, r3
 8001b66:	f004 fc21 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b70:	f7ff fe9b 	bl	80018aa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b74:	4b5f      	ldr	r3, [pc, #380]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	4a5e      	ldr	r2, [pc, #376]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b80:	4b5c      	ldr	r3, [pc, #368]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	4a58      	ldr	r2, [pc, #352]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b98:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001ba4:	f003 fbe2 	bl	800536c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001ba8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	484a      	ldr	r0, [pc, #296]	; (8001cf8 <HAL_UART_MspInit+0x1d0>)
 8001bd0:	f002 ff46 	bl	8004a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd4:	e088      	b.n	8001ce8 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a48      	ldr	r2, [pc, #288]	; (8001cfc <HAL_UART_MspInit+0x1d4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d143      	bne.n	8001c68 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001be0:	2308      	movs	r3, #8
 8001be2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be8:	f107 0320 	add.w	r3, r7, #32
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 fbdd 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001bf8:	f7ff fe57 	bl	80018aa <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bfc:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	4a3c      	ldr	r2, [pc, #240]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c06:	6593      	str	r3, [r2, #88]	; 0x58
 8001c08:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	4a36      	ldr	r2, [pc, #216]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c20:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c44:	2308      	movs	r3, #8
 8001c46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	482b      	ldr	r0, [pc, #172]	; (8001d00 <HAL_UART_MspInit+0x1d8>)
 8001c52:	f002 ff05 	bl	8004a60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	2040      	movs	r0, #64	; 0x40
 8001c5c:	f002 fb2a 	bl	80042b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c60:	2040      	movs	r0, #64	; 0x40
 8001c62:	f002 fb41 	bl	80042e8 <HAL_NVIC_EnableIRQ>
}
 8001c66:	e03f      	b.n	8001ce8 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <HAL_UART_MspInit+0x1dc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d13a      	bne.n	8001ce8 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7a:	f107 0320 	add.w	r3, r7, #32
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 fb94 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_UART_MspInit+0x166>
      Error_Handler();
 8001c8a:	f7ff fe0e 	bl	80018aa <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	4a18      	ldr	r2, [pc, #96]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001cac:	f043 0308 	orr.w	r3, r3, #8
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_UART_MspInit+0x1cc>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 8001cbe:	2360      	movs	r3, #96	; 0x60
 8001cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cdc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4809      	ldr	r0, [pc, #36]	; (8001d08 <HAL_UART_MspInit+0x1e0>)
 8001ce4:	f002 febc 	bl	8004a60 <HAL_GPIO_Init>
}
 8001ce8:	bf00      	nop
 8001cea:	37c8      	adds	r7, #200	; 0xc8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40008000 	.word	0x40008000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	42021800 	.word	0x42021800
 8001cfc:	40004c00 	.word	0x40004c00
 8001d00:	42020000 	.word	0x42020000
 8001d04:	40004400 	.word	0x40004400
 8001d08:	42020c00 	.word	0x42020c00

08001d0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0a8      	sub	sp, #160	; 0xa0
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2294      	movs	r2, #148	; 0x94
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00b fed3 	bl	800dac8 <memset>
  if(hrtc->Instance==RTC)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <HAL_RTC_MspInit+0x74>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d124      	bne.n	8001d76 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d30:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fb34 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001d4a:	f7ff fdae 	bl	80018aa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_RTC_MspInit+0x78>)
 8001d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_RTC_MspInit+0x78>)
 8001d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RTC_MspInit+0x78>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RTC_MspInit+0x78>)
 8001d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d68:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RTC_MspInit+0x78>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	37a0      	adds	r7, #160	; 0xa0
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40002800 	.word	0x40002800
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b090      	sub	sp, #64	; 0x40
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a62      	ldr	r2, [pc, #392]	; (8001f30 <HAL_SPI_MspInit+0x1a8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d145      	bne.n	8001e36 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001daa:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	4a61      	ldr	r2, [pc, #388]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001db4:	6613      	str	r3, [r2, #96]	; 0x60
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a5b      	ldr	r2, [pc, #364]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b59      	ldr	r3, [pc, #356]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dda:	4b56      	ldr	r3, [pc, #344]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a55      	ldr	r2, [pc, #340]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	623b      	str	r3, [r7, #32]
 8001df0:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 8001df2:	2360      	movs	r3, #96	; 0x60
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e02:	2305      	movs	r3, #5
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	484a      	ldr	r0, [pc, #296]	; (8001f38 <HAL_SPI_MspInit+0x1b0>)
 8001e0e:	f002 fe27 	bl	8004a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 8001e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e24:	2305      	movs	r3, #5
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4843      	ldr	r0, [pc, #268]	; (8001f3c <HAL_SPI_MspInit+0x1b4>)
 8001e30:	f002 fe16 	bl	8004a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e34:	e078      	b.n	8001f28 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a41      	ldr	r2, [pc, #260]	; (8001f40 <HAL_SPI_MspInit+0x1b8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d145      	bne.n	8001ecc <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e40:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	4a3b      	ldr	r2, [pc, #236]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4c:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e58:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	4a35      	ldr	r2, [pc, #212]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001e5e:	f043 0302 	orr.w	r3, r3, #2
 8001e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e70:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	4a2f      	ldr	r2, [pc, #188]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4827      	ldr	r0, [pc, #156]	; (8001f44 <HAL_SPI_MspInit+0x1bc>)
 8001ea6:	f002 fddb 	bl	8004a60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001eaa:	2318      	movs	r3, #24
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eba:	2305      	movs	r3, #5
 8001ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4820      	ldr	r0, [pc, #128]	; (8001f48 <HAL_SPI_MspInit+0x1c0>)
 8001ec6:	f002 fdcb 	bl	8004a60 <HAL_GPIO_Init>
}
 8001eca:	e02d      	b.n	8001f28 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <HAL_SPI_MspInit+0x1c4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d128      	bne.n	8001f28 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	4a16      	ldr	r2, [pc, #88]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_SPI_MspInit+0x1ac>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f06:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f18:	2306      	movs	r3, #6
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f20:	4619      	mov	r1, r3
 8001f22:	480b      	ldr	r0, [pc, #44]	; (8001f50 <HAL_SPI_MspInit+0x1c8>)
 8001f24:	f002 fd9c 	bl	8004a60 <HAL_GPIO_Init>
}
 8001f28:	bf00      	nop
 8001f2a:	3740      	adds	r7, #64	; 0x40
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40013000 	.word	0x40013000
 8001f34:	40021000 	.word	0x40021000
 8001f38:	42020000 	.word	0x42020000
 8001f3c:	42021000 	.word	0x42021000
 8001f40:	40003800 	.word	0x40003800
 8001f44:	42020400 	.word	0x42020400
 8001f48:	42020c00 	.word	0x42020c00
 8001f4c:	40003c00 	.word	0x40003c00
 8001f50:	42020800 	.word	0x42020800

08001f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	; 0x30
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3c      	ldr	r2, [pc, #240]	; (8002064 <HAL_TIM_Base_MspInit+0x110>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d146      	bne.n	8002004 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f76:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8001f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f80:	6613      	str	r3, [r2, #96]	; 0x60
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a35      	ldr	r2, [pc, #212]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b33      	ldr	r3, [pc, #204]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 8001fbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4824      	ldr	r0, [pc, #144]	; (800206c <HAL_TIM_Base_MspInit+0x118>)
 8001fdc:	f002 fd40 	bl	8004a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_THROTTLE_IN_Pin;
 8001fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_THROTTLE_IN_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 8001ffe:	f002 fd2f 	bl	8004a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002002:	e02a      	b.n	800205a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_TIM_Base_MspInit+0x120>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10c      	bne.n	8002028 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	4a15      	ldr	r2, [pc, #84]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	6593      	str	r3, [r2, #88]	; 0x58
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	e018      	b.n	800205a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM6)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a12      	ldr	r2, [pc, #72]	; (8002078 <HAL_TIM_Base_MspInit+0x124>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d113      	bne.n	800205a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8002038:	f043 0310 	orr.w	r3, r3, #16
 800203c:	6593      	str	r3, [r2, #88]	; 0x58
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2105      	movs	r1, #5
 800204e:	2031      	movs	r0, #49	; 0x31
 8002050:	f002 f930 	bl	80042b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002054:	2031      	movs	r0, #49	; 0x31
 8002056:	f002 f947 	bl	80042e8 <HAL_NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3730      	adds	r7, #48	; 0x30
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40012c00 	.word	0x40012c00
 8002068:	40021000 	.word	0x40021000
 800206c:	42021000 	.word	0x42021000
 8002070:	42020000 	.word	0x42020000
 8002074:	40000c00 	.word	0x40000c00
 8002078:	40001000 	.word	0x40001000

0800207c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <HAL_TIM_Encoder_MspInit+0x8c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d12f      	bne.n	80020fe <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_TIM_Encoder_MspInit+0x90>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_TIM_Encoder_MspInit+0x90>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_TIM_Encoder_MspInit+0x90>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_TIM_Encoder_MspInit+0x90>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a14      	ldr	r2, [pc, #80]	; (800210c <HAL_TIM_Encoder_MspInit+0x90>)
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_TIM_Encoder_MspInit+0x90>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 80020ce:	2318      	movs	r3, #24
 80020d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020de:	2302      	movs	r3, #2
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <HAL_TIM_Encoder_MspInit+0x94>)
 80020ea:	f002 fcb9 	bl	8004a60 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2105      	movs	r1, #5
 80020f2:	202e      	movs	r0, #46	; 0x2e
 80020f4:	f002 f8de 	bl	80042b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020f8:	202e      	movs	r0, #46	; 0x2e
 80020fa:	f002 f8f5 	bl	80042e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	; 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40000400 	.word	0x40000400
 800210c:	40021000 	.word	0x40021000
 8002110:	42021000 	.word	0x42021000

08002114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a23      	ldr	r2, [pc, #140]	; (80021c0 <HAL_TIM_MspPostInit+0xac>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d11d      	bne.n	8002172 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <HAL_TIM_MspPostInit+0xb0>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <HAL_TIM_MspPostInit+0xb0>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_TIM_MspPostInit+0xb0>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin;
 800214e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RC_PWM_STEERING_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	4817      	ldr	r0, [pc, #92]	; (80021c8 <HAL_TIM_MspPostInit+0xb4>)
 800216c:	f002 fc78 	bl	8004a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002170:	e021      	b.n	80021b6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM5)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a15      	ldr	r2, [pc, #84]	; (80021cc <HAL_TIM_MspPostInit+0xb8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d11c      	bne.n	80021b6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_TIM_MspPostInit+0xb0>)
 800217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002180:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_TIM_MspPostInit+0xb0>)
 8002182:	f043 0320 	orr.w	r3, r3, #32
 8002186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_TIM_MspPostInit+0xb0>)
 800218a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 8002194:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021a6:	2302      	movs	r3, #2
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	4807      	ldr	r0, [pc, #28]	; (80021d0 <HAL_TIM_MspPostInit+0xbc>)
 80021b2:	f002 fc55 	bl	8004a60 <HAL_GPIO_Init>
}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40021000 	.word	0x40021000
 80021c8:	42020000 	.word	0x42020000
 80021cc:	40000c00 	.word	0x40000c00
 80021d0:	42021400 	.word	0x42021400

080021d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b0ae      	sub	sp, #184	; 0xb8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	2294      	movs	r2, #148	; 0x94
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f00b fc67 	bl	800dac8 <memset>
  if(hpcd->Instance==USB)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a22      	ldr	r2, [pc, #136]	; (8002288 <HAL_PCD_MspInit+0xb4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d13d      	bne.n	8002280 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002208:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002210:	f107 0310 	add.w	r3, r7, #16
 8002214:	4618      	mov	r0, r3
 8002216:	f004 f8c9 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002220:	f7ff fb43 	bl	80018aa <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_PCD_MspInit+0xb8>)
 8002226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002228:	4a18      	ldr	r2, [pc, #96]	; (800228c <HAL_PCD_MspInit+0xb8>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002230:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_PCD_MspInit+0xb8>)
 8002232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800223c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002256:	230a      	movs	r3, #10
 8002258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002260:	4619      	mov	r1, r3
 8002262:	480b      	ldr	r0, [pc, #44]	; (8002290 <HAL_PCD_MspInit+0xbc>)
 8002264:	f002 fbfc 	bl	8004a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_PCD_MspInit+0xb8>)
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	4a07      	ldr	r2, [pc, #28]	; (800228c <HAL_PCD_MspInit+0xb8>)
 800226e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002272:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_PCD_MspInit+0xb8>)
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002280:	bf00      	nop
 8002282:	37b8      	adds	r7, #184	; 0xb8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	4000d400 	.word	0x4000d400
 800228c:	40021000 	.word	0x40021000
 8002290:	42020000 	.word	0x42020000

08002294 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	202d      	movs	r0, #45	; 0x2d
 80022aa:	f002 f803 	bl	80042b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022ae:	202d      	movs	r0, #45	; 0x2d
 80022b0:	f002 f81a 	bl	80042e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_InitTick+0xa0>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_InitTick+0xa0>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6593      	str	r3, [r2, #88]	; 0x58
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_InitTick+0xa0>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022cc:	f107 0210 	add.w	r2, r7, #16
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 ff64 	bl	80061a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022dc:	f003 ff3a 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 80022e0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_InitTick+0xa4>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0c9b      	lsrs	r3, r3, #18
 80022ec:	3b01      	subs	r3, #1
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0xa8>)
 80022f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80022f8:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_InitTick+0xa8>)
 80022fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022fe:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_InitTick+0xa8>)
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_InitTick+0xa8>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_InitTick+0xa8>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002312:	480a      	ldr	r0, [pc, #40]	; (800233c <HAL_InitTick+0xa8>)
 8002314:	f004 ff3d 	bl	8007192 <HAL_TIM_Base_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d104      	bne.n	8002328 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800231e:	4807      	ldr	r0, [pc, #28]	; (800233c <HAL_InitTick+0xa8>)
 8002320:	f004 ff8e 	bl	8007240 <HAL_TIM_Base_Start_IT>
 8002324:	4603      	mov	r3, r0
 8002326:	e000      	b.n	800232a <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	3730      	adds	r7, #48	; 0x30
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	431bde83 	.word	0x431bde83
 800233c:	20000934 	.word	0x20000934

08002340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <NMI_Handler+0x4>

08002346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <HardFault_Handler+0x4>

0800234c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <MemManage_Handler+0x4>

08002352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <BusFault_Handler+0x4>

08002358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <UsageFault_Handler+0x4>

0800235e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <DMA1_Channel1_IRQHandler+0x10>)
 8002372:	f002 f9a5 	bl	80046c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000130 	.word	0x20000130

08002380 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <ADC1_2_IRQHandler+0x10>)
 8002386:	f000 fdb7 	bl	8002ef8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200000c8 	.word	0x200000c8

08002394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <TIM2_IRQHandler+0x10>)
 800239a:	f005 fa30 	bl	80077fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000934 	.word	0x20000934

080023a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <TIM3_IRQHandler+0x10>)
 80023ae:	f005 fa26 	bl	80077fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000548 	.word	0x20000548

080023bc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <TIM6_IRQHandler+0x10>)
 80023c2:	f005 fa1c 	bl	80077fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200005e0 	.word	0x200005e0

080023d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <UART4_IRQHandler+0x10>)
 80023d6:	f006 fd0b 	bl	8008df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000280 	.word	0x20000280

080023e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <_sbrk+0x5c>)
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <_sbrk+0x60>)
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <_sbrk+0x64>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <_sbrk+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d207      	bcs.n	8002424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002414:	f00b fb60 	bl	800dad8 <__errno>
 8002418:	4603      	mov	r3, r0
 800241a:	220c      	movs	r2, #12
 800241c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e009      	b.n	8002438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <_sbrk+0x64>)
 8002434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20030000 	.word	0x20030000
 8002444:	00000400 	.word	0x00000400
 8002448:	20000980 	.word	0x20000980
 800244c:	20003818 	.word	0x20003818

08002450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <SystemInit+0x20>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <SystemInit+0x20>)
 800245c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800247a:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <SystemCoreClockUpdate+0x144>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8002486:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <SystemCoreClockUpdate+0x144>)
 8002488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	e005      	b.n	80024a2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8002496:	4b48      	ldr	r3, [pc, #288]	; (80025b8 <SystemCoreClockUpdate+0x144>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80024a2:	4a46      	ldr	r2, [pc, #280]	; (80025bc <SystemCoreClockUpdate+0x148>)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <SystemCoreClockUpdate+0x144>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d866      	bhi.n	8002586 <SystemCoreClockUpdate+0x112>
 80024b8:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <SystemCoreClockUpdate+0x4c>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	080024f5 	.word	0x080024f5
 80024c4:	08002587 	.word	0x08002587
 80024c8:	08002587 	.word	0x08002587
 80024cc:	08002587 	.word	0x08002587
 80024d0:	080024fd 	.word	0x080024fd
 80024d4:	08002587 	.word	0x08002587
 80024d8:	08002587 	.word	0x08002587
 80024dc:	08002587 	.word	0x08002587
 80024e0:	08002505 	.word	0x08002505
 80024e4:	08002587 	.word	0x08002587
 80024e8:	08002587 	.word	0x08002587
 80024ec:	08002587 	.word	0x08002587
 80024f0:	0800250d 	.word	0x0800250d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80024f4:	4a32      	ldr	r2, [pc, #200]	; (80025c0 <SystemCoreClockUpdate+0x14c>)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6013      	str	r3, [r2, #0]
      break;
 80024fa:	e048      	b.n	800258e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <SystemCoreClockUpdate+0x14c>)
 80024fe:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <SystemCoreClockUpdate+0x150>)
 8002500:	601a      	str	r2, [r3, #0]
      break;
 8002502:	e044      	b.n	800258e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <SystemCoreClockUpdate+0x14c>)
 8002506:	4a30      	ldr	r2, [pc, #192]	; (80025c8 <SystemCoreClockUpdate+0x154>)
 8002508:	601a      	str	r2, [r3, #0]
      break;
 800250a:	e040      	b.n	800258e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <SystemCoreClockUpdate+0x144>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8002516:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <SystemCoreClockUpdate+0x144>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	3301      	adds	r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <SystemCoreClockUpdate+0xbe>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d006      	beq.n	800253e <SystemCoreClockUpdate+0xca>
 8002530:	e00b      	b.n	800254a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002532:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <SystemCoreClockUpdate+0x150>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	613b      	str	r3, [r7, #16]
          break;
 800253c:	e00b      	b.n	8002556 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800253e:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <SystemCoreClockUpdate+0x154>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	613b      	str	r3, [r7, #16]
          break;
 8002548:	e005      	b.n	8002556 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	613b      	str	r3, [r7, #16]
          break;
 8002554:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <SystemCoreClockUpdate+0x144>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <SystemCoreClockUpdate+0x144>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0e5b      	lsrs	r3, r3, #25
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <SystemCoreClockUpdate+0x14c>)
 8002582:	6013      	str	r3, [r2, #0]
      break;
 8002584:	e003      	b.n	800258e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8002586:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <SystemCoreClockUpdate+0x14c>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	6013      	str	r3, [r2, #0]
      break;
 800258c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <SystemCoreClockUpdate+0x144>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <SystemCoreClockUpdate+0x158>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <SystemCoreClockUpdate+0x14c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <SystemCoreClockUpdate+0x14c>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40021000 	.word	0x40021000
 80025bc:	0800e7e8 	.word	0x0800e7e8
 80025c0:	20000004 	.word	0x20000004
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	0800e7d0 	.word	0x0800e7d0

080025d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80025d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002608 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025d4:	f7ff ff3c 	bl	8002450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025da:	e003      	b.n	80025e4 <LoopCopyDataInit>

080025dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025e2:	3104      	adds	r1, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025e4:	480a      	ldr	r0, [pc, #40]	; (8002610 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <LoopForever+0xe>)
	adds	r2, r0, r1
 80025e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025ec:	d3f6      	bcc.n	80025dc <CopyDataInit>
	ldr	r2, =_sbss
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <LoopForever+0x12>)
	b	LoopFillZerobss
 80025f0:	e002      	b.n	80025f8 <LoopFillZerobss>

080025f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025f4:	f842 3b04 	str.w	r3, [r2], #4

080025f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <LoopForever+0x16>)
	cmp	r2, r3
 80025fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80025fc:	d3f9      	bcc.n	80025f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025fe:	f00b fa71 	bl	800dae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002602:	f7fe f98f 	bl	8000924 <main>

08002606 <LoopForever>:

LoopForever:
    b LoopForever
 8002606:	e7fe      	b.n	8002606 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002608:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800260c:	0800e980 	.word	0x0800e980
	ldr	r0, =_sdata
 8002610:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002614:	20000064 	.word	0x20000064
	ldr	r2, =_sbss
 8002618:	20000064 	.word	0x20000064
	ldr	r3, = _ebss
 800261c:	20003818 	.word	0x20003818

08002620 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002620:	e7fe      	b.n	8002620 <COMP_IRQHandler>

08002622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800262c:	2004      	movs	r0, #4
 800262e:	f001 fe36 	bl	800429e <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002632:	f7ff ff1f 	bl	8002474 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002636:	2007      	movs	r0, #7
 8002638:	f7ff fe2c 	bl	8002294 <HAL_InitTick>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	71fb      	strb	r3, [r7, #7]
 8002646:	e001      	b.n	800264c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002648:	f7ff f934 	bl	80018b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800264c:	79fb      	ldrb	r3, [r7, #7]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_IncTick+0x20>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_IncTick+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4413      	add	r3, r2
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <HAL_IncTick+0x24>)
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	2000000c 	.word	0x2000000c
 800267c:	20000984 	.word	0x20000984

08002680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return uwTick;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_GetTick+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000984 	.word	0x20000984

08002698 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	609a      	str	r2, [r3, #8]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3360      	adds	r3, #96	; 0x60
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <LL_ADC_SetOffset+0x44>)
 8002722:	4013      	ands	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	4313      	orrs	r3, r2
 8002730:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	03fff000 	.word	0x03fff000

08002748 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3360      	adds	r3, #96	; 0x60
 8002756:	461a      	mov	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3360      	adds	r3, #96	; 0x60
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	431a      	orrs	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	615a      	str	r2, [r3, #20]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b087      	sub	sp, #28
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3330      	adds	r3, #48	; 0x30
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	4413      	add	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	211f      	movs	r1, #31
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	401a      	ands	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	f003 011f 	and.w	r1, r3, #31
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	431a      	orrs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3314      	adds	r3, #20
 8002884:	461a      	mov	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	0e5b      	lsrs	r3, r3, #25
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	0d1b      	lsrs	r3, r3, #20
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	2107      	movs	r1, #7
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	401a      	ands	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	0d1b      	lsrs	r3, r3, #20
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	431a      	orrs	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e4:	43db      	mvns	r3, r3
 80028e6:	401a      	ands	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0318 	and.w	r3, r3, #24
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028f0:	40d9      	lsrs	r1, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	400b      	ands	r3, r1
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	431a      	orrs	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	0007ffff 	.word	0x0007ffff

08002914 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 031f 	and.w	r3, r3, #31
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800295c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6093      	str	r3, [r2, #8]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002984:	d101      	bne.n	800298a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d4:	d101      	bne.n	80029da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a24:	f043 0202 	orr.w	r2, r3, #2
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <LL_ADC_IsEnabled+0x18>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_ADC_IsEnabled+0x1a>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d101      	bne.n	8002a76 <LL_ADC_IsDisableOngoing+0x18>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <LL_ADC_IsDisableOngoing+0x1a>
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a98:	f043 0204 	orr.w	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d101      	bne.n	8002ac4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d101      	bne.n	8002aea <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e12e      	b.n	8002d70 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fe feef 	bl	8001904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff19 	bl	8002970 <LL_ADC_IsDeepPowerDownEnabled>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff feff 	bl	800294c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff34 	bl	80029c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff18 	bl	8002998 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b68:	4b83      	ldr	r3, [pc, #524]	; (8002d78 <HAL_ADC_Init+0x280>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	4a83      	ldr	r2, [pc, #524]	; (8002d7c <HAL_ADC_Init+0x284>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	3301      	adds	r3, #1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b7c:	e002      	b.n	8002b84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f9      	bne.n	8002b7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff16 	bl	80029c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10d      	bne.n	8002bb6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f043 0210 	orr.w	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	f043 0201 	orr.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff76 	bl	8002aac <LL_ADC_REG_IsConversionOngoing>
 8002bc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 80c7 	bne.w	8002d5e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 80c3 	bne.w	8002d5e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002be0:	f043 0202 	orr.w	r2, r3, #2
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff23 	bl	8002a38 <LL_ADC_IsEnabled>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d110      	bne.n	8002c1a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bf8:	4861      	ldr	r0, [pc, #388]	; (8002d80 <HAL_ADC_Init+0x288>)
 8002bfa:	f7ff ff1d 	bl	8002a38 <LL_ADC_IsEnabled>
 8002bfe:	4604      	mov	r4, r0
 8002c00:	4860      	ldr	r0, [pc, #384]	; (8002d84 <HAL_ADC_Init+0x28c>)
 8002c02:	f7ff ff19 	bl	8002a38 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4323      	orrs	r3, r4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4619      	mov	r1, r3
 8002c14:	485c      	ldr	r0, [pc, #368]	; (8002d88 <HAL_ADC_Init+0x290>)
 8002c16:	f7ff fd3f 	bl	8002698 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7e5b      	ldrb	r3, [r3, #25]
 8002c1e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c24:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c2a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c30:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c38:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	045b      	lsls	r3, r3, #17
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	4b44      	ldr	r3, [pc, #272]	; (8002d8c <HAL_ADC_Init+0x294>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	69b9      	ldr	r1, [r7, #24]
 8002c82:	430b      	orrs	r3, r1
 8002c84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff21 	bl	8002ad2 <LL_ADC_INJ_IsConversionOngoing>
 8002c90:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d140      	bne.n	8002d1a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d13d      	bne.n	8002d1a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7e1b      	ldrb	r3, [r3, #24]
 8002ca6:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ca8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cb0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc0:	f023 0306 	bic.w	r3, r3, #6
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	69b9      	ldr	r1, [r7, #24]
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d118      	bne.n	8002d0a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cf4:	4311      	orrs	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	611a      	str	r2, [r3, #16]
 8002d08:	e007      	b.n	8002d1a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10c      	bne.n	8002d3c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f023 010f 	bic.w	r1, r3, #15
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
 8002d3a:	e007      	b.n	8002d4c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 020f 	bic.w	r2, r2, #15
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	f023 0303 	bic.w	r3, r3, #3
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d5c:	e007      	b.n	8002d6e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	f043 0210 	orr.w	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3724      	adds	r7, #36	; 0x24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd90      	pop	{r4, r7, pc}
 8002d78:	20000004 	.word	0x20000004
 8002d7c:	053e2d63 	.word	0x053e2d63
 8002d80:	42028000 	.word	0x42028000
 8002d84:	42028100 	.word	0x42028100
 8002d88:	42028300 	.word	0x42028300
 8002d8c:	fff0c007 	.word	0xfff0c007

08002d90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d9c:	4850      	ldr	r0, [pc, #320]	; (8002ee0 <HAL_ADC_Start_DMA+0x150>)
 8002d9e:	f7ff fdb9 	bl	8002914 <LL_ADC_GetMultimode>
 8002da2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fe7f 	bl	8002aac <LL_ADC_REG_IsConversionOngoing>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 808e 	bne.w	8002ed2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_Start_DMA+0x34>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e089      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x148>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d002      	beq.n	8002dde <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	d172      	bne.n	8002ec4 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 feac 	bl	8003b3c <ADC_Enable>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d165      	bne.n	8002eba <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a37      	ldr	r2, [pc, #220]	; (8002ee4 <HAL_ADC_Start_DMA+0x154>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d002      	beq.n	8002e12 <HAL_ADC_Start_DMA+0x82>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	e000      	b.n	8002e14 <HAL_ADC_Start_DMA+0x84>
 8002e12:	4b35      	ldr	r3, [pc, #212]	; (8002ee8 <HAL_ADC_Start_DMA+0x158>)
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d002      	beq.n	8002e22 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d105      	bne.n	8002e2e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	f023 0206 	bic.w	r2, r3, #6
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e46:	e002      	b.n	8002e4e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e52:	4a26      	ldr	r2, [pc, #152]	; (8002eec <HAL_ADC_Start_DMA+0x15c>)
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5a:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_ADC_Start_DMA+0x160>)
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e62:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_ADC_Start_DMA+0x164>)
 8002e64:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	221c      	movs	r2, #28
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0210 	orr.w	r2, r2, #16
 8002e84:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3340      	adds	r3, #64	; 0x40
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f001 fad5 	bl	8004454 <HAL_DMA_Start_IT>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fde6 	bl	8002a84 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002eb8:	e00d      	b.n	8002ed6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8002ec2:	e008      	b.n	8002ed6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002ed0:	e001      	b.n	8002ed6 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	42028300 	.word	0x42028300
 8002ee4:	42028100 	.word	0x42028100
 8002ee8:	42028000 	.word	0x42028000
 8002eec:	08003d07 	.word	0x08003d07
 8002ef0:	08003ddf 	.word	0x08003ddf
 8002ef4:	08003dfb 	.word	0x08003dfb

08002ef8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f14:	4882      	ldr	r0, [pc, #520]	; (8003120 <HAL_ADC_IRQHandler+0x228>)
 8002f16:	f7ff fcfd 	bl	8002914 <LL_ADC_GetMultimode>
 8002f1a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d017      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x5e>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f001 f84d 	bl	8003fe8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2202      	movs	r2, #2
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_ADC_IRQHandler+0x72>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8083 	beq.w	800307c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d07d      	beq.n	800307c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fc17 	bl	80027d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d062      	beq.n	800306e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5d      	ldr	r2, [pc, #372]	; (8003124 <HAL_ADC_IRQHandler+0x22c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d002      	beq.n	8002fb8 <HAL_ADC_IRQHandler+0xc0>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_IRQHandler+0xc2>
 8002fb8:	4b5b      	ldr	r3, [pc, #364]	; (8003128 <HAL_ADC_IRQHandler+0x230>)
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d008      	beq.n	8002fd4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d002      	beq.n	8002fd4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b09      	cmp	r3, #9
 8002fd2:	d104      	bne.n	8002fde <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	623b      	str	r3, [r7, #32]
 8002fdc:	e00c      	b.n	8002ff8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a50      	ldr	r2, [pc, #320]	; (8003124 <HAL_ADC_IRQHandler+0x22c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d002      	beq.n	8002fee <HAL_ADC_IRQHandler+0xf6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	e000      	b.n	8002ff0 <HAL_ADC_IRQHandler+0xf8>
 8002fee:	4b4e      	ldr	r3, [pc, #312]	; (8003128 <HAL_ADC_IRQHandler+0x230>)
 8002ff0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d135      	bne.n	800306e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b08      	cmp	r3, #8
 800300e:	d12e      	bne.n	800306e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fd49 	bl	8002aac <LL_ADC_REG_IsConversionOngoing>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d11a      	bne.n	8003056 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 020c 	bic.w	r2, r2, #12
 800302e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d112      	bne.n	800306e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	659a      	str	r2, [r3, #88]	; 0x58
 8003054:	e00b      	b.n	800306e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f043 0210 	orr.w	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd fa88 	bl	8000584 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	220c      	movs	r2, #12
 800307a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <HAL_ADC_IRQHandler+0x198>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 809f 	beq.w	80031da <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8099 	beq.w	80031da <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fbc2 	bl	800284e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80030ca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fb7d 	bl	80027d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030d6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a11      	ldr	r2, [pc, #68]	; (8003124 <HAL_ADC_IRQHandler+0x22c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d002      	beq.n	80030e8 <HAL_ADC_IRQHandler+0x1f0>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	e000      	b.n	80030ea <HAL_ADC_IRQHandler+0x1f2>
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <HAL_ADC_IRQHandler+0x230>)
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d008      	beq.n	8003104 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d002      	beq.n	8003104 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b07      	cmp	r3, #7
 8003102:	d104      	bne.n	800310e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	623b      	str	r3, [r7, #32]
 800310c:	e013      	b.n	8003136 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a04      	ldr	r2, [pc, #16]	; (8003124 <HAL_ADC_IRQHandler+0x22c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_ADC_IRQHandler+0x234>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	e007      	b.n	800312e <HAL_ADC_IRQHandler+0x236>
 800311e:	bf00      	nop
 8003120:	42028300 	.word	0x42028300
 8003124:	42028100 	.word	0x42028100
 8003128:	42028000 	.word	0x42028000
 800312c:	4b7d      	ldr	r3, [pc, #500]	; (8003324 <HAL_ADC_IRQHandler+0x42c>)
 800312e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d047      	beq.n	80031cc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_ADC_IRQHandler+0x25e>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d03f      	beq.n	80031cc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003152:	2b00      	cmp	r3, #0
 8003154:	d13a      	bne.n	80031cc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d133      	bne.n	80031cc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d12e      	bne.n	80031cc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fcad 	bl	8002ad2 <LL_ADC_INJ_IsConversionOngoing>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d11a      	bne.n	80031b4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800318c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d112      	bne.n	80031cc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	659a      	str	r2, [r3, #88]	; 0x58
 80031b2:	e00b      	b.n	80031cc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	f043 0210 	orr.w	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fee3 	bl	8003f98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2260      	movs	r2, #96	; 0x60
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d011      	beq.n	8003208 <HAL_ADC_IRQHandler+0x310>
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00c      	beq.n	8003208 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f8a0 	bl	8003340 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d012      	beq.n	8003238 <HAL_ADC_IRQHandler+0x340>
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fec9 	bl	8003fc0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003236:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323e:	2b00      	cmp	r3, #0
 8003240:	d012      	beq.n	8003268 <HAL_ADC_IRQHandler+0x370>
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 febb 	bl	8003fd4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003266:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d036      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x3e8>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d031      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003284:	2301      	movs	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	e014      	b.n	80032b4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003290:	4825      	ldr	r0, [pc, #148]	; (8003328 <HAL_ADC_IRQHandler+0x430>)
 8003292:	f7ff fb4d 	bl	8002930 <LL_ADC_GetMultiDMATransfer>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800329c:	2301      	movs	r3, #1
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	e008      	b.n	80032b4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80032b0:	2301      	movs	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d10e      	bne.n	80032d8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	f043 0202 	orr.w	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f83e 	bl	8003354 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2210      	movs	r2, #16
 80032de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d018      	beq.n	800331c <HAL_ADC_IRQHandler+0x424>
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	f043 0208 	orr.w	r2, r3, #8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fe48 	bl	8003fac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800331c:	bf00      	nop
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	42028000 	.word	0x42028000
 8003328:	42028300 	.word	0x42028300

0800332c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b0b7      	sub	sp, #220	; 0xdc
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_ADC_ConfigChannel+0x22>
 8003386:	2302      	movs	r3, #2
 8003388:	e3c1      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x7a6>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fb88 	bl	8002aac <LL_ADC_REG_IsConversionOngoing>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 83a6 	bne.w	8003af0 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f7ff fa20 	bl	80027f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fb76 	bl	8002aac <LL_ADC_REG_IsConversionOngoing>
 80033c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fb82 	bl	8002ad2 <LL_ADC_INJ_IsConversionOngoing>
 80033ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 81c1 	bne.w	800375e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 81bc 	bne.w	800375e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ee:	d10f      	bne.n	8003410 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2200      	movs	r2, #0
 80033fa:	4619      	mov	r1, r3
 80033fc:	f7ff fa3a 	bl	8002874 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff f9ce 	bl	80027aa <LL_ADC_SetSamplingTimeCommonConfig>
 800340e:	e00e      	b.n	800342e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	6819      	ldr	r1, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	461a      	mov	r2, r3
 800341e:	f7ff fa29 	bl	8002874 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff f9be 	bl	80027aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	08db      	lsrs	r3, r3, #3
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d00a      	beq.n	8003466 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6919      	ldr	r1, [r3, #16]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003460:	f7ff f94e 	bl	8002700 <LL_ADC_SetOffset>
 8003464:	e17b      	b.n	800375e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff f96b 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003472:	4603      	mov	r3, r0
 8003474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x12a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff f960 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003488:	4603      	mov	r3, r0
 800348a:	0e9b      	lsrs	r3, r3, #26
 800348c:	f003 021f 	and.w	r2, r3, #31
 8003490:	e01e      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x168>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff f955 	bl	8002748 <LL_ADC_GetOffsetChannel>
 800349e:	4603      	mov	r3, r0
 80034a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80034c0:	2320      	movs	r3, #32
 80034c2:	e004      	b.n	80034ce <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80034c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x180>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	0e9b      	lsrs	r3, r3, #26
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	e018      	b.n	800351a <HAL_ADC_ConfigChannel+0x1b2>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80034fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003504:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e004      	b.n	800351a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003510:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800351a:	429a      	cmp	r2, r3
 800351c:	d106      	bne.n	800352c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2200      	movs	r2, #0
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff f924 	bl	8002774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2101      	movs	r1, #1
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff f908 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003538:	4603      	mov	r3, r0
 800353a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x1f0>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff f8fd 	bl	8002748 <LL_ADC_GetOffsetChannel>
 800354e:	4603      	mov	r3, r0
 8003550:	0e9b      	lsrs	r3, r3, #26
 8003552:	f003 021f 	and.w	r2, r3, #31
 8003556:	e01e      	b.n	8003596 <HAL_ADC_ConfigChannel+0x22e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2101      	movs	r1, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff f8f2 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003564:	4603      	mov	r3, r0
 8003566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800357a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800357e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8003586:	2320      	movs	r3, #32
 8003588:	e004      	b.n	8003594 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800358a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d105      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x246>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	0e9b      	lsrs	r3, r3, #26
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	e018      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x278>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80035c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80035ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80035d2:	2320      	movs	r3, #32
 80035d4:	e004      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80035d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d106      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff f8c1 	bl	8002774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff f8a5 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80035fe:	4603      	mov	r3, r0
 8003600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <HAL_ADC_ConfigChannel+0x2b6>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2102      	movs	r1, #2
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f89a 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003614:	4603      	mov	r3, r0
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	e01e      	b.n	800365c <HAL_ADC_ConfigChannel+0x2f4>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff f88f 	bl	8002748 <LL_ADC_GetOffsetChannel>
 800362a:	4603      	mov	r3, r0
 800362c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800363c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 800364c:	2320      	movs	r3, #32
 800364e:	e004      	b.n	800365a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x30c>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	e016      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x33a>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800368c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e004      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8003698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d106      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f860 	bl	8002774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2103      	movs	r1, #3
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff f844 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x378>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2103      	movs	r1, #3
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff f839 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80036d6:	4603      	mov	r3, r0
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	f003 021f 	and.w	r2, r3, #31
 80036de:	e017      	b.n	8003710 <HAL_ADC_ConfigChannel+0x3a8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2103      	movs	r1, #3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff f82e 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80036ec:	4603      	mov	r3, r0
 80036ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80036f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036fa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80036fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e003      	b.n	800370e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x3c0>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	e011      	b.n	800374c <HAL_ADC_ConfigChannel+0x3e4>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003738:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800373a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e003      	b.n	800374c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800374c:	429a      	cmp	r2, r3
 800374e:	d106      	bne.n	800375e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2200      	movs	r2, #0
 8003756:	2103      	movs	r1, #3
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff f80b 	bl	8002774 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f968 	bl	8002a38 <LL_ADC_IsEnabled>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 81c9 	bne.w	8003b02 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6819      	ldr	r1, [r3, #0]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	461a      	mov	r2, r3
 800377e:	f7ff f8a5 	bl	80028cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	4a8f      	ldr	r2, [pc, #572]	; (80039c4 <HAL_ADC_ConfigChannel+0x65c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	f040 8131 	bne.w	80039f0 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x44e>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	0e9b      	lsrs	r3, r3, #26
 80037a4:	3301      	adds	r3, #1
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2b09      	cmp	r3, #9
 80037ac:	bf94      	ite	ls
 80037ae:	2301      	movls	r3, #1
 80037b0:	2300      	movhi	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e019      	b.n	80037ea <HAL_ADC_ConfigChannel+0x482>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80037c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037c6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80037c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80037ce:	2320      	movs	r3, #32
 80037d0:	e003      	b.n	80037da <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80037d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	2b09      	cmp	r3, #9
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d079      	beq.n	80038e2 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <HAL_ADC_ConfigChannel+0x4a2>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	0e9b      	lsrs	r3, r3, #26
 8003800:	3301      	adds	r3, #1
 8003802:	069b      	lsls	r3, r3, #26
 8003804:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003808:	e015      	b.n	8003836 <HAL_ADC_ConfigChannel+0x4ce>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003812:	fa93 f3a3 	rbit	r3, r3
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800381c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003822:	2320      	movs	r3, #32
 8003824:	e003      	b.n	800382e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	3301      	adds	r3, #1
 8003830:	069b      	lsls	r3, r3, #26
 8003832:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x4ee>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	0e9b      	lsrs	r3, r3, #26
 8003848:	3301      	adds	r3, #1
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f303 	lsl.w	r3, r1, r3
 8003854:	e017      	b.n	8003886 <HAL_ADC_ConfigChannel+0x51e>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e003      	b.n	800387a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8003872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	ea42 0103 	orr.w	r1, r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x544>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	0e9b      	lsrs	r3, r3, #26
 800389c:	3301      	adds	r3, #1
 800389e:	f003 021f 	and.w	r2, r3, #31
 80038a2:	4613      	mov	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	051b      	lsls	r3, r3, #20
 80038aa:	e018      	b.n	80038de <HAL_ADC_ConfigChannel+0x576>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80038be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80038c4:	2320      	movs	r3, #32
 80038c6:	e003      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	f003 021f 	and.w	r2, r3, #31
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038de:	430b      	orrs	r3, r1
 80038e0:	e081      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d107      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x596>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	0e9b      	lsrs	r3, r3, #26
 80038f4:	3301      	adds	r3, #1
 80038f6:	069b      	lsls	r3, r3, #26
 80038f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038fc:	e015      	b.n	800392a <HAL_ADC_ConfigChannel+0x5c2>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8003916:	2320      	movs	r3, #32
 8003918:	e003      	b.n	8003922 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	3301      	adds	r3, #1
 8003924:	069b      	lsls	r3, r3, #26
 8003926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_ADC_ConfigChannel+0x5e2>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0e9b      	lsrs	r3, r3, #26
 800393c:	3301      	adds	r3, #1
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2101      	movs	r1, #1
 8003944:	fa01 f303 	lsl.w	r3, r1, r3
 8003948:	e017      	b.n	800397a <HAL_ADC_ConfigChannel+0x612>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	61fb      	str	r3, [r7, #28]
  return result;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8003962:	2320      	movs	r3, #32
 8003964:	e003      	b.n	800396e <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	2101      	movs	r1, #1
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	ea42 0103 	orr.w	r1, r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10d      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x63e>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0e9b      	lsrs	r3, r3, #26
 8003990:	3301      	adds	r3, #1
 8003992:	f003 021f 	and.w	r2, r3, #31
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	3b1e      	subs	r3, #30
 800399e:	051b      	lsls	r3, r3, #20
 80039a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039a4:	e01e      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x67c>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	613b      	str	r3, [r7, #16]
  return result;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80039be:	2320      	movs	r3, #32
 80039c0:	e006      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x668>
 80039c2:	bf00      	nop
 80039c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	fab3 f383 	clz	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	3301      	adds	r3, #1
 80039d2:	f003 021f 	and.w	r2, r3, #31
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	3b1e      	subs	r3, #30
 80039de:	051b      	lsls	r3, r3, #20
 80039e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ea:	4619      	mov	r1, r3
 80039ec:	f7fe ff42 	bl	8002874 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <HAL_ADC_ConfigChannel+0x7b0>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8082 	beq.w	8003b02 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039fe:	4847      	ldr	r0, [pc, #284]	; (8003b1c <HAL_ADC_ConfigChannel+0x7b4>)
 8003a00:	f7fe fe70 	bl	80026e4 <LL_ADC_GetCommonPathInternalCh>
 8003a04:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a08:	4845      	ldr	r0, [pc, #276]	; (8003b20 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a0a:	f7ff f815 	bl	8002a38 <LL_ADC_IsEnabled>
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4844      	ldr	r0, [pc, #272]	; (8003b24 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a12:	f7ff f811 	bl	8002a38 <LL_ADC_IsEnabled>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4323      	orrs	r3, r4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d15e      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a41      	ldr	r2, [pc, #260]	; (8003b28 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d127      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d121      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a39      	ldr	r2, [pc, #228]	; (8003b20 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d161      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a46:	4619      	mov	r1, r3
 8003a48:	4834      	ldr	r0, [pc, #208]	; (8003b1c <HAL_ADC_ConfigChannel+0x7b4>)
 8003a4a:	f7fe fe38 	bl	80026be <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_ADC_ConfigChannel+0x7c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	099b      	lsrs	r3, r3, #6
 8003a54:	4a36      	ldr	r2, [pc, #216]	; (8003b30 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	099b      	lsrs	r3, r3, #6
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	4613      	mov	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003a66:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003a68:	e002      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f9      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a76:	e044      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2d      	ldr	r2, [pc, #180]	; (8003b34 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d113      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10d      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d134      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	481e      	ldr	r0, [pc, #120]	; (8003b1c <HAL_ADC_ConfigChannel+0x7b4>)
 8003aa4:	f7fe fe0b 	bl	80026be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aa8:	e02b      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <HAL_ADC_ConfigChannel+0x7d0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d126      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d120      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <HAL_ADC_ConfigChannel+0x7b8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d11b      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4811      	ldr	r0, [pc, #68]	; (8003b1c <HAL_ADC_ConfigChannel+0x7b4>)
 8003ad6:	f7fe fdf2 	bl	80026be <LL_ADC_SetCommonPathInternalCh>
 8003ada:	e012      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003aee:	e008      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003b0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	37dc      	adds	r7, #220	; 0xdc
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd90      	pop	{r4, r7, pc}
 8003b16:	bf00      	nop
 8003b18:	80080000 	.word	0x80080000
 8003b1c:	42028300 	.word	0x42028300
 8003b20:	42028000 	.word	0x42028000
 8003b24:	42028100 	.word	0x42028100
 8003b28:	c7520000 	.word	0xc7520000
 8003b2c:	20000004 	.word	0x20000004
 8003b30:	053e2d63 	.word	0x053e2d63
 8003b34:	cb840000 	.word	0xcb840000
 8003b38:	80000001 	.word	0x80000001

08003b3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe ff73 	bl	8002a38 <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d169      	bne.n	8003c2c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	4b36      	ldr	r3, [pc, #216]	; (8003c38 <ADC_Enable+0xfc>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00d      	beq.n	8003b82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	f043 0210 	orr.w	r2, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	f043 0201 	orr.w	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e055      	b.n	8003c2e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe ff2e 	bl	80029e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b8c:	482b      	ldr	r0, [pc, #172]	; (8003c3c <ADC_Enable+0x100>)
 8003b8e:	f7fe fda9 	bl	80026e4 <LL_ADC_GetCommonPathInternalCh>
 8003b92:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b9c:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <ADC_Enable+0x104>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	4a28      	ldr	r2, [pc, #160]	; (8003c44 <ADC_Enable+0x108>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	099b      	lsrs	r3, r3, #6
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bb6:	e002      	b.n	8003bbe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f9      	bne.n	8003bb8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bc4:	f7fe fd5c 	bl	8002680 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bca:	e028      	b.n	8003c1e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe ff31 	bl	8002a38 <LL_ADC_IsEnabled>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe ff01 	bl	80029e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003be6:	f7fe fd4b 	bl	8002680 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d914      	bls.n	8003c1e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d00d      	beq.n	8003c1e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c06:	f043 0210 	orr.w	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	f043 0201 	orr.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e007      	b.n	8003c2e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d1cf      	bne.n	8003bcc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	8000003f 	.word	0x8000003f
 8003c3c:	42028300 	.word	0x42028300
 8003c40:	20000004 	.word	0x20000004
 8003c44:	053e2d63 	.word	0x053e2d63

08003c48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe ff02 	bl	8002a5e <LL_ADC_IsDisableOngoing>
 8003c5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe fee9 	bl	8002a38 <LL_ADC_IsEnabled>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d047      	beq.n	8003cfc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d144      	bne.n	8003cfc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030d 	and.w	r3, r3, #13
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d10c      	bne.n	8003c9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fec3 	bl	8002a10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2203      	movs	r2, #3
 8003c90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c92:	f7fe fcf5 	bl	8002680 <HAL_GetTick>
 8003c96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c98:	e029      	b.n	8003cee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	f043 0210 	orr.w	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e023      	b.n	8003cfe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cb6:	f7fe fce3 	bl	8002680 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d914      	bls.n	8003cee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	f043 0210 	orr.w	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e007      	b.n	8003cfe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1dc      	bne.n	8003cb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d14b      	bne.n	8003db8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d021      	beq.n	8003d7e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fd46 	bl	80027d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d032      	beq.n	8003db0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d12b      	bne.n	8003db0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d11f      	bne.n	8003db0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	f043 0201 	orr.w	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d7c:	e018      	b.n	8003db0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d111      	bne.n	8003db0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	f043 0201 	orr.w	r2, r3, #1
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7fc fbe7 	bl	8000584 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003db6:	e00e      	b.n	8003dd6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff fac5 	bl	8003354 <HAL_ADC_ErrorCallback>
}
 8003dca:	e004      	b.n	8003dd6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff fa9d 	bl	800332c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff fa97 	bl	8003354 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <LL_ADC_IsEnabled>:
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <LL_ADC_IsEnabled+0x18>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <LL_ADC_IsEnabled+0x1a>
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_ADC_StartCalibration>:
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <LL_ADC_IsCalibrationOnGoing>:
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e9a:	d101      	bne.n	8003ea0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <LL_ADC_REG_IsConversionOngoing>:
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d101      	bne.n	8003ec6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_ADCEx_Calibration_Start+0x1c>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e04d      	b.n	8003f8c <HAL_ADCEx_Calibration_Start+0xb8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fea5 	bl	8003c48 <ADC_Disable>
 8003efe:	4603      	mov	r3, r0
 8003f00:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d136      	bne.n	8003f76 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f10:	f023 0302 	bic.w	r3, r3, #2
 8003f14:	f043 0202 	orr.w	r2, r3, #2
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6839      	ldr	r1, [r7, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff96 	bl	8003e54 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f28:	e014      	b.n	8003f54 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d90d      	bls.n	8003f54 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	f023 0312 	bic.w	r3, r3, #18
 8003f40:	f043 0210 	orr.w	r2, r3, #16
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e01b      	b.n	8003f8c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff94 	bl	8003e86 <LL_ADC_IsCalibrationOnGoing>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e2      	bne.n	8003f2a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	f023 0303 	bic.w	r3, r3, #3
 8003f6c:	f043 0201 	orr.w	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	659a      	str	r2, [r3, #88]	; 0x58
 8003f74:	e005      	b.n	8003f82 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	f043 0210 	orr.w	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	0006cbff 	.word	0x0006cbff

08003f98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b0a1      	sub	sp, #132	; 0x84
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004016:	2302      	movs	r3, #2
 8004018:	e089      	b.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004022:	2300      	movs	r3, #0
 8004024:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004026:	2300      	movs	r3, #0
 8004028:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a42      	ldr	r2, [pc, #264]	; (8004138 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d102      	bne.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004034:	4b41      	ldr	r3, [pc, #260]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e001      	b.n	800403e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f043 0220 	orr.w	r2, r3, #32
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e068      	b.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ff25 	bl	8003eae <LL_ADC_REG_IsConversionOngoing>
 8004064:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ff1f 	bl	8003eae <LL_ADC_REG_IsConversionOngoing>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d14a      	bne.n	800410c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004078:	2b00      	cmp	r3, #0
 800407a:	d147      	bne.n	800410c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800407c:	4b30      	ldr	r3, [pc, #192]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800407e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d027      	beq.n	80040d8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800409a:	035b      	lsls	r3, r3, #13
 800409c:	430b      	orrs	r3, r1
 800409e:	431a      	orrs	r2, r3
 80040a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a4:	4824      	ldr	r0, [pc, #144]	; (8004138 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80040a6:	f7ff fec2 	bl	8003e2e <LL_ADC_IsEnabled>
 80040aa:	4604      	mov	r4, r0
 80040ac:	4823      	ldr	r0, [pc, #140]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040ae:	f7ff febe 	bl	8003e2e <LL_ADC_IsEnabled>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4323      	orrs	r3, r4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d132      	bne.n	8004120 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040c2:	f023 030f 	bic.w	r3, r3, #15
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	6811      	ldr	r1, [r2, #0]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	6892      	ldr	r2, [r2, #8]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	431a      	orrs	r2, r3
 80040d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040d6:	e023      	b.n	8004120 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040e4:	4814      	ldr	r0, [pc, #80]	; (8004138 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80040e6:	f7ff fea2 	bl	8003e2e <LL_ADC_IsEnabled>
 80040ea:	4604      	mov	r4, r0
 80040ec:	4813      	ldr	r0, [pc, #76]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040ee:	f7ff fe9e 	bl	8003e2e <LL_ADC_IsEnabled>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4323      	orrs	r3, r4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d112      	bne.n	8004120 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004102:	f023 030f 	bic.w	r3, r3, #15
 8004106:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004108:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800410a:	e009      	b.n	8004120 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800411e:	e000      	b.n	8004122 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004120:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800412a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800412e:	4618      	mov	r0, r3
 8004130:	3784      	adds	r7, #132	; 0x84
 8004132:	46bd      	mov	sp, r7
 8004134:	bd90      	pop	{r4, r7, pc}
 8004136:	bf00      	nop
 8004138:	42028000 	.word	0x42028000
 800413c:	42028100 	.word	0x42028100
 8004140:	42028300 	.word	0x42028300

08004144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <__NVIC_SetPriorityGrouping+0x44>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004160:	4013      	ands	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800416c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004176:	4a04      	ldr	r2, [pc, #16]	; (8004188 <__NVIC_SetPriorityGrouping+0x44>)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	60d3      	str	r3, [r2, #12]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	0a1b      	lsrs	r3, r3, #8
 8004196:	f003 0307 	and.w	r3, r3, #7
}
 800419a:	4618      	mov	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	db0b      	blt.n	80041d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	f003 021f 	and.w	r2, r3, #31
 80041c0:	4907      	ldr	r1, [pc, #28]	; (80041e0 <__NVIC_EnableIRQ+0x38>)
 80041c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2001      	movs	r0, #1
 80041ca:	fa00 f202 	lsl.w	r2, r0, r2
 80041ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000e100 	.word	0xe000e100

080041e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db0a      	blt.n	800420e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	490c      	ldr	r1, [pc, #48]	; (8004230 <__NVIC_SetPriority+0x4c>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	0152      	lsls	r2, r2, #5
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	440b      	add	r3, r1
 8004208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800420c:	e00a      	b.n	8004224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4908      	ldr	r1, [pc, #32]	; (8004234 <__NVIC_SetPriority+0x50>)
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	3b04      	subs	r3, #4
 800421c:	0152      	lsls	r2, r2, #5
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	440b      	add	r3, r1
 8004222:	761a      	strb	r2, [r3, #24]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000e100 	.word	0xe000e100
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f1c3 0307 	rsb	r3, r3, #7
 8004252:	2b03      	cmp	r3, #3
 8004254:	bf28      	it	cs
 8004256:	2303      	movcs	r3, #3
 8004258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3303      	adds	r3, #3
 800425e:	2b06      	cmp	r3, #6
 8004260:	d902      	bls.n	8004268 <NVIC_EncodePriority+0x30>
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3b04      	subs	r3, #4
 8004266:	e000      	b.n	800426a <NVIC_EncodePriority+0x32>
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800426c:	f04f 32ff 	mov.w	r2, #4294967295
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	401a      	ands	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004280:	f04f 31ff 	mov.w	r1, #4294967295
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	43d9      	mvns	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004290:	4313      	orrs	r3, r2
         );
}
 8004292:	4618      	mov	r0, r3
 8004294:	3724      	adds	r7, #36	; 0x24
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff ff4c 	bl	8004144 <__NVIC_SetPriorityGrouping>
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042c2:	f7ff ff63 	bl	800418c <__NVIC_GetPriorityGrouping>
 80042c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	6978      	ldr	r0, [r7, #20]
 80042ce:	f7ff ffb3 	bl	8004238 <NVIC_EncodePriority>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff82 	bl	80041e4 <__NVIC_SetPriority>
}
 80042e0:	bf00      	nop
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff ff56 	bl	80041a8 <__NVIC_EnableIRQ>
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e08d      	b.n	8004432 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	4b47      	ldr	r3, [pc, #284]	; (800443c <HAL_DMA_Init+0x138>)
 800431e:	429a      	cmp	r2, r3
 8004320:	d80f      	bhi.n	8004342 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	4b45      	ldr	r3, [pc, #276]	; (8004440 <HAL_DMA_Init+0x13c>)
 800432a:	4413      	add	r3, r2
 800432c:	4a45      	ldr	r2, [pc, #276]	; (8004444 <HAL_DMA_Init+0x140>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	009a      	lsls	r2, r3, #2
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a42      	ldr	r2, [pc, #264]	; (8004448 <HAL_DMA_Init+0x144>)
 800433e:	649a      	str	r2, [r3, #72]	; 0x48
 8004340:	e00e      	b.n	8004360 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	4b40      	ldr	r3, [pc, #256]	; (800444c <HAL_DMA_Init+0x148>)
 800434a:	4413      	add	r3, r2
 800434c:	4a3d      	ldr	r2, [pc, #244]	; (8004444 <HAL_DMA_Init+0x140>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	009a      	lsls	r2, r3, #2
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a3c      	ldr	r2, [pc, #240]	; (8004450 <HAL_DMA_Init+0x14c>)
 800435e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8004376:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800437a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 faf2 	bl	800499c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c0:	d102      	bne.n	80043c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043dc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d010      	beq.n	8004408 <HAL_DMA_Init+0x104>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d80c      	bhi.n	8004408 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fb12 	bl	8004a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	e008      	b.n	800441a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40020407 	.word	0x40020407
 8004440:	bffdfff8 	.word	0xbffdfff8
 8004444:	cccccccd 	.word	0xcccccccd
 8004448:	40020000 	.word	0x40020000
 800444c:	bffdfbf8 	.word	0xbffdfbf8
 8004450:	40020400 	.word	0x40020400

08004454 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_DMA_Start_IT+0x20>
 8004470:	2302      	movs	r3, #2
 8004472:	e066      	b.n	8004542 <HAL_DMA_Start_IT+0xee>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d155      	bne.n	8004534 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fa37 	bl	8004920 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 020e 	orr.w	r2, r2, #14
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e00f      	b.n	80044ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0204 	bic.w	r2, r2, #4
 80044da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 020a 	orr.w	r2, r2, #10
 80044ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004508:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004520:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e005      	b.n	8004540 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800453c:	2302      	movs	r3, #2
 800453e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004540:	7dfb      	ldrb	r3, [r7, #23]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d008      	beq.n	8004574 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2204      	movs	r2, #4
 8004566:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e040      	b.n	80045f6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 020e 	bic.w	r2, r2, #14
 8004582:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004592:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a8:	f003 021c 	and.w	r2, r3, #28
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b0:	2101      	movs	r1, #1
 80045b2:	fa01 f202 	lsl.w	r2, r1, r2
 80045b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80045c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00c      	beq.n	80045e4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80045e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d005      	beq.n	8004626 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2204      	movs	r2, #4
 800461e:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e047      	b.n	80046b6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 020e 	bic.w	r2, r2, #14
 8004634:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004654:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	f003 021c 	and.w	r2, r3, #28
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	2101      	movs	r1, #1
 8004664:	fa01 f202 	lsl.w	r2, r1, r2
 8004668:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004672:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00c      	beq.n	8004696 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800468a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004694:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
    }
  }
  return status;
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046dc:	f003 031c 	and.w	r3, r3, #28
 80046e0:	2204      	movs	r2, #4
 80046e2:	409a      	lsls	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d053      	beq.n	8004794 <HAL_DMA_IRQHandler+0xd4>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d04e      	beq.n	8004794 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d024      	beq.n	800474e <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004708:	f003 021c 	and.w	r2, r3, #28
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	2104      	movs	r1, #4
 8004712:	fa01 f202 	lsl.w	r2, r1, r2
 8004716:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80c0 	beq.w	80048b0 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004738:	e0ba      	b.n	80048b0 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80b6 	beq.w	80048b0 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800474c:	e0b0      	b.n	80048b0 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d107      	bne.n	800476c <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0204 	bic.w	r2, r2, #4
 800476a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004770:	f003 021c 	and.w	r2, r3, #28
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004778:	2104      	movs	r1, #4
 800477a:	fa01 f202 	lsl.w	r2, r1, r2
 800477e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8093 	beq.w	80048b0 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004792:	e08d      	b.n	80048b0 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004798:	f003 031c 	and.w	r3, r3, #28
 800479c:	2202      	movs	r2, #2
 800479e:	409a      	lsls	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d04e      	beq.n	8004846 <HAL_DMA_IRQHandler+0x186>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d049      	beq.n	8004846 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d018      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d108      	bne.n	80047e0 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d06e      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80047de:	e069      	b.n	80048b4 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d065      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80047f0:	e060      	b.n	80048b4 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 020a 	bic.w	r2, r2, #10
 800480e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	f003 021c 	and.w	r2, r3, #28
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004824:	2102      	movs	r1, #2
 8004826:	fa01 f202 	lsl.w	r2, r1, r2
 800482a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d03b      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004844:	e036      	b.n	80048b4 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484a:	f003 031c 	and.w	r3, r3, #28
 800484e:	2208      	movs	r2, #8
 8004850:	409a      	lsls	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d02e      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x1f8>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d029      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 020e 	bic.w	r2, r2, #14
 8004872:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004878:	f003 021c 	and.w	r2, r3, #28
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004880:	2101      	movs	r1, #1
 8004882:	fa01 f202 	lsl.w	r2, r1, r2
 8004886:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d008      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80048ae:	e002      	b.n	80048b6 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80048b0:	bf00      	nop
 80048b2:	e000      	b.n	80048b6 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80048b4:	bf00      	nop
  return;
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
}
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d103      	bne.n	80048dc <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	72fb      	strb	r3, [r7, #11]
    return status;
 80048d8:	7afb      	ldrb	r3, [r7, #11]
 80048da:	e01b      	b.n	8004914 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00d      	beq.n	800490a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e003      	b.n	800490a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004908:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	601a      	str	r2, [r3, #0]

  return status;
 8004912:	7afb      	ldrb	r3, [r7, #11]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004936:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d004      	beq.n	800494a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004948:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494e:	f003 021c 	and.w	r2, r3, #28
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004956:	2101      	movs	r1, #1
 8004958:	fa01 f202 	lsl.w	r2, r1, r2
 800495c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b10      	cmp	r3, #16
 800496c:	d108      	bne.n	8004980 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 800497e:	e007      	b.n	8004990 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	60da      	str	r2, [r3, #12]
}
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d80a      	bhi.n	80049c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049bc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6513      	str	r3, [r2, #80]	; 0x50
 80049c4:	e007      	b.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	089b      	lsrs	r3, r3, #2
 80049cc:	009a      	lsls	r2, r3, #2
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80049d0:	4413      	add	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	3b08      	subs	r3, #8
 80049de:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80049ec:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2201      	movs	r2, #1
 80049f6:	409a      	lsls	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	659a      	str	r2, [r3, #88]	; 0x58
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	40020407 	.word	0x40020407
 8004a0c:	40020820 	.word	0x40020820
 8004a10:	cccccccd 	.word	0xcccccccd
 8004a14:	40020880 	.word	0x40020880

08004a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	461a      	mov	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a08      	ldr	r2, [pc, #32]	; (8004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	2201      	movs	r2, #1
 8004a46:	409a      	lsls	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004a4c:	bf00      	nop
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	1000823f 	.word	0x1000823f
 8004a5c:	40020940 	.word	0x40020940

08004a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a6e:	e158      	b.n	8004d22 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	2101      	movs	r1, #1
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 814a 	beq.w	8004d1c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d005      	beq.n	8004aa0 <HAL_GPIO_Init+0x40>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d130      	bne.n	8004b02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	2203      	movs	r2, #3
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	f003 0201 	and.w	r2, r3, #1
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d017      	beq.n	8004b3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	2203      	movs	r2, #3
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4013      	ands	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d123      	bne.n	8004b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	08da      	lsrs	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3208      	adds	r2, #8
 8004b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	220f      	movs	r2, #15
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	43db      	mvns	r3, r3
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	08da      	lsrs	r2, r3, #3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3208      	adds	r2, #8
 8004b8c:	6939      	ldr	r1, [r7, #16]
 8004b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f003 0203 	and.w	r2, r3, #3
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80a4 	beq.w	8004d1c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004bd4:	4a5a      	ldr	r2, [pc, #360]	; (8004d40 <HAL_GPIO_Init+0x2e0>)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	089b      	lsrs	r3, r3, #2
 8004bda:	3318      	adds	r3, #24
 8004bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	220f      	movs	r2, #15
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a52      	ldr	r2, [pc, #328]	; (8004d44 <HAL_GPIO_Init+0x2e4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d025      	beq.n	8004c4c <HAL_GPIO_Init+0x1ec>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a51      	ldr	r2, [pc, #324]	; (8004d48 <HAL_GPIO_Init+0x2e8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d01f      	beq.n	8004c48 <HAL_GPIO_Init+0x1e8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a50      	ldr	r2, [pc, #320]	; (8004d4c <HAL_GPIO_Init+0x2ec>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d019      	beq.n	8004c44 <HAL_GPIO_Init+0x1e4>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a4f      	ldr	r2, [pc, #316]	; (8004d50 <HAL_GPIO_Init+0x2f0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d013      	beq.n	8004c40 <HAL_GPIO_Init+0x1e0>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a4e      	ldr	r2, [pc, #312]	; (8004d54 <HAL_GPIO_Init+0x2f4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00d      	beq.n	8004c3c <HAL_GPIO_Init+0x1dc>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a4d      	ldr	r2, [pc, #308]	; (8004d58 <HAL_GPIO_Init+0x2f8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d007      	beq.n	8004c38 <HAL_GPIO_Init+0x1d8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a4c      	ldr	r2, [pc, #304]	; (8004d5c <HAL_GPIO_Init+0x2fc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d101      	bne.n	8004c34 <HAL_GPIO_Init+0x1d4>
 8004c30:	2306      	movs	r3, #6
 8004c32:	e00c      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c34:	2307      	movs	r3, #7
 8004c36:	e00a      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c38:	2305      	movs	r3, #5
 8004c3a:	e008      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	e006      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c40:	2303      	movs	r3, #3
 8004c42:	e004      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e002      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <HAL_GPIO_Init+0x1ee>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	f002 0203 	and.w	r2, r2, #3
 8004c54:	00d2      	lsls	r2, r2, #3
 8004c56:	4093      	lsls	r3, r2
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004c5e:	4938      	ldr	r1, [pc, #224]	; (8004d40 <HAL_GPIO_Init+0x2e0>)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	3318      	adds	r3, #24
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c6c:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <HAL_GPIO_Init+0x2e0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c90:	4a2b      	ldr	r2, [pc, #172]	; (8004d40 <HAL_GPIO_Init+0x2e0>)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c96:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <HAL_GPIO_Init+0x2e0>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cba:	4a21      	ldr	r2, [pc, #132]	; (8004d40 <HAL_GPIO_Init+0x2e0>)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004cc0:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <HAL_GPIO_Init+0x2e0>)
 8004cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ce6:	4a16      	ldr	r2, [pc, #88]	; (8004d40 <HAL_GPIO_Init+0x2e0>)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8004cee:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <HAL_GPIO_Init+0x2e0>)
 8004cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d14:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <HAL_GPIO_Init+0x2e0>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f47f ae9f 	bne.w	8004a70 <HAL_GPIO_Init+0x10>
  }
}
 8004d32:	bf00      	nop
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	4002f400 	.word	0x4002f400
 8004d44:	42020000 	.word	0x42020000
 8004d48:	42020400 	.word	0x42020400
 8004d4c:	42020800 	.word	0x42020800
 8004d50:	42020c00 	.word	0x42020c00
 8004d54:	42021000 	.word	0x42021000
 8004d58:	42021400 	.word	0x42021400
 8004d5c:	42021800 	.word	0x42021800

08004d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	807b      	strh	r3, [r7, #2]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d70:	787b      	ldrb	r3, [r7, #1]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d76:	887a      	ldrh	r2, [r7, #2]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d7c:	e002      	b.n	8004d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004da2:	887a      	ldrh	r2, [r7, #2]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4013      	ands	r3, r2
 8004da8:	041a      	lsls	r2, r3, #16
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	43d9      	mvns	r1, r3
 8004dae:	887b      	ldrh	r3, [r7, #2]
 8004db0:	400b      	ands	r3, r1
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	619a      	str	r2, [r3, #24]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e081      	b.n	8004eda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fc fe3e 	bl	8001a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2224      	movs	r2, #36	; 0x24
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0201 	bic.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d107      	bne.n	8004e3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	e006      	b.n	8004e4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d104      	bne.n	8004e5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69d9      	ldr	r1, [r3, #28]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1a      	ldr	r2, [r3, #32]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d138      	bne.n	8004f6a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e032      	b.n	8004f6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2224      	movs	r2, #36	; 0x24
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0201 	bic.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f34:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6819      	ldr	r1, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f6a:	2302      	movs	r3, #2
  }
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d139      	bne.n	8005002 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e033      	b.n	8005004 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	; 0x24
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0201 	bic.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0201 	orr.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e000      	b.n	8005004 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005002:	2302      	movs	r3, #2
  }
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
 800502c:	e007      	b.n	800503e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 0204 	bic.w	r2, r3, #4
 8005036:	4905      	ldr	r1, [pc, #20]	; (800504c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40030400 	.word	0x40030400

08005050 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <HAL_ICACHE_Enable+0x1c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <HAL_ICACHE_Enable+0x1c>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	40030400 	.word	0x40030400

08005070 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005072:	b08b      	sub	sp, #44	; 0x2c
 8005074:	af06      	add	r7, sp, #24
 8005076:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0cb      	b.n	800521a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fd f89c 	bl	80021d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2203      	movs	r2, #3
 80050a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f006 f859 	bl	800b160 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]
 80050b2:	e040      	b.n	8005136 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	3301      	adds	r3, #1
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	440b      	add	r3, r1
 80050da:	7bfa      	ldrb	r2, [r7, #15]
 80050dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	440b      	add	r3, r1
 80050ee:	3303      	adds	r3, #3
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	440b      	add	r3, r1
 8005102:	3338      	adds	r3, #56	; 0x38
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005108:	7bfa      	ldrb	r2, [r7, #15]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	440b      	add	r3, r1
 8005116:	333c      	adds	r3, #60	; 0x3c
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	440b      	add	r3, r1
 800512a:	3340      	adds	r3, #64	; 0x40
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	3301      	adds	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
 8005136:	7bfa      	ldrb	r2, [r7, #15]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d3b9      	bcc.n	80050b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005140:	2300      	movs	r3, #0
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e044      	b.n	80051d0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	440b      	add	r3, r1
 8005154:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	440b      	add	r3, r1
 800516a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800516e:	7bfa      	ldrb	r2, [r7, #15]
 8005170:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005172:	7bfa      	ldrb	r2, [r7, #15]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	440b      	add	r3, r1
 8005180:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005188:	7bfa      	ldrb	r2, [r7, #15]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	440b      	add	r3, r1
 8005196:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800519e:	7bfa      	ldrb	r2, [r7, #15]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051b4:	7bfa      	ldrb	r2, [r7, #15]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	440b      	add	r3, r1
 80051c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	3301      	adds	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
 80051d0:	7bfa      	ldrb	r2, [r7, #15]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d3b5      	bcc.n	8005146 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	687e      	ldr	r6, [r7, #4]
 80051e2:	466d      	mov	r5, sp
 80051e4:	f106 0410 	add.w	r4, r6, #16
 80051e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	602b      	str	r3, [r5, #0]
 80051f0:	1d33      	adds	r3, r6, #4
 80051f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051f4:	6838      	ldr	r0, [r7, #0]
 80051f6:	f005 ffce 	bl	800b196 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d102      	bne.n	8005218 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f805 	bl	8005222 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005222 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005246:	b29b      	uxth	r3, r3
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800525a:	b29b      	uxth	r3, r3
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a04      	ldr	r2, [pc, #16]	; (8005294 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40007000 	.word	0x40007000

08005298 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800529c:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40007000 	.word	0x40007000

080052b4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80052bc:	4b27      	ldr	r3, [pc, #156]	; (800535c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052c4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80052c6:	f000 f861 	bl	800538c <HAL_PWREx_SMPS_GetEffectiveMode>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d0:	d101      	bne.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e03e      	b.n	8005354 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80052d6:	4b21      	ldr	r3, [pc, #132]	; (800535c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e2:	d101      	bne.n	80052e8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e035      	b.n	8005354 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d101      	bne.n	80052f4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e02f      	b.n	8005354 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80052f4:	4b19      	ldr	r3, [pc, #100]	; (800535c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80052fc:	4917      	ldr	r1, [pc, #92]	; (800535c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4313      	orrs	r3, r2
 8005302:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	4a16      	ldr	r2, [pc, #88]	; (8005364 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	09db      	lsrs	r3, r3, #7
 8005312:	2232      	movs	r2, #50	; 0x32
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	4a13      	ldr	r2, [pc, #76]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	08db      	lsrs	r3, r3, #3
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005324:	e002      	b.n	800532c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b01      	subs	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005338:	d102      	bne.n	8005340 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f2      	bne.n	8005326 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534c:	d101      	bne.n	8005352 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e000      	b.n	8005354 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40007000 	.word	0x40007000
 8005360:	20000004 	.word	0x20000004
 8005364:	0a7c5ac5 	.word	0x0a7c5ac5
 8005368:	cccccccd 	.word	0xcccccccd

0800536c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4a04      	ldr	r2, [pc, #16]	; (8005388 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800537a:	6053      	str	r3, [r2, #4]
}
 800537c:	bf00      	nop
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40007000 	.word	0x40007000

0800538c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80053a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053a6:	607b      	str	r3, [r7, #4]
 80053a8:	e00a      	b.n	80053c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d103      	bne.n	80053bc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80053b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	e001      	b.n	80053c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80053bc:	2300      	movs	r3, #0
 80053be:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80053c0:	687b      	ldr	r3, [r7, #4]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40007000 	.word	0x40007000

080053d4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f000 bcc2 	b.w	8005d6c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e8:	4b99      	ldr	r3, [pc, #612]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 030c 	and.w	r3, r3, #12
 80053f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053f2:	4b97      	ldr	r3, [pc, #604]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80e9 	beq.w	80055dc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d006      	beq.n	800541e <HAL_RCC_OscConfig+0x4a>
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b0c      	cmp	r3, #12
 8005414:	f040 8083 	bne.w	800551e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d17f      	bne.n	800551e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800541e:	4b8c      	ldr	r3, [pc, #560]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d006      	beq.n	8005438 <HAL_RCC_OscConfig+0x64>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	f000 bc9a 	b.w	8005d6c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800543c:	4b84      	ldr	r3, [pc, #528]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <HAL_RCC_OscConfig+0x7e>
 8005448:	4b81      	ldr	r3, [pc, #516]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005450:	e005      	b.n	800545e <HAL_RCC_OscConfig+0x8a>
 8005452:	4b7f      	ldr	r3, [pc, #508]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800545e:	4293      	cmp	r3, r2
 8005460:	d224      	bcs.n	80054ac <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fece 	bl	8006208 <RCC_SetFlashLatencyFromMSIRange>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f000 bc7a 	b.w	8005d6c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005478:	4b75      	ldr	r3, [pc, #468]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a74      	ldr	r2, [pc, #464]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800547e:	f043 0308 	orr.w	r3, r3, #8
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	4b72      	ldr	r3, [pc, #456]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	496f      	ldr	r1, [pc, #444]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005496:	4b6e      	ldr	r3, [pc, #440]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	496a      	ldr	r1, [pc, #424]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	604b      	str	r3, [r1, #4]
 80054aa:	e026      	b.n	80054fa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ac:	4b68      	ldr	r3, [pc, #416]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a67      	ldr	r2, [pc, #412]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80054b2:	f043 0308 	orr.w	r3, r3, #8
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	4b65      	ldr	r3, [pc, #404]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	4962      	ldr	r1, [pc, #392]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ca:	4b61      	ldr	r3, [pc, #388]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	495d      	ldr	r1, [pc, #372]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fe8d 	bl	8006208 <RCC_SetFlashLatencyFromMSIRange>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f000 bc39 	b.w	8005d6c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80054fa:	f000 fe17 	bl	800612c <HAL_RCC_GetHCLKFreq>
 80054fe:	4603      	mov	r3, r0
 8005500:	4a54      	ldr	r2, [pc, #336]	; (8005654 <HAL_RCC_OscConfig+0x280>)
 8005502:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005504:	4b54      	ldr	r3, [pc, #336]	; (8005658 <HAL_RCC_OscConfig+0x284>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f7fc fec3 	bl	8002294 <HAL_InitTick>
 800550e:	4603      	mov	r3, r0
 8005510:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d060      	beq.n	80055da <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	f000 bc27 	b.w	8005d6c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d039      	beq.n	800559a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005526:	4b4a      	ldr	r3, [pc, #296]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a49      	ldr	r2, [pc, #292]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005532:	f7fd f8a5 	bl	8002680 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005538:	e00f      	b.n	800555a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800553a:	f7fd f8a1 	bl	8002680 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d908      	bls.n	800555a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005548:	4b41      	ldr	r3, [pc, #260]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	f000 bc09 	b.w	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800555a:	4b3d      	ldr	r3, [pc, #244]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0e9      	beq.n	800553a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005566:	4b3a      	ldr	r3, [pc, #232]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a39      	ldr	r2, [pc, #228]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800556c:	f043 0308 	orr.w	r3, r3, #8
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4b37      	ldr	r3, [pc, #220]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	4934      	ldr	r1, [pc, #208]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005580:	4313      	orrs	r3, r2
 8005582:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005584:	4b32      	ldr	r3, [pc, #200]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	492f      	ldr	r1, [pc, #188]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
 8005598:	e020      	b.n	80055dc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800559a:	4b2d      	ldr	r3, [pc, #180]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a2c      	ldr	r2, [pc, #176]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055a6:	f7fd f86b 	bl	8002680 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055ac:	e00e      	b.n	80055cc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055ae:	f7fd f867 	bl	8002680 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d907      	bls.n	80055cc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055bc:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e3cf      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055cc:	4b20      	ldr	r3, [pc, #128]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ea      	bne.n	80055ae <HAL_RCC_OscConfig+0x1da>
 80055d8:	e000      	b.n	80055dc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d07e      	beq.n	80056e6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d005      	beq.n	80055fa <HAL_RCC_OscConfig+0x226>
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d10e      	bne.n	8005612 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d10b      	bne.n	8005612 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fa:	4b15      	ldr	r3, [pc, #84]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d06e      	beq.n	80056e4 <HAL_RCC_OscConfig+0x310>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d16a      	bne.n	80056e4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e3ac      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561a:	d106      	bne.n	800562a <HAL_RCC_OscConfig+0x256>
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0b      	ldr	r2, [pc, #44]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	e024      	b.n	8005674 <HAL_RCC_OscConfig+0x2a0>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005632:	d113      	bne.n	800565c <HAL_RCC_OscConfig+0x288>
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a05      	ldr	r2, [pc, #20]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 800563a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	4b03      	ldr	r3, [pc, #12]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a02      	ldr	r2, [pc, #8]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	e012      	b.n	8005674 <HAL_RCC_OscConfig+0x2a0>
 800564e:	bf00      	nop
 8005650:	40021000 	.word	0x40021000
 8005654:	20000004 	.word	0x20000004
 8005658:	20000008 	.word	0x20000008
 800565c:	4b8b      	ldr	r3, [pc, #556]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a8a      	ldr	r2, [pc, #552]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	4b88      	ldr	r3, [pc, #544]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a87      	ldr	r2, [pc, #540]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800566e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d019      	beq.n	80056b0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fd f800 	bl	8002680 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005682:	e00e      	b.n	80056a2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005684:	f7fc fffc 	bl	8002680 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	; 0x64
 8005690:	d907      	bls.n	80056a2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005692:	4b7e      	ldr	r3, [pc, #504]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e364      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056a2:	4b7a      	ldr	r3, [pc, #488]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0ea      	beq.n	8005684 <HAL_RCC_OscConfig+0x2b0>
 80056ae:	e01a      	b.n	80056e6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fc ffe6 	bl	8002680 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056b6:	e00e      	b.n	80056d6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b8:	f7fc ffe2 	bl	8002680 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	; 0x64
 80056c4:	d907      	bls.n	80056d6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056c6:	4b71      	ldr	r3, [pc, #452]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e34a      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056d6:	4b6d      	ldr	r3, [pc, #436]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1ea      	bne.n	80056b8 <HAL_RCC_OscConfig+0x2e4>
 80056e2:	e000      	b.n	80056e6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d06c      	beq.n	80057cc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_OscConfig+0x330>
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b0c      	cmp	r3, #12
 80056fc:	d119      	bne.n	8005732 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d116      	bne.n	8005732 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005704:	4b61      	ldr	r3, [pc, #388]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_RCC_OscConfig+0x348>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e327      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571c:	4b5b      	ldr	r3, [pc, #364]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	061b      	lsls	r3, r3, #24
 800572a:	4958      	ldr	r1, [pc, #352]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005730:	e04c      	b.n	80057cc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d029      	beq.n	800578e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800573a:	4b54      	ldr	r3, [pc, #336]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a53      	ldr	r2, [pc, #332]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005746:	f7fc ff9b 	bl	8002680 <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800574c:	e00e      	b.n	800576c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800574e:	f7fc ff97 	bl	8002680 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d907      	bls.n	800576c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800575c:	4b4b      	ldr	r3, [pc, #300]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e2ff      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800576c:	4b47      	ldr	r3, [pc, #284]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ea      	beq.n	800574e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005778:	4b44      	ldr	r3, [pc, #272]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	061b      	lsls	r3, r3, #24
 8005786:	4941      	ldr	r1, [pc, #260]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005788:	4313      	orrs	r3, r2
 800578a:	604b      	str	r3, [r1, #4]
 800578c:	e01e      	b.n	80057cc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800578e:	4b3f      	ldr	r3, [pc, #252]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a3e      	ldr	r2, [pc, #248]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579a:	f7fc ff71 	bl	8002680 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057a0:	e00e      	b.n	80057c0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a2:	f7fc ff6d 	bl	8002680 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d907      	bls.n	80057c0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057b0:	4b36      	ldr	r3, [pc, #216]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e2d5      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057c0:	4b32      	ldr	r3, [pc, #200]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1ea      	bne.n	80057a2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0308 	and.w	r3, r3, #8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d062      	beq.n	800589e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d038      	beq.n	8005852 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d108      	bne.n	80057fa <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80057e8:	4b28      	ldr	r3, [pc, #160]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 80057ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ee:	4a27      	ldr	r2, [pc, #156]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 80057f0:	f023 0310 	bic.w	r3, r3, #16
 80057f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80057f8:	e007      	b.n	800580a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 80057fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005800:	4a22      	ldr	r2, [pc, #136]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005802:	f043 0310 	orr.w	r3, r3, #16
 8005806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800580c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005810:	4a1e      	ldr	r2, [pc, #120]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581a:	f7fc ff31 	bl	8002680 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005820:	e00f      	b.n	8005842 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005822:	f7fc ff2d 	bl	8002680 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b07      	cmp	r3, #7
 800582e:	d908      	bls.n	8005842 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005830:	4b16      	ldr	r3, [pc, #88]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e294      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0e8      	beq.n	8005822 <HAL_RCC_OscConfig+0x44e>
 8005850:	e025      	b.n	800589e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005852:	4b0e      	ldr	r3, [pc, #56]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 8005854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005858:	4a0c      	ldr	r2, [pc, #48]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005862:	f7fc ff0d 	bl	8002680 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005868:	e012      	b.n	8005890 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800586a:	f7fc ff09 	bl	8002680 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b07      	cmp	r3, #7
 8005876:	d90b      	bls.n	8005890 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <HAL_RCC_OscConfig+0x4b8>)
 800587a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e270      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005890:	4ba8      	ldr	r3, [pc, #672]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e5      	bne.n	800586a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 812d 	beq.w	8005b06 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ac:	2300      	movs	r3, #0
 80058ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058b0:	4ba0      	ldr	r3, [pc, #640]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10d      	bne.n	80058d8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058bc:	4b9d      	ldr	r3, [pc, #628]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	4a9c      	ldr	r2, [pc, #624]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 80058c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c6:	6593      	str	r3, [r2, #88]	; 0x58
 80058c8:	4b9a      	ldr	r3, [pc, #616]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d4:	2301      	movs	r3, #1
 80058d6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058d8:	4b97      	ldr	r3, [pc, #604]	; (8005b38 <HAL_RCC_OscConfig+0x764>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11e      	bne.n	8005922 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058e4:	4b94      	ldr	r3, [pc, #592]	; (8005b38 <HAL_RCC_OscConfig+0x764>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a93      	ldr	r2, [pc, #588]	; (8005b38 <HAL_RCC_OscConfig+0x764>)
 80058ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058f0:	f7fc fec6 	bl	8002680 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f6:	e00e      	b.n	8005916 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f8:	f7fc fec2 	bl	8002680 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d907      	bls.n	8005916 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005906:	4b8c      	ldr	r3, [pc, #560]	; (8005b38 <HAL_RCC_OscConfig+0x764>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e22a      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005916:	4b88      	ldr	r3, [pc, #544]	; (8005b38 <HAL_RCC_OscConfig+0x764>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0ea      	beq.n	80058f8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d01f      	beq.n	800596e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	d010      	beq.n	800595c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800593a:	4b7e      	ldr	r3, [pc, #504]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005940:	4a7c      	ldr	r2, [pc, #496]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005942:	f043 0304 	orr.w	r3, r3, #4
 8005946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800594a:	4b7a      	ldr	r3, [pc, #488]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	4a78      	ldr	r2, [pc, #480]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800595a:	e018      	b.n	800598e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800595c:	4b75      	ldr	r3, [pc, #468]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005962:	4a74      	ldr	r2, [pc, #464]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800596c:	e00f      	b.n	800598e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800596e:	4b71      	ldr	r3, [pc, #452]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005974:	4a6f      	ldr	r2, [pc, #444]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800597e:	4b6d      	ldr	r3, [pc, #436]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	4a6b      	ldr	r2, [pc, #428]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005986:	f023 0304 	bic.w	r3, r3, #4
 800598a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d068      	beq.n	8005a68 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005996:	f7fc fe73 	bl	8002680 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800599c:	e011      	b.n	80059c2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599e:	f7fc fe6f 	bl	8002680 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d908      	bls.n	80059c2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059b0:	4b60      	ldr	r3, [pc, #384]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e1d4      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c2:	4b5c      	ldr	r3, [pc, #368]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0e6      	beq.n	800599e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d022      	beq.n	8005a22 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80059dc:	4b55      	ldr	r3, [pc, #340]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e2:	4a54      	ldr	r2, [pc, #336]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80059ec:	e011      	b.n	8005a12 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ee:	f7fc fe47 	bl	8002680 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d908      	bls.n	8005a12 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a00:	4b4c      	ldr	r3, [pc, #304]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e1ac      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a12:	4b48      	ldr	r3, [pc, #288]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0e6      	beq.n	80059ee <HAL_RCC_OscConfig+0x61a>
 8005a20:	e068      	b.n	8005af4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a22:	4b44      	ldr	r3, [pc, #272]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a28:	4a42      	ldr	r2, [pc, #264]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a32:	e011      	b.n	8005a58 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a34:	f7fc fe24 	bl	8002680 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d908      	bls.n	8005a58 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a46:	4b3b      	ldr	r3, [pc, #236]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e189      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a58:	4b36      	ldr	r3, [pc, #216]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e6      	bne.n	8005a34 <HAL_RCC_OscConfig+0x660>
 8005a66:	e045      	b.n	8005af4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fc fe0a 	bl	8002680 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a6e:	e011      	b.n	8005a94 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a70:	f7fc fe06 	bl	8002680 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d908      	bls.n	8005a94 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a82:	4b2c      	ldr	r3, [pc, #176]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e16b      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a94:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e6      	bne.n	8005a70 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005aa2:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d021      	beq.n	8005af4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ab0:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	4a1f      	ldr	r2, [pc, #124]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ac0:	e011      	b.n	8005ae6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fc fddd 	bl	8002680 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d908      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ad4:	4b17      	ldr	r3, [pc, #92]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e142      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ae6:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e6      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005af4:	7ffb      	ldrb	r3, [r7, #31]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d105      	bne.n	8005b06 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005afa:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afe:	4a0d      	ldr	r2, [pc, #52]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d04f      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d028      	beq.n	8005b6c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b1a:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b20:	4a04      	ldr	r2, [pc, #16]	; (8005b34 <HAL_RCC_OscConfig+0x760>)
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b2a:	f7fc fda9 	bl	8002680 <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b30:	e014      	b.n	8005b5c <HAL_RCC_OscConfig+0x788>
 8005b32:	bf00      	nop
 8005b34:	40021000 	.word	0x40021000
 8005b38:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b3c:	f7fc fda0 	bl	8002680 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d908      	bls.n	8005b5c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b4a:	4b8a      	ldr	r3, [pc, #552]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e107      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b5c:	4b85      	ldr	r3, [pc, #532]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0e8      	beq.n	8005b3c <HAL_RCC_OscConfig+0x768>
 8005b6a:	e022      	b.n	8005bb2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b6c:	4b81      	ldr	r3, [pc, #516]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b72:	4a80      	ldr	r2, [pc, #512]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fc fd80 	bl	8002680 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b82:	e00f      	b.n	8005ba4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b84:	f7fc fd7c 	bl	8002680 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d908      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b92:	4b78      	ldr	r3, [pc, #480]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e0e3      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ba4:	4b73      	ldr	r3, [pc, #460]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e8      	bne.n	8005b84 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 80d7 	beq.w	8005d6a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bbc:	4b6d      	ldr	r3, [pc, #436]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 030c 	and.w	r3, r3, #12
 8005bc4:	2b0c      	cmp	r3, #12
 8005bc6:	f000 8091 	beq.w	8005cec <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d166      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd2:	4b68      	ldr	r3, [pc, #416]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a67      	ldr	r2, [pc, #412]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bde:	f7fc fd4f 	bl	8002680 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005be4:	e00e      	b.n	8005c04 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be6:	f7fc fd4b 	bl	8002680 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d907      	bls.n	8005c04 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf4:	4b5f      	ldr	r3, [pc, #380]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e0b3      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c04:	4b5b      	ldr	r3, [pc, #364]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1ea      	bne.n	8005be6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c10:	4b58      	ldr	r3, [pc, #352]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	4b58      	ldr	r3, [pc, #352]	; (8005d78 <HAL_RCC_OscConfig+0x9a4>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c20:	3a01      	subs	r2, #1
 8005c22:	0112      	lsls	r2, r2, #4
 8005c24:	4311      	orrs	r1, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c2a:	0212      	lsls	r2, r2, #8
 8005c2c:	4311      	orrs	r1, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c32:	0852      	lsrs	r2, r2, #1
 8005c34:	3a01      	subs	r2, #1
 8005c36:	0552      	lsls	r2, r2, #21
 8005c38:	4311      	orrs	r1, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c3e:	0852      	lsrs	r2, r2, #1
 8005c40:	3a01      	subs	r2, #1
 8005c42:	0652      	lsls	r2, r2, #25
 8005c44:	4311      	orrs	r1, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c4a:	06d2      	lsls	r2, r2, #27
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	4949      	ldr	r1, [pc, #292]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c54:	4b47      	ldr	r3, [pc, #284]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a46      	ldr	r2, [pc, #280]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c60:	4b44      	ldr	r3, [pc, #272]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4a43      	ldr	r2, [pc, #268]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fc fd08 	bl	8002680 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c72:	e00e      	b.n	8005c92 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c74:	f7fc fd04 	bl	8002680 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d907      	bls.n	8005c92 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c82:	4b3c      	ldr	r3, [pc, #240]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e06c      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c92:	4b38      	ldr	r3, [pc, #224]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0ea      	beq.n	8005c74 <HAL_RCC_OscConfig+0x8a0>
 8005c9e:	e064      	b.n	8005d6a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca0:	4b34      	ldr	r3, [pc, #208]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a33      	ldr	r2, [pc, #204]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cac:	f7fc fce8 	bl	8002680 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb2:	e00e      	b.n	8005cd2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb4:	f7fc fce4 	bl	8002680 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d907      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cc2:	4b2c      	ldr	r3, [pc, #176]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e04c      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cd2:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1ea      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005cde:	4b25      	ldr	r3, [pc, #148]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	4924      	ldr	r1, [pc, #144]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005ce4:	4b25      	ldr	r3, [pc, #148]	; (8005d7c <HAL_RCC_OscConfig+0x9a8>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	60cb      	str	r3, [r1, #12]
 8005cea:	e03e      	b.n	8005d6a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e039      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005cf8:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <HAL_RCC_OscConfig+0x9a0>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f003 0203 	and.w	r2, r3, #3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d12c      	bne.n	8005d66 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	3b01      	subs	r3, #1
 8005d18:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d123      	bne.n	8005d66 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d11b      	bne.n	8005d66 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d38:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d113      	bne.n	8005d66 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	085b      	lsrs	r3, r3, #1
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d109      	bne.n	8005d66 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d001      	beq.n	8005d6a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40021000 	.word	0x40021000
 8005d78:	019f800c 	.word	0x019f800c
 8005d7c:	feeefffc 	.word	0xfeeefffc

08005d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e11c      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d98:	4b90      	ldr	r3, [pc, #576]	; (8005fdc <HAL_RCC_ClockConfig+0x25c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d910      	bls.n	8005dc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da6:	4b8d      	ldr	r3, [pc, #564]	; (8005fdc <HAL_RCC_ClockConfig+0x25c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f023 020f 	bic.w	r2, r3, #15
 8005dae:	498b      	ldr	r1, [pc, #556]	; (8005fdc <HAL_RCC_ClockConfig+0x25c>)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db6:	4b89      	ldr	r3, [pc, #548]	; (8005fdc <HAL_RCC_ClockConfig+0x25c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d001      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e104      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d010      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	4b81      	ldr	r3, [pc, #516]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d908      	bls.n	8005df6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005de4:	4b7e      	ldr	r3, [pc, #504]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	497b      	ldr	r1, [pc, #492]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8085 	beq.w	8005f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d11f      	bne.n	8005e4c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e0c:	4b74      	ldr	r3, [pc, #464]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0da      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e1c:	f000 fa58 	bl	80062d0 <RCC_GetSysClockFreqFromPLLSource>
 8005e20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4a6f      	ldr	r2, [pc, #444]	; (8005fe4 <HAL_RCC_ClockConfig+0x264>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d947      	bls.n	8005eba <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005e2a:	4b6d      	ldr	r3, [pc, #436]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d141      	bne.n	8005eba <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e36:	4b6a      	ldr	r3, [pc, #424]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e3e:	4a68      	ldr	r2, [pc, #416]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e036      	b.n	8005eba <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d107      	bne.n	8005e64 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e54:	4b62      	ldr	r3, [pc, #392]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d115      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0b6      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d107      	bne.n	8005e7c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e6c:	4b5c      	ldr	r3, [pc, #368]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0aa      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e7c:	4b58      	ldr	r3, [pc, #352]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0a2      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005e8c:	f000 f8b0 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4a53      	ldr	r2, [pc, #332]	; (8005fe4 <HAL_RCC_ClockConfig+0x264>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d90f      	bls.n	8005eba <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005e9a:	4b51      	ldr	r3, [pc, #324]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ea6:	4b4e      	ldr	r3, [pc, #312]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eae:	4a4c      	ldr	r2, [pc, #304]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005eba:	4b49      	ldr	r3, [pc, #292]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f023 0203 	bic.w	r2, r3, #3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	4946      	ldr	r1, [pc, #280]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ecc:	f7fc fbd8 	bl	8002680 <HAL_GetTick>
 8005ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed2:	e013      	b.n	8005efc <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed4:	f7fc fbd4 	bl	8002680 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d90a      	bls.n	8005efc <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee6:	4b3e      	ldr	r3, [pc, #248]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 020c 	and.w	r2, r3, #12
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d001      	beq.n	8005efc <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e06a      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efc:	4b38      	ldr	r3, [pc, #224]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 020c 	and.w	r2, r3, #12
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d1e2      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b80      	cmp	r3, #128	; 0x80
 8005f12:	d105      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f14:	4b32      	ldr	r3, [pc, #200]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4a31      	ldr	r2, [pc, #196]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f1e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d010      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	4b2b      	ldr	r3, [pc, #172]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d208      	bcs.n	8005f4e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f3c:	4b28      	ldr	r3, [pc, #160]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4925      	ldr	r1, [pc, #148]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f4e:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <HAL_RCC_ClockConfig+0x25c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d210      	bcs.n	8005f7e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5c:	4b1f      	ldr	r3, [pc, #124]	; (8005fdc <HAL_RCC_ClockConfig+0x25c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f023 020f 	bic.w	r2, r3, #15
 8005f64:	491d      	ldr	r1, [pc, #116]	; (8005fdc <HAL_RCC_ClockConfig+0x25c>)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <HAL_RCC_ClockConfig+0x25c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d001      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e029      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f8a:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	4912      	ldr	r1, [pc, #72]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fa8:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	490a      	ldr	r1, [pc, #40]	; (8005fe0 <HAL_RCC_ClockConfig+0x260>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005fbc:	f000 f8b6 	bl	800612c <HAL_RCC_GetHCLKFreq>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	4a09      	ldr	r2, [pc, #36]	; (8005fe8 <HAL_RCC_ClockConfig+0x268>)
 8005fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005fc6:	4b09      	ldr	r3, [pc, #36]	; (8005fec <HAL_RCC_ClockConfig+0x26c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fc f962 	bl	8002294 <HAL_InitTick>
 8005fd0:	4603      	mov	r3, r0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40022000 	.word	0x40022000
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	04c4b400 	.word	0x04c4b400
 8005fe8:	20000004 	.word	0x20000004
 8005fec:	20000008 	.word	0x20000008

08005ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	; 0x24
 8005ff4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ffe:	4b47      	ldr	r3, [pc, #284]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 030c 	and.w	r3, r3, #12
 8006006:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006008:	4b44      	ldr	r3, [pc, #272]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_RCC_GetSysClockFreq+0x34>
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b0c      	cmp	r3, #12
 800601c:	d121      	bne.n	8006062 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d11e      	bne.n	8006062 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006024:	4b3d      	ldr	r3, [pc, #244]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d107      	bne.n	8006040 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006030:	4b3a      	ldr	r3, [pc, #232]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	e005      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006040:	4b36      	ldr	r3, [pc, #216]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800604c:	4a34      	ldr	r2, [pc, #208]	; (8006120 <HAL_RCC_GetSysClockFreq+0x130>)
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006054:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10d      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006060:	e00a      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b04      	cmp	r3, #4
 8006066:	d102      	bne.n	800606e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006068:	4b2e      	ldr	r3, [pc, #184]	; (8006124 <HAL_RCC_GetSysClockFreq+0x134>)
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e004      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b08      	cmp	r3, #8
 8006072:	d101      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006074:	4b2c      	ldr	r3, [pc, #176]	; (8006128 <HAL_RCC_GetSysClockFreq+0x138>)
 8006076:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b0c      	cmp	r3, #12
 800607c:	d146      	bne.n	800610c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800607e:	4b27      	ldr	r3, [pc, #156]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006088:	4b24      	ldr	r3, [pc, #144]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	091b      	lsrs	r3, r3, #4
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	3301      	adds	r3, #1
 8006094:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d003      	beq.n	80060a4 <HAL_RCC_GetSysClockFreq+0xb4>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d00d      	beq.n	80060be <HAL_RCC_GetSysClockFreq+0xce>
 80060a2:	e019      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060a4:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_RCC_GetSysClockFreq+0x134>)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 80060ae:	68d2      	ldr	r2, [r2, #12]
 80060b0:	0a12      	lsrs	r2, r2, #8
 80060b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	617b      	str	r3, [r7, #20]
        break;
 80060bc:	e019      	b.n	80060f2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060be:	4a1a      	ldr	r2, [pc, #104]	; (8006128 <HAL_RCC_GetSysClockFreq+0x138>)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 80060c8:	68d2      	ldr	r2, [r2, #12]
 80060ca:	0a12      	lsrs	r2, r2, #8
 80060cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060d0:	fb02 f303 	mul.w	r3, r2, r3
 80060d4:	617b      	str	r3, [r7, #20]
        break;
 80060d6:	e00c      	b.n	80060f2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	4a0e      	ldr	r2, [pc, #56]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 80060e2:	68d2      	ldr	r2, [r2, #12]
 80060e4:	0a12      	lsrs	r2, r2, #8
 80060e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	617b      	str	r3, [r7, #20]
        break;
 80060f0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80060f2:	4b0a      	ldr	r3, [pc, #40]	; (800611c <HAL_RCC_GetSysClockFreq+0x12c>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	0e5b      	lsrs	r3, r3, #25
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	3301      	adds	r3, #1
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800610c:	69bb      	ldr	r3, [r7, #24]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3724      	adds	r7, #36	; 0x24
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40021000 	.word	0x40021000
 8006120:	0800e7e8 	.word	0x0800e7e8
 8006124:	00f42400 	.word	0x00f42400
 8006128:	007a1200 	.word	0x007a1200

0800612c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8006130:	f7ff ff5e 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 8006134:	4602      	mov	r2, r0
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <HAL_RCC_GetHCLKFreq+0x20>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	091b      	lsrs	r3, r3, #4
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	4903      	ldr	r1, [pc, #12]	; (8006150 <HAL_RCC_GetHCLKFreq+0x24>)
 8006142:	5ccb      	ldrb	r3, [r1, r3]
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40021000 	.word	0x40021000
 8006150:	0800e7d0 	.word	0x0800e7d0

08006154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006158:	f7ff ffe8 	bl	800612c <HAL_RCC_GetHCLKFreq>
 800615c:	4602      	mov	r2, r0
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	0a1b      	lsrs	r3, r3, #8
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	4903      	ldr	r1, [pc, #12]	; (8006178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800616a:	5ccb      	ldrb	r3, [r1, r3]
 800616c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40021000 	.word	0x40021000
 8006178:	0800e7e0 	.word	0x0800e7e0

0800617c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006180:	f7ff ffd4 	bl	800612c <HAL_RCC_GetHCLKFreq>
 8006184:	4602      	mov	r2, r0
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	0adb      	lsrs	r3, r3, #11
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	4903      	ldr	r1, [pc, #12]	; (80061a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006192:	5ccb      	ldrb	r3, [r1, r3]
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006198:	4618      	mov	r0, r3
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40021000 	.word	0x40021000
 80061a0:	0800e7e0 	.word	0x0800e7e0

080061a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	220f      	movs	r2, #15
 80061b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061b4:	4b12      	ldr	r3, [pc, #72]	; (8006200 <HAL_RCC_GetClockConfig+0x5c>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0203 	and.w	r2, r3, #3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061c0:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <HAL_RCC_GetClockConfig+0x5c>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061cc:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <HAL_RCC_GetClockConfig+0x5c>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061d8:	4b09      	ldr	r3, [pc, #36]	; (8006200 <HAL_RCC_GetClockConfig+0x5c>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	08db      	lsrs	r3, r3, #3
 80061de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061e6:	4b07      	ldr	r3, [pc, #28]	; (8006204 <HAL_RCC_GetClockConfig+0x60>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 020f 	and.w	r2, r3, #15
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	601a      	str	r2, [r3, #0]
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40021000 	.word	0x40021000
 8006204:	40022000 	.word	0x40022000

08006208 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006214:	4b2c      	ldr	r3, [pc, #176]	; (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006220:	f7ff f83a 	bl	8005298 <HAL_PWREx_GetVoltageRange>
 8006224:	6138      	str	r0, [r7, #16]
 8006226:	e014      	b.n	8006252 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006228:	4b27      	ldr	r3, [pc, #156]	; (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800622a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622c:	4a26      	ldr	r2, [pc, #152]	; (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800622e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006232:	6593      	str	r3, [r2, #88]	; 0x58
 8006234:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006240:	f7ff f82a 	bl	8005298 <HAL_PWREx_GetVoltageRange>
 8006244:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006246:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624a:	4a1f      	ldr	r2, [pc, #124]	; (80062c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800624c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006250:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800625e:	d10b      	bne.n	8006278 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b80      	cmp	r3, #128	; 0x80
 8006264:	d919      	bls.n	800629a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2ba0      	cmp	r3, #160	; 0xa0
 800626a:	d902      	bls.n	8006272 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800626c:	2302      	movs	r3, #2
 800626e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006270:	e013      	b.n	800629a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006272:	2301      	movs	r3, #1
 8006274:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006276:	e010      	b.n	800629a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b80      	cmp	r3, #128	; 0x80
 800627c:	d902      	bls.n	8006284 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800627e:	2303      	movs	r3, #3
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	e00a      	b.n	800629a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b80      	cmp	r3, #128	; 0x80
 8006288:	d102      	bne.n	8006290 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800628a:	2302      	movs	r3, #2
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e004      	b.n	800629a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b70      	cmp	r3, #112	; 0x70
 8006294:	d101      	bne.n	800629a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006296:	2301      	movs	r3, #1
 8006298:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f023 020f 	bic.w	r2, r3, #15
 80062a2:	490a      	ldr	r1, [pc, #40]	; (80062cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80062aa:	4b08      	ldr	r3, [pc, #32]	; (80062cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40021000 	.word	0x40021000
 80062cc:	40022000 	.word	0x40022000

080062d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062d6:	4b31      	ldr	r3, [pc, #196]	; (800639c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062e0:	4b2e      	ldr	r3, [pc, #184]	; (800639c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	3301      	adds	r3, #1
 80062ec:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d015      	beq.n	8006320 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d839      	bhi.n	800636e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d01c      	beq.n	800633a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d133      	bne.n	800636e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006306:	4a26      	ldr	r2, [pc, #152]	; (80063a0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	4a23      	ldr	r2, [pc, #140]	; (800639c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006310:	68d2      	ldr	r2, [r2, #12]
 8006312:	0a12      	lsrs	r2, r2, #8
 8006314:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006318:	fb02 f303 	mul.w	r3, r2, r3
 800631c:	613b      	str	r3, [r7, #16]
      break;
 800631e:	e029      	b.n	8006374 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006320:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	4a1c      	ldr	r2, [pc, #112]	; (800639c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800632a:	68d2      	ldr	r2, [r2, #12]
 800632c:	0a12      	lsrs	r2, r2, #8
 800632e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006332:	fb02 f303 	mul.w	r3, r2, r3
 8006336:	613b      	str	r3, [r7, #16]
      break;
 8006338:	e01c      	b.n	8006374 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800633a:	4b18      	ldr	r3, [pc, #96]	; (800639c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b00      	cmp	r3, #0
 8006344:	d107      	bne.n	8006356 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006346:	4b15      	ldr	r3, [pc, #84]	; (800639c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800634c:	0a1b      	lsrs	r3, r3, #8
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	e005      	b.n	8006362 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	091b      	lsrs	r3, r3, #4
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8006362:	4a11      	ldr	r2, [pc, #68]	; (80063a8 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800636a:	613b      	str	r3, [r7, #16]
        break;
 800636c:	e002      	b.n	8006374 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	613b      	str	r3, [r7, #16]
      break;
 8006372:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006374:	4b09      	ldr	r3, [pc, #36]	; (800639c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	0e5b      	lsrs	r3, r3, #25
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	3301      	adds	r3, #1
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	fbb2 f3f3 	udiv	r3, r2, r3
 800638c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800638e:	683b      	ldr	r3, [r7, #0]
}
 8006390:	4618      	mov	r0, r3
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	40021000 	.word	0x40021000
 80063a0:	00f42400 	.word	0x00f42400
 80063a4:	007a1200 	.word	0x007a1200
 80063a8:	0800e7e8 	.word	0x0800e7e8

080063ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063b4:	2300      	movs	r3, #0
 80063b6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063b8:	2300      	movs	r3, #0
 80063ba:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d040      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063cc:	2b80      	cmp	r3, #128	; 0x80
 80063ce:	d02a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80063d0:	2b80      	cmp	r3, #128	; 0x80
 80063d2:	d825      	bhi.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80063d4:	2b60      	cmp	r3, #96	; 0x60
 80063d6:	d026      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80063d8:	2b60      	cmp	r3, #96	; 0x60
 80063da:	d821      	bhi.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d006      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d81d      	bhi.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d009      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d010      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80063ec:	e018      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063ee:	4b8f      	ldr	r3, [pc, #572]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	4a8e      	ldr	r2, [pc, #568]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80063fa:	e015      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	2100      	movs	r1, #0
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fb56 	bl	8006ab4 <RCCEx_PLLSAI1_Config>
 8006408:	4603      	mov	r3, r0
 800640a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800640c:	e00c      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3320      	adds	r3, #32
 8006412:	2100      	movs	r1, #0
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fc33 	bl	8006c80 <RCCEx_PLLSAI2_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800641e:	e003      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	77fb      	strb	r3, [r7, #31]
        break;
 8006424:	e000      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8006426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006428:	7ffb      	ldrb	r3, [r7, #31]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10b      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800642e:	4b7f      	ldr	r3, [pc, #508]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006434:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643c:	497b      	ldr	r1, [pc, #492]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006444:	e001      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006446:	7ffb      	ldrb	r3, [r7, #31]
 8006448:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d047      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645e:	d030      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006464:	d82a      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800646a:	d02a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800646c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006470:	d824      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006476:	d008      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800647c:	d81e      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006486:	d010      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006488:	e018      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800648a:	4b68      	ldr	r3, [pc, #416]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	4a67      	ldr	r2, [pc, #412]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006494:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006496:	e015      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3304      	adds	r3, #4
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 fb08 	bl	8006ab4 <RCCEx_PLLSAI1_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80064a8:	e00c      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3320      	adds	r3, #32
 80064ae:	2100      	movs	r1, #0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fbe5 	bl	8006c80 <RCCEx_PLLSAI2_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80064ba:	e003      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	77fb      	strb	r3, [r7, #31]
        break;
 80064c0:	e000      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80064c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c4:	7ffb      	ldrb	r3, [r7, #31]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10b      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80064ca:	4b58      	ldr	r3, [pc, #352]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d8:	4954      	ldr	r1, [pc, #336]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80064e0:	e001      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e2:	7ffb      	ldrb	r3, [r7, #31]
 80064e4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80ab 	beq.w	800664a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064f4:	2300      	movs	r3, #0
 80064f6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064f8:	4b4c      	ldr	r3, [pc, #304]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10d      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006504:	4b49      	ldr	r3, [pc, #292]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006508:	4a48      	ldr	r2, [pc, #288]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800650a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800650e:	6593      	str	r3, [r2, #88]	; 0x58
 8006510:	4b46      	ldr	r3, [pc, #280]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800651c:	2301      	movs	r3, #1
 800651e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006520:	4b43      	ldr	r3, [pc, #268]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a42      	ldr	r2, [pc, #264]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800652c:	f7fc f8a8 	bl	8002680 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006532:	e00f      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006534:	f7fc f8a4 	bl	8002680 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d908      	bls.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006542:	4b3b      	ldr	r3, [pc, #236]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8006552:	e006      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006554:	4b36      	ldr	r3, [pc, #216]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0e9      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8006560:	e000      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8006562:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8006564:	7ffb      	ldrb	r3, [r7, #31]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d164      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800656a:	4b30      	ldr	r3, [pc, #192]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800656c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006574:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01f      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x210>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	429a      	cmp	r2, r3
 8006586:	d019      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006588:	4b28      	ldr	r3, [pc, #160]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800658a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006592:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006594:	4b25      	ldr	r3, [pc, #148]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659a:	4a24      	ldr	r2, [pc, #144]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800659c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065a4:	4b21      	ldr	r3, [pc, #132]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065aa:	4a20      	ldr	r2, [pc, #128]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065b4:	4a1d      	ldr	r2, [pc, #116]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d01f      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c6:	f7fc f85b 	bl	8002680 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065cc:	e012      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ce:	f7fc f857 	bl	8002680 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065dc:	4293      	cmp	r3, r2
 80065de:	d909      	bls.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065e0:	4b12      	ldr	r3, [pc, #72]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80065f2:	e007      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f4:	4b0d      	ldr	r3, [pc, #52]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0e5      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006602:	e000      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8006604:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8006606:	7ffb      	ldrb	r3, [r7, #31]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10c      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800660c:	4b07      	ldr	r3, [pc, #28]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800660e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006612:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661c:	4903      	ldr	r1, [pc, #12]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800661e:	4313      	orrs	r3, r2
 8006620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006624:	e008      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006626:	7ffb      	ldrb	r3, [r7, #31]
 8006628:	77bb      	strb	r3, [r7, #30]
 800662a:	e005      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800662c:	40021000 	.word	0x40021000
 8006630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	7ffb      	ldrb	r3, [r7, #31]
 8006636:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d105      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800663e:	4b9c      	ldr	r3, [pc, #624]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006642:	4a9b      	ldr	r2, [pc, #620]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006648:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006656:	4b96      	ldr	r3, [pc, #600]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665c:	f023 0203 	bic.w	r2, r3, #3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	4992      	ldr	r1, [pc, #584]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006678:	4b8d      	ldr	r3, [pc, #564]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667e:	f023 020c 	bic.w	r2, r3, #12
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	498a      	ldr	r1, [pc, #552]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800669a:	4b85      	ldr	r3, [pc, #532]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800669c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a8:	4981      	ldr	r1, [pc, #516]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066bc:	4b7c      	ldr	r3, [pc, #496]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	4979      	ldr	r1, [pc, #484]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066de:	4b74      	ldr	r3, [pc, #464]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ec:	4970      	ldr	r1, [pc, #448]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006700:	4b6b      	ldr	r3, [pc, #428]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006706:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670e:	4968      	ldr	r1, [pc, #416]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006722:	4b63      	ldr	r3, [pc, #396]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006730:	495f      	ldr	r1, [pc, #380]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006744:	4b5a      	ldr	r3, [pc, #360]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006752:	4957      	ldr	r1, [pc, #348]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006766:	4b52      	ldr	r3, [pc, #328]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006774:	494e      	ldr	r1, [pc, #312]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d031      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800678c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006790:	d00e      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006796:	d814      	bhi.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d015      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800679c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067a0:	d10f      	bne.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067a2:	4b43      	ldr	r3, [pc, #268]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	4a42      	ldr	r2, [pc, #264]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80067a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ac:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80067ae:	e00c      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3304      	adds	r3, #4
 80067b4:	2100      	movs	r1, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f97c 	bl	8006ab4 <RCCEx_PLLSAI1_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80067c0:	e003      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	77fb      	strb	r3, [r7, #31]
        break;
 80067c6:	e000      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80067c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ca:	7ffb      	ldrb	r3, [r7, #31]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10b      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067d0:	4b37      	ldr	r3, [pc, #220]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80067d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067de:	4934      	ldr	r1, [pc, #208]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80067e6:	e001      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	7ffb      	ldrb	r3, [r7, #31]
 80067ea:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067f8:	4b2d      	ldr	r3, [pc, #180]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	492a      	ldr	r1, [pc, #168]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800681a:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800681c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006820:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006828:	4921      	ldr	r1, [pc, #132]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800683c:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684a:	4919      	ldr	r1, [pc, #100]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800685e:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006860:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006864:	f023 0203 	bic.w	r2, r3, #3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686c:	4910      	ldr	r1, [pc, #64]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d02b      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800688e:	4908      	ldr	r1, [pc, #32]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800689a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800689e:	d109      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068a0:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	4a02      	ldr	r2, [pc, #8]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80068a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068aa:	60d3      	str	r3, [r2, #12]
 80068ac:	e014      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80068ae:	bf00      	nop
 80068b0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3304      	adds	r3, #4
 80068c2:	2101      	movs	r1, #1
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 f8f5 	bl	8006ab4 <RCCEx_PLLSAI1_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80068ce:	7ffb      	ldrb	r3, [r7, #31]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80068d4:	7ffb      	ldrb	r3, [r7, #31]
 80068d6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d04a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ec:	d108      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80068ee:	4b70      	ldr	r3, [pc, #448]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068f4:	4a6e      	ldr	r2, [pc, #440]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80068fe:	e012      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006900:	4b6b      	ldr	r3, [pc, #428]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006906:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690e:	4968      	ldr	r1, [pc, #416]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006916:	4b66      	ldr	r3, [pc, #408]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006918:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800691c:	4a64      	ldr	r2, [pc, #400]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800691e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006922:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800692a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800692e:	d10d      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	2101      	movs	r1, #1
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f8bc 	bl	8006ab4 <RCCEx_PLLSAI1_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006940:	7ffb      	ldrb	r3, [r7, #31]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d019      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8006946:	7ffb      	ldrb	r3, [r7, #31]
 8006948:	77bb      	strb	r3, [r7, #30]
 800694a:	e016      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006954:	d106      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006956:	4b56      	ldr	r3, [pc, #344]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	4a55      	ldr	r2, [pc, #340]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800695c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006960:	60d3      	str	r3, [r2, #12]
 8006962:	e00a      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800696c:	d105      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800696e:	4b50      	ldr	r3, [pc, #320]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4a4f      	ldr	r2, [pc, #316]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006978:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d028      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006986:	4b4a      	ldr	r3, [pc, #296]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006994:	4946      	ldr	r1, [pc, #280]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006996:	4313      	orrs	r3, r2
 8006998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069a4:	d106      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069a6:	4b42      	ldr	r3, [pc, #264]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	4a41      	ldr	r2, [pc, #260]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80069ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069b0:	60d3      	str	r3, [r2, #12]
 80069b2:	e011      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069bc:	d10c      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3304      	adds	r3, #4
 80069c2:	2101      	movs	r1, #1
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 f875 	bl	8006ab4 <RCCEx_PLLSAI1_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80069ce:	7ffb      	ldrb	r3, [r7, #31]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80069d4:	7ffb      	ldrb	r3, [r7, #31]
 80069d6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01e      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069e4:	4b32      	ldr	r3, [pc, #200]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80069e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f4:	492e      	ldr	r1, [pc, #184]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a06:	d10c      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f850 	bl	8006ab4 <RCCEx_PLLSAI1_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006a18:	7ffb      	ldrb	r3, [r7, #31]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8006a1e:	7ffb      	ldrb	r3, [r7, #31]
 8006a20:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00b      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a2e:	4b20      	ldr	r3, [pc, #128]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a34:	f023 0204 	bic.w	r2, r3, #4
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3e:	491c      	ldr	r1, [pc, #112]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006a52:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a58:	f023 0218 	bic.w	r2, r3, #24
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a62:	4913      	ldr	r1, [pc, #76]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d017      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006a76:	4b0e      	ldr	r3, [pc, #56]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a86:	490a      	ldr	r1, [pc, #40]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a98:	d105      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a9a:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	4a04      	ldr	r2, [pc, #16]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006aa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aa4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006aa6:	7fbb      	ldrb	r3, [r7, #30]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40021000 	.word	0x40021000

08006ab4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d018      	beq.n	8006afc <RCCEx_PLLSAI1_Config+0x48>
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d81f      	bhi.n	8006b0e <RCCEx_PLLSAI1_Config+0x5a>
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d002      	beq.n	8006ad8 <RCCEx_PLLSAI1_Config+0x24>
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d009      	beq.n	8006aea <RCCEx_PLLSAI1_Config+0x36>
 8006ad6:	e01a      	b.n	8006b0e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ad8:	4b65      	ldr	r3, [pc, #404]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d117      	bne.n	8006b14 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ae8:	e014      	b.n	8006b14 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006aea:	4b61      	ldr	r3, [pc, #388]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d110      	bne.n	8006b18 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006afa:	e00d      	b.n	8006b18 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006afc:	4b5c      	ldr	r3, [pc, #368]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d109      	bne.n	8006b1c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b0c:	e006      	b.n	8006b1c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	73fb      	strb	r3, [r7, #15]
      break;
 8006b12:	e004      	b.n	8006b1e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006b14:	bf00      	nop
 8006b16:	e002      	b.n	8006b1e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006b18:	bf00      	nop
 8006b1a:	e000      	b.n	8006b1e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006b1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f040 809f 	bne.w	8006c64 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b26:	4b52      	ldr	r3, [pc, #328]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a51      	ldr	r2, [pc, #324]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b32:	f7fb fda5 	bl	8002680 <HAL_GetTick>
 8006b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b38:	e00f      	b.n	8006b5a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b3a:	f7fb fda1 	bl	8002680 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d908      	bls.n	8006b5a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b48:	4b49      	ldr	r3, [pc, #292]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d009      	beq.n	8006b68 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b58:	e006      	b.n	8006b68 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b5a:	4b45      	ldr	r3, [pc, #276]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e9      	bne.n	8006b3a <RCCEx_PLLSAI1_Config+0x86>
 8006b66:	e000      	b.n	8006b6a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8006b68:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d179      	bne.n	8006c64 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d116      	bne.n	8006ba4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b76:	4b3e      	ldr	r3, [pc, #248]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	4b3e      	ldr	r3, [pc, #248]	; (8006c74 <RCCEx_PLLSAI1_Config+0x1c0>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6892      	ldr	r2, [r2, #8]
 8006b82:	0211      	lsls	r1, r2, #8
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	68d2      	ldr	r2, [r2, #12]
 8006b88:	06d2      	lsls	r2, r2, #27
 8006b8a:	4311      	orrs	r1, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6852      	ldr	r2, [r2, #4]
 8006b90:	3a01      	subs	r2, #1
 8006b92:	0112      	lsls	r2, r2, #4
 8006b94:	4311      	orrs	r1, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	4934      	ldr	r1, [pc, #208]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	610b      	str	r3, [r1, #16]
 8006ba2:	e033      	b.n	8006c0c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d118      	bne.n	8006bdc <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006baa:	4b31      	ldr	r3, [pc, #196]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	4b32      	ldr	r3, [pc, #200]	; (8006c78 <RCCEx_PLLSAI1_Config+0x1c4>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6892      	ldr	r2, [r2, #8]
 8006bb6:	0211      	lsls	r1, r2, #8
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6912      	ldr	r2, [r2, #16]
 8006bbc:	0852      	lsrs	r2, r2, #1
 8006bbe:	3a01      	subs	r2, #1
 8006bc0:	0552      	lsls	r2, r2, #21
 8006bc2:	4311      	orrs	r1, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6852      	ldr	r2, [r2, #4]
 8006bc8:	3a01      	subs	r2, #1
 8006bca:	0112      	lsls	r2, r2, #4
 8006bcc:	4311      	orrs	r1, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	4926      	ldr	r1, [pc, #152]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	610b      	str	r3, [r1, #16]
 8006bda:	e017      	b.n	8006c0c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bdc:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	4b26      	ldr	r3, [pc, #152]	; (8006c7c <RCCEx_PLLSAI1_Config+0x1c8>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6892      	ldr	r2, [r2, #8]
 8006be8:	0211      	lsls	r1, r2, #8
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6952      	ldr	r2, [r2, #20]
 8006bee:	0852      	lsrs	r2, r2, #1
 8006bf0:	3a01      	subs	r2, #1
 8006bf2:	0652      	lsls	r2, r2, #25
 8006bf4:	4311      	orrs	r1, r2
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6852      	ldr	r2, [r2, #4]
 8006bfa:	3a01      	subs	r2, #1
 8006bfc:	0112      	lsls	r2, r2, #4
 8006bfe:	4311      	orrs	r1, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	491a      	ldr	r1, [pc, #104]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c0c:	4b18      	ldr	r3, [pc, #96]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a17      	ldr	r2, [pc, #92]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c18:	f7fb fd32 	bl	8002680 <HAL_GetTick>
 8006c1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c1e:	e00f      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c20:	f7fb fd2e 	bl	8002680 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d908      	bls.n	8006c40 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c2e:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006c3e:	e006      	b.n	8006c4e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c40:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0e9      	beq.n	8006c20 <RCCEx_PLLSAI1_Config+0x16c>
 8006c4c:	e000      	b.n	8006c50 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8006c4e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8006c56:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006c58:	691a      	ldr	r2, [r3, #16]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	4904      	ldr	r1, [pc, #16]	; (8006c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	40021000 	.word	0x40021000
 8006c74:	07ff800c 	.word	0x07ff800c
 8006c78:	ff9f800c 	.word	0xff9f800c
 8006c7c:	f9ff800c 	.word	0xf9ff800c

08006c80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d018      	beq.n	8006cc8 <RCCEx_PLLSAI2_Config+0x48>
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d81f      	bhi.n	8006cda <RCCEx_PLLSAI2_Config+0x5a>
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d002      	beq.n	8006ca4 <RCCEx_PLLSAI2_Config+0x24>
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d009      	beq.n	8006cb6 <RCCEx_PLLSAI2_Config+0x36>
 8006ca2:	e01a      	b.n	8006cda <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ca4:	4b4a      	ldr	r3, [pc, #296]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d117      	bne.n	8006ce0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cb4:	e014      	b.n	8006ce0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cb6:	4b46      	ldr	r3, [pc, #280]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d110      	bne.n	8006ce4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cc6:	e00d      	b.n	8006ce4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006cc8:	4b41      	ldr	r3, [pc, #260]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cd8:	e006      	b.n	8006ce8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8006cde:	e004      	b.n	8006cea <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006ce0:	bf00      	nop
 8006ce2:	e002      	b.n	8006cea <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006ce4:	bf00      	nop
 8006ce6:	e000      	b.n	8006cea <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006ce8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d169      	bne.n	8006dc4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006cf0:	4b37      	ldr	r3, [pc, #220]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a36      	ldr	r2, [pc, #216]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cfc:	f7fb fcc0 	bl	8002680 <HAL_GetTick>
 8006d00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d02:	e00f      	b.n	8006d24 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d04:	f7fb fcbc 	bl	8002680 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d908      	bls.n	8006d24 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d12:	4b2f      	ldr	r3, [pc, #188]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d22:	e006      	b.n	8006d32 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d24:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e9      	bne.n	8006d04 <RCCEx_PLLSAI2_Config+0x84>
 8006d30:	e000      	b.n	8006d34 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8006d32:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d144      	bne.n	8006dc4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d115      	bne.n	8006d6c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d40:	4b23      	ldr	r3, [pc, #140]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006d42:	695a      	ldr	r2, [r3, #20]
 8006d44:	4b23      	ldr	r3, [pc, #140]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x154>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6892      	ldr	r2, [r2, #8]
 8006d4c:	0211      	lsls	r1, r2, #8
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	68d2      	ldr	r2, [r2, #12]
 8006d52:	06d2      	lsls	r2, r2, #27
 8006d54:	4311      	orrs	r1, r2
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6852      	ldr	r2, [r2, #4]
 8006d5a:	3a01      	subs	r2, #1
 8006d5c:	0112      	lsls	r2, r2, #4
 8006d5e:	4311      	orrs	r1, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	491a      	ldr	r1, [pc, #104]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d6c:	4b18      	ldr	r3, [pc, #96]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a17      	ldr	r2, [pc, #92]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d78:	f7fb fc82 	bl	8002680 <HAL_GetTick>
 8006d7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d7e:	e00f      	b.n	8006da0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d80:	f7fb fc7e 	bl	8002680 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d908      	bls.n	8006da0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d8e:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006d9e:	e006      	b.n	8006dae <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0e9      	beq.n	8006d80 <RCCEx_PLLSAI2_Config+0x100>
 8006dac:	e000      	b.n	8006db0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8006dae:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006db6:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	4904      	ldr	r1, [pc, #16]	; (8006dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	07ff800c 	.word	0x07ff800c

08006dd8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d066      	beq.n	8006eb8 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fa ff84 	bl	8001d0c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b10      	cmp	r3, #16
 8006e18:	d045      	beq.n	8006ea6 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e1a:	4b2a      	ldr	r3, [pc, #168]	; (8006ec4 <HAL_RTC_Init+0xec>)
 8006e1c:	22ca      	movs	r2, #202	; 0xca
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24
 8006e20:	4b28      	ldr	r3, [pc, #160]	; (8006ec4 <HAL_RTC_Init+0xec>)
 8006e22:	2253      	movs	r2, #83	; 0x53
 8006e24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f872 	bl	8006f10 <RTC_EnterInitMode>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d121      	bne.n	8006e7a <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006e36:	4b23      	ldr	r3, [pc, #140]	; (8006ec4 <HAL_RTC_Init+0xec>)
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	4a22      	ldr	r2, [pc, #136]	; (8006ec4 <HAL_RTC_Init+0xec>)
 8006e3c:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e44:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006e46:	4b1f      	ldr	r3, [pc, #124]	; (8006ec4 <HAL_RTC_Init+0xec>)
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6859      	ldr	r1, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	4319      	orrs	r1, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	491a      	ldr	r1, [pc, #104]	; (8006ec4 <HAL_RTC_Init+0xec>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	041b      	lsls	r3, r3, #16
 8006e6a:	4916      	ldr	r1, [pc, #88]	; (8006ec4 <HAL_RTC_Init+0xec>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f881 	bl	8006f78 <RTC_ExitInitMode>
 8006e76:	4603      	mov	r3, r0
 8006e78:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10e      	bne.n	8006e9e <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8006e80:	4b10      	ldr	r3, [pc, #64]	; (8006ec4 <HAL_RTC_Init+0xec>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a19      	ldr	r1, [r3, #32]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	4319      	orrs	r1, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	430b      	orrs	r3, r1
 8006e98:	490a      	ldr	r1, [pc, #40]	; (8006ec4 <HAL_RTC_Init+0xec>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e9e:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <HAL_RTC_Init+0xec>)
 8006ea0:	22ff      	movs	r2, #255	; 0xff
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24
 8006ea4:	e001      	b.n	8006eaa <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40002800 	.word	0x40002800

08006ec8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8006ed0:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <HAL_RTC_WaitForSynchro+0x40>)
 8006ed2:	4a0e      	ldr	r2, [pc, #56]	; (8006f0c <HAL_RTC_WaitForSynchro+0x44>)
 8006ed4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006ed6:	f7fb fbd3 	bl	8002680 <HAL_GetTick>
 8006eda:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006edc:	e009      	b.n	8006ef2 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ede:	f7fb fbcf 	bl	8002680 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eec:	d901      	bls.n	8006ef2 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e006      	b.n	8006f00 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006ef2:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <HAL_RTC_WaitForSynchro+0x40>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0ef      	beq.n	8006ede <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40002800 	.word	0x40002800
 8006f0c:	0001005c 	.word	0x0001005c

08006f10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006f1c:	4b15      	ldr	r3, [pc, #84]	; (8006f74 <RTC_EnterInitMode+0x64>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d120      	bne.n	8006f6a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f28:	4b12      	ldr	r3, [pc, #72]	; (8006f74 <RTC_EnterInitMode+0x64>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4a11      	ldr	r2, [pc, #68]	; (8006f74 <RTC_EnterInitMode+0x64>)
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f32:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006f34:	f7fb fba4 	bl	8002680 <HAL_GetTick>
 8006f38:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f3a:	e00d      	b.n	8006f58 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006f3c:	f7fb fba0 	bl	8002680 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f4a:	d905      	bls.n	8006f58 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2203      	movs	r2, #3
 8006f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <RTC_EnterInitMode+0x64>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d102      	bne.n	8006f6a <RTC_EnterInitMode+0x5a>
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d1e8      	bne.n	8006f3c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40002800 	.word	0x40002800

08006f78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f84:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <RTC_ExitInitMode+0x78>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <RTC_ExitInitMode+0x78>)
 8006f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f8e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006f90:	4b17      	ldr	r3, [pc, #92]	; (8006ff0 <RTC_ExitInitMode+0x78>)
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10c      	bne.n	8006fb6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff ff93 	bl	8006ec8 <HAL_RTC_WaitForSynchro>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01e      	beq.n	8006fe6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2203      	movs	r2, #3
 8006fac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	73fb      	strb	r3, [r7, #15]
 8006fb4:	e017      	b.n	8006fe6 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006fb6:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <RTC_ExitInitMode+0x78>)
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	4a0d      	ldr	r2, [pc, #52]	; (8006ff0 <RTC_ExitInitMode+0x78>)
 8006fbc:	f023 0320 	bic.w	r3, r3, #32
 8006fc0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff ff80 	bl	8006ec8 <HAL_RTC_WaitForSynchro>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <RTC_ExitInitMode+0x78>)
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	4a04      	ldr	r2, [pc, #16]	; (8006ff0 <RTC_ExitInitMode+0x78>)
 8006fe0:	f043 0320 	orr.w	r3, r3, #32
 8006fe4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40002800 	.word	0x40002800

08006ff4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	490f      	ldr	r1, [pc, #60]	; (8007044 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8007008:	4313      	orrs	r3, r2
 800700a:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	490c      	ldr	r1, [pc, #48]	; (8007048 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8007016:	4313      	orrs	r3, r2
 8007018:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800701a:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6919      	ldr	r1, [r3, #16]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	041b      	lsls	r3, r3, #16
 800702c:	430b      	orrs	r3, r1
 800702e:	4906      	ldr	r1, [pc, #24]	; (8007048 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8007030:	4313      	orrs	r3, r2
 8007032:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40002800 	.word	0x40002800
 8007048:	40003400 	.word	0x40003400

0800704c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e095      	b.n	800718a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	2b00      	cmp	r3, #0
 8007064:	d108      	bne.n	8007078 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800706e:	d009      	beq.n	8007084 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	61da      	str	r2, [r3, #28]
 8007076:	e005      	b.n	8007084 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d106      	bne.n	80070a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fa fe72 	bl	8001d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070c4:	d902      	bls.n	80070cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	e002      	b.n	80070d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80070cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80070da:	d007      	beq.n	80070ec <HAL_SPI_Init+0xa0>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070e4:	d002      	beq.n	80070ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	431a      	orrs	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712e:	ea42 0103 	orr.w	r1, r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	0c1b      	lsrs	r3, r3, #16
 8007148:	f003 0204 	and.w	r2, r3, #4
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007168:	ea42 0103 	orr.w	r1, r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e049      	b.n	8007238 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7fa fecb 	bl	8001f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2202      	movs	r2, #2
 80071c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4619      	mov	r1, r3
 80071d0:	4610      	mov	r0, r2
 80071d2:	f000 fed5 	bl	8007f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	d001      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e04f      	b.n	80072f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a23      	ldr	r2, [pc, #140]	; (8007304 <HAL_TIM_Base_Start_IT+0xc4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01d      	beq.n	80072b6 <HAL_TIM_Base_Start_IT+0x76>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007282:	d018      	beq.n	80072b6 <HAL_TIM_Base_Start_IT+0x76>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1f      	ldr	r2, [pc, #124]	; (8007308 <HAL_TIM_Base_Start_IT+0xc8>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_TIM_Base_Start_IT+0x76>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a1e      	ldr	r2, [pc, #120]	; (800730c <HAL_TIM_Base_Start_IT+0xcc>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <HAL_TIM_Base_Start_IT+0x76>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1c      	ldr	r2, [pc, #112]	; (8007310 <HAL_TIM_Base_Start_IT+0xd0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_TIM_Base_Start_IT+0x76>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1b      	ldr	r2, [pc, #108]	; (8007314 <HAL_TIM_Base_Start_IT+0xd4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_TIM_Base_Start_IT+0x76>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a19      	ldr	r2, [pc, #100]	; (8007318 <HAL_TIM_Base_Start_IT+0xd8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d115      	bne.n	80072e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	4b17      	ldr	r3, [pc, #92]	; (800731c <HAL_TIM_Base_Start_IT+0xdc>)
 80072be:	4013      	ands	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b06      	cmp	r3, #6
 80072c6:	d015      	beq.n	80072f4 <HAL_TIM_Base_Start_IT+0xb4>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ce:	d011      	beq.n	80072f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0201 	orr.w	r2, r2, #1
 80072de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e0:	e008      	b.n	80072f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f042 0201 	orr.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e000      	b.n	80072f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	40012c00 	.word	0x40012c00
 8007308:	40000400 	.word	0x40000400
 800730c:	40000800 	.word	0x40000800
 8007310:	40000c00 	.word	0x40000c00
 8007314:	40013400 	.word	0x40013400
 8007318:	40014000 	.word	0x40014000
 800731c:	00010007 	.word	0x00010007

08007320 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e049      	b.n	80073c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d106      	bne.n	800734c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f841 	bl	80073ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3304      	adds	r3, #4
 800735c:	4619      	mov	r1, r3
 800735e:	4610      	mov	r0, r2
 8007360:	f000 fe0e 	bl	8007f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d109      	bne.n	8007408 <HAL_TIM_PWM_Start+0x24>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	bf14      	ite	ne
 8007400:	2301      	movne	r3, #1
 8007402:	2300      	moveq	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	e03c      	b.n	8007482 <HAL_TIM_PWM_Start+0x9e>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b04      	cmp	r3, #4
 800740c:	d109      	bne.n	8007422 <HAL_TIM_PWM_Start+0x3e>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b01      	cmp	r3, #1
 8007418:	bf14      	ite	ne
 800741a:	2301      	movne	r3, #1
 800741c:	2300      	moveq	r3, #0
 800741e:	b2db      	uxtb	r3, r3
 8007420:	e02f      	b.n	8007482 <HAL_TIM_PWM_Start+0x9e>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b08      	cmp	r3, #8
 8007426:	d109      	bne.n	800743c <HAL_TIM_PWM_Start+0x58>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b01      	cmp	r3, #1
 8007432:	bf14      	ite	ne
 8007434:	2301      	movne	r3, #1
 8007436:	2300      	moveq	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	e022      	b.n	8007482 <HAL_TIM_PWM_Start+0x9e>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b0c      	cmp	r3, #12
 8007440:	d109      	bne.n	8007456 <HAL_TIM_PWM_Start+0x72>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b01      	cmp	r3, #1
 800744c:	bf14      	ite	ne
 800744e:	2301      	movne	r3, #1
 8007450:	2300      	moveq	r3, #0
 8007452:	b2db      	uxtb	r3, r3
 8007454:	e015      	b.n	8007482 <HAL_TIM_PWM_Start+0x9e>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b10      	cmp	r3, #16
 800745a:	d109      	bne.n	8007470 <HAL_TIM_PWM_Start+0x8c>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b01      	cmp	r3, #1
 8007466:	bf14      	ite	ne
 8007468:	2301      	movne	r3, #1
 800746a:	2300      	moveq	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	e008      	b.n	8007482 <HAL_TIM_PWM_Start+0x9e>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	bf14      	ite	ne
 800747c:	2301      	movne	r3, #1
 800747e:	2300      	moveq	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e09c      	b.n	80075c4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <HAL_TIM_PWM_Start+0xb6>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007498:	e023      	b.n	80074e2 <HAL_TIM_PWM_Start+0xfe>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b04      	cmp	r3, #4
 800749e:	d104      	bne.n	80074aa <HAL_TIM_PWM_Start+0xc6>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a8:	e01b      	b.n	80074e2 <HAL_TIM_PWM_Start+0xfe>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d104      	bne.n	80074ba <HAL_TIM_PWM_Start+0xd6>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b8:	e013      	b.n	80074e2 <HAL_TIM_PWM_Start+0xfe>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b0c      	cmp	r3, #12
 80074be:	d104      	bne.n	80074ca <HAL_TIM_PWM_Start+0xe6>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074c8:	e00b      	b.n	80074e2 <HAL_TIM_PWM_Start+0xfe>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d104      	bne.n	80074da <HAL_TIM_PWM_Start+0xf6>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074d8:	e003      	b.n	80074e2 <HAL_TIM_PWM_Start+0xfe>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2202      	movs	r2, #2
 80074de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2201      	movs	r2, #1
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 fa78 	bl	80089e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a35      	ldr	r2, [pc, #212]	; (80075cc <HAL_TIM_PWM_Start+0x1e8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d013      	beq.n	8007522 <HAL_TIM_PWM_Start+0x13e>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a34      	ldr	r2, [pc, #208]	; (80075d0 <HAL_TIM_PWM_Start+0x1ec>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00e      	beq.n	8007522 <HAL_TIM_PWM_Start+0x13e>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a32      	ldr	r2, [pc, #200]	; (80075d4 <HAL_TIM_PWM_Start+0x1f0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d009      	beq.n	8007522 <HAL_TIM_PWM_Start+0x13e>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a31      	ldr	r2, [pc, #196]	; (80075d8 <HAL_TIM_PWM_Start+0x1f4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d004      	beq.n	8007522 <HAL_TIM_PWM_Start+0x13e>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a2f      	ldr	r2, [pc, #188]	; (80075dc <HAL_TIM_PWM_Start+0x1f8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d101      	bne.n	8007526 <HAL_TIM_PWM_Start+0x142>
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <HAL_TIM_PWM_Start+0x144>
 8007526:	2300      	movs	r3, #0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d007      	beq.n	800753c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800753a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a22      	ldr	r2, [pc, #136]	; (80075cc <HAL_TIM_PWM_Start+0x1e8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01d      	beq.n	8007582 <HAL_TIM_PWM_Start+0x19e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754e:	d018      	beq.n	8007582 <HAL_TIM_PWM_Start+0x19e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a22      	ldr	r2, [pc, #136]	; (80075e0 <HAL_TIM_PWM_Start+0x1fc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <HAL_TIM_PWM_Start+0x19e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a21      	ldr	r2, [pc, #132]	; (80075e4 <HAL_TIM_PWM_Start+0x200>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <HAL_TIM_PWM_Start+0x19e>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1f      	ldr	r2, [pc, #124]	; (80075e8 <HAL_TIM_PWM_Start+0x204>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_TIM_PWM_Start+0x19e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a17      	ldr	r2, [pc, #92]	; (80075d0 <HAL_TIM_PWM_Start+0x1ec>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_TIM_PWM_Start+0x19e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <HAL_TIM_PWM_Start+0x1f0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d115      	bne.n	80075ae <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	4b18      	ldr	r3, [pc, #96]	; (80075ec <HAL_TIM_PWM_Start+0x208>)
 800758a:	4013      	ands	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b06      	cmp	r3, #6
 8007592:	d015      	beq.n	80075c0 <HAL_TIM_PWM_Start+0x1dc>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759a:	d011      	beq.n	80075c0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ac:	e008      	b.n	80075c0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0201 	orr.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e000      	b.n	80075c2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40012c00 	.word	0x40012c00
 80075d0:	40013400 	.word	0x40013400
 80075d4:	40014000 	.word	0x40014000
 80075d8:	40014400 	.word	0x40014400
 80075dc:	40014800 	.word	0x40014800
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	00010007 	.word	0x00010007

080075f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e049      	b.n	8007696 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f841 	bl	800769e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3304      	adds	r3, #4
 800762c:	4619      	mov	r1, r3
 800762e:	4610      	mov	r0, r2
 8007630:	f000 fca6 	bl	8007f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e097      	b.n	80077f6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fa fcce 	bl	800207c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80076f6:	f023 0307 	bic.w	r3, r3, #7
 80076fa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3304      	adds	r3, #4
 8007704:	4619      	mov	r1, r3
 8007706:	4610      	mov	r0, r2
 8007708:	f000 fc3a 	bl	8007f80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007734:	f023 0303 	bic.w	r3, r3, #3
 8007738:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	021b      	lsls	r3, r3, #8
 8007744:	4313      	orrs	r3, r2
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	4313      	orrs	r3, r2
 800774a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007752:	f023 030c 	bic.w	r3, r3, #12
 8007756:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800775e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	4313      	orrs	r3, r2
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	4313      	orrs	r3, r2
 8007774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	011a      	lsls	r2, r3, #4
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	031b      	lsls	r3, r3, #12
 8007782:	4313      	orrs	r3, r2
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	4313      	orrs	r3, r2
 8007788:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007790:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007798:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	4313      	orrs	r3, r2
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b02      	cmp	r3, #2
 8007812:	d122      	bne.n	800785a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b02      	cmp	r3, #2
 8007820:	d11b      	bne.n	800785a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f06f 0202 	mvn.w	r2, #2
 800782a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fb7e 	bl	8007f42 <HAL_TIM_IC_CaptureCallback>
 8007846:	e005      	b.n	8007854 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fb70 	bl	8007f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fb81 	bl	8007f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b04      	cmp	r3, #4
 8007866:	d122      	bne.n	80078ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b04      	cmp	r3, #4
 8007874:	d11b      	bne.n	80078ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f06f 0204 	mvn.w	r2, #4
 800787e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fb54 	bl	8007f42 <HAL_TIM_IC_CaptureCallback>
 800789a:	e005      	b.n	80078a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fb46 	bl	8007f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb57 	bl	8007f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d122      	bne.n	8007902 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b08      	cmp	r3, #8
 80078c8:	d11b      	bne.n	8007902 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f06f 0208 	mvn.w	r2, #8
 80078d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2204      	movs	r2, #4
 80078d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	f003 0303 	and.w	r3, r3, #3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fb2a 	bl	8007f42 <HAL_TIM_IC_CaptureCallback>
 80078ee:	e005      	b.n	80078fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fb1c 	bl	8007f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fb2d 	bl	8007f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b10      	cmp	r3, #16
 800790e:	d122      	bne.n	8007956 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b10      	cmp	r3, #16
 800791c:	d11b      	bne.n	8007956 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f06f 0210 	mvn.w	r2, #16
 8007926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2208      	movs	r2, #8
 800792c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fb00 	bl	8007f42 <HAL_TIM_IC_CaptureCallback>
 8007942:	e005      	b.n	8007950 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 faf2 	bl	8007f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb03 	bl	8007f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b01      	cmp	r3, #1
 8007962:	d10e      	bne.n	8007982 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b01      	cmp	r3, #1
 8007970:	d107      	bne.n	8007982 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f06f 0201 	mvn.w	r2, #1
 800797a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7f9 ff85 	bl	800188c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798c:	2b80      	cmp	r3, #128	; 0x80
 800798e:	d10e      	bne.n	80079ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799a:	2b80      	cmp	r3, #128	; 0x80
 800799c:	d107      	bne.n	80079ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 f971 	bl	8008c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079bc:	d10e      	bne.n	80079dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c8:	2b80      	cmp	r3, #128	; 0x80
 80079ca:	d107      	bne.n	80079dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 f964 	bl	8008ca4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e6:	2b40      	cmp	r3, #64	; 0x40
 80079e8:	d10e      	bne.n	8007a08 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d107      	bne.n	8007a08 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fab1 	bl	8007f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d10e      	bne.n	8007a34 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	2b20      	cmp	r3, #32
 8007a22:	d107      	bne.n	8007a34 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f06f 0220 	mvn.w	r2, #32
 8007a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 f924 	bl	8008c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a34:	bf00      	nop
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007a56:	2302      	movs	r3, #2
 8007a58:	e088      	b.n	8007b6c <HAL_TIM_IC_ConfigChannel+0x130>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d11b      	bne.n	8007aa0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007a78:	f000 fdf2 	bl	8008660 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699a      	ldr	r2, [r3, #24]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 020c 	bic.w	r2, r2, #12
 8007a8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6999      	ldr	r1, [r3, #24]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	689a      	ldr	r2, [r3, #8]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	619a      	str	r2, [r3, #24]
 8007a9e:	e060      	b.n	8007b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d11c      	bne.n	8007ae0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007ab6:	f000 fe70 	bl	800879a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699a      	ldr	r2, [r3, #24]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ac8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6999      	ldr	r1, [r3, #24]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	021a      	lsls	r2, r3, #8
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	619a      	str	r2, [r3, #24]
 8007ade:	e040      	b.n	8007b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	d11b      	bne.n	8007b1e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007af6:	f000 febd 	bl	8008874 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69da      	ldr	r2, [r3, #28]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 020c 	bic.w	r2, r2, #12
 8007b08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	69d9      	ldr	r1, [r3, #28]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	61da      	str	r2, [r3, #28]
 8007b1c:	e021      	b.n	8007b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b0c      	cmp	r3, #12
 8007b22:	d11c      	bne.n	8007b5e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007b34:	f000 feda 	bl	80088ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69da      	ldr	r2, [r3, #28]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007b46:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69d9      	ldr	r1, [r3, #28]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	021a      	lsls	r2, r3, #8
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	61da      	str	r2, [r3, #28]
 8007b5c:	e001      	b.n	8007b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e0ff      	b.n	8007d92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b14      	cmp	r3, #20
 8007b9e:	f200 80f0 	bhi.w	8007d82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bfd 	.word	0x08007bfd
 8007bac:	08007d83 	.word	0x08007d83
 8007bb0:	08007d83 	.word	0x08007d83
 8007bb4:	08007d83 	.word	0x08007d83
 8007bb8:	08007c3d 	.word	0x08007c3d
 8007bbc:	08007d83 	.word	0x08007d83
 8007bc0:	08007d83 	.word	0x08007d83
 8007bc4:	08007d83 	.word	0x08007d83
 8007bc8:	08007c7f 	.word	0x08007c7f
 8007bcc:	08007d83 	.word	0x08007d83
 8007bd0:	08007d83 	.word	0x08007d83
 8007bd4:	08007d83 	.word	0x08007d83
 8007bd8:	08007cbf 	.word	0x08007cbf
 8007bdc:	08007d83 	.word	0x08007d83
 8007be0:	08007d83 	.word	0x08007d83
 8007be4:	08007d83 	.word	0x08007d83
 8007be8:	08007d01 	.word	0x08007d01
 8007bec:	08007d83 	.word	0x08007d83
 8007bf0:	08007d83 	.word	0x08007d83
 8007bf4:	08007d83 	.word	0x08007d83
 8007bf8:	08007d41 	.word	0x08007d41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fa56 	bl	80080b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699a      	ldr	r2, [r3, #24]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 0208 	orr.w	r2, r2, #8
 8007c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699a      	ldr	r2, [r3, #24]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0204 	bic.w	r2, r2, #4
 8007c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6999      	ldr	r1, [r3, #24]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	691a      	ldr	r2, [r3, #16]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	619a      	str	r2, [r3, #24]
      break;
 8007c3a:	e0a5      	b.n	8007d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68b9      	ldr	r1, [r7, #8]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fac6 	bl	80081d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699a      	ldr	r2, [r3, #24]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6999      	ldr	r1, [r3, #24]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	021a      	lsls	r2, r3, #8
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	619a      	str	r2, [r3, #24]
      break;
 8007c7c:	e084      	b.n	8007d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 fb2f 	bl	80082e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69da      	ldr	r2, [r3, #28]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f042 0208 	orr.w	r2, r2, #8
 8007c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0204 	bic.w	r2, r2, #4
 8007ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	69d9      	ldr	r1, [r3, #28]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	691a      	ldr	r2, [r3, #16]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	61da      	str	r2, [r3, #28]
      break;
 8007cbc:	e064      	b.n	8007d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 fb97 	bl	80083f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69da      	ldr	r2, [r3, #28]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69da      	ldr	r2, [r3, #28]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	69d9      	ldr	r1, [r3, #28]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	021a      	lsls	r2, r3, #8
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	61da      	str	r2, [r3, #28]
      break;
 8007cfe:	e043      	b.n	8007d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68b9      	ldr	r1, [r7, #8]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 fbe0 	bl	80084cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0208 	orr.w	r2, r2, #8
 8007d1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0204 	bic.w	r2, r2, #4
 8007d2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	691a      	ldr	r2, [r3, #16]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d3e:	e023      	b.n	8007d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68b9      	ldr	r1, [r7, #8]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fc24 	bl	8008594 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	021a      	lsls	r2, r3, #8
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d80:	e002      	b.n	8007d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	75fb      	strb	r3, [r7, #23]
      break;
 8007d86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop

08007d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_TIM_ConfigClockSource+0x1c>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e0b6      	b.n	8007f26 <HAL_TIM_ConfigClockSource+0x18a>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df4:	d03e      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0xd8>
 8007df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dfa:	f200 8087 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x170>
 8007dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e02:	f000 8086 	beq.w	8007f12 <HAL_TIM_ConfigClockSource+0x176>
 8007e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e0a:	d87f      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x170>
 8007e0c:	2b70      	cmp	r3, #112	; 0x70
 8007e0e:	d01a      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0xaa>
 8007e10:	2b70      	cmp	r3, #112	; 0x70
 8007e12:	d87b      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x170>
 8007e14:	2b60      	cmp	r3, #96	; 0x60
 8007e16:	d050      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0x11e>
 8007e18:	2b60      	cmp	r3, #96	; 0x60
 8007e1a:	d877      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x170>
 8007e1c:	2b50      	cmp	r3, #80	; 0x50
 8007e1e:	d03c      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0xfe>
 8007e20:	2b50      	cmp	r3, #80	; 0x50
 8007e22:	d873      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x170>
 8007e24:	2b40      	cmp	r3, #64	; 0x40
 8007e26:	d058      	beq.n	8007eda <HAL_TIM_ConfigClockSource+0x13e>
 8007e28:	2b40      	cmp	r3, #64	; 0x40
 8007e2a:	d86f      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x170>
 8007e2c:	2b30      	cmp	r3, #48	; 0x30
 8007e2e:	d064      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x15e>
 8007e30:	2b30      	cmp	r3, #48	; 0x30
 8007e32:	d86b      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x170>
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d060      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x15e>
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	d867      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x170>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d05c      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x15e>
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d05a      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x15e>
 8007e44:	e062      	b.n	8007f0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e56:	f000 fda3 	bl	80089a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	609a      	str	r2, [r3, #8]
      break;
 8007e72:	e04f      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e84:	f000 fd8c 	bl	80089a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e96:	609a      	str	r2, [r3, #8]
      break;
 8007e98:	e03c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f000 fc48 	bl	800873c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2150      	movs	r1, #80	; 0x50
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fd57 	bl	8008966 <TIM_ITRx_SetConfig>
      break;
 8007eb8:	e02c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f000 fca4 	bl	8008814 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2160      	movs	r1, #96	; 0x60
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fd47 	bl	8008966 <TIM_ITRx_SetConfig>
      break;
 8007ed8:	e01c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f000 fc28 	bl	800873c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2140      	movs	r1, #64	; 0x40
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fd37 	bl	8008966 <TIM_ITRx_SetConfig>
      break;
 8007ef8:	e00c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4619      	mov	r1, r3
 8007f04:	4610      	mov	r0, r2
 8007f06:	f000 fd2e 	bl	8008966 <TIM_ITRx_SetConfig>
      break;
 8007f0a:	e003      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f10:	e000      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a40      	ldr	r2, [pc, #256]	; (8008094 <TIM_Base_SetConfig+0x114>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d013      	beq.n	8007fc0 <TIM_Base_SetConfig+0x40>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f9e:	d00f      	beq.n	8007fc0 <TIM_Base_SetConfig+0x40>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a3d      	ldr	r2, [pc, #244]	; (8008098 <TIM_Base_SetConfig+0x118>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00b      	beq.n	8007fc0 <TIM_Base_SetConfig+0x40>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a3c      	ldr	r2, [pc, #240]	; (800809c <TIM_Base_SetConfig+0x11c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d007      	beq.n	8007fc0 <TIM_Base_SetConfig+0x40>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a3b      	ldr	r2, [pc, #236]	; (80080a0 <TIM_Base_SetConfig+0x120>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d003      	beq.n	8007fc0 <TIM_Base_SetConfig+0x40>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a3a      	ldr	r2, [pc, #232]	; (80080a4 <TIM_Base_SetConfig+0x124>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d108      	bne.n	8007fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a2f      	ldr	r2, [pc, #188]	; (8008094 <TIM_Base_SetConfig+0x114>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d01f      	beq.n	800801a <TIM_Base_SetConfig+0x9a>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe0:	d01b      	beq.n	800801a <TIM_Base_SetConfig+0x9a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a2c      	ldr	r2, [pc, #176]	; (8008098 <TIM_Base_SetConfig+0x118>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d017      	beq.n	800801a <TIM_Base_SetConfig+0x9a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a2b      	ldr	r2, [pc, #172]	; (800809c <TIM_Base_SetConfig+0x11c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d013      	beq.n	800801a <TIM_Base_SetConfig+0x9a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a2a      	ldr	r2, [pc, #168]	; (80080a0 <TIM_Base_SetConfig+0x120>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d00f      	beq.n	800801a <TIM_Base_SetConfig+0x9a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a29      	ldr	r2, [pc, #164]	; (80080a4 <TIM_Base_SetConfig+0x124>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00b      	beq.n	800801a <TIM_Base_SetConfig+0x9a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a28      	ldr	r2, [pc, #160]	; (80080a8 <TIM_Base_SetConfig+0x128>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d007      	beq.n	800801a <TIM_Base_SetConfig+0x9a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a27      	ldr	r2, [pc, #156]	; (80080ac <TIM_Base_SetConfig+0x12c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d003      	beq.n	800801a <TIM_Base_SetConfig+0x9a>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a26      	ldr	r2, [pc, #152]	; (80080b0 <TIM_Base_SetConfig+0x130>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d108      	bne.n	800802c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4313      	orrs	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a10      	ldr	r2, [pc, #64]	; (8008094 <TIM_Base_SetConfig+0x114>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00f      	beq.n	8008078 <TIM_Base_SetConfig+0xf8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a12      	ldr	r2, [pc, #72]	; (80080a4 <TIM_Base_SetConfig+0x124>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00b      	beq.n	8008078 <TIM_Base_SetConfig+0xf8>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a11      	ldr	r2, [pc, #68]	; (80080a8 <TIM_Base_SetConfig+0x128>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d007      	beq.n	8008078 <TIM_Base_SetConfig+0xf8>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a10      	ldr	r2, [pc, #64]	; (80080ac <TIM_Base_SetConfig+0x12c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d003      	beq.n	8008078 <TIM_Base_SetConfig+0xf8>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a0f      	ldr	r2, [pc, #60]	; (80080b0 <TIM_Base_SetConfig+0x130>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d103      	bne.n	8008080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	615a      	str	r2, [r3, #20]
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	40012c00 	.word	0x40012c00
 8008098:	40000400 	.word	0x40000400
 800809c:	40000800 	.word	0x40000800
 80080a0:	40000c00 	.word	0x40000c00
 80080a4:	40013400 	.word	0x40013400
 80080a8:	40014000 	.word	0x40014000
 80080ac:	40014400 	.word	0x40014400
 80080b0:	40014800 	.word	0x40014800

080080b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f023 0201 	bic.w	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 0303 	bic.w	r3, r3, #3
 80080ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f023 0302 	bic.w	r3, r3, #2
 8008100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	4313      	orrs	r3, r2
 800810a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a2c      	ldr	r2, [pc, #176]	; (80081c0 <TIM_OC1_SetConfig+0x10c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d00f      	beq.n	8008134 <TIM_OC1_SetConfig+0x80>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a2b      	ldr	r2, [pc, #172]	; (80081c4 <TIM_OC1_SetConfig+0x110>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d00b      	beq.n	8008134 <TIM_OC1_SetConfig+0x80>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a2a      	ldr	r2, [pc, #168]	; (80081c8 <TIM_OC1_SetConfig+0x114>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d007      	beq.n	8008134 <TIM_OC1_SetConfig+0x80>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a29      	ldr	r2, [pc, #164]	; (80081cc <TIM_OC1_SetConfig+0x118>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d003      	beq.n	8008134 <TIM_OC1_SetConfig+0x80>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a28      	ldr	r2, [pc, #160]	; (80081d0 <TIM_OC1_SetConfig+0x11c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d10c      	bne.n	800814e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f023 0308 	bic.w	r3, r3, #8
 800813a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	4313      	orrs	r3, r2
 8008144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f023 0304 	bic.w	r3, r3, #4
 800814c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <TIM_OC1_SetConfig+0x10c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00f      	beq.n	8008176 <TIM_OC1_SetConfig+0xc2>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a1a      	ldr	r2, [pc, #104]	; (80081c4 <TIM_OC1_SetConfig+0x110>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00b      	beq.n	8008176 <TIM_OC1_SetConfig+0xc2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a19      	ldr	r2, [pc, #100]	; (80081c8 <TIM_OC1_SetConfig+0x114>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d007      	beq.n	8008176 <TIM_OC1_SetConfig+0xc2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a18      	ldr	r2, [pc, #96]	; (80081cc <TIM_OC1_SetConfig+0x118>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d003      	beq.n	8008176 <TIM_OC1_SetConfig+0xc2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a17      	ldr	r2, [pc, #92]	; (80081d0 <TIM_OC1_SetConfig+0x11c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d111      	bne.n	800819a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800817c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	4313      	orrs	r3, r2
 8008198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	621a      	str	r2, [r3, #32]
}
 80081b4:	bf00      	nop
 80081b6:	371c      	adds	r7, #28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	40012c00 	.word	0x40012c00
 80081c4:	40013400 	.word	0x40013400
 80081c8:	40014000 	.word	0x40014000
 80081cc:	40014400 	.word	0x40014400
 80081d0:	40014800 	.word	0x40014800

080081d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	f023 0210 	bic.w	r2, r3, #16
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800820e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	4313      	orrs	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f023 0320 	bic.w	r3, r3, #32
 8008222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4313      	orrs	r3, r2
 800822e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a28      	ldr	r2, [pc, #160]	; (80082d4 <TIM_OC2_SetConfig+0x100>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d003      	beq.n	8008240 <TIM_OC2_SetConfig+0x6c>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a27      	ldr	r2, [pc, #156]	; (80082d8 <TIM_OC2_SetConfig+0x104>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d10d      	bne.n	800825c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	011b      	lsls	r3, r3, #4
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	4313      	orrs	r3, r2
 8008252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a1d      	ldr	r2, [pc, #116]	; (80082d4 <TIM_OC2_SetConfig+0x100>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00f      	beq.n	8008284 <TIM_OC2_SetConfig+0xb0>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a1c      	ldr	r2, [pc, #112]	; (80082d8 <TIM_OC2_SetConfig+0x104>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00b      	beq.n	8008284 <TIM_OC2_SetConfig+0xb0>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a1b      	ldr	r2, [pc, #108]	; (80082dc <TIM_OC2_SetConfig+0x108>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d007      	beq.n	8008284 <TIM_OC2_SetConfig+0xb0>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a1a      	ldr	r2, [pc, #104]	; (80082e0 <TIM_OC2_SetConfig+0x10c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d003      	beq.n	8008284 <TIM_OC2_SetConfig+0xb0>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a19      	ldr	r2, [pc, #100]	; (80082e4 <TIM_OC2_SetConfig+0x110>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d113      	bne.n	80082ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800828a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	621a      	str	r2, [r3, #32]
}
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	40012c00 	.word	0x40012c00
 80082d8:	40013400 	.word	0x40013400
 80082dc:	40014000 	.word	0x40014000
 80082e0:	40014400 	.word	0x40014400
 80082e4:	40014800 	.word	0x40014800

080082e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f023 0303 	bic.w	r3, r3, #3
 8008322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	4313      	orrs	r3, r2
 8008340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a27      	ldr	r2, [pc, #156]	; (80083e4 <TIM_OC3_SetConfig+0xfc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d003      	beq.n	8008352 <TIM_OC3_SetConfig+0x6a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a26      	ldr	r2, [pc, #152]	; (80083e8 <TIM_OC3_SetConfig+0x100>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d10d      	bne.n	800836e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	021b      	lsls	r3, r3, #8
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800836c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a1c      	ldr	r2, [pc, #112]	; (80083e4 <TIM_OC3_SetConfig+0xfc>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d00f      	beq.n	8008396 <TIM_OC3_SetConfig+0xae>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a1b      	ldr	r2, [pc, #108]	; (80083e8 <TIM_OC3_SetConfig+0x100>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d00b      	beq.n	8008396 <TIM_OC3_SetConfig+0xae>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a1a      	ldr	r2, [pc, #104]	; (80083ec <TIM_OC3_SetConfig+0x104>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d007      	beq.n	8008396 <TIM_OC3_SetConfig+0xae>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a19      	ldr	r2, [pc, #100]	; (80083f0 <TIM_OC3_SetConfig+0x108>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d003      	beq.n	8008396 <TIM_OC3_SetConfig+0xae>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a18      	ldr	r2, [pc, #96]	; (80083f4 <TIM_OC3_SetConfig+0x10c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d113      	bne.n	80083be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800839c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	621a      	str	r2, [r3, #32]
}
 80083d8:	bf00      	nop
 80083da:	371c      	adds	r7, #28
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	40012c00 	.word	0x40012c00
 80083e8:	40013400 	.word	0x40013400
 80083ec:	40014000 	.word	0x40014000
 80083f0:	40014400 	.word	0x40014400
 80083f4:	40014800 	.word	0x40014800

080083f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	031b      	lsls	r3, r3, #12
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4313      	orrs	r3, r2
 8008452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a18      	ldr	r2, [pc, #96]	; (80084b8 <TIM_OC4_SetConfig+0xc0>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00f      	beq.n	800847c <TIM_OC4_SetConfig+0x84>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a17      	ldr	r2, [pc, #92]	; (80084bc <TIM_OC4_SetConfig+0xc4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00b      	beq.n	800847c <TIM_OC4_SetConfig+0x84>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a16      	ldr	r2, [pc, #88]	; (80084c0 <TIM_OC4_SetConfig+0xc8>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d007      	beq.n	800847c <TIM_OC4_SetConfig+0x84>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a15      	ldr	r2, [pc, #84]	; (80084c4 <TIM_OC4_SetConfig+0xcc>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d003      	beq.n	800847c <TIM_OC4_SetConfig+0x84>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a14      	ldr	r2, [pc, #80]	; (80084c8 <TIM_OC4_SetConfig+0xd0>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d109      	bne.n	8008490 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	019b      	lsls	r3, r3, #6
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	4313      	orrs	r3, r2
 800848e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	621a      	str	r2, [r3, #32]
}
 80084aa:	bf00      	nop
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40012c00 	.word	0x40012c00
 80084bc:	40013400 	.word	0x40013400
 80084c0:	40014000 	.word	0x40014000
 80084c4:	40014400 	.word	0x40014400
 80084c8:	40014800 	.word	0x40014800

080084cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008510:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	041b      	lsls	r3, r3, #16
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	4313      	orrs	r3, r2
 800851c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a17      	ldr	r2, [pc, #92]	; (8008580 <TIM_OC5_SetConfig+0xb4>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00f      	beq.n	8008546 <TIM_OC5_SetConfig+0x7a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a16      	ldr	r2, [pc, #88]	; (8008584 <TIM_OC5_SetConfig+0xb8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00b      	beq.n	8008546 <TIM_OC5_SetConfig+0x7a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a15      	ldr	r2, [pc, #84]	; (8008588 <TIM_OC5_SetConfig+0xbc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d007      	beq.n	8008546 <TIM_OC5_SetConfig+0x7a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a14      	ldr	r2, [pc, #80]	; (800858c <TIM_OC5_SetConfig+0xc0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d003      	beq.n	8008546 <TIM_OC5_SetConfig+0x7a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a13      	ldr	r2, [pc, #76]	; (8008590 <TIM_OC5_SetConfig+0xc4>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d109      	bne.n	800855a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800854c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	021b      	lsls	r3, r3, #8
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685a      	ldr	r2, [r3, #4]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	621a      	str	r2, [r3, #32]
}
 8008574:	bf00      	nop
 8008576:	371c      	adds	r7, #28
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	40012c00 	.word	0x40012c00
 8008584:	40013400 	.word	0x40013400
 8008588:	40014000 	.word	0x40014000
 800858c:	40014400 	.word	0x40014400
 8008590:	40014800 	.word	0x40014800

08008594 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	021b      	lsls	r3, r3, #8
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	051b      	lsls	r3, r3, #20
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a18      	ldr	r2, [pc, #96]	; (800864c <TIM_OC6_SetConfig+0xb8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00f      	beq.n	8008610 <TIM_OC6_SetConfig+0x7c>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a17      	ldr	r2, [pc, #92]	; (8008650 <TIM_OC6_SetConfig+0xbc>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00b      	beq.n	8008610 <TIM_OC6_SetConfig+0x7c>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a16      	ldr	r2, [pc, #88]	; (8008654 <TIM_OC6_SetConfig+0xc0>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d007      	beq.n	8008610 <TIM_OC6_SetConfig+0x7c>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a15      	ldr	r2, [pc, #84]	; (8008658 <TIM_OC6_SetConfig+0xc4>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d003      	beq.n	8008610 <TIM_OC6_SetConfig+0x7c>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a14      	ldr	r2, [pc, #80]	; (800865c <TIM_OC6_SetConfig+0xc8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d109      	bne.n	8008624 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008616:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	029b      	lsls	r3, r3, #10
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	621a      	str	r2, [r3, #32]
}
 800863e:	bf00      	nop
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	40012c00 	.word	0x40012c00
 8008650:	40013400 	.word	0x40013400
 8008654:	40014000 	.word	0x40014000
 8008658:	40014400 	.word	0x40014400
 800865c:	40014800 	.word	0x40014800

08008660 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f023 0201 	bic.w	r2, r3, #1
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4a26      	ldr	r2, [pc, #152]	; (8008724 <TIM_TI1_SetConfig+0xc4>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d017      	beq.n	80086be <TIM_TI1_SetConfig+0x5e>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008694:	d013      	beq.n	80086be <TIM_TI1_SetConfig+0x5e>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4a23      	ldr	r2, [pc, #140]	; (8008728 <TIM_TI1_SetConfig+0xc8>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d00f      	beq.n	80086be <TIM_TI1_SetConfig+0x5e>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4a22      	ldr	r2, [pc, #136]	; (800872c <TIM_TI1_SetConfig+0xcc>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00b      	beq.n	80086be <TIM_TI1_SetConfig+0x5e>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4a21      	ldr	r2, [pc, #132]	; (8008730 <TIM_TI1_SetConfig+0xd0>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d007      	beq.n	80086be <TIM_TI1_SetConfig+0x5e>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4a20      	ldr	r2, [pc, #128]	; (8008734 <TIM_TI1_SetConfig+0xd4>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d003      	beq.n	80086be <TIM_TI1_SetConfig+0x5e>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4a1f      	ldr	r2, [pc, #124]	; (8008738 <TIM_TI1_SetConfig+0xd8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d101      	bne.n	80086c2 <TIM_TI1_SetConfig+0x62>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <TIM_TI1_SetConfig+0x64>
 80086c2:	2300      	movs	r3, #0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d008      	beq.n	80086da <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f023 0303 	bic.w	r3, r3, #3
 80086ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	e003      	b.n	80086e2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f043 0301 	orr.w	r3, r3, #1
 80086e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f023 030a 	bic.w	r3, r3, #10
 80086fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f003 030a 	and.w	r3, r3, #10
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	4313      	orrs	r3, r2
 8008708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	621a      	str	r2, [r3, #32]
}
 8008716:	bf00      	nop
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	40012c00 	.word	0x40012c00
 8008728:	40000400 	.word	0x40000400
 800872c:	40000800 	.word	0x40000800
 8008730:	40000c00 	.word	0x40000c00
 8008734:	40013400 	.word	0x40013400
 8008738:	40014000 	.word	0x40014000

0800873c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	f023 0201 	bic.w	r2, r3, #1
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f023 030a 	bic.w	r3, r3, #10
 8008778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	4313      	orrs	r3, r2
 8008780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	621a      	str	r2, [r3, #32]
}
 800878e:	bf00      	nop
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800879a:	b480      	push	{r7}
 800879c:	b087      	sub	sp, #28
 800879e:	af00      	add	r7, sp, #0
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	f023 0210 	bic.w	r2, r3, #16
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	031b      	lsls	r3, r3, #12
 80087de:	b29b      	uxth	r3, r3
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	621a      	str	r2, [r3, #32]
}
 8008808:	bf00      	nop
 800880a:	371c      	adds	r7, #28
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6a1b      	ldr	r3, [r3, #32]
 8008824:	f023 0210 	bic.w	r2, r3, #16
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800883e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	031b      	lsls	r3, r3, #12
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008850:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	011b      	lsls	r3, r3, #4
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	621a      	str	r2, [r3, #32]
}
 8008868:	bf00      	nop
 800886a:	371c      	adds	r7, #28
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f023 0303 	bic.w	r3, r3, #3
 80088a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	011b      	lsls	r3, r3, #4
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80088c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	021b      	lsls	r3, r3, #8
 80088ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	621a      	str	r2, [r3, #32]
}
 80088e0:	bf00      	nop
 80088e2:	371c      	adds	r7, #28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008918:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	4313      	orrs	r3, r2
 8008922:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800892a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	031b      	lsls	r3, r3, #12
 8008930:	b29b      	uxth	r3, r3
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800893e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	031b      	lsls	r3, r3, #12
 8008944:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	4313      	orrs	r3, r2
 800894c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	621a      	str	r2, [r3, #32]
}
 800895a:	bf00      	nop
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800897c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4313      	orrs	r3, r2
 8008988:	f043 0307 	orr.w	r3, r3, #7
 800898c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	609a      	str	r2, [r3, #8]
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	021a      	lsls	r2, r3, #8
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	431a      	orrs	r2, r3
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	609a      	str	r2, [r3, #8]
}
 80089d4:	bf00      	nop
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f003 031f 	and.w	r3, r3, #31
 80089f2:	2201      	movs	r2, #1
 80089f4:	fa02 f303 	lsl.w	r3, r2, r3
 80089f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a1a      	ldr	r2, [r3, #32]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	43db      	mvns	r3, r3
 8008a02:	401a      	ands	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6a1a      	ldr	r2, [r3, #32]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	fa01 f303 	lsl.w	r3, r1, r3
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	621a      	str	r2, [r3, #32]
}
 8008a1e:	bf00      	nop
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
	...

08008a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e068      	b.n	8008b16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a2e      	ldr	r2, [pc, #184]	; (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d004      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a2d      	ldr	r2, [pc, #180]	; (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d108      	bne.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a1e      	ldr	r2, [pc, #120]	; (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d01d      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab6:	d018      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1b      	ldr	r2, [pc, #108]	; (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d013      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a1a      	ldr	r2, [pc, #104]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d00e      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a18      	ldr	r2, [pc, #96]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d009      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a13      	ldr	r2, [pc, #76]	; (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d004      	beq.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a14      	ldr	r2, [pc, #80]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d10c      	bne.n	8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40012c00 	.word	0x40012c00
 8008b28:	40013400 	.word	0x40013400
 8008b2c:	40000400 	.word	0x40000400
 8008b30:	40000800 	.word	0x40000800
 8008b34:	40000c00 	.word	0x40000c00
 8008b38:	40014000 	.word	0x40014000

08008b3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d101      	bne.n	8008b58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b54:	2302      	movs	r3, #2
 8008b56:	e087      	b.n	8008c68 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	041b      	lsls	r3, r3, #16
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a27      	ldr	r2, [pc, #156]	; (8008c74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d004      	beq.n	8008be6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a25      	ldr	r2, [pc, #148]	; (8008c78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d106      	bne.n	8008bf4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a1e      	ldr	r2, [pc, #120]	; (8008c74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d004      	beq.n	8008c08 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a1d      	ldr	r2, [pc, #116]	; (8008c78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d126      	bne.n	8008c56 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	051b      	lsls	r3, r3, #20
 8008c14:	4313      	orrs	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	4313      	orrs	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a0e      	ldr	r2, [pc, #56]	; (8008c74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d004      	beq.n	8008c48 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a0d      	ldr	r2, [pc, #52]	; (8008c78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d106      	bne.n	8008c56 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	40012c00 	.word	0x40012c00
 8008c78:	40013400 	.word	0x40013400

08008c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e042      	b.n	8008d50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d106      	bne.n	8008ce2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7f8 ff23 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2224      	movs	r2, #36	; 0x24
 8008ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 0201 	bic.w	r2, r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fbbc 	bl	8009478 <UART_SetConfig>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d101      	bne.n	8008d0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e022      	b.n	8008d50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 feb0 	bl	8009a78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689a      	ldr	r2, [r3, #8]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0201 	orr.w	r2, r2, #1
 8008d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 ff37 	bl	8009bbc <UART_CheckIdleState>
 8008d4e:	4603      	mov	r3, r0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	; 0x28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	4613      	mov	r3, r2
 8008d64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	d137      	bne.n	8008de0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <HAL_UART_Receive_IT+0x24>
 8008d76:	88fb      	ldrh	r3, [r7, #6]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e030      	b.n	8008de2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a18      	ldr	r2, [pc, #96]	; (8008dec <HAL_UART_Receive_IT+0x94>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d01f      	beq.n	8008dd0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d018      	beq.n	8008dd0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	e853 3f00 	ldrex	r3, [r3]
 8008daa:	613b      	str	r3, [r7, #16]
   return(result);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	461a      	mov	r2, r3
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	623b      	str	r3, [r7, #32]
 8008dbe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc0:	69f9      	ldr	r1, [r7, #28]
 8008dc2:	6a3a      	ldr	r2, [r7, #32]
 8008dc4:	e841 2300 	strex	r3, r2, [r1]
 8008dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1e6      	bne.n	8008d9e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008dd0:	88fb      	ldrh	r3, [r7, #6]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f001 f802 	bl	8009de0 <UART_Start_Receive_IT>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	e000      	b.n	8008de2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008de0:	2302      	movs	r3, #2
  }
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3728      	adds	r7, #40	; 0x28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	40008000 	.word	0x40008000

08008df0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b0ba      	sub	sp, #232	; 0xe8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008e1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e1e:	4013      	ands	r3, r2
 8008e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d11b      	bne.n	8008e64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e30:	f003 0320 	and.w	r3, r3, #32
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d015      	beq.n	8008e64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e3c:	f003 0320 	and.w	r3, r3, #32
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d009      	beq.n	8008e64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 82e3 	beq.w	8009420 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	4798      	blx	r3
      }
      return;
 8008e62:	e2dd      	b.n	8009420 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 8123 	beq.w	80090b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008e72:	4b8d      	ldr	r3, [pc, #564]	; (80090a8 <HAL_UART_IRQHandler+0x2b8>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008e7e:	4b8b      	ldr	r3, [pc, #556]	; (80090ac <HAL_UART_IRQHandler+0x2bc>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 8116 	beq.w	80090b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d011      	beq.n	8008eb8 <HAL_UART_IRQHandler+0xc8>
 8008e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eae:	f043 0201 	orr.w	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ebc:	f003 0302 	and.w	r3, r3, #2
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d011      	beq.n	8008ee8 <HAL_UART_IRQHandler+0xf8>
 8008ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ede:	f043 0204 	orr.w	r2, r3, #4
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eec:	f003 0304 	and.w	r3, r3, #4
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d011      	beq.n	8008f18 <HAL_UART_IRQHandler+0x128>
 8008ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00b      	beq.n	8008f18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2204      	movs	r2, #4
 8008f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f0e:	f043 0202 	orr.w	r2, r3, #2
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f1c:	f003 0308 	and.w	r3, r3, #8
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d017      	beq.n	8008f54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f28:	f003 0320 	and.w	r3, r3, #32
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d105      	bne.n	8008f3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008f34:	4b5c      	ldr	r3, [pc, #368]	; (80090a8 <HAL_UART_IRQHandler+0x2b8>)
 8008f36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2208      	movs	r2, #8
 8008f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f4a:	f043 0208 	orr.w	r2, r3, #8
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d012      	beq.n	8008f86 <HAL_UART_IRQHandler+0x196>
 8008f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00c      	beq.n	8008f86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f7c:	f043 0220 	orr.w	r2, r3, #32
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 8249 	beq.w	8009424 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d013      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa2:	f003 0320 	and.w	r3, r3, #32
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d105      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d007      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fda:	2b40      	cmp	r3, #64	; 0x40
 8008fdc:	d005      	beq.n	8008fea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fe2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d054      	beq.n	8009094 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 f81a 	bl	800a024 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffa:	2b40      	cmp	r3, #64	; 0x40
 8008ffc:	d146      	bne.n	800908c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800901c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3308      	adds	r3, #8
 8009026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800902a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800902e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800903a:	e841 2300 	strex	r3, r2, [r1]
 800903e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1d9      	bne.n	8008ffe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009050:	2b00      	cmp	r3, #0
 8009052:	d017      	beq.n	8009084 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800905a:	4a15      	ldr	r2, [pc, #84]	; (80090b0 <HAL_UART_IRQHandler+0x2c0>)
 800905c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009064:	4618      	mov	r0, r3
 8009066:	f7fb facc 	bl	8004602 <HAL_DMA_Abort_IT>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d019      	beq.n	80090a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800907e:	4610      	mov	r0, r2
 8009080:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009082:	e00f      	b.n	80090a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f9e1 	bl	800944c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800908a:	e00b      	b.n	80090a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f9dd 	bl	800944c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009092:	e007      	b.n	80090a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f9d9 	bl	800944c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80090a2:	e1bf      	b.n	8009424 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a4:	bf00      	nop
    return;
 80090a6:	e1bd      	b.n	8009424 <HAL_UART_IRQHandler+0x634>
 80090a8:	10000001 	.word	0x10000001
 80090ac:	04000120 	.word	0x04000120
 80090b0:	0800a0f1 	.word	0x0800a0f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	f040 8153 	bne.w	8009364 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80090be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c2:	f003 0310 	and.w	r3, r3, #16
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 814c 	beq.w	8009364 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090d0:	f003 0310 	and.w	r3, r3, #16
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8145 	beq.w	8009364 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2210      	movs	r2, #16
 80090e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ec:	2b40      	cmp	r3, #64	; 0x40
 80090ee:	f040 80bb 	bne.w	8009268 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009100:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 818f 	beq.w	8009428 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009110:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009114:	429a      	cmp	r2, r3
 8009116:	f080 8187 	bcs.w	8009428 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009120:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0320 	and.w	r3, r3, #32
 8009132:	2b00      	cmp	r3, #0
 8009134:	f040 8087 	bne.w	8009246 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009140:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800914c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009166:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800916e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800917a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1da      	bne.n	8009138 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3308      	adds	r3, #8
 8009188:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009194:	f023 0301 	bic.w	r3, r3, #1
 8009198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3308      	adds	r3, #8
 80091a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80091aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80091ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80091b2:	e841 2300 	strex	r3, r2, [r1]
 80091b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80091b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e1      	bne.n	8009182 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3308      	adds	r3, #8
 80091c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091c8:	e853 3f00 	ldrex	r3, [r3]
 80091cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80091ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3308      	adds	r3, #8
 80091de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80091e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80091e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80091f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1e3      	bne.n	80091be <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009214:	f023 0310 	bic.w	r3, r3, #16
 8009218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	461a      	mov	r2, r3
 8009222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009226:	65bb      	str	r3, [r7, #88]	; 0x58
 8009228:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800922c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e4      	bne.n	8009204 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009240:	4618      	mov	r0, r3
 8009242:	f7fb f982 	bl	800454a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2202      	movs	r2, #2
 800924a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009258:	b29b      	uxth	r3, r3
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	b29b      	uxth	r3, r3
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f8fd 	bl	8009460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009266:	e0df      	b.n	8009428 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009274:	b29b      	uxth	r3, r3
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009282:	b29b      	uxth	r3, r3
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80d1 	beq.w	800942c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800928a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80cc 	beq.w	800942c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092b6:	647b      	str	r3, [r7, #68]	; 0x44
 80092b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e4      	bne.n	8009294 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3308      	adds	r3, #8
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	623b      	str	r3, [r7, #32]
   return(result);
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092e0:	f023 0301 	bic.w	r3, r3, #1
 80092e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3308      	adds	r3, #8
 80092ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80092f2:	633a      	str	r2, [r7, #48]	; 0x30
 80092f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092fa:	e841 2300 	strex	r3, r2, [r1]
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e1      	bne.n	80092ca <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	60fb      	str	r3, [r7, #12]
   return(result);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 0310 	bic.w	r3, r3, #16
 800932e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800933c:	61fb      	str	r3, [r7, #28]
 800933e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	69b9      	ldr	r1, [r7, #24]
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	617b      	str	r3, [r7, #20]
   return(result);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e4      	bne.n	800931a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009356:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f87f 	bl	8009460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009362:	e063      	b.n	800942c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00e      	beq.n	800938e <HAL_UART_IRQHandler+0x59e>
 8009370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d008      	beq.n	800938e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009384:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 fc10 	bl	800abac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800938c:	e051      	b.n	8009432 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800938e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009396:	2b00      	cmp	r3, #0
 8009398:	d014      	beq.n	80093c4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800939a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800939e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d105      	bne.n	80093b2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d008      	beq.n	80093c4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d03a      	beq.n	8009430 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
    }
    return;
 80093c2:	e035      	b.n	8009430 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d009      	beq.n	80093e4 <HAL_UART_IRQHandler+0x5f4>
 80093d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fe9d 	bl	800a11c <UART_EndTransmit_IT>
    return;
 80093e2:	e026      	b.n	8009432 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <HAL_UART_IRQHandler+0x614>
 80093f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 fbe9 	bl	800abd4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009402:	e016      	b.n	8009432 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d010      	beq.n	8009432 <HAL_UART_IRQHandler+0x642>
 8009410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009414:	2b00      	cmp	r3, #0
 8009416:	da0c      	bge.n	8009432 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 fbd1 	bl	800abc0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800941e:	e008      	b.n	8009432 <HAL_UART_IRQHandler+0x642>
      return;
 8009420:	bf00      	nop
 8009422:	e006      	b.n	8009432 <HAL_UART_IRQHandler+0x642>
    return;
 8009424:	bf00      	nop
 8009426:	e004      	b.n	8009432 <HAL_UART_IRQHandler+0x642>
      return;
 8009428:	bf00      	nop
 800942a:	e002      	b.n	8009432 <HAL_UART_IRQHandler+0x642>
      return;
 800942c:	bf00      	nop
 800942e:	e000      	b.n	8009432 <HAL_UART_IRQHandler+0x642>
    return;
 8009430:	bf00      	nop
  }
}
 8009432:	37e8      	adds	r7, #232	; 0xe8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800947c:	b08c      	sub	sp, #48	; 0x30
 800947e:	af00      	add	r7, sp, #0
 8009480:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	431a      	orrs	r2, r3
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	431a      	orrs	r2, r3
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	4313      	orrs	r3, r2
 800949e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	4baa      	ldr	r3, [pc, #680]	; (8009750 <UART_SetConfig+0x2d8>)
 80094a8:	4013      	ands	r3, r2
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094b0:	430b      	orrs	r3, r1
 80094b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	68da      	ldr	r2, [r3, #12]
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a9f      	ldr	r2, [pc, #636]	; (8009754 <UART_SetConfig+0x2dc>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d004      	beq.n	80094e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094e0:	4313      	orrs	r3, r2
 80094e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80094ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	6812      	ldr	r2, [r2, #0]
 80094f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094f8:	430b      	orrs	r3, r1
 80094fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009502:	f023 010f 	bic.w	r1, r3, #15
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a90      	ldr	r2, [pc, #576]	; (8009758 <UART_SetConfig+0x2e0>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d125      	bne.n	8009568 <UART_SetConfig+0xf0>
 800951c:	4b8f      	ldr	r3, [pc, #572]	; (800975c <UART_SetConfig+0x2e4>)
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009522:	f003 0303 	and.w	r3, r3, #3
 8009526:	2b03      	cmp	r3, #3
 8009528:	d81a      	bhi.n	8009560 <UART_SetConfig+0xe8>
 800952a:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <UART_SetConfig+0xb8>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	08009541 	.word	0x08009541
 8009534:	08009551 	.word	0x08009551
 8009538:	08009549 	.word	0x08009549
 800953c:	08009559 	.word	0x08009559
 8009540:	2301      	movs	r3, #1
 8009542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009546:	e116      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009548:	2302      	movs	r3, #2
 800954a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800954e:	e112      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009550:	2304      	movs	r3, #4
 8009552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009556:	e10e      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009558:	2308      	movs	r3, #8
 800955a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800955e:	e10a      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009560:	2310      	movs	r3, #16
 8009562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009566:	e106      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a7c      	ldr	r2, [pc, #496]	; (8009760 <UART_SetConfig+0x2e8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d138      	bne.n	80095e4 <UART_SetConfig+0x16c>
 8009572:	4b7a      	ldr	r3, [pc, #488]	; (800975c <UART_SetConfig+0x2e4>)
 8009574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009578:	f003 030c 	and.w	r3, r3, #12
 800957c:	2b0c      	cmp	r3, #12
 800957e:	d82d      	bhi.n	80095dc <UART_SetConfig+0x164>
 8009580:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <UART_SetConfig+0x110>)
 8009582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009586:	bf00      	nop
 8009588:	080095bd 	.word	0x080095bd
 800958c:	080095dd 	.word	0x080095dd
 8009590:	080095dd 	.word	0x080095dd
 8009594:	080095dd 	.word	0x080095dd
 8009598:	080095cd 	.word	0x080095cd
 800959c:	080095dd 	.word	0x080095dd
 80095a0:	080095dd 	.word	0x080095dd
 80095a4:	080095dd 	.word	0x080095dd
 80095a8:	080095c5 	.word	0x080095c5
 80095ac:	080095dd 	.word	0x080095dd
 80095b0:	080095dd 	.word	0x080095dd
 80095b4:	080095dd 	.word	0x080095dd
 80095b8:	080095d5 	.word	0x080095d5
 80095bc:	2300      	movs	r3, #0
 80095be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095c2:	e0d8      	b.n	8009776 <UART_SetConfig+0x2fe>
 80095c4:	2302      	movs	r3, #2
 80095c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ca:	e0d4      	b.n	8009776 <UART_SetConfig+0x2fe>
 80095cc:	2304      	movs	r3, #4
 80095ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095d2:	e0d0      	b.n	8009776 <UART_SetConfig+0x2fe>
 80095d4:	2308      	movs	r3, #8
 80095d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095da:	e0cc      	b.n	8009776 <UART_SetConfig+0x2fe>
 80095dc:	2310      	movs	r3, #16
 80095de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095e2:	e0c8      	b.n	8009776 <UART_SetConfig+0x2fe>
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a5e      	ldr	r2, [pc, #376]	; (8009764 <UART_SetConfig+0x2ec>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d125      	bne.n	800963a <UART_SetConfig+0x1c2>
 80095ee:	4b5b      	ldr	r3, [pc, #364]	; (800975c <UART_SetConfig+0x2e4>)
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095f8:	2b30      	cmp	r3, #48	; 0x30
 80095fa:	d016      	beq.n	800962a <UART_SetConfig+0x1b2>
 80095fc:	2b30      	cmp	r3, #48	; 0x30
 80095fe:	d818      	bhi.n	8009632 <UART_SetConfig+0x1ba>
 8009600:	2b20      	cmp	r3, #32
 8009602:	d00a      	beq.n	800961a <UART_SetConfig+0x1a2>
 8009604:	2b20      	cmp	r3, #32
 8009606:	d814      	bhi.n	8009632 <UART_SetConfig+0x1ba>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <UART_SetConfig+0x19a>
 800960c:	2b10      	cmp	r3, #16
 800960e:	d008      	beq.n	8009622 <UART_SetConfig+0x1aa>
 8009610:	e00f      	b.n	8009632 <UART_SetConfig+0x1ba>
 8009612:	2300      	movs	r3, #0
 8009614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009618:	e0ad      	b.n	8009776 <UART_SetConfig+0x2fe>
 800961a:	2302      	movs	r3, #2
 800961c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009620:	e0a9      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009622:	2304      	movs	r3, #4
 8009624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009628:	e0a5      	b.n	8009776 <UART_SetConfig+0x2fe>
 800962a:	2308      	movs	r3, #8
 800962c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009630:	e0a1      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009632:	2310      	movs	r3, #16
 8009634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009638:	e09d      	b.n	8009776 <UART_SetConfig+0x2fe>
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a4a      	ldr	r2, [pc, #296]	; (8009768 <UART_SetConfig+0x2f0>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d125      	bne.n	8009690 <UART_SetConfig+0x218>
 8009644:	4b45      	ldr	r3, [pc, #276]	; (800975c <UART_SetConfig+0x2e4>)
 8009646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800964a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800964e:	2bc0      	cmp	r3, #192	; 0xc0
 8009650:	d016      	beq.n	8009680 <UART_SetConfig+0x208>
 8009652:	2bc0      	cmp	r3, #192	; 0xc0
 8009654:	d818      	bhi.n	8009688 <UART_SetConfig+0x210>
 8009656:	2b80      	cmp	r3, #128	; 0x80
 8009658:	d00a      	beq.n	8009670 <UART_SetConfig+0x1f8>
 800965a:	2b80      	cmp	r3, #128	; 0x80
 800965c:	d814      	bhi.n	8009688 <UART_SetConfig+0x210>
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <UART_SetConfig+0x1f0>
 8009662:	2b40      	cmp	r3, #64	; 0x40
 8009664:	d008      	beq.n	8009678 <UART_SetConfig+0x200>
 8009666:	e00f      	b.n	8009688 <UART_SetConfig+0x210>
 8009668:	2300      	movs	r3, #0
 800966a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800966e:	e082      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009670:	2302      	movs	r3, #2
 8009672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009676:	e07e      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009678:	2304      	movs	r3, #4
 800967a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800967e:	e07a      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009680:	2308      	movs	r3, #8
 8009682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009686:	e076      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009688:	2310      	movs	r3, #16
 800968a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800968e:	e072      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a35      	ldr	r2, [pc, #212]	; (800976c <UART_SetConfig+0x2f4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d12a      	bne.n	80096f0 <UART_SetConfig+0x278>
 800969a:	4b30      	ldr	r3, [pc, #192]	; (800975c <UART_SetConfig+0x2e4>)
 800969c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096a8:	d01a      	beq.n	80096e0 <UART_SetConfig+0x268>
 80096aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096ae:	d81b      	bhi.n	80096e8 <UART_SetConfig+0x270>
 80096b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096b4:	d00c      	beq.n	80096d0 <UART_SetConfig+0x258>
 80096b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096ba:	d815      	bhi.n	80096e8 <UART_SetConfig+0x270>
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <UART_SetConfig+0x250>
 80096c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c4:	d008      	beq.n	80096d8 <UART_SetConfig+0x260>
 80096c6:	e00f      	b.n	80096e8 <UART_SetConfig+0x270>
 80096c8:	2300      	movs	r3, #0
 80096ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ce:	e052      	b.n	8009776 <UART_SetConfig+0x2fe>
 80096d0:	2302      	movs	r3, #2
 80096d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096d6:	e04e      	b.n	8009776 <UART_SetConfig+0x2fe>
 80096d8:	2304      	movs	r3, #4
 80096da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096de:	e04a      	b.n	8009776 <UART_SetConfig+0x2fe>
 80096e0:	2308      	movs	r3, #8
 80096e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096e6:	e046      	b.n	8009776 <UART_SetConfig+0x2fe>
 80096e8:	2310      	movs	r3, #16
 80096ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ee:	e042      	b.n	8009776 <UART_SetConfig+0x2fe>
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a17      	ldr	r2, [pc, #92]	; (8009754 <UART_SetConfig+0x2dc>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d13a      	bne.n	8009770 <UART_SetConfig+0x2f8>
 80096fa:	4b18      	ldr	r3, [pc, #96]	; (800975c <UART_SetConfig+0x2e4>)
 80096fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009700:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009704:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009708:	d01a      	beq.n	8009740 <UART_SetConfig+0x2c8>
 800970a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800970e:	d81b      	bhi.n	8009748 <UART_SetConfig+0x2d0>
 8009710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009714:	d00c      	beq.n	8009730 <UART_SetConfig+0x2b8>
 8009716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800971a:	d815      	bhi.n	8009748 <UART_SetConfig+0x2d0>
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <UART_SetConfig+0x2b0>
 8009720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009724:	d008      	beq.n	8009738 <UART_SetConfig+0x2c0>
 8009726:	e00f      	b.n	8009748 <UART_SetConfig+0x2d0>
 8009728:	2300      	movs	r3, #0
 800972a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800972e:	e022      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009730:	2302      	movs	r3, #2
 8009732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009736:	e01e      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009738:	2304      	movs	r3, #4
 800973a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800973e:	e01a      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009740:	2308      	movs	r3, #8
 8009742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009746:	e016      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009748:	2310      	movs	r3, #16
 800974a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800974e:	e012      	b.n	8009776 <UART_SetConfig+0x2fe>
 8009750:	cfff69f3 	.word	0xcfff69f3
 8009754:	40008000 	.word	0x40008000
 8009758:	40013800 	.word	0x40013800
 800975c:	40021000 	.word	0x40021000
 8009760:	40004400 	.word	0x40004400
 8009764:	40004800 	.word	0x40004800
 8009768:	40004c00 	.word	0x40004c00
 800976c:	40005000 	.word	0x40005000
 8009770:	2310      	movs	r3, #16
 8009772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4ab0      	ldr	r2, [pc, #704]	; (8009a3c <UART_SetConfig+0x5c4>)
 800977c:	4293      	cmp	r3, r2
 800977e:	f040 809b 	bne.w	80098b8 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009786:	2b08      	cmp	r3, #8
 8009788:	d827      	bhi.n	80097da <UART_SetConfig+0x362>
 800978a:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <UART_SetConfig+0x318>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097bd 	.word	0x080097bd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	080097db 	.word	0x080097db
 80097a0:	080097cb 	.word	0x080097cb
 80097a4:	080097db 	.word	0x080097db
 80097a8:	080097db 	.word	0x080097db
 80097ac:	080097db 	.word	0x080097db
 80097b0:	080097d3 	.word	0x080097d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097b4:	f7fc fcce 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 80097b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097ba:	e014      	b.n	80097e6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097bc:	f7fc fcde 	bl	800617c <HAL_RCC_GetPCLK2Freq>
 80097c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097c2:	e010      	b.n	80097e6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097c4:	4b9e      	ldr	r3, [pc, #632]	; (8009a40 <UART_SetConfig+0x5c8>)
 80097c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80097c8:	e00d      	b.n	80097e6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097ca:	f7fc fc11 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 80097ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097d0:	e009      	b.n	80097e6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80097d8:	e005      	b.n	80097e6 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80097e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 8130 	beq.w	8009a4e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f2:	4a94      	ldr	r2, [pc, #592]	; (8009a44 <UART_SetConfig+0x5cc>)
 80097f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097f8:	461a      	mov	r2, r3
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009800:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	4413      	add	r3, r2
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	429a      	cmp	r2, r3
 8009810:	d305      	bcc.n	800981e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009818:	69ba      	ldr	r2, [r7, #24]
 800981a:	429a      	cmp	r2, r3
 800981c:	d903      	bls.n	8009826 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009824:	e113      	b.n	8009a4e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	2200      	movs	r2, #0
 800982a:	60bb      	str	r3, [r7, #8]
 800982c:	60fa      	str	r2, [r7, #12]
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	4a84      	ldr	r2, [pc, #528]	; (8009a44 <UART_SetConfig+0x5cc>)
 8009834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009838:	b29b      	uxth	r3, r3
 800983a:	2200      	movs	r2, #0
 800983c:	603b      	str	r3, [r7, #0]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009848:	f7f6 fd0c 	bl	8000264 <__aeabi_uldivmod>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4610      	mov	r0, r2
 8009852:	4619      	mov	r1, r3
 8009854:	f04f 0200 	mov.w	r2, #0
 8009858:	f04f 0300 	mov.w	r3, #0
 800985c:	020b      	lsls	r3, r1, #8
 800985e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009862:	0202      	lsls	r2, r0, #8
 8009864:	6979      	ldr	r1, [r7, #20]
 8009866:	6849      	ldr	r1, [r1, #4]
 8009868:	0849      	lsrs	r1, r1, #1
 800986a:	2000      	movs	r0, #0
 800986c:	460c      	mov	r4, r1
 800986e:	4605      	mov	r5, r0
 8009870:	eb12 0804 	adds.w	r8, r2, r4
 8009874:	eb43 0905 	adc.w	r9, r3, r5
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	469a      	mov	sl, r3
 8009880:	4693      	mov	fp, r2
 8009882:	4652      	mov	r2, sl
 8009884:	465b      	mov	r3, fp
 8009886:	4640      	mov	r0, r8
 8009888:	4649      	mov	r1, r9
 800988a:	f7f6 fceb 	bl	8000264 <__aeabi_uldivmod>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4613      	mov	r3, r2
 8009894:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800989c:	d308      	bcc.n	80098b0 <UART_SetConfig+0x438>
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098a4:	d204      	bcs.n	80098b0 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6a3a      	ldr	r2, [r7, #32]
 80098ac:	60da      	str	r2, [r3, #12]
 80098ae:	e0ce      	b.n	8009a4e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80098b6:	e0ca      	b.n	8009a4e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098c0:	d166      	bne.n	8009990 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80098c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098c6:	2b08      	cmp	r3, #8
 80098c8:	d827      	bhi.n	800991a <UART_SetConfig+0x4a2>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <UART_SetConfig+0x458>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	080098f5 	.word	0x080098f5
 80098d4:	080098fd 	.word	0x080098fd
 80098d8:	08009905 	.word	0x08009905
 80098dc:	0800991b 	.word	0x0800991b
 80098e0:	0800990b 	.word	0x0800990b
 80098e4:	0800991b 	.word	0x0800991b
 80098e8:	0800991b 	.word	0x0800991b
 80098ec:	0800991b 	.word	0x0800991b
 80098f0:	08009913 	.word	0x08009913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098f4:	f7fc fc2e 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 80098f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098fa:	e014      	b.n	8009926 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098fc:	f7fc fc3e 	bl	800617c <HAL_RCC_GetPCLK2Freq>
 8009900:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009902:	e010      	b.n	8009926 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009904:	4b4e      	ldr	r3, [pc, #312]	; (8009a40 <UART_SetConfig+0x5c8>)
 8009906:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009908:	e00d      	b.n	8009926 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800990a:	f7fc fb71 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 800990e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009910:	e009      	b.n	8009926 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009918:	e005      	b.n	8009926 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009924:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 8090 	beq.w	8009a4e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	4a44      	ldr	r2, [pc, #272]	; (8009a44 <UART_SetConfig+0x5cc>)
 8009934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009938:	461a      	mov	r2, r3
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009940:	005a      	lsls	r2, r3, #1
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	085b      	lsrs	r3, r3, #1
 8009948:	441a      	add	r2, r3
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009952:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	2b0f      	cmp	r3, #15
 8009958:	d916      	bls.n	8009988 <UART_SetConfig+0x510>
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009960:	d212      	bcs.n	8009988 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	b29b      	uxth	r3, r3
 8009966:	f023 030f 	bic.w	r3, r3, #15
 800996a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	085b      	lsrs	r3, r3, #1
 8009970:	b29b      	uxth	r3, r3
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	b29a      	uxth	r2, r3
 8009978:	8bfb      	ldrh	r3, [r7, #30]
 800997a:	4313      	orrs	r3, r2
 800997c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	8bfa      	ldrh	r2, [r7, #30]
 8009984:	60da      	str	r2, [r3, #12]
 8009986:	e062      	b.n	8009a4e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800998e:	e05e      	b.n	8009a4e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009990:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009994:	2b08      	cmp	r3, #8
 8009996:	d828      	bhi.n	80099ea <UART_SetConfig+0x572>
 8009998:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0x528>)
 800999a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999e:	bf00      	nop
 80099a0:	080099c5 	.word	0x080099c5
 80099a4:	080099cd 	.word	0x080099cd
 80099a8:	080099d5 	.word	0x080099d5
 80099ac:	080099eb 	.word	0x080099eb
 80099b0:	080099db 	.word	0x080099db
 80099b4:	080099eb 	.word	0x080099eb
 80099b8:	080099eb 	.word	0x080099eb
 80099bc:	080099eb 	.word	0x080099eb
 80099c0:	080099e3 	.word	0x080099e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099c4:	f7fc fbc6 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 80099c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099ca:	e014      	b.n	80099f6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099cc:	f7fc fbd6 	bl	800617c <HAL_RCC_GetPCLK2Freq>
 80099d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099d2:	e010      	b.n	80099f6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099d4:	4b1a      	ldr	r3, [pc, #104]	; (8009a40 <UART_SetConfig+0x5c8>)
 80099d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099d8:	e00d      	b.n	80099f6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099da:	f7fc fb09 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 80099de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099e0:	e009      	b.n	80099f6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099e8:	e005      	b.n	80099f6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80099f4:	bf00      	nop
    }

    if (pclk != 0U)
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d028      	beq.n	8009a4e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	4a10      	ldr	r2, [pc, #64]	; (8009a44 <UART_SetConfig+0x5cc>)
 8009a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a06:	461a      	mov	r2, r3
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	085b      	lsrs	r3, r3, #1
 8009a14:	441a      	add	r2, r3
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a20:	6a3b      	ldr	r3, [r7, #32]
 8009a22:	2b0f      	cmp	r3, #15
 8009a24:	d910      	bls.n	8009a48 <UART_SetConfig+0x5d0>
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a2c:	d20c      	bcs.n	8009a48 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	60da      	str	r2, [r3, #12]
 8009a38:	e009      	b.n	8009a4e <UART_SetConfig+0x5d6>
 8009a3a:	bf00      	nop
 8009a3c:	40008000 	.word	0x40008000
 8009a40:	00f42400 	.word	0x00f42400
 8009a44:	0800e828 	.word	0x0800e828
      }
      else
      {
        ret = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2200      	movs	r2, #0
 8009a62:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2200      	movs	r2, #0
 8009a68:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009a6a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3730      	adds	r7, #48	; 0x30
 8009a72:	46bd      	mov	sp, r7
 8009a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00a      	beq.n	8009aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa6:	f003 0302 	and.w	r3, r3, #2
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac8:	f003 0304 	and.w	r3, r3, #4
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00a      	beq.n	8009ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aea:	f003 0308 	and.w	r3, r3, #8
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00a      	beq.n	8009b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0c:	f003 0310 	and.w	r3, r3, #16
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00a      	beq.n	8009b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2e:	f003 0320 	and.w	r3, r3, #32
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d01a      	beq.n	8009b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b76:	d10a      	bne.n	8009b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	605a      	str	r2, [r3, #4]
  }
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b098      	sub	sp, #96	; 0x60
 8009bc0:	af02      	add	r7, sp, #8
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bcc:	f7f8 fd58 	bl	8002680 <HAL_GetTick>
 8009bd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0308 	and.w	r3, r3, #8
 8009bdc:	2b08      	cmp	r3, #8
 8009bde:	d12f      	bne.n	8009c40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009be8:	2200      	movs	r2, #0
 8009bea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f88e 	bl	8009d10 <UART_WaitOnFlagUntilTimeout>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d022      	beq.n	8009c40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c02:	e853 3f00 	ldrex	r3, [r3]
 8009c06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	461a      	mov	r2, r3
 8009c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c18:	647b      	str	r3, [r7, #68]	; 0x44
 8009c1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c20:	e841 2300 	strex	r3, r2, [r1]
 8009c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1e6      	bne.n	8009bfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e063      	b.n	8009d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 0304 	and.w	r3, r3, #4
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d149      	bne.n	8009ce2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c56:	2200      	movs	r2, #0
 8009c58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f857 	bl	8009d10 <UART_WaitOnFlagUntilTimeout>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d03c      	beq.n	8009ce2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	e853 3f00 	ldrex	r3, [r3]
 8009c74:	623b      	str	r3, [r7, #32]
   return(result);
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c86:	633b      	str	r3, [r7, #48]	; 0x30
 8009c88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c8e:	e841 2300 	strex	r3, r2, [r1]
 8009c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e6      	bne.n	8009c68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	e853 3f00 	ldrex	r3, [r3]
 8009ca8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f023 0301 	bic.w	r3, r3, #1
 8009cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cba:	61fa      	str	r2, [r7, #28]
 8009cbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbe:	69b9      	ldr	r1, [r7, #24]
 8009cc0:	69fa      	ldr	r2, [r7, #28]
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e5      	bne.n	8009c9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e012      	b.n	8009d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3758      	adds	r7, #88	; 0x58
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d20:	e049      	b.n	8009db6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d28:	d045      	beq.n	8009db6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d2a:	f7f8 fca9 	bl	8002680 <HAL_GetTick>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	69ba      	ldr	r2, [r7, #24]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d302      	bcc.n	8009d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e048      	b.n	8009dd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0304 	and.w	r3, r3, #4
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d031      	beq.n	8009db6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	f003 0308 	and.w	r3, r3, #8
 8009d5c:	2b08      	cmp	r3, #8
 8009d5e:	d110      	bne.n	8009d82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2208      	movs	r2, #8
 8009d66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 f95b 	bl	800a024 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2208      	movs	r2, #8
 8009d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e029      	b.n	8009dd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d90:	d111      	bne.n	8009db6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 f941 	bl	800a024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2220      	movs	r2, #32
 8009da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e00f      	b.n	8009dd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	69da      	ldr	r2, [r3, #28]
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	bf0c      	ite	eq
 8009dc6:	2301      	moveq	r3, #1
 8009dc8:	2300      	movne	r3, #0
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	461a      	mov	r2, r3
 8009dce:	79fb      	ldrb	r3, [r7, #7]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d0a6      	beq.n	8009d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b0a3      	sub	sp, #140	; 0x8c
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	4613      	mov	r3, r2
 8009dec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	88fa      	ldrh	r2, [r7, #6]
 8009df8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	88fa      	ldrh	r2, [r7, #6]
 8009e00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e12:	d10e      	bne.n	8009e32 <UART_Start_Receive_IT+0x52>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d105      	bne.n	8009e28 <UART_Start_Receive_IT+0x48>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009e22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e26:	e02d      	b.n	8009e84 <UART_Start_Receive_IT+0xa4>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	22ff      	movs	r2, #255	; 0xff
 8009e2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e30:	e028      	b.n	8009e84 <UART_Start_Receive_IT+0xa4>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10d      	bne.n	8009e56 <UART_Start_Receive_IT+0x76>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d104      	bne.n	8009e4c <UART_Start_Receive_IT+0x6c>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	22ff      	movs	r2, #255	; 0xff
 8009e46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e4a:	e01b      	b.n	8009e84 <UART_Start_Receive_IT+0xa4>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	227f      	movs	r2, #127	; 0x7f
 8009e50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e54:	e016      	b.n	8009e84 <UART_Start_Receive_IT+0xa4>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e5e:	d10d      	bne.n	8009e7c <UART_Start_Receive_IT+0x9c>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d104      	bne.n	8009e72 <UART_Start_Receive_IT+0x92>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	227f      	movs	r2, #127	; 0x7f
 8009e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e70:	e008      	b.n	8009e84 <UART_Start_Receive_IT+0xa4>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	223f      	movs	r2, #63	; 0x3f
 8009e76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e7a:	e003      	b.n	8009e84 <UART_Start_Receive_IT+0xa4>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2222      	movs	r2, #34	; 0x22
 8009e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3308      	adds	r3, #8
 8009e9a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e9e:	e853 3f00 	ldrex	r3, [r3]
 8009ea2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ea6:	f043 0301 	orr.w	r3, r3, #1
 8009eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3308      	adds	r3, #8
 8009eb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009eb8:	673a      	str	r2, [r7, #112]	; 0x70
 8009eba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009ebe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e3      	bne.n	8009e94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ed4:	d14f      	bne.n	8009f76 <UART_Start_Receive_IT+0x196>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009edc:	88fa      	ldrh	r2, [r7, #6]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d349      	bcc.n	8009f76 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eea:	d107      	bne.n	8009efc <UART_Start_Receive_IT+0x11c>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d103      	bne.n	8009efc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4a47      	ldr	r2, [pc, #284]	; (800a014 <UART_Start_Receive_IT+0x234>)
 8009ef8:	675a      	str	r2, [r3, #116]	; 0x74
 8009efa:	e002      	b.n	8009f02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4a46      	ldr	r2, [pc, #280]	; (800a018 <UART_Start_Receive_IT+0x238>)
 8009f00:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d01a      	beq.n	8009f40 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	461a      	mov	r2, r3
 8009f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e4      	bne.n	8009f0a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3308      	adds	r3, #8
 8009f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3308      	adds	r3, #8
 8009f5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009f60:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e5      	bne.n	8009f40 <UART_Start_Receive_IT+0x160>
 8009f74:	e046      	b.n	800a004 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7e:	d107      	bne.n	8009f90 <UART_Start_Receive_IT+0x1b0>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d103      	bne.n	8009f90 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	4a24      	ldr	r2, [pc, #144]	; (800a01c <UART_Start_Receive_IT+0x23c>)
 8009f8c:	675a      	str	r2, [r3, #116]	; 0x74
 8009f8e:	e002      	b.n	8009f96 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4a23      	ldr	r2, [pc, #140]	; (800a020 <UART_Start_Receive_IT+0x240>)
 8009f94:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d019      	beq.n	8009fd2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009fb2:	677b      	str	r3, [r7, #116]	; 0x74
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8009fbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fc4:	e841 2300 	strex	r3, r2, [r1]
 8009fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e6      	bne.n	8009f9e <UART_Start_Receive_IT+0x1be>
 8009fd0:	e018      	b.n	800a004 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	e853 3f00 	ldrex	r3, [r3]
 8009fde:	613b      	str	r3, [r7, #16]
   return(result);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f043 0320 	orr.w	r3, r3, #32
 8009fe6:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	461a      	mov	r2, r3
 8009fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ff0:	623b      	str	r3, [r7, #32]
 8009ff2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff4:	69f9      	ldr	r1, [r7, #28]
 8009ff6:	6a3a      	ldr	r2, [r7, #32]
 8009ff8:	e841 2300 	strex	r3, r2, [r1]
 8009ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1e6      	bne.n	8009fd2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	378c      	adds	r7, #140	; 0x8c
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	0800a845 	.word	0x0800a845
 800a018:	0800a4e5 	.word	0x0800a4e5
 800a01c:	0800a32d 	.word	0x0800a32d
 800a020:	0800a175 	.word	0x0800a175

0800a024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a024:	b480      	push	{r7}
 800a026:	b095      	sub	sp, #84	; 0x54
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a034:	e853 3f00 	ldrex	r3, [r3]
 800a038:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a040:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a04a:	643b      	str	r3, [r7, #64]	; 0x40
 800a04c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a050:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a052:	e841 2300 	strex	r3, r2, [r1]
 800a056:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1e6      	bne.n	800a02c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3308      	adds	r3, #8
 800a064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a074:	f023 0301 	bic.w	r3, r3, #1
 800a078:	64bb      	str	r3, [r7, #72]	; 0x48
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3308      	adds	r3, #8
 800a080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a082:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a084:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e3      	bne.n	800a05e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d118      	bne.n	800a0d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	e853 3f00 	ldrex	r3, [r3]
 800a0aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f023 0310 	bic.w	r3, r3, #16
 800a0b2:	647b      	str	r3, [r7, #68]	; 0x44
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0bc:	61bb      	str	r3, [r7, #24]
 800a0be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c0:	6979      	ldr	r1, [r7, #20]
 800a0c2:	69ba      	ldr	r2, [r7, #24]
 800a0c4:	e841 2300 	strex	r3, r2, [r1]
 800a0c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e6      	bne.n	800a09e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a0e4:	bf00      	nop
 800a0e6:	3754      	adds	r7, #84	; 0x54
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f7ff f99c 	bl	800944c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a114:	bf00      	nop
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	60bb      	str	r3, [r7, #8]
   return(result);
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	61bb      	str	r3, [r7, #24]
 800a144:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a146:	6979      	ldr	r1, [r7, #20]
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	e841 2300 	strex	r3, r2, [r1]
 800a14e:	613b      	str	r3, [r7, #16]
   return(result);
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e6      	bne.n	800a124 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2220      	movs	r2, #32
 800a15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff f967 	bl	8009438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a16a:	bf00      	nop
 800a16c:	3720      	adds	r7, #32
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b09c      	sub	sp, #112	; 0x70
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a182:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a18c:	2b22      	cmp	r3, #34	; 0x22
 800a18e:	f040 80be 	bne.w	800a30e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a198:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a19c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a1a0:	b2d9      	uxtb	r1, r3
 800a1a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ac:	400a      	ands	r2, r1
 800a1ae:	b2d2      	uxtb	r2, r2
 800a1b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f040 80a1 	bne.w	800a31e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1e4:	e853 3f00 	ldrex	r3, [r3]
 800a1e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1f0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a202:	e841 2300 	strex	r3, r2, [r1]
 800a206:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1e6      	bne.n	800a1dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3308      	adds	r3, #8
 800a214:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	f023 0301 	bic.w	r3, r3, #1
 800a224:	667b      	str	r3, [r7, #100]	; 0x64
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3308      	adds	r3, #8
 800a22c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a22e:	647a      	str	r2, [r7, #68]	; 0x44
 800a230:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e5      	bne.n	800a20e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2220      	movs	r2, #32
 800a246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a33      	ldr	r2, [pc, #204]	; (800a328 <UART_RxISR_8BIT+0x1b4>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d01f      	beq.n	800a2a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d018      	beq.n	800a2a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	e853 3f00 	ldrex	r3, [r3]
 800a27a:	623b      	str	r3, [r7, #32]
   return(result);
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a282:	663b      	str	r3, [r7, #96]	; 0x60
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a28c:	633b      	str	r3, [r7, #48]	; 0x30
 800a28e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a294:	e841 2300 	strex	r3, r2, [r1]
 800a298:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1e6      	bne.n	800a26e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d12e      	bne.n	800a306 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f023 0310 	bic.w	r3, r3, #16
 800a2c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2cc:	61fb      	str	r3, [r7, #28]
 800a2ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	69b9      	ldr	r1, [r7, #24]
 800a2d2:	69fa      	ldr	r2, [r7, #28]
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	617b      	str	r3, [r7, #20]
   return(result);
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e6      	bne.n	800a2ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	f003 0310 	and.w	r3, r3, #16
 800a2ea:	2b10      	cmp	r3, #16
 800a2ec:	d103      	bne.n	800a2f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2210      	movs	r2, #16
 800a2f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7ff f8ae 	bl	8009460 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a304:	e00b      	b.n	800a31e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7f6 fa08 	bl	800071c <HAL_UART_RxCpltCallback>
}
 800a30c:	e007      	b.n	800a31e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	699a      	ldr	r2, [r3, #24]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f042 0208 	orr.w	r2, r2, #8
 800a31c:	619a      	str	r2, [r3, #24]
}
 800a31e:	bf00      	nop
 800a320:	3770      	adds	r7, #112	; 0x70
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	40008000 	.word	0x40008000

0800a32c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b09c      	sub	sp, #112	; 0x70
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a33a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a344:	2b22      	cmp	r3, #34	; 0x22
 800a346:	f040 80be 	bne.w	800a4c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a358:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a35a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a35e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a362:	4013      	ands	r3, r2
 800a364:	b29a      	uxth	r2, r3
 800a366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a368:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a36e:	1c9a      	adds	r2, r3, #2
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	3b01      	subs	r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f040 80a1 	bne.w	800a4d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a3a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3a8:	667b      	str	r3, [r7, #100]	; 0x64
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3b2:	657b      	str	r3, [r7, #84]	; 0x54
 800a3b4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e6      	bne.n	800a394 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	f023 0301 	bic.w	r3, r3, #1
 800a3dc:	663b      	str	r3, [r7, #96]	; 0x60
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3e6:	643a      	str	r2, [r7, #64]	; 0x40
 800a3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e5      	bne.n	800a3c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a33      	ldr	r2, [pc, #204]	; (800a4e0 <UART_RxISR_16BIT+0x1b4>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d01f      	beq.n	800a458 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d018      	beq.n	800a458 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	e853 3f00 	ldrex	r3, [r3]
 800a432:	61fb      	str	r3, [r7, #28]
   return(result);
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a43a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	461a      	mov	r2, r3
 800a442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a444:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a446:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a44a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a44c:	e841 2300 	strex	r3, r2, [r1]
 800a450:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1e6      	bne.n	800a426 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d12e      	bne.n	800a4be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	e853 3f00 	ldrex	r3, [r3]
 800a472:	60bb      	str	r3, [r7, #8]
   return(result);
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f023 0310 	bic.w	r3, r3, #16
 800a47a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	461a      	mov	r2, r3
 800a482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a488:	6979      	ldr	r1, [r7, #20]
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	e841 2300 	strex	r3, r2, [r1]
 800a490:	613b      	str	r3, [r7, #16]
   return(result);
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e6      	bne.n	800a466 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f003 0310 	and.w	r3, r3, #16
 800a4a2:	2b10      	cmp	r3, #16
 800a4a4:	d103      	bne.n	800a4ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2210      	movs	r2, #16
 800a4ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7fe ffd2 	bl	8009460 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4bc:	e00b      	b.n	800a4d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7f6 f92c 	bl	800071c <HAL_UART_RxCpltCallback>
}
 800a4c4:	e007      	b.n	800a4d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	699a      	ldr	r2, [r3, #24]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0208 	orr.w	r2, r2, #8
 800a4d4:	619a      	str	r2, [r3, #24]
}
 800a4d6:	bf00      	nop
 800a4d8:	3770      	adds	r7, #112	; 0x70
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	40008000 	.word	0x40008000

0800a4e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b0ac      	sub	sp, #176	; 0xb0
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a4f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a51a:	2b22      	cmp	r3, #34	; 0x22
 800a51c:	f040 8182 	bne.w	800a824 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a526:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a52a:	e125      	b.n	800a778 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a536:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800a53a:	b2d9      	uxtb	r1, r3
 800a53c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a540:	b2da      	uxtb	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a546:	400a      	ands	r2, r1
 800a548:	b2d2      	uxtb	r2, r2
 800a54a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	3b01      	subs	r3, #1
 800a560:	b29a      	uxth	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a576:	f003 0307 	and.w	r3, r3, #7
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d053      	beq.n	800a626 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a57e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b00      	cmp	r3, #0
 800a588:	d011      	beq.n	800a5ae <UART_RxISR_8BIT_FIFOEN+0xca>
 800a58a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a58e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00b      	beq.n	800a5ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2201      	movs	r2, #1
 800a59c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a4:	f043 0201 	orr.w	r2, r3, #1
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5b2:	f003 0302 	and.w	r3, r3, #2
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d011      	beq.n	800a5de <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a5ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00b      	beq.n	800a5de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d4:	f043 0204 	orr.w	r2, r3, #4
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5e2:	f003 0304 	and.w	r3, r3, #4
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d011      	beq.n	800a60e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a5ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00b      	beq.n	800a60e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2204      	movs	r2, #4
 800a5fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a604:	f043 0202 	orr.w	r2, r3, #2
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a614:	2b00      	cmp	r3, #0
 800a616:	d006      	beq.n	800a626 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f7fe ff17 	bl	800944c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f040 80a2 	bne.w	800a778 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800a642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	461a      	mov	r2, r3
 800a652:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a656:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a658:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a65c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800a664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e4      	bne.n	800a634 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3308      	adds	r3, #8
 800a670:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a674:	e853 3f00 	ldrex	r3, [r3]
 800a678:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a67a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a67c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a680:	f023 0301 	bic.w	r3, r3, #1
 800a684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3308      	adds	r3, #8
 800a68e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a692:	66ba      	str	r2, [r7, #104]	; 0x68
 800a694:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a698:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a6a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e1      	bne.n	800a66a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a5f      	ldr	r2, [pc, #380]	; (800a83c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d021      	beq.n	800a708 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d01a      	beq.n	800a708 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a6e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a6e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6f4:	657b      	str	r3, [r7, #84]	; 0x54
 800a6f6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6fc:	e841 2300 	strex	r3, r2, [r1]
 800a700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e4      	bne.n	800a6d2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d130      	bne.n	800a772 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	f023 0310 	bic.w	r3, r3, #16
 800a72a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a738:	643b      	str	r3, [r7, #64]	; 0x40
 800a73a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a73e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e4      	bne.n	800a716 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	69db      	ldr	r3, [r3, #28]
 800a752:	f003 0310 	and.w	r3, r3, #16
 800a756:	2b10      	cmp	r3, #16
 800a758:	d103      	bne.n	800a762 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2210      	movs	r2, #16
 800a760:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7fe fe78 	bl	8009460 <HAL_UARTEx_RxEventCallback>
 800a770:	e002      	b.n	800a778 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7f5 ffd2 	bl	800071c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a778:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d006      	beq.n	800a78e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a784:	f003 0320 	and.w	r3, r3, #32
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f47f aecf 	bne.w	800a52c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a794:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a798:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d049      	beq.n	800a834 <UART_RxISR_8BIT_FIFOEN+0x350>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a7a6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d242      	bcs.n	800a834 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3308      	adds	r3, #8
 800a7b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	e853 3f00 	ldrex	r3, [r3]
 800a7bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a7d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7da:	e841 2300 	strex	r3, r2, [r1]
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1e3      	bne.n	800a7ae <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a15      	ldr	r2, [pc, #84]	; (800a840 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a7ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	e853 3f00 	ldrex	r3, [r3]
 800a7f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	f043 0320 	orr.w	r3, r3, #32
 800a800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	461a      	mov	r2, r3
 800a80a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a80e:	61bb      	str	r3, [r7, #24]
 800a810:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a812:	6979      	ldr	r1, [r7, #20]
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	e841 2300 	strex	r3, r2, [r1]
 800a81a:	613b      	str	r3, [r7, #16]
   return(result);
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1e4      	bne.n	800a7ec <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a822:	e007      	b.n	800a834 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	699a      	ldr	r2, [r3, #24]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f042 0208 	orr.w	r2, r2, #8
 800a832:	619a      	str	r2, [r3, #24]
}
 800a834:	bf00      	nop
 800a836:	37b0      	adds	r7, #176	; 0xb0
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	40008000 	.word	0x40008000
 800a840:	0800a175 	.word	0x0800a175

0800a844 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b0ae      	sub	sp, #184	; 0xb8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a852:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a87a:	2b22      	cmp	r3, #34	; 0x22
 800a87c:	f040 8186 	bne.w	800ab8c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a886:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a88a:	e129      	b.n	800aae0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a89a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a89e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a8a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8b4:	1c9a      	adds	r2, r3, #2
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a8d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a8da:	f003 0307 	and.w	r3, r3, #7
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d053      	beq.n	800a98a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d011      	beq.n	800a912 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a8ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00b      	beq.n	800a912 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2201      	movs	r2, #1
 800a900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a908:	f043 0201 	orr.w	r2, r3, #1
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d011      	beq.n	800a942 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a91e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00b      	beq.n	800a942 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2202      	movs	r2, #2
 800a930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a938:	f043 0204 	orr.w	r2, r3, #4
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d011      	beq.n	800a972 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a94e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00b      	beq.n	800a972 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2204      	movs	r2, #4
 800a960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a968:	f043 0202 	orr.w	r2, r3, #2
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d006      	beq.n	800a98a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7fe fd65 	bl	800944c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a990:	b29b      	uxth	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	f040 80a4 	bne.w	800aae0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9a0:	e853 3f00 	ldrex	r3, [r3]
 800a9a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a9a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a9be:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a9c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a9cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e2      	bne.n	800a998 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3308      	adds	r3, #8
 800a9d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9dc:	e853 3f00 	ldrex	r3, [r3]
 800a9e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9e8:	f023 0301 	bic.w	r3, r3, #1
 800a9ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a9fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa02:	e841 2300 	strex	r3, r2, [r1]
 800aa06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1e1      	bne.n	800a9d2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2220      	movs	r2, #32
 800aa12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a5f      	ldr	r2, [pc, #380]	; (800aba4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d021      	beq.n	800aa70 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d01a      	beq.n	800aa70 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa42:	e853 3f00 	ldrex	r3, [r3]
 800aa46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aa4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aa5c:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa64:	e841 2300 	strex	r3, r2, [r1]
 800aa68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e4      	bne.n	800aa3a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d130      	bne.n	800aada <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa86:	e853 3f00 	ldrex	r3, [r3]
 800aa8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8e:	f023 0310 	bic.w	r3, r3, #16
 800aa92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aaa0:	647b      	str	r3, [r7, #68]	; 0x44
 800aaa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aaa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aaae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e4      	bne.n	800aa7e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	f003 0310 	and.w	r3, r3, #16
 800aabe:	2b10      	cmp	r3, #16
 800aac0:	d103      	bne.n	800aaca <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2210      	movs	r2, #16
 800aac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7fe fcc4 	bl	8009460 <HAL_UARTEx_RxEventCallback>
 800aad8:	e002      	b.n	800aae0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7f5 fe1e 	bl	800071c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aae0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d006      	beq.n	800aaf6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800aae8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aaec:	f003 0320 	and.w	r3, r3, #32
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f47f aecb 	bne.w	800a88c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aafc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ab00:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d049      	beq.n	800ab9c <UART_RxISR_16BIT_FIFOEN+0x358>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ab0e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d242      	bcs.n	800ab9c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	e853 3f00 	ldrex	r3, [r3]
 800ab24:	623b      	str	r3, [r7, #32]
   return(result);
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3308      	adds	r3, #8
 800ab36:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ab3a:	633a      	str	r2, [r7, #48]	; 0x30
 800ab3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab42:	e841 2300 	strex	r3, r2, [r1]
 800ab46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1e3      	bne.n	800ab16 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a15      	ldr	r2, [pc, #84]	; (800aba8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ab52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f043 0320 	orr.w	r3, r3, #32
 800ab68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	461a      	mov	r2, r3
 800ab72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab76:	61fb      	str	r3, [r7, #28]
 800ab78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	69b9      	ldr	r1, [r7, #24]
 800ab7c:	69fa      	ldr	r2, [r7, #28]
 800ab7e:	e841 2300 	strex	r3, r2, [r1]
 800ab82:	617b      	str	r3, [r7, #20]
   return(result);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e4      	bne.n	800ab54 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab8a:	e007      	b.n	800ab9c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	699a      	ldr	r2, [r3, #24]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f042 0208 	orr.w	r2, r2, #8
 800ab9a:	619a      	str	r2, [r3, #24]
}
 800ab9c:	bf00      	nop
 800ab9e:	37b8      	adds	r7, #184	; 0xb8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	40008000 	.word	0x40008000
 800aba8:	0800a32d 	.word	0x0800a32d

0800abac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d101      	bne.n	800abfe <HAL_UARTEx_DisableFifoMode+0x16>
 800abfa:	2302      	movs	r3, #2
 800abfc:	e027      	b.n	800ac4e <HAL_UARTEx_DisableFifoMode+0x66>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2224      	movs	r2, #36	; 0x24
 800ac0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f022 0201 	bic.w	r2, r2, #1
 800ac24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2220      	movs	r2, #32
 800ac40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d101      	bne.n	800ac72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac6e:	2302      	movs	r3, #2
 800ac70:	e02d      	b.n	800acce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2224      	movs	r2, #36	; 0x24
 800ac7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f022 0201 	bic.w	r2, r2, #1
 800ac98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	430a      	orrs	r2, r1
 800acac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f850 	bl	800ad54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2220      	movs	r2, #32
 800acc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b084      	sub	sp, #16
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d101      	bne.n	800acee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800acea:	2302      	movs	r3, #2
 800acec:	e02d      	b.n	800ad4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2201      	movs	r2, #1
 800acf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2224      	movs	r2, #36	; 0x24
 800acfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f022 0201 	bic.w	r2, r2, #1
 800ad14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f812 	bl	800ad54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2220      	movs	r2, #32
 800ad3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d108      	bne.n	800ad76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad74:	e031      	b.n	800adda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad76:	2308      	movs	r3, #8
 800ad78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad7a:	2308      	movs	r3, #8
 800ad7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	0e5b      	lsrs	r3, r3, #25
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	f003 0307 	and.w	r3, r3, #7
 800ad8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	0f5b      	lsrs	r3, r3, #29
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	f003 0307 	and.w	r3, r3, #7
 800ad9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad9e:	7bbb      	ldrb	r3, [r7, #14]
 800ada0:	7b3a      	ldrb	r2, [r7, #12]
 800ada2:	4911      	ldr	r1, [pc, #68]	; (800ade8 <UARTEx_SetNbDataToProcess+0x94>)
 800ada4:	5c8a      	ldrb	r2, [r1, r2]
 800ada6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800adaa:	7b3a      	ldrb	r2, [r7, #12]
 800adac:	490f      	ldr	r1, [pc, #60]	; (800adec <UARTEx_SetNbDataToProcess+0x98>)
 800adae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	7b7a      	ldrb	r2, [r7, #13]
 800adc0:	4909      	ldr	r1, [pc, #36]	; (800ade8 <UARTEx_SetNbDataToProcess+0x94>)
 800adc2:	5c8a      	ldrb	r2, [r1, r2]
 800adc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800adc8:	7b7a      	ldrb	r2, [r7, #13]
 800adca:	4908      	ldr	r1, [pc, #32]	; (800adec <UARTEx_SetNbDataToProcess+0x98>)
 800adcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adce:	fb93 f3f2 	sdiv	r3, r3, r2
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800adda:	bf00      	nop
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	0800e840 	.word	0x0800e840
 800adec:	0800e848 	.word	0x0800e848

0800adf0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b08b      	sub	sp, #44	; 0x2c
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	fa93 f3a3 	rbit	r3, r3
 800ae0a:	613b      	str	r3, [r7, #16]
  return result;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800ae16:	2320      	movs	r3, #32
 800ae18:	e003      	b.n	800ae22 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	fab3 f383 	clz	r3, r3
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	005b      	lsls	r3, r3, #1
 800ae24:	2103      	movs	r1, #3
 800ae26:	fa01 f303 	lsl.w	r3, r1, r3
 800ae2a:	43db      	mvns	r3, r3
 800ae2c:	401a      	ands	r2, r3
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	fa93 f3a3 	rbit	r3, r3
 800ae38:	61fb      	str	r3, [r7, #28]
  return result;
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800ae44:	2320      	movs	r3, #32
 800ae46:	e003      	b.n	800ae50 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4a:	fab3 f383 	clz	r3, r3
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	005b      	lsls	r3, r3, #1
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	fa01 f303 	lsl.w	r3, r1, r3
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	601a      	str	r2, [r3, #0]
}
 800ae5e:	bf00      	nop
 800ae60:	372c      	adds	r7, #44	; 0x2c
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b085      	sub	sp, #20
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	60f8      	str	r0, [r7, #12]
 800ae72:	60b9      	str	r1, [r7, #8]
 800ae74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	685a      	ldr	r2, [r3, #4]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	43db      	mvns	r3, r3
 800ae7e:	401a      	ands	r2, r3
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	6879      	ldr	r1, [r7, #4]
 800ae84:	fb01 f303 	mul.w	r3, r1, r3
 800ae88:	431a      	orrs	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	605a      	str	r2, [r3, #4]
}
 800ae8e:	bf00      	nop
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr

0800ae9a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b08b      	sub	sp, #44	; 0x2c
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	689a      	ldr	r2, [r3, #8]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	fa93 f3a3 	rbit	r3, r3
 800aeb4:	613b      	str	r3, [r7, #16]
  return result;
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800aec0:	2320      	movs	r3, #32
 800aec2:	e003      	b.n	800aecc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	fab3 f383 	clz	r3, r3
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	005b      	lsls	r3, r3, #1
 800aece:	2103      	movs	r1, #3
 800aed0:	fa01 f303 	lsl.w	r3, r1, r3
 800aed4:	43db      	mvns	r3, r3
 800aed6:	401a      	ands	r2, r3
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	fa93 f3a3 	rbit	r3, r3
 800aee2:	61fb      	str	r3, [r7, #28]
  return result;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d101      	bne.n	800aef2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800aeee:	2320      	movs	r3, #32
 800aef0:	e003      	b.n	800aefa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	fab3 f383 	clz	r3, r3
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	6879      	ldr	r1, [r7, #4]
 800aefe:	fa01 f303 	lsl.w	r3, r1, r3
 800af02:	431a      	orrs	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800af08:	bf00      	nop
 800af0a:	372c      	adds	r7, #44	; 0x2c
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800af14:	b480      	push	{r7}
 800af16:	b08b      	sub	sp, #44	; 0x2c
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	fa93 f3a3 	rbit	r3, r3
 800af2e:	613b      	str	r3, [r7, #16]
  return result;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800af3a:	2320      	movs	r3, #32
 800af3c:	e003      	b.n	800af46 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	fab3 f383 	clz	r3, r3
 800af44:	b2db      	uxtb	r3, r3
 800af46:	005b      	lsls	r3, r3, #1
 800af48:	2103      	movs	r1, #3
 800af4a:	fa01 f303 	lsl.w	r3, r1, r3
 800af4e:	43db      	mvns	r3, r3
 800af50:	401a      	ands	r2, r3
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	fa93 f3a3 	rbit	r3, r3
 800af5c:	61fb      	str	r3, [r7, #28]
  return result;
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800af68:	2320      	movs	r3, #32
 800af6a:	e003      	b.n	800af74 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	fab3 f383 	clz	r3, r3
 800af72:	b2db      	uxtb	r3, r3
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	fa01 f303 	lsl.w	r3, r1, r3
 800af7c:	431a      	orrs	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	60da      	str	r2, [r3, #12]
}
 800af82:	bf00      	nop
 800af84:	372c      	adds	r7, #44	; 0x2c
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800af8e:	b480      	push	{r7}
 800af90:	b08b      	sub	sp, #44	; 0x2c
 800af92:	af00      	add	r7, sp, #0
 800af94:	60f8      	str	r0, [r7, #12]
 800af96:	60b9      	str	r1, [r7, #8]
 800af98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a1a      	ldr	r2, [r3, #32]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	fa93 f3a3 	rbit	r3, r3
 800afa8:	613b      	str	r3, [r7, #16]
  return result;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800afb4:	2320      	movs	r3, #32
 800afb6:	e003      	b.n	800afc0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	fab3 f383 	clz	r3, r3
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	210f      	movs	r1, #15
 800afc4:	fa01 f303 	lsl.w	r3, r1, r3
 800afc8:	43db      	mvns	r3, r3
 800afca:	401a      	ands	r2, r3
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afd0:	6a3b      	ldr	r3, [r7, #32]
 800afd2:	fa93 f3a3 	rbit	r3, r3
 800afd6:	61fb      	str	r3, [r7, #28]
  return result;
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800afe2:	2320      	movs	r3, #32
 800afe4:	e003      	b.n	800afee <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe8:	fab3 f383 	clz	r3, r3
 800afec:	b2db      	uxtb	r3, r3
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	fa01 f303 	lsl.w	r3, r1, r3
 800aff6:	431a      	orrs	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800affc:	bf00      	nop
 800affe:	372c      	adds	r7, #44	; 0x2c
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b008:	b480      	push	{r7}
 800b00a:	b08b      	sub	sp, #44	; 0x2c
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	0a1b      	lsrs	r3, r3, #8
 800b01c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	fa93 f3a3 	rbit	r3, r3
 800b024:	613b      	str	r3, [r7, #16]
  return result;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b030:	2320      	movs	r3, #32
 800b032:	e003      	b.n	800b03c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	fab3 f383 	clz	r3, r3
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	210f      	movs	r1, #15
 800b040:	fa01 f303 	lsl.w	r3, r1, r3
 800b044:	43db      	mvns	r3, r3
 800b046:	401a      	ands	r2, r3
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	0a1b      	lsrs	r3, r3, #8
 800b04c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b04e:	6a3b      	ldr	r3, [r7, #32]
 800b050:	fa93 f3a3 	rbit	r3, r3
 800b054:	61fb      	str	r3, [r7, #28]
  return result;
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b060:	2320      	movs	r3, #32
 800b062:	e003      	b.n	800b06c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	fab3 f383 	clz	r3, r3
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	6879      	ldr	r1, [r7, #4]
 800b070:	fa01 f303 	lsl.w	r3, r1, r3
 800b074:	431a      	orrs	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800b07a:	bf00      	nop
 800b07c:	372c      	adds	r7, #44	; 0x2c
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b088      	sub	sp, #32
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	fa93 f3a3 	rbit	r3, r3
 800b09c:	60fb      	str	r3, [r7, #12]
  return result;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d101      	bne.n	800b0ac <LL_GPIO_Init+0x26>
    return 32U;
 800b0a8:	2320      	movs	r3, #32
 800b0aa:	e003      	b.n	800b0b4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	fab3 f383 	clz	r3, r3
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b0b6:	e047      	b.n	800b148 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	2101      	movs	r1, #1
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d039      	beq.n	800b142 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d003      	beq.n	800b0de <LL_GPIO_Init+0x58>
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d10d      	bne.n	800b0fa <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	69b9      	ldr	r1, [r7, #24]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff fed7 	bl	800ae9a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	69b9      	ldr	r1, [r7, #24]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff feb8 	bl	800ae6a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	461a      	mov	r2, r3
 800b100:	69b9      	ldr	r1, [r7, #24]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f7ff ff06 	bl	800af14 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d111      	bne.n	800b134 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	2bff      	cmp	r3, #255	; 0xff
 800b114:	d807      	bhi.n	800b126 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	461a      	mov	r2, r3
 800b11c:	69b9      	ldr	r1, [r7, #24]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff ff35 	bl	800af8e <LL_GPIO_SetAFPin_0_7>
 800b124:	e006      	b.n	800b134 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	461a      	mov	r2, r3
 800b12c:	69b9      	ldr	r1, [r7, #24]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7ff ff6a 	bl	800b008 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	461a      	mov	r2, r3
 800b13a:	69b9      	ldr	r1, [r7, #24]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f7ff fe57 	bl	800adf0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	3301      	adds	r3, #1
 800b146:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	fa22 f303 	lsr.w	r3, r2, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1b0      	bne.n	800b0b8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b168:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b16c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b174:	b29a      	uxth	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	b29b      	uxth	r3, r3
 800b17a:	43db      	mvns	r3, r3
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	4013      	ands	r3, r2
 800b180:	b29a      	uxth	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b196:	b084      	sub	sp, #16
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	f107 0014 	add.w	r0, r7, #20
 800b1a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	b004      	add	sp, #16
 800b1d6:	4770      	bx	lr

0800b1d8 <__NVIC_SetPriority>:
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	6039      	str	r1, [r7, #0]
 800b1e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b1e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	db0a      	blt.n	800b202 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	490c      	ldr	r1, [pc, #48]	; (800b224 <__NVIC_SetPriority+0x4c>)
 800b1f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1f6:	0152      	lsls	r2, r2, #5
 800b1f8:	b2d2      	uxtb	r2, r2
 800b1fa:	440b      	add	r3, r1
 800b1fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b200:	e00a      	b.n	800b218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	b2da      	uxtb	r2, r3
 800b206:	4908      	ldr	r1, [pc, #32]	; (800b228 <__NVIC_SetPriority+0x50>)
 800b208:	79fb      	ldrb	r3, [r7, #7]
 800b20a:	f003 030f 	and.w	r3, r3, #15
 800b20e:	3b04      	subs	r3, #4
 800b210:	0152      	lsls	r2, r2, #5
 800b212:	b2d2      	uxtb	r2, r2
 800b214:	440b      	add	r3, r1
 800b216:	761a      	strb	r2, [r3, #24]
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr
 800b224:	e000e100 	.word	0xe000e100
 800b228:	e000ed00 	.word	0xe000ed00

0800b22c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b22c:	b580      	push	{r7, lr}
 800b22e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b230:	4b05      	ldr	r3, [pc, #20]	; (800b248 <SysTick_Handler+0x1c>)
 800b232:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b234:	f001 fc98 	bl	800cb68 <xTaskGetSchedulerState>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d001      	beq.n	800b242 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b23e:	f002 f8ed 	bl	800d41c <xPortSysTickHandler>
  }
}
 800b242:	bf00      	nop
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	e000e010 	.word	0xe000e010

0800b24c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b24c:	b580      	push	{r7, lr}
 800b24e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b250:	2100      	movs	r1, #0
 800b252:	f06f 0004 	mvn.w	r0, #4
 800b256:	f7ff ffbf 	bl	800b1d8 <__NVIC_SetPriority>
#endif
}
 800b25a:	bf00      	nop
 800b25c:	bd80      	pop	{r7, pc}
	...

0800b260 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b266:	f3ef 8305 	mrs	r3, IPSR
 800b26a:	603b      	str	r3, [r7, #0]
  return(result);
 800b26c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b272:	f06f 0305 	mvn.w	r3, #5
 800b276:	607b      	str	r3, [r7, #4]
 800b278:	e00c      	b.n	800b294 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b27a:	4b0a      	ldr	r3, [pc, #40]	; (800b2a4 <osKernelInitialize+0x44>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d105      	bne.n	800b28e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b282:	4b08      	ldr	r3, [pc, #32]	; (800b2a4 <osKernelInitialize+0x44>)
 800b284:	2201      	movs	r2, #1
 800b286:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b288:	2300      	movs	r3, #0
 800b28a:	607b      	str	r3, [r7, #4]
 800b28c:	e002      	b.n	800b294 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295
 800b292:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b294:	687b      	ldr	r3, [r7, #4]
}
 800b296:	4618      	mov	r0, r3
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	20000988 	.word	0x20000988

0800b2a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2ae:	f3ef 8305 	mrs	r3, IPSR
 800b2b2:	603b      	str	r3, [r7, #0]
  return(result);
 800b2b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b2ba:	f06f 0305 	mvn.w	r3, #5
 800b2be:	607b      	str	r3, [r7, #4]
 800b2c0:	e010      	b.n	800b2e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b2c2:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <osKernelStart+0x48>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d109      	bne.n	800b2de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b2ca:	f7ff ffbf 	bl	800b24c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b2ce:	4b08      	ldr	r3, [pc, #32]	; (800b2f0 <osKernelStart+0x48>)
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b2d4:	f001 f86a 	bl	800c3ac <vTaskStartScheduler>
      stat = osOK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	607b      	str	r3, [r7, #4]
 800b2dc:	e002      	b.n	800b2e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b2de:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b2e4:	687b      	ldr	r3, [r7, #4]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20000988 	.word	0x20000988

0800b2f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08e      	sub	sp, #56	; 0x38
 800b2f8:	af04      	add	r7, sp, #16
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b300:	2300      	movs	r3, #0
 800b302:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b304:	f3ef 8305 	mrs	r3, IPSR
 800b308:	617b      	str	r3, [r7, #20]
  return(result);
 800b30a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d17e      	bne.n	800b40e <osThreadNew+0x11a>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d07b      	beq.n	800b40e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b316:	2380      	movs	r3, #128	; 0x80
 800b318:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b31a:	2318      	movs	r3, #24
 800b31c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b31e:	2300      	movs	r3, #0
 800b320:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b322:	f04f 33ff 	mov.w	r3, #4294967295
 800b326:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d045      	beq.n	800b3ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d002      	beq.n	800b33c <osThreadNew+0x48>
        name = attr->name;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d008      	beq.n	800b362 <osThreadNew+0x6e>
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	2b38      	cmp	r3, #56	; 0x38
 800b354:	d805      	bhi.n	800b362 <osThreadNew+0x6e>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <osThreadNew+0x72>
        return (NULL);
 800b362:	2300      	movs	r3, #0
 800b364:	e054      	b.n	800b410 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	089b      	lsrs	r3, r3, #2
 800b374:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00e      	beq.n	800b39c <osThreadNew+0xa8>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	2b5b      	cmp	r3, #91	; 0x5b
 800b384:	d90a      	bls.n	800b39c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d006      	beq.n	800b39c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d002      	beq.n	800b39c <osThreadNew+0xa8>
        mem = 1;
 800b396:	2301      	movs	r3, #1
 800b398:	61bb      	str	r3, [r7, #24]
 800b39a:	e010      	b.n	800b3be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10c      	bne.n	800b3be <osThreadNew+0xca>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d108      	bne.n	800b3be <osThreadNew+0xca>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d104      	bne.n	800b3be <osThreadNew+0xca>
          mem = 0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	61bb      	str	r3, [r7, #24]
 800b3b8:	e001      	b.n	800b3be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d110      	bne.n	800b3e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b3cc:	9202      	str	r2, [sp, #8]
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	6a3a      	ldr	r2, [r7, #32]
 800b3d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 fd30 	bl	800be40 <xTaskCreateStatic>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	613b      	str	r3, [r7, #16]
 800b3e4:	e013      	b.n	800b40e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d110      	bne.n	800b40e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	f107 0310 	add.w	r3, r7, #16
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f000 fd63 	bl	800beca <xTaskCreate>
 800b404:	4603      	mov	r3, r0
 800b406:	2b01      	cmp	r3, #1
 800b408:	d001      	beq.n	800b40e <osThreadNew+0x11a>
            hTask = NULL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b40e:	693b      	ldr	r3, [r7, #16]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3728      	adds	r7, #40	; 0x28
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	4a07      	ldr	r2, [pc, #28]	; (800b444 <vApplicationGetIdleTaskMemory+0x2c>)
 800b428:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	4a06      	ldr	r2, [pc, #24]	; (800b448 <vApplicationGetIdleTaskMemory+0x30>)
 800b42e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2280      	movs	r2, #128	; 0x80
 800b434:	601a      	str	r2, [r3, #0]
}
 800b436:	bf00      	nop
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	2000098c 	.word	0x2000098c
 800b448:	200009e8 	.word	0x200009e8

0800b44c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	4a07      	ldr	r2, [pc, #28]	; (800b478 <vApplicationGetTimerTaskMemory+0x2c>)
 800b45c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	4a06      	ldr	r2, [pc, #24]	; (800b47c <vApplicationGetTimerTaskMemory+0x30>)
 800b462:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b46a:	601a      	str	r2, [r3, #0]
}
 800b46c:	bf00      	nop
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	20000be8 	.word	0x20000be8
 800b47c:	20000c44 	.word	0x20000c44

0800b480 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f103 0208 	add.w	r2, r3, #8
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f04f 32ff 	mov.w	r2, #4294967295
 800b498:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f103 0208 	add.w	r2, r3, #8
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f103 0208 	add.w	r2, r3, #8
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4ce:	bf00      	nop
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4da:	b480      	push	{r7}
 800b4dc:	b085      	sub	sp, #20
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	689a      	ldr	r2, [r3, #8]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	601a      	str	r2, [r3, #0]
}
 800b516:	bf00      	nop
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b522:	b480      	push	{r7}
 800b524:	b085      	sub	sp, #20
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b538:	d103      	bne.n	800b542 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	60fb      	str	r3, [r7, #12]
 800b540:	e00c      	b.n	800b55c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	3308      	adds	r3, #8
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	e002      	b.n	800b550 <vListInsert+0x2e>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d2f6      	bcs.n	800b54a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	683a      	ldr	r2, [r7, #0]
 800b56a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	601a      	str	r2, [r3, #0]
}
 800b588:	bf00      	nop
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	6892      	ldr	r2, [r2, #8]
 800b5aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	6852      	ldr	r2, [r2, #4]
 800b5b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d103      	bne.n	800b5c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	689a      	ldr	r2, [r3, #8]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	1e5a      	subs	r2, r3, #1
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d102      	bne.n	800b602 <xQueueGenericReset+0x1a>
 800b5fc:	f002 f814 	bl	800d628 <ulSetInterruptMask>
 800b600:	e7fe      	b.n	800b600 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800b602:	f001 fedf 	bl	800d3c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b60e:	68f9      	ldr	r1, [r7, #12]
 800b610:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b612:	fb01 f303 	mul.w	r3, r1, r3
 800b616:	441a      	add	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b632:	3b01      	subs	r3, #1
 800b634:	68f9      	ldr	r1, [r7, #12]
 800b636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b638:	fb01 f303 	mul.w	r3, r1, r3
 800b63c:	441a      	add	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	22ff      	movs	r2, #255	; 0xff
 800b646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	22ff      	movs	r2, #255	; 0xff
 800b64e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10e      	bne.n	800b676 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d014      	beq.n	800b68a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3310      	adds	r3, #16
 800b664:	4618      	mov	r0, r3
 800b666:	f001 f8e9 	bl	800c83c <xTaskRemoveFromEventList>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00c      	beq.n	800b68a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b670:	f001 fe96 	bl	800d3a0 <vPortYield>
 800b674:	e009      	b.n	800b68a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	3310      	adds	r3, #16
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff ff00 	bl	800b480 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	3324      	adds	r3, #36	; 0x24
 800b684:	4618      	mov	r0, r3
 800b686:	f7ff fefb 	bl	800b480 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b68a:	f001 fead 	bl	800d3e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b68e:	2301      	movs	r3, #1
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b088      	sub	sp, #32
 800b69c:	af02      	add	r7, sp, #8
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <xQueueGenericCreateStatic+0x1a>
 800b6ac:	f001 ffbc 	bl	800d628 <ulSetInterruptMask>
 800b6b0:	e7fe      	b.n	800b6b0 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d102      	bne.n	800b6be <xQueueGenericCreateStatic+0x26>
 800b6b8:	f001 ffb6 	bl	800d628 <ulSetInterruptMask>
 800b6bc:	e7fe      	b.n	800b6bc <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d002      	beq.n	800b6ca <xQueueGenericCreateStatic+0x32>
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <xQueueGenericCreateStatic+0x36>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e000      	b.n	800b6d0 <xQueueGenericCreateStatic+0x38>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d102      	bne.n	800b6da <xQueueGenericCreateStatic+0x42>
 800b6d4:	f001 ffa8 	bl	800d628 <ulSetInterruptMask>
 800b6d8:	e7fe      	b.n	800b6d8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d102      	bne.n	800b6e6 <xQueueGenericCreateStatic+0x4e>
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <xQueueGenericCreateStatic+0x52>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e000      	b.n	800b6ec <xQueueGenericCreateStatic+0x54>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d102      	bne.n	800b6f6 <xQueueGenericCreateStatic+0x5e>
 800b6f0:	f001 ff9a 	bl	800d628 <ulSetInterruptMask>
 800b6f4:	e7fe      	b.n	800b6f4 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b6f6:	2350      	movs	r3, #80	; 0x50
 800b6f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	2b50      	cmp	r3, #80	; 0x50
 800b6fe:	d002      	beq.n	800b706 <xQueueGenericCreateStatic+0x6e>
 800b700:	f001 ff92 	bl	800d628 <ulSetInterruptMask>
 800b704:	e7fe      	b.n	800b704 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b706:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00d      	beq.n	800b72e <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b71a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	4613      	mov	r3, r2
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	68b9      	ldr	r1, [r7, #8]
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 f805 	bl	800b738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b72e:	697b      	ldr	r3, [r7, #20]
	}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
 800b744:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d103      	bne.n	800b754 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	69ba      	ldr	r2, [r7, #24]
 800b750:	601a      	str	r2, [r3, #0]
 800b752:	e002      	b.n	800b75a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b766:	2101      	movs	r1, #1
 800b768:	69b8      	ldr	r0, [r7, #24]
 800b76a:	f7ff ff3d 	bl	800b5e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	78fa      	ldrb	r2, [r7, #3]
 800b772:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b776:	bf00      	nop
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b08a      	sub	sp, #40	; 0x28
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	60b9      	str	r1, [r7, #8]
 800b788:	607a      	str	r2, [r7, #4]
 800b78a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b78c:	2300      	movs	r3, #0
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d102      	bne.n	800b7a0 <xQueueGenericSend+0x22>
 800b79a:	f001 ff45 	bl	800d628 <ulSetInterruptMask>
 800b79e:	e7fe      	b.n	800b79e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d103      	bne.n	800b7ae <xQueueGenericSend+0x30>
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d101      	bne.n	800b7b2 <xQueueGenericSend+0x34>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <xQueueGenericSend+0x36>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d102      	bne.n	800b7be <xQueueGenericSend+0x40>
 800b7b8:	f001 ff36 	bl	800d628 <ulSetInterruptMask>
 800b7bc:	e7fe      	b.n	800b7bc <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d103      	bne.n	800b7cc <xQueueGenericSend+0x4e>
 800b7c4:	6a3b      	ldr	r3, [r7, #32]
 800b7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d101      	bne.n	800b7d0 <xQueueGenericSend+0x52>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e000      	b.n	800b7d2 <xQueueGenericSend+0x54>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d102      	bne.n	800b7dc <xQueueGenericSend+0x5e>
 800b7d6:	f001 ff27 	bl	800d628 <ulSetInterruptMask>
 800b7da:	e7fe      	b.n	800b7da <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7dc:	f001 f9c4 	bl	800cb68 <xTaskGetSchedulerState>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d102      	bne.n	800b7ec <xQueueGenericSend+0x6e>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <xQueueGenericSend+0x72>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e000      	b.n	800b7f2 <xQueueGenericSend+0x74>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d102      	bne.n	800b7fc <xQueueGenericSend+0x7e>
 800b7f6:	f001 ff17 	bl	800d628 <ulSetInterruptMask>
 800b7fa:	e7fe      	b.n	800b7fa <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7fc:	f001 fde2 	bl	800d3c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b800:	6a3b      	ldr	r3, [r7, #32]
 800b802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b808:	429a      	cmp	r2, r3
 800b80a:	d302      	bcc.n	800b812 <xQueueGenericSend+0x94>
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d11d      	bne.n	800b84e <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b812:	683a      	ldr	r2, [r7, #0]
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	6a38      	ldr	r0, [r7, #32]
 800b818:	f000 f9a4 	bl	800bb64 <prvCopyDataToQueue>
 800b81c:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b81e:	6a3b      	ldr	r3, [r7, #32]
 800b820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00a      	beq.n	800b83c <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	3324      	adds	r3, #36	; 0x24
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 f806 	bl	800c83c <xTaskRemoveFromEventList>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d007      	beq.n	800b846 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b836:	f001 fdb3 	bl	800d3a0 <vPortYield>
 800b83a:	e004      	b.n	800b846 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b842:	f001 fdad 	bl	800d3a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b846:	f001 fdcf 	bl	800d3e8 <vPortExitCritical>
				return pdPASS;
 800b84a:	2301      	movs	r3, #1
 800b84c:	e05c      	b.n	800b908 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d103      	bne.n	800b85c <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b854:	f001 fdc8 	bl	800d3e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b858:	2300      	movs	r3, #0
 800b85a:	e055      	b.n	800b908 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d106      	bne.n	800b870 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b862:	f107 0314 	add.w	r3, r7, #20
 800b866:	4618      	mov	r0, r3
 800b868:	f001 f844 	bl	800c8f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b86c:	2301      	movs	r3, #1
 800b86e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b870:	f001 fdba 	bl	800d3e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b874:	f000 fdf0 	bl	800c458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b878:	f001 fda4 	bl	800d3c4 <vPortEnterCritical>
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b882:	b25b      	sxtb	r3, r3
 800b884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b888:	d103      	bne.n	800b892 <xQueueGenericSend+0x114>
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b898:	b25b      	sxtb	r3, r3
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d103      	bne.n	800b8a8 <xQueueGenericSend+0x12a>
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8a8:	f001 fd9e 	bl	800d3e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8ac:	1d3a      	adds	r2, r7, #4
 800b8ae:	f107 0314 	add.w	r3, r7, #20
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f001 f833 	bl	800c920 <xTaskCheckForTimeOut>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d11d      	bne.n	800b8fc <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8c0:	6a38      	ldr	r0, [r7, #32]
 800b8c2:	f000 fa47 	bl	800bd54 <prvIsQueueFull>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d011      	beq.n	800b8f0 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8cc:	6a3b      	ldr	r3, [r7, #32]
 800b8ce:	3310      	adds	r3, #16
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 ff71 	bl	800c7bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8da:	6a38      	ldr	r0, [r7, #32]
 800b8dc:	f000 f9d2 	bl	800bc84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8e0:	f000 fdc8 	bl	800c474 <xTaskResumeAll>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d188      	bne.n	800b7fc <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800b8ea:	f001 fd59 	bl	800d3a0 <vPortYield>
 800b8ee:	e785      	b.n	800b7fc <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b8f0:	6a38      	ldr	r0, [r7, #32]
 800b8f2:	f000 f9c7 	bl	800bc84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8f6:	f000 fdbd 	bl	800c474 <xTaskResumeAll>
 800b8fa:	e77f      	b.n	800b7fc <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b8fc:	6a38      	ldr	r0, [r7, #32]
 800b8fe:	f000 f9c1 	bl	800bc84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b902:	f000 fdb7 	bl	800c474 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b906:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3728      	adds	r7, #40	; 0x28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b08a      	sub	sp, #40	; 0x28
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
 800b91c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800b922:	6a3b      	ldr	r3, [r7, #32]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <xQueueGenericSendFromISR+0x1e>
 800b928:	f001 fe7e 	bl	800d628 <ulSetInterruptMask>
 800b92c:	e7fe      	b.n	800b92c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d103      	bne.n	800b93c <xQueueGenericSendFromISR+0x2c>
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <xQueueGenericSendFromISR+0x30>
 800b93c:	2301      	movs	r3, #1
 800b93e:	e000      	b.n	800b942 <xQueueGenericSendFromISR+0x32>
 800b940:	2300      	movs	r3, #0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d102      	bne.n	800b94c <xQueueGenericSendFromISR+0x3c>
 800b946:	f001 fe6f 	bl	800d628 <ulSetInterruptMask>
 800b94a:	e7fe      	b.n	800b94a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d103      	bne.n	800b95a <xQueueGenericSendFromISR+0x4a>
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b956:	2b01      	cmp	r3, #1
 800b958:	d101      	bne.n	800b95e <xQueueGenericSendFromISR+0x4e>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <xQueueGenericSendFromISR+0x50>
 800b95e:	2300      	movs	r3, #0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <xQueueGenericSendFromISR+0x5a>
 800b964:	f001 fe60 	bl	800d628 <ulSetInterruptMask>
 800b968:	e7fe      	b.n	800b968 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b96a:	f001 fe5d 	bl	800d628 <ulSetInterruptMask>
 800b96e:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b978:	429a      	cmp	r2, r3
 800b97a:	d302      	bcc.n	800b982 <xQueueGenericSendFromISR+0x72>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d12d      	bne.n	800b9de <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b982:	6a3b      	ldr	r3, [r7, #32]
 800b984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b988:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	68b9      	ldr	r1, [r7, #8]
 800b994:	6a38      	ldr	r0, [r7, #32]
 800b996:	f000 f8e5 	bl	800bb64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b99a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a2:	d112      	bne.n	800b9ca <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d015      	beq.n	800b9d8 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9ac:	6a3b      	ldr	r3, [r7, #32]
 800b9ae:	3324      	adds	r3, #36	; 0x24
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 ff43 	bl	800c83c <xTaskRemoveFromEventList>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00d      	beq.n	800b9d8 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00a      	beq.n	800b9d8 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	601a      	str	r2, [r3, #0]
 800b9c8:	e006      	b.n	800b9d8 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9ca:	7efb      	ldrb	r3, [r7, #27]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	b25a      	sxtb	r2, r3
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800b9dc:	e001      	b.n	800b9e2 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b9e2:	69f8      	ldr	r0, [r7, #28]
 800b9e4:	f001 fe2d 	bl	800d642 <vClearInterruptMask>

	return xReturn;
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3728      	adds	r7, #40	; 0x28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b08a      	sub	sp, #40	; 0x28
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	60b9      	str	r1, [r7, #8]
 800b9fc:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d102      	bne.n	800ba12 <xQueueReceive+0x20>
 800ba0c:	f001 fe0c 	bl	800d628 <ulSetInterruptMask>
 800ba10:	e7fe      	b.n	800ba10 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d103      	bne.n	800ba20 <xQueueReceive+0x2e>
 800ba18:	6a3b      	ldr	r3, [r7, #32]
 800ba1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <xQueueReceive+0x32>
 800ba20:	2301      	movs	r3, #1
 800ba22:	e000      	b.n	800ba26 <xQueueReceive+0x34>
 800ba24:	2300      	movs	r3, #0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d102      	bne.n	800ba30 <xQueueReceive+0x3e>
 800ba2a:	f001 fdfd 	bl	800d628 <ulSetInterruptMask>
 800ba2e:	e7fe      	b.n	800ba2e <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba30:	f001 f89a 	bl	800cb68 <xTaskGetSchedulerState>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d102      	bne.n	800ba40 <xQueueReceive+0x4e>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <xQueueReceive+0x52>
 800ba40:	2301      	movs	r3, #1
 800ba42:	e000      	b.n	800ba46 <xQueueReceive+0x54>
 800ba44:	2300      	movs	r3, #0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <xQueueReceive+0x5e>
 800ba4a:	f001 fded 	bl	800d628 <ulSetInterruptMask>
 800ba4e:	e7fe      	b.n	800ba4e <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba50:	f001 fcb8 	bl	800d3c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba58:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d019      	beq.n	800ba94 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba60:	68b9      	ldr	r1, [r7, #8]
 800ba62:	6a38      	ldr	r0, [r7, #32]
 800ba64:	f000 f8e8 	bl	800bc38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	1e5a      	subs	r2, r3, #1
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba70:	6a3b      	ldr	r3, [r7, #32]
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d009      	beq.n	800ba8c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba78:	6a3b      	ldr	r3, [r7, #32]
 800ba7a:	3310      	adds	r3, #16
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 fedd 	bl	800c83c <xTaskRemoveFromEventList>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba88:	f001 fc8a 	bl	800d3a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba8c:	f001 fcac 	bl	800d3e8 <vPortExitCritical>
				return pdPASS;
 800ba90:	2301      	movs	r3, #1
 800ba92:	e063      	b.n	800bb5c <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d103      	bne.n	800baa2 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba9a:	f001 fca5 	bl	800d3e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	e05c      	b.n	800bb5c <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d106      	bne.n	800bab6 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800baa8:	f107 0314 	add.w	r3, r7, #20
 800baac:	4618      	mov	r0, r3
 800baae:	f000 ff21 	bl	800c8f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bab2:	2301      	movs	r3, #1
 800bab4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bab6:	f001 fc97 	bl	800d3e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800baba:	f000 fccd 	bl	800c458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800babe:	f001 fc81 	bl	800d3c4 <vPortEnterCritical>
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bac8:	b25b      	sxtb	r3, r3
 800baca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bace:	d103      	bne.n	800bad8 <xQueueReceive+0xe6>
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bad8:	6a3b      	ldr	r3, [r7, #32]
 800bada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bade:	b25b      	sxtb	r3, r3
 800bae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae4:	d103      	bne.n	800baee <xQueueReceive+0xfc>
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baee:	f001 fc7b 	bl	800d3e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800baf2:	1d3a      	adds	r2, r7, #4
 800baf4:	f107 0314 	add.w	r3, r7, #20
 800baf8:	4611      	mov	r1, r2
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 ff10 	bl	800c920 <xTaskCheckForTimeOut>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d11d      	bne.n	800bb42 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb06:	6a38      	ldr	r0, [r7, #32]
 800bb08:	f000 f90e 	bl	800bd28 <prvIsQueueEmpty>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d011      	beq.n	800bb36 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	3324      	adds	r3, #36	; 0x24
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	4611      	mov	r1, r2
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 fe4e 	bl	800c7bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb20:	6a38      	ldr	r0, [r7, #32]
 800bb22:	f000 f8af 	bl	800bc84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb26:	f000 fca5 	bl	800c474 <xTaskResumeAll>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d18f      	bne.n	800ba50 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 800bb30:	f001 fc36 	bl	800d3a0 <vPortYield>
 800bb34:	e78c      	b.n	800ba50 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bb36:	6a38      	ldr	r0, [r7, #32]
 800bb38:	f000 f8a4 	bl	800bc84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb3c:	f000 fc9a 	bl	800c474 <xTaskResumeAll>
 800bb40:	e786      	b.n	800ba50 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb42:	6a38      	ldr	r0, [r7, #32]
 800bb44:	f000 f89e 	bl	800bc84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb48:	f000 fc94 	bl	800c474 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb4c:	6a38      	ldr	r0, [r7, #32]
 800bb4e:	f000 f8eb 	bl	800bd28 <prvIsQueueEmpty>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f43f af7b 	beq.w	800ba50 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3728      	adds	r7, #40	; 0x28
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb70:	2300      	movs	r3, #0
 800bb72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10d      	bne.n	800bb9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d14d      	bne.n	800bc26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f001 f808 	bl	800cba4 <xTaskPriorityDisinherit>
 800bb94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	609a      	str	r2, [r3, #8]
 800bb9c:	e043      	b.n	800bc26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d119      	bne.n	800bbd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6858      	ldr	r0, [r3, #4]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbac:	461a      	mov	r2, r3
 800bbae:	68b9      	ldr	r1, [r7, #8]
 800bbb0:	f001 ffbe 	bl	800db30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbc:	441a      	add	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d32b      	bcc.n	800bc26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	605a      	str	r2, [r3, #4]
 800bbd6:	e026      	b.n	800bc26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	68d8      	ldr	r0, [r3, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	68b9      	ldr	r1, [r7, #8]
 800bbe4:	f001 ffa4 	bl	800db30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	68da      	ldr	r2, [r3, #12]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf0:	425b      	negs	r3, r3
 800bbf2:	441a      	add	r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	68da      	ldr	r2, [r3, #12]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d207      	bcs.n	800bc14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	689a      	ldr	r2, [r3, #8]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0c:	425b      	negs	r3, r3
 800bc0e:	441a      	add	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d105      	bne.n	800bc26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	3b01      	subs	r3, #1
 800bc24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	1c5a      	adds	r2, r3, #1
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc2e:	697b      	ldr	r3, [r7, #20]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d018      	beq.n	800bc7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	68da      	ldr	r2, [r3, #12]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc52:	441a      	add	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	68da      	ldr	r2, [r3, #12]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d303      	bcc.n	800bc6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68d9      	ldr	r1, [r3, #12]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc74:	461a      	mov	r2, r3
 800bc76:	6838      	ldr	r0, [r7, #0]
 800bc78:	f001 ff5a 	bl	800db30 <memcpy>
	}
}
 800bc7c:	bf00      	nop
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc8c:	f001 fb9a 	bl	800d3c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc98:	e011      	b.n	800bcbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d012      	beq.n	800bcc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	3324      	adds	r3, #36	; 0x24
 800bca6:	4618      	mov	r0, r3
 800bca8:	f000 fdc8 	bl	800c83c <xTaskRemoveFromEventList>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bcb2:	f000 fe87 	bl	800c9c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bcb6:	7bfb      	ldrb	r3, [r7, #15]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	dce9      	bgt.n	800bc9a <prvUnlockQueue+0x16>
 800bcc6:	e000      	b.n	800bcca <prvUnlockQueue+0x46>
					break;
 800bcc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	22ff      	movs	r2, #255	; 0xff
 800bcce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bcd2:	f001 fb89 	bl	800d3e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bcd6:	f001 fb75 	bl	800d3c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bce0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bce2:	e011      	b.n	800bd08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	691b      	ldr	r3, [r3, #16]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d012      	beq.n	800bd12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	3310      	adds	r3, #16
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f000 fda3 	bl	800c83c <xTaskRemoveFromEventList>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d001      	beq.n	800bd00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bcfc:	f000 fe62 	bl	800c9c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dce9      	bgt.n	800bce4 <prvUnlockQueue+0x60>
 800bd10:	e000      	b.n	800bd14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	22ff      	movs	r2, #255	; 0xff
 800bd18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd1c:	f001 fb64 	bl	800d3e8 <vPortExitCritical>
}
 800bd20:	bf00      	nop
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd30:	f001 fb48 	bl	800d3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d102      	bne.n	800bd42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	e001      	b.n	800bd46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd42:	2300      	movs	r3, #0
 800bd44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd46:	f001 fb4f 	bl	800d3e8 <vPortExitCritical>

	return xReturn;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd5c:	f001 fb32 	bl	800d3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d102      	bne.n	800bd72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	60fb      	str	r3, [r7, #12]
 800bd70:	e001      	b.n	800bd76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd76:	f001 fb37 	bl	800d3e8 <vPortExitCritical>

	return xReturn;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]
 800bd92:	e014      	b.n	800bdbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd94:	4a0f      	ldr	r2, [pc, #60]	; (800bdd4 <vQueueAddToRegistry+0x50>)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10b      	bne.n	800bdb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bda0:	490c      	ldr	r1, [pc, #48]	; (800bdd4 <vQueueAddToRegistry+0x50>)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bdaa:	4a0a      	ldr	r2, [pc, #40]	; (800bdd4 <vQueueAddToRegistry+0x50>)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	4413      	add	r3, r2
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bdb6:	e006      	b.n	800bdc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	60fb      	str	r3, [r7, #12]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2b07      	cmp	r3, #7
 800bdc2:	d9e7      	bls.n	800bd94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bdc4:	bf00      	nop
 800bdc6:	bf00      	nop
 800bdc8:	3714      	adds	r7, #20
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	20001044 	.word	0x20001044

0800bdd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bde8:	f001 faec 	bl	800d3c4 <vPortEnterCritical>
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdf2:	b25b      	sxtb	r3, r3
 800bdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf8:	d103      	bne.n	800be02 <vQueueWaitForMessageRestricted+0x2a>
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be08:	b25b      	sxtb	r3, r3
 800be0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0e:	d103      	bne.n	800be18 <vQueueWaitForMessageRestricted+0x40>
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be18:	f001 fae6 	bl	800d3e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be20:	2b00      	cmp	r3, #0
 800be22:	d106      	bne.n	800be32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	3324      	adds	r3, #36	; 0x24
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	68b9      	ldr	r1, [r7, #8]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 fce1 	bl	800c7f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be32:	6978      	ldr	r0, [r7, #20]
 800be34:	f7ff ff26 	bl	800bc84 <prvUnlockQueue>
	}
 800be38:	bf00      	nop
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be40:	b580      	push	{r7, lr}
 800be42:	b08c      	sub	sp, #48	; 0x30
 800be44:	af04      	add	r7, sp, #16
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d102      	bne.n	800be5a <xTaskCreateStatic+0x1a>
 800be54:	f001 fbe8 	bl	800d628 <ulSetInterruptMask>
 800be58:	e7fe      	b.n	800be58 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d102      	bne.n	800be66 <xTaskCreateStatic+0x26>
 800be60:	f001 fbe2 	bl	800d628 <ulSetInterruptMask>
 800be64:	e7fe      	b.n	800be64 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be66:	235c      	movs	r3, #92	; 0x5c
 800be68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2b5c      	cmp	r3, #92	; 0x5c
 800be6e:	d002      	beq.n	800be76 <xTaskCreateStatic+0x36>
 800be70:	f001 fbda 	bl	800d628 <ulSetInterruptMask>
 800be74:	e7fe      	b.n	800be74 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be76:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d01e      	beq.n	800bebc <xTaskCreateStatic+0x7c>
 800be7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be80:	2b00      	cmp	r3, #0
 800be82:	d01b      	beq.n	800bebc <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	2202      	movs	r2, #2
 800be92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be96:	2300      	movs	r3, #0
 800be98:	9303      	str	r3, [sp, #12]
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	9302      	str	r3, [sp, #8]
 800be9e:	f107 0318 	add.w	r3, r7, #24
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	68b9      	ldr	r1, [r7, #8]
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f000 f850 	bl	800bf54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800beb4:	69f8      	ldr	r0, [r7, #28]
 800beb6:	f000 f8d7 	bl	800c068 <prvAddNewTaskToReadyList>
 800beba:	e001      	b.n	800bec0 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800bebc:	2300      	movs	r3, #0
 800bebe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bec0:	69bb      	ldr	r3, [r7, #24]
	}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3720      	adds	r7, #32
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800beca:	b580      	push	{r7, lr}
 800becc:	b08c      	sub	sp, #48	; 0x30
 800bece:	af04      	add	r7, sp, #16
 800bed0:	60f8      	str	r0, [r7, #12]
 800bed2:	60b9      	str	r1, [r7, #8]
 800bed4:	603b      	str	r3, [r7, #0]
 800bed6:	4613      	mov	r3, r2
 800bed8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800beda:	88fb      	ldrh	r3, [r7, #6]
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4618      	mov	r0, r3
 800bee0:	f001 fc02 	bl	800d6e8 <pvPortMalloc>
 800bee4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00e      	beq.n	800bf0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800beec:	205c      	movs	r0, #92	; 0x5c
 800beee:	f001 fbfb 	bl	800d6e8 <pvPortMalloc>
 800bef2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d003      	beq.n	800bf02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	697a      	ldr	r2, [r7, #20]
 800befe:	631a      	str	r2, [r3, #48]	; 0x30
 800bf00:	e005      	b.n	800bf0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf02:	6978      	ldr	r0, [r7, #20]
 800bf04:	f001 fca4 	bl	800d850 <vPortFree>
 800bf08:	e001      	b.n	800bf0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d017      	beq.n	800bf44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf1c:	88fa      	ldrh	r2, [r7, #6]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	9303      	str	r3, [sp, #12]
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	9302      	str	r3, [sp, #8]
 800bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf28:	9301      	str	r3, [sp, #4]
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	68b9      	ldr	r1, [r7, #8]
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 f80e 	bl	800bf54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf38:	69f8      	ldr	r0, [r7, #28]
 800bf3a:	f000 f895 	bl	800c068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	61bb      	str	r3, [r7, #24]
 800bf42:	e002      	b.n	800bf4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf44:	f04f 33ff 	mov.w	r3, #4294967295
 800bf48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf4a:	69bb      	ldr	r3, [r7, #24]
	}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3720      	adds	r7, #32
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	21a5      	movs	r1, #165	; 0xa5
 800bf6e:	f001 fdab 	bl	800dac8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	f023 0307 	bic.w	r3, r3, #7
 800bf8a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	f003 0307 	and.w	r3, r3, #7
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d002      	beq.n	800bf9c <prvInitialiseNewTask+0x48>
 800bf96:	f001 fb47 	bl	800d628 <ulSetInterruptMask>
 800bf9a:	e7fe      	b.n	800bf9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d01f      	beq.n	800bfe2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	617b      	str	r3, [r7, #20]
 800bfa6:	e012      	b.n	800bfce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	4413      	add	r3, r2
 800bfae:	7819      	ldrb	r1, [r3, #0]
 800bfb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	3334      	adds	r3, #52	; 0x34
 800bfb8:	460a      	mov	r2, r1
 800bfba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d006      	beq.n	800bfd6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	617b      	str	r3, [r7, #20]
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2b0f      	cmp	r3, #15
 800bfd2:	d9e9      	bls.n	800bfa8 <prvInitialiseNewTask+0x54>
 800bfd4:	e000      	b.n	800bfd8 <prvInitialiseNewTask+0x84>
			{
				break;
 800bfd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfe0:	e003      	b.n	800bfea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	2b37      	cmp	r3, #55	; 0x37
 800bfee:	d901      	bls.n	800bff4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bff0:	2337      	movs	r3, #55	; 0x37
 800bff2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	6a3a      	ldr	r2, [r7, #32]
 800bff8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	6a3a      	ldr	r2, [r7, #32]
 800bffe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c002:	2200      	movs	r2, #0
 800c004:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c008:	3304      	adds	r3, #4
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff fa58 	bl	800b4c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	3318      	adds	r3, #24
 800c014:	4618      	mov	r0, r3
 800c016:	f7ff fa53 	bl	800b4c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c01e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c020:	6a3b      	ldr	r3, [r7, #32]
 800c022:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c028:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c02e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c032:	2200      	movs	r2, #0
 800c034:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800c03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c040:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	6938      	ldr	r0, [r7, #16]
 800c048:	f001 fa18 	bl	800d47c <pxPortInitialiseStack>
 800c04c:	4602      	mov	r2, r0
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c05c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c05e:	bf00      	nop
 800c060:	3718      	adds	r7, #24
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
	...

0800c068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c070:	f001 f9a8 	bl	800d3c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c074:	4b2a      	ldr	r3, [pc, #168]	; (800c120 <prvAddNewTaskToReadyList+0xb8>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3301      	adds	r3, #1
 800c07a:	4a29      	ldr	r2, [pc, #164]	; (800c120 <prvAddNewTaskToReadyList+0xb8>)
 800c07c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c07e:	4b29      	ldr	r3, [pc, #164]	; (800c124 <prvAddNewTaskToReadyList+0xbc>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d109      	bne.n	800c09a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c086:	4a27      	ldr	r2, [pc, #156]	; (800c124 <prvAddNewTaskToReadyList+0xbc>)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c08c:	4b24      	ldr	r3, [pc, #144]	; (800c120 <prvAddNewTaskToReadyList+0xb8>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d110      	bne.n	800c0b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c094:	f000 fcb2 	bl	800c9fc <prvInitialiseTaskLists>
 800c098:	e00d      	b.n	800c0b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c09a:	4b23      	ldr	r3, [pc, #140]	; (800c128 <prvAddNewTaskToReadyList+0xc0>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d109      	bne.n	800c0b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0a2:	4b20      	ldr	r3, [pc, #128]	; (800c124 <prvAddNewTaskToReadyList+0xbc>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d802      	bhi.n	800c0b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0b0:	4a1c      	ldr	r2, [pc, #112]	; (800c124 <prvAddNewTaskToReadyList+0xbc>)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0b6:	4b1d      	ldr	r3, [pc, #116]	; (800c12c <prvAddNewTaskToReadyList+0xc4>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	4a1b      	ldr	r2, [pc, #108]	; (800c12c <prvAddNewTaskToReadyList+0xc4>)
 800c0be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c0c0:	4b1a      	ldr	r3, [pc, #104]	; (800c12c <prvAddNewTaskToReadyList+0xc4>)
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0cc:	4b18      	ldr	r3, [pc, #96]	; (800c130 <prvAddNewTaskToReadyList+0xc8>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d903      	bls.n	800c0dc <prvAddNewTaskToReadyList+0x74>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d8:	4a15      	ldr	r2, [pc, #84]	; (800c130 <prvAddNewTaskToReadyList+0xc8>)
 800c0da:	6013      	str	r3, [r2, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4413      	add	r3, r2
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	4a12      	ldr	r2, [pc, #72]	; (800c134 <prvAddNewTaskToReadyList+0xcc>)
 800c0ea:	441a      	add	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4610      	mov	r0, r2
 800c0f4:	f7ff f9f1 	bl	800b4da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c0f8:	f001 f976 	bl	800d3e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <prvAddNewTaskToReadyList+0xc0>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d008      	beq.n	800c116 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c104:	4b07      	ldr	r3, [pc, #28]	; (800c124 <prvAddNewTaskToReadyList+0xbc>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10e:	429a      	cmp	r2, r3
 800c110:	d201      	bcs.n	800c116 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c112:	f001 f945 	bl	800d3a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c116:	bf00      	nop
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20001558 	.word	0x20001558
 800c124:	20001084 	.word	0x20001084
 800c128:	20001564 	.word	0x20001564
 800c12c:	20001574 	.word	0x20001574
 800c130:	20001560 	.word	0x20001560
 800c134:	20001088 	.word	0x20001088

0800c138 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c142:	2300      	movs	r3, #0
 800c144:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d102      	bne.n	800c152 <vTaskDelayUntil+0x1a>
 800c14c:	f001 fa6c 	bl	800d628 <ulSetInterruptMask>
 800c150:	e7fe      	b.n	800c150 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d102      	bne.n	800c15e <vTaskDelayUntil+0x26>
 800c158:	f001 fa66 	bl	800d628 <ulSetInterruptMask>
 800c15c:	e7fe      	b.n	800c15c <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 800c15e:	4b23      	ldr	r3, [pc, #140]	; (800c1ec <vTaskDelayUntil+0xb4>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d002      	beq.n	800c16c <vTaskDelayUntil+0x34>
 800c166:	f001 fa5f 	bl	800d628 <ulSetInterruptMask>
 800c16a:	e7fe      	b.n	800c16a <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 800c16c:	f000 f974 	bl	800c458 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c170:	4b1f      	ldr	r3, [pc, #124]	; (800c1f0 <vTaskDelayUntil+0xb8>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	4413      	add	r3, r2
 800c17e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	429a      	cmp	r2, r3
 800c188:	d20b      	bcs.n	800c1a2 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	429a      	cmp	r2, r3
 800c192:	d211      	bcs.n	800c1b8 <vTaskDelayUntil+0x80>
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d90d      	bls.n	800c1b8 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 800c19c:	2301      	movs	r3, #1
 800c19e:	617b      	str	r3, [r7, #20]
 800c1a0:	e00a      	b.n	800c1b8 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d303      	bcc.n	800c1b4 <vTaskDelayUntil+0x7c>
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d901      	bls.n	800c1b8 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d006      	beq.n	800c1d2 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	1ad3      	subs	r3, r2, r3
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 fd47 	bl	800cc60 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c1d2:	f000 f94f 	bl	800c474 <xTaskResumeAll>
 800c1d6:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 800c1de:	f001 f8df 	bl	800d3a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1e2:	bf00      	nop
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	20001580 	.word	0x20001580
 800c1f0:	2000155c 	.word	0x2000155c

0800c1f4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c1fc:	f001 f8e2 	bl	800d3c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d102      	bne.n	800c20c <vTaskSuspend+0x18>
 800c206:	4b29      	ldr	r3, [pc, #164]	; (800c2ac <vTaskSuspend+0xb8>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	e000      	b.n	800c20e <vTaskSuspend+0x1a>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	3304      	adds	r3, #4
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff f9bd 	bl	800b594 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d004      	beq.n	800c22c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3318      	adds	r3, #24
 800c226:	4618      	mov	r0, r3
 800c228:	f7ff f9b4 	bl	800b594 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3304      	adds	r3, #4
 800c230:	4619      	mov	r1, r3
 800c232:	481f      	ldr	r0, [pc, #124]	; (800c2b0 <vTaskSuspend+0xbc>)
 800c234:	f7ff f951 	bl	800b4da <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b01      	cmp	r3, #1
 800c242:	d103      	bne.n	800c24c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c24c:	f001 f8cc 	bl	800d3e8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c250:	4b18      	ldr	r3, [pc, #96]	; (800c2b4 <vTaskSuspend+0xc0>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d005      	beq.n	800c264 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c258:	f001 f8b4 	bl	800d3c4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c25c:	f000 fc64 	bl	800cb28 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c260:	f001 f8c2 	bl	800d3e8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c264:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <vTaskSuspend+0xb8>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d119      	bne.n	800c2a2 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 800c26e:	4b11      	ldr	r3, [pc, #68]	; (800c2b4 <vTaskSuspend+0xc0>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d009      	beq.n	800c28a <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c276:	4b10      	ldr	r3, [pc, #64]	; (800c2b8 <vTaskSuspend+0xc4>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <vTaskSuspend+0x90>
 800c27e:	f001 f9d3 	bl	800d628 <ulSetInterruptMask>
 800c282:	e7fe      	b.n	800c282 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 800c284:	f001 f88c 	bl	800d3a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c288:	e00b      	b.n	800c2a2 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c28a:	4b09      	ldr	r3, [pc, #36]	; (800c2b0 <vTaskSuspend+0xbc>)
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	4b0b      	ldr	r3, [pc, #44]	; (800c2bc <vTaskSuspend+0xc8>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	429a      	cmp	r2, r3
 800c294:	d103      	bne.n	800c29e <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 800c296:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <vTaskSuspend+0xb8>)
 800c298:	2200      	movs	r2, #0
 800c29a:	601a      	str	r2, [r3, #0]
	}
 800c29c:	e001      	b.n	800c2a2 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 800c29e:	f000 fa39 	bl	800c714 <vTaskSwitchContext>
	}
 800c2a2:	bf00      	nop
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20001084 	.word	0x20001084
 800c2b0:	20001544 	.word	0x20001544
 800c2b4:	20001564 	.word	0x20001564
 800c2b8:	20001580 	.word	0x20001580
 800c2bc:	20001558 	.word	0x20001558

0800c2c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <prvTaskIsTaskSuspended+0x1c>
 800c2d6:	f001 f9a7 	bl	800d628 <ulSetInterruptMask>
 800c2da:	e7fe      	b.n	800c2da <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	695b      	ldr	r3, [r3, #20]
 800c2e0:	4a09      	ldr	r2, [pc, #36]	; (800c308 <prvTaskIsTaskSuspended+0x48>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d10a      	bne.n	800c2fc <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ea:	4a08      	ldr	r2, [pc, #32]	; (800c30c <prvTaskIsTaskSuspended+0x4c>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d005      	beq.n	800c2fc <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20001544 	.word	0x20001544
 800c30c:	20001518 	.word	0x20001518

0800c310 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d102      	bne.n	800c328 <vTaskResume+0x18>
 800c322:	f001 f981 	bl	800d628 <ulSetInterruptMask>
 800c326:	e7fe      	b.n	800c326 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c328:	4b1d      	ldr	r3, [pc, #116]	; (800c3a0 <vTaskResume+0x90>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d032      	beq.n	800c398 <vTaskResume+0x88>
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d02f      	beq.n	800c398 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 800c338:	f001 f844 	bl	800d3c4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f7ff ffbf 	bl	800c2c0 <prvTaskIsTaskSuspended>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d025      	beq.n	800c394 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3304      	adds	r3, #4
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7ff f921 	bl	800b594 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c356:	4b13      	ldr	r3, [pc, #76]	; (800c3a4 <vTaskResume+0x94>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d903      	bls.n	800c366 <vTaskResume+0x56>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c362:	4a10      	ldr	r2, [pc, #64]	; (800c3a4 <vTaskResume+0x94>)
 800c364:	6013      	str	r3, [r2, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c36a:	4613      	mov	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4413      	add	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	4a0d      	ldr	r2, [pc, #52]	; (800c3a8 <vTaskResume+0x98>)
 800c374:	441a      	add	r2, r3
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3304      	adds	r3, #4
 800c37a:	4619      	mov	r1, r3
 800c37c:	4610      	mov	r0, r2
 800c37e:	f7ff f8ac 	bl	800b4da <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c386:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <vTaskResume+0x90>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d301      	bcc.n	800c394 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c390:	f001 f806 	bl	800d3a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c394:	f001 f828 	bl	800d3e8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c398:	bf00      	nop
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	20001084 	.word	0x20001084
 800c3a4:	20001560 	.word	0x20001560
 800c3a8:	20001088 	.word	0x20001088

0800c3ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c3ba:	463a      	mov	r2, r7
 800c3bc:	1d39      	adds	r1, r7, #4
 800c3be:	f107 0308 	add.w	r3, r7, #8
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff f828 	bl	800b418 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68ba      	ldr	r2, [r7, #8]
 800c3ce:	9202      	str	r2, [sp, #8]
 800c3d0:	9301      	str	r3, [sp, #4]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	460a      	mov	r2, r1
 800c3da:	4919      	ldr	r1, [pc, #100]	; (800c440 <vTaskStartScheduler+0x94>)
 800c3dc:	4819      	ldr	r0, [pc, #100]	; (800c444 <vTaskStartScheduler+0x98>)
 800c3de:	f7ff fd2f 	bl	800be40 <xTaskCreateStatic>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	4a18      	ldr	r2, [pc, #96]	; (800c448 <vTaskStartScheduler+0x9c>)
 800c3e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c3e8:	4b17      	ldr	r3, [pc, #92]	; (800c448 <vTaskStartScheduler+0x9c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	e001      	b.n	800c3fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d102      	bne.n	800c406 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c400:	f000 fc82 	bl	800cd08 <xTimerCreateTimerTask>
 800c404:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d10e      	bne.n	800c42a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800c40c:	f001 f90c 	bl	800d628 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c410:	4b0e      	ldr	r3, [pc, #56]	; (800c44c <vTaskStartScheduler+0xa0>)
 800c412:	f04f 32ff 	mov.w	r2, #4294967295
 800c416:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c418:	4b0d      	ldr	r3, [pc, #52]	; (800c450 <vTaskStartScheduler+0xa4>)
 800c41a:	2201      	movs	r2, #1
 800c41c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c41e:	4b0d      	ldr	r3, [pc, #52]	; (800c454 <vTaskStartScheduler+0xa8>)
 800c420:	2200      	movs	r2, #0
 800c422:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c424:	f001 f8b4 	bl	800d590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c428:	e006      	b.n	800c438 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c430:	d102      	bne.n	800c438 <vTaskStartScheduler+0x8c>
 800c432:	f001 f8f9 	bl	800d628 <ulSetInterruptMask>
 800c436:	e7fe      	b.n	800c436 <vTaskStartScheduler+0x8a>
}
 800c438:	bf00      	nop
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	0800e740 	.word	0x0800e740
 800c444:	0800c9dd 	.word	0x0800c9dd
 800c448:	2000157c 	.word	0x2000157c
 800c44c:	20001578 	.word	0x20001578
 800c450:	20001564 	.word	0x20001564
 800c454:	2000155c 	.word	0x2000155c

0800c458 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c458:	b480      	push	{r7}
 800c45a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c45c:	4b04      	ldr	r3, [pc, #16]	; (800c470 <vTaskSuspendAll+0x18>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	3301      	adds	r3, #1
 800c462:	4a03      	ldr	r2, [pc, #12]	; (800c470 <vTaskSuspendAll+0x18>)
 800c464:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c466:	bf00      	nop
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	20001580 	.word	0x20001580

0800c474 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c47e:	2300      	movs	r3, #0
 800c480:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c482:	4b3b      	ldr	r3, [pc, #236]	; (800c570 <xTaskResumeAll+0xfc>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d102      	bne.n	800c490 <xTaskResumeAll+0x1c>
 800c48a:	f001 f8cd 	bl	800d628 <ulSetInterruptMask>
 800c48e:	e7fe      	b.n	800c48e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c490:	f000 ff98 	bl	800d3c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c494:	4b36      	ldr	r3, [pc, #216]	; (800c570 <xTaskResumeAll+0xfc>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	3b01      	subs	r3, #1
 800c49a:	4a35      	ldr	r2, [pc, #212]	; (800c570 <xTaskResumeAll+0xfc>)
 800c49c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c49e:	4b34      	ldr	r3, [pc, #208]	; (800c570 <xTaskResumeAll+0xfc>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d15c      	bne.n	800c560 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c4a6:	4b33      	ldr	r3, [pc, #204]	; (800c574 <xTaskResumeAll+0x100>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d058      	beq.n	800c560 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4ae:	e02f      	b.n	800c510 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4b0:	4b31      	ldr	r3, [pc, #196]	; (800c578 <xTaskResumeAll+0x104>)
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	3318      	adds	r3, #24
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7ff f869 	bl	800b594 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7ff f864 	bl	800b594 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d0:	4b2a      	ldr	r3, [pc, #168]	; (800c57c <xTaskResumeAll+0x108>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d903      	bls.n	800c4e0 <xTaskResumeAll+0x6c>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	4a27      	ldr	r2, [pc, #156]	; (800c57c <xTaskResumeAll+0x108>)
 800c4de:	6013      	str	r3, [r2, #0]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4413      	add	r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4a24      	ldr	r2, [pc, #144]	; (800c580 <xTaskResumeAll+0x10c>)
 800c4ee:	441a      	add	r2, r3
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	f7fe ffef 	bl	800b4da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c500:	4b20      	ldr	r3, [pc, #128]	; (800c584 <xTaskResumeAll+0x110>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c506:	429a      	cmp	r2, r3
 800c508:	d302      	bcc.n	800c510 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800c50a:	4b1f      	ldr	r3, [pc, #124]	; (800c588 <xTaskResumeAll+0x114>)
 800c50c:	2201      	movs	r2, #1
 800c50e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c510:	4b19      	ldr	r3, [pc, #100]	; (800c578 <xTaskResumeAll+0x104>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1cb      	bne.n	800c4b0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d001      	beq.n	800c522 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c51e:	f000 fb03 	bl	800cb28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c522:	4b1a      	ldr	r3, [pc, #104]	; (800c58c <xTaskResumeAll+0x118>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d010      	beq.n	800c550 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c52e:	f000 f83f 	bl	800c5b0 <xTaskIncrementTick>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 800c538:	4b13      	ldr	r3, [pc, #76]	; (800c588 <xTaskResumeAll+0x114>)
 800c53a:	2201      	movs	r2, #1
 800c53c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	3b01      	subs	r3, #1
 800c542:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1f1      	bne.n	800c52e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800c54a:	4b10      	ldr	r3, [pc, #64]	; (800c58c <xTaskResumeAll+0x118>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c550:	4b0d      	ldr	r3, [pc, #52]	; (800c588 <xTaskResumeAll+0x114>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d003      	beq.n	800c560 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c558:	2301      	movs	r3, #1
 800c55a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c55c:	f000 ff20 	bl	800d3a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c560:	f000 ff42 	bl	800d3e8 <vPortExitCritical>

	return xAlreadyYielded;
 800c564:	68bb      	ldr	r3, [r7, #8]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	20001580 	.word	0x20001580
 800c574:	20001558 	.word	0x20001558
 800c578:	20001518 	.word	0x20001518
 800c57c:	20001560 	.word	0x20001560
 800c580:	20001088 	.word	0x20001088
 800c584:	20001084 	.word	0x20001084
 800c588:	2000156c 	.word	0x2000156c
 800c58c:	20001568 	.word	0x20001568

0800c590 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c596:	4b05      	ldr	r3, [pc, #20]	; (800c5ac <xTaskGetTickCount+0x1c>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c59c:	687b      	ldr	r3, [r7, #4]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	2000155c 	.word	0x2000155c

0800c5b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5ba:	4b4b      	ldr	r3, [pc, #300]	; (800c6e8 <xTaskIncrementTick+0x138>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f040 8087 	bne.w	800c6d2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c5c4:	4b49      	ldr	r3, [pc, #292]	; (800c6ec <xTaskIncrementTick+0x13c>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5cc:	4a47      	ldr	r2, [pc, #284]	; (800c6ec <xTaskIncrementTick+0x13c>)
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d118      	bne.n	800c60a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5d8:	4b45      	ldr	r3, [pc, #276]	; (800c6f0 <xTaskIncrementTick+0x140>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d002      	beq.n	800c5e8 <xTaskIncrementTick+0x38>
 800c5e2:	f001 f821 	bl	800d628 <ulSetInterruptMask>
 800c5e6:	e7fe      	b.n	800c5e6 <xTaskIncrementTick+0x36>
 800c5e8:	4b41      	ldr	r3, [pc, #260]	; (800c6f0 <xTaskIncrementTick+0x140>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	60fb      	str	r3, [r7, #12]
 800c5ee:	4b41      	ldr	r3, [pc, #260]	; (800c6f4 <xTaskIncrementTick+0x144>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a3f      	ldr	r2, [pc, #252]	; (800c6f0 <xTaskIncrementTick+0x140>)
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	4a3f      	ldr	r2, [pc, #252]	; (800c6f4 <xTaskIncrementTick+0x144>)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6013      	str	r3, [r2, #0]
 800c5fc:	4b3e      	ldr	r3, [pc, #248]	; (800c6f8 <xTaskIncrementTick+0x148>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3301      	adds	r3, #1
 800c602:	4a3d      	ldr	r2, [pc, #244]	; (800c6f8 <xTaskIncrementTick+0x148>)
 800c604:	6013      	str	r3, [r2, #0]
 800c606:	f000 fa8f 	bl	800cb28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c60a:	4b3c      	ldr	r3, [pc, #240]	; (800c6fc <xTaskIncrementTick+0x14c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	429a      	cmp	r2, r3
 800c612:	d349      	bcc.n	800c6a8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c614:	4b36      	ldr	r3, [pc, #216]	; (800c6f0 <xTaskIncrementTick+0x140>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d104      	bne.n	800c628 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c61e:	4b37      	ldr	r3, [pc, #220]	; (800c6fc <xTaskIncrementTick+0x14c>)
 800c620:	f04f 32ff 	mov.w	r2, #4294967295
 800c624:	601a      	str	r2, [r3, #0]
					break;
 800c626:	e03f      	b.n	800c6a8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c628:	4b31      	ldr	r3, [pc, #196]	; (800c6f0 <xTaskIncrementTick+0x140>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d203      	bcs.n	800c648 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c640:	4a2e      	ldr	r2, [pc, #184]	; (800c6fc <xTaskIncrementTick+0x14c>)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c646:	e02f      	b.n	800c6a8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	3304      	adds	r3, #4
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fe ffa1 	bl	800b594 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	3318      	adds	r3, #24
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fe ff98 	bl	800b594 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c668:	4b25      	ldr	r3, [pc, #148]	; (800c700 <xTaskIncrementTick+0x150>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d903      	bls.n	800c678 <xTaskIncrementTick+0xc8>
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c674:	4a22      	ldr	r2, [pc, #136]	; (800c700 <xTaskIncrementTick+0x150>)
 800c676:	6013      	str	r3, [r2, #0]
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67c:	4613      	mov	r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	4413      	add	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	4a1f      	ldr	r2, [pc, #124]	; (800c704 <xTaskIncrementTick+0x154>)
 800c686:	441a      	add	r2, r3
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	3304      	adds	r3, #4
 800c68c:	4619      	mov	r1, r3
 800c68e:	4610      	mov	r0, r2
 800c690:	f7fe ff23 	bl	800b4da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c698:	4b1b      	ldr	r3, [pc, #108]	; (800c708 <xTaskIncrementTick+0x158>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d3b8      	bcc.n	800c614 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6a6:	e7b5      	b.n	800c614 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c6a8:	4b17      	ldr	r3, [pc, #92]	; (800c708 <xTaskIncrementTick+0x158>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ae:	4915      	ldr	r1, [pc, #84]	; (800c704 <xTaskIncrementTick+0x154>)
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	440b      	add	r3, r1
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d901      	bls.n	800c6c4 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c6c4:	4b11      	ldr	r3, [pc, #68]	; (800c70c <xTaskIncrementTick+0x15c>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d007      	beq.n	800c6dc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	617b      	str	r3, [r7, #20]
 800c6d0:	e004      	b.n	800c6dc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c6d2:	4b0f      	ldr	r3, [pc, #60]	; (800c710 <xTaskIncrementTick+0x160>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	4a0d      	ldr	r2, [pc, #52]	; (800c710 <xTaskIncrementTick+0x160>)
 800c6da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c6dc:	697b      	ldr	r3, [r7, #20]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20001580 	.word	0x20001580
 800c6ec:	2000155c 	.word	0x2000155c
 800c6f0:	20001510 	.word	0x20001510
 800c6f4:	20001514 	.word	0x20001514
 800c6f8:	20001570 	.word	0x20001570
 800c6fc:	20001578 	.word	0x20001578
 800c700:	20001560 	.word	0x20001560
 800c704:	20001088 	.word	0x20001088
 800c708:	20001084 	.word	0x20001084
 800c70c:	2000156c 	.word	0x2000156c
 800c710:	20001568 	.word	0x20001568

0800c714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c71a:	4b23      	ldr	r3, [pc, #140]	; (800c7a8 <vTaskSwitchContext+0x94>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d003      	beq.n	800c72a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c722:	4b22      	ldr	r3, [pc, #136]	; (800c7ac <vTaskSwitchContext+0x98>)
 800c724:	2201      	movs	r2, #1
 800c726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c728:	e039      	b.n	800c79e <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 800c72a:	4b20      	ldr	r3, [pc, #128]	; (800c7ac <vTaskSwitchContext+0x98>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c730:	4b1f      	ldr	r3, [pc, #124]	; (800c7b0 <vTaskSwitchContext+0x9c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	607b      	str	r3, [r7, #4]
 800c736:	e008      	b.n	800c74a <vTaskSwitchContext+0x36>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d102      	bne.n	800c744 <vTaskSwitchContext+0x30>
 800c73e:	f000 ff73 	bl	800d628 <ulSetInterruptMask>
 800c742:	e7fe      	b.n	800c742 <vTaskSwitchContext+0x2e>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	3b01      	subs	r3, #1
 800c748:	607b      	str	r3, [r7, #4]
 800c74a:	491a      	ldr	r1, [pc, #104]	; (800c7b4 <vTaskSwitchContext+0xa0>)
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	4613      	mov	r3, r2
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	4413      	add	r3, r2
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	440b      	add	r3, r1
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0ec      	beq.n	800c738 <vTaskSwitchContext+0x24>
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	4613      	mov	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4a12      	ldr	r2, [pc, #72]	; (800c7b4 <vTaskSwitchContext+0xa0>)
 800c76a:	4413      	add	r3, r2
 800c76c:	603b      	str	r3, [r7, #0]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	605a      	str	r2, [r3, #4]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	3308      	adds	r3, #8
 800c780:	429a      	cmp	r2, r3
 800c782:	d104      	bne.n	800c78e <vTaskSwitchContext+0x7a>
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	605a      	str	r2, [r3, #4]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	4a08      	ldr	r2, [pc, #32]	; (800c7b8 <vTaskSwitchContext+0xa4>)
 800c796:	6013      	str	r3, [r2, #0]
 800c798:	4a05      	ldr	r2, [pc, #20]	; (800c7b0 <vTaskSwitchContext+0x9c>)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6013      	str	r3, [r2, #0]
}
 800c79e:	bf00      	nop
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20001580 	.word	0x20001580
 800c7ac:	2000156c 	.word	0x2000156c
 800c7b0:	20001560 	.word	0x20001560
 800c7b4:	20001088 	.word	0x20001088
 800c7b8:	20001084 	.word	0x20001084

0800c7bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d102      	bne.n	800c7d2 <vTaskPlaceOnEventList+0x16>
 800c7cc:	f000 ff2c 	bl	800d628 <ulSetInterruptMask>
 800c7d0:	e7fe      	b.n	800c7d0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7d2:	4b07      	ldr	r3, [pc, #28]	; (800c7f0 <vTaskPlaceOnEventList+0x34>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	3318      	adds	r3, #24
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7fe fea1 	bl	800b522 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7e0:	2101      	movs	r1, #1
 800c7e2:	6838      	ldr	r0, [r7, #0]
 800c7e4:	f000 fa3c 	bl	800cc60 <prvAddCurrentTaskToDelayedList>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	20001084 	.word	0x20001084

0800c7f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d102      	bne.n	800c80c <vTaskPlaceOnEventListRestricted+0x18>
 800c806:	f000 ff0f 	bl	800d628 <ulSetInterruptMask>
 800c80a:	e7fe      	b.n	800c80a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c80c:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <vTaskPlaceOnEventListRestricted+0x44>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3318      	adds	r3, #24
 800c812:	4619      	mov	r1, r3
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f7fe fe60 	bl	800b4da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d002      	beq.n	800c826 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 800c820:	f04f 33ff 	mov.w	r3, #4294967295
 800c824:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c826:	6879      	ldr	r1, [r7, #4]
 800c828:	68b8      	ldr	r0, [r7, #8]
 800c82a:	f000 fa19 	bl	800cc60 <prvAddCurrentTaskToDelayedList>
	}
 800c82e:	bf00      	nop
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	20001084 	.word	0x20001084

0800c83c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d102      	bne.n	800c858 <xTaskRemoveFromEventList+0x1c>
 800c852:	f000 fee9 	bl	800d628 <ulSetInterruptMask>
 800c856:	e7fe      	b.n	800c856 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	3318      	adds	r3, #24
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fe fe99 	bl	800b594 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c862:	4b1e      	ldr	r3, [pc, #120]	; (800c8dc <xTaskRemoveFromEventList+0xa0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d11d      	bne.n	800c8a6 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	3304      	adds	r3, #4
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fe fe90 	bl	800b594 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c878:	4b19      	ldr	r3, [pc, #100]	; (800c8e0 <xTaskRemoveFromEventList+0xa4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d903      	bls.n	800c888 <xTaskRemoveFromEventList+0x4c>
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	4a16      	ldr	r2, [pc, #88]	; (800c8e0 <xTaskRemoveFromEventList+0xa4>)
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88c:	4613      	mov	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4a13      	ldr	r2, [pc, #76]	; (800c8e4 <xTaskRemoveFromEventList+0xa8>)
 800c896:	441a      	add	r2, r3
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	3304      	adds	r3, #4
 800c89c:	4619      	mov	r1, r3
 800c89e:	4610      	mov	r0, r2
 800c8a0:	f7fe fe1b 	bl	800b4da <vListInsertEnd>
 800c8a4:	e005      	b.n	800c8b2 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	3318      	adds	r3, #24
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	480e      	ldr	r0, [pc, #56]	; (800c8e8 <xTaskRemoveFromEventList+0xac>)
 800c8ae:	f7fe fe14 	bl	800b4da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b6:	4b0d      	ldr	r3, [pc, #52]	; (800c8ec <xTaskRemoveFromEventList+0xb0>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d905      	bls.n	800c8cc <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c8c4:	4b0a      	ldr	r3, [pc, #40]	; (800c8f0 <xTaskRemoveFromEventList+0xb4>)
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	e001      	b.n	800c8d0 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	20001580 	.word	0x20001580
 800c8e0:	20001560 	.word	0x20001560
 800c8e4:	20001088 	.word	0x20001088
 800c8e8:	20001518 	.word	0x20001518
 800c8ec:	20001084 	.word	0x20001084
 800c8f0:	2000156c 	.word	0x2000156c

0800c8f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8fc:	4b06      	ldr	r3, [pc, #24]	; (800c918 <vTaskInternalSetTimeOutState+0x24>)
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c904:	4b05      	ldr	r3, [pc, #20]	; (800c91c <vTaskInternalSetTimeOutState+0x28>)
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	605a      	str	r2, [r3, #4]
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr
 800c918:	20001570 	.word	0x20001570
 800c91c:	2000155c 	.word	0x2000155c

0800c920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b086      	sub	sp, #24
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d102      	bne.n	800c936 <xTaskCheckForTimeOut+0x16>
 800c930:	f000 fe7a 	bl	800d628 <ulSetInterruptMask>
 800c934:	e7fe      	b.n	800c934 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d102      	bne.n	800c942 <xTaskCheckForTimeOut+0x22>
 800c93c:	f000 fe74 	bl	800d628 <ulSetInterruptMask>
 800c940:	e7fe      	b.n	800c940 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800c942:	f000 fd3f 	bl	800d3c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c946:	4b1d      	ldr	r3, [pc, #116]	; (800c9bc <xTaskCheckForTimeOut+0x9c>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c95e:	d102      	bne.n	800c966 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c960:	2300      	movs	r3, #0
 800c962:	617b      	str	r3, [r7, #20]
 800c964:	e023      	b.n	800c9ae <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b15      	ldr	r3, [pc, #84]	; (800c9c0 <xTaskCheckForTimeOut+0xa0>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d007      	beq.n	800c982 <xTaskCheckForTimeOut+0x62>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d302      	bcc.n	800c982 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c97c:	2301      	movs	r3, #1
 800c97e:	617b      	str	r3, [r7, #20]
 800c980:	e015      	b.n	800c9ae <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d20b      	bcs.n	800c9a4 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	1ad2      	subs	r2, r2, r3
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7ff ffab 	bl	800c8f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	617b      	str	r3, [r7, #20]
 800c9a2:	e004      	b.n	800c9ae <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800c9ae:	f000 fd1b 	bl	800d3e8 <vPortExitCritical>

	return xReturn;
 800c9b2:	697b      	ldr	r3, [r7, #20]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	2000155c 	.word	0x2000155c
 800c9c0:	20001570 	.word	0x20001570

0800c9c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9c8:	4b03      	ldr	r3, [pc, #12]	; (800c9d8 <vTaskMissedYield+0x14>)
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	601a      	str	r2, [r3, #0]
}
 800c9ce:	bf00      	nop
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	2000156c 	.word	0x2000156c

0800c9dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9e4:	f000 f84a 	bl	800ca7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9e8:	4b03      	ldr	r3, [pc, #12]	; (800c9f8 <prvIdleTask+0x1c>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d9f9      	bls.n	800c9e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9f0:	f000 fcd6 	bl	800d3a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800c9f4:	e7f6      	b.n	800c9e4 <prvIdleTask+0x8>
 800c9f6:	bf00      	nop
 800c9f8:	20001088 	.word	0x20001088

0800c9fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca02:	2300      	movs	r3, #0
 800ca04:	607b      	str	r3, [r7, #4]
 800ca06:	e00c      	b.n	800ca22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4a12      	ldr	r2, [pc, #72]	; (800ca5c <prvInitialiseTaskLists+0x60>)
 800ca14:	4413      	add	r3, r2
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fe fd32 	bl	800b480 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	607b      	str	r3, [r7, #4]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b37      	cmp	r3, #55	; 0x37
 800ca26:	d9ef      	bls.n	800ca08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca28:	480d      	ldr	r0, [pc, #52]	; (800ca60 <prvInitialiseTaskLists+0x64>)
 800ca2a:	f7fe fd29 	bl	800b480 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca2e:	480d      	ldr	r0, [pc, #52]	; (800ca64 <prvInitialiseTaskLists+0x68>)
 800ca30:	f7fe fd26 	bl	800b480 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca34:	480c      	ldr	r0, [pc, #48]	; (800ca68 <prvInitialiseTaskLists+0x6c>)
 800ca36:	f7fe fd23 	bl	800b480 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca3a:	480c      	ldr	r0, [pc, #48]	; (800ca6c <prvInitialiseTaskLists+0x70>)
 800ca3c:	f7fe fd20 	bl	800b480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca40:	480b      	ldr	r0, [pc, #44]	; (800ca70 <prvInitialiseTaskLists+0x74>)
 800ca42:	f7fe fd1d 	bl	800b480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca46:	4b0b      	ldr	r3, [pc, #44]	; (800ca74 <prvInitialiseTaskLists+0x78>)
 800ca48:	4a05      	ldr	r2, [pc, #20]	; (800ca60 <prvInitialiseTaskLists+0x64>)
 800ca4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca4c:	4b0a      	ldr	r3, [pc, #40]	; (800ca78 <prvInitialiseTaskLists+0x7c>)
 800ca4e:	4a05      	ldr	r2, [pc, #20]	; (800ca64 <prvInitialiseTaskLists+0x68>)
 800ca50:	601a      	str	r2, [r3, #0]
}
 800ca52:	bf00      	nop
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20001088 	.word	0x20001088
 800ca60:	200014e8 	.word	0x200014e8
 800ca64:	200014fc 	.word	0x200014fc
 800ca68:	20001518 	.word	0x20001518
 800ca6c:	2000152c 	.word	0x2000152c
 800ca70:	20001544 	.word	0x20001544
 800ca74:	20001510 	.word	0x20001510
 800ca78:	20001514 	.word	0x20001514

0800ca7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca82:	e019      	b.n	800cab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca84:	f000 fc9e 	bl	800d3c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca88:	4b10      	ldr	r3, [pc, #64]	; (800cacc <prvCheckTasksWaitingTermination+0x50>)
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	3304      	adds	r3, #4
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fe fd7d 	bl	800b594 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca9a:	4b0d      	ldr	r3, [pc, #52]	; (800cad0 <prvCheckTasksWaitingTermination+0x54>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	4a0b      	ldr	r2, [pc, #44]	; (800cad0 <prvCheckTasksWaitingTermination+0x54>)
 800caa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800caa4:	4b0b      	ldr	r3, [pc, #44]	; (800cad4 <prvCheckTasksWaitingTermination+0x58>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	3b01      	subs	r3, #1
 800caaa:	4a0a      	ldr	r2, [pc, #40]	; (800cad4 <prvCheckTasksWaitingTermination+0x58>)
 800caac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800caae:	f000 fc9b 	bl	800d3e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f810 	bl	800cad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cab8:	4b06      	ldr	r3, [pc, #24]	; (800cad4 <prvCheckTasksWaitingTermination+0x58>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1e1      	bne.n	800ca84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cac0:	bf00      	nop
 800cac2:	bf00      	nop
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	2000152c 	.word	0x2000152c
 800cad0:	20001558 	.word	0x20001558
 800cad4:	20001540 	.word	0x20001540

0800cad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d108      	bne.n	800cafc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 feae 	bl	800d850 <vPortFree>
				vPortFree( pxTCB );
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 feab 	bl	800d850 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cafa:	e010      	b.n	800cb1e <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d103      	bne.n	800cb0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 fea2 	bl	800d850 <vPortFree>
	}
 800cb0c:	e007      	b.n	800cb1e <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d002      	beq.n	800cb1e <prvDeleteTCB+0x46>
 800cb18:	f000 fd86 	bl	800d628 <ulSetInterruptMask>
 800cb1c:	e7fe      	b.n	800cb1c <prvDeleteTCB+0x44>
	}
 800cb1e:	bf00      	nop
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb2e:	4b0c      	ldr	r3, [pc, #48]	; (800cb60 <prvResetNextTaskUnblockTime+0x38>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d104      	bne.n	800cb42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb38:	4b0a      	ldr	r3, [pc, #40]	; (800cb64 <prvResetNextTaskUnblockTime+0x3c>)
 800cb3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb40:	e008      	b.n	800cb54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb42:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <prvResetNextTaskUnblockTime+0x38>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	4a04      	ldr	r2, [pc, #16]	; (800cb64 <prvResetNextTaskUnblockTime+0x3c>)
 800cb52:	6013      	str	r3, [r2, #0]
}
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	20001510 	.word	0x20001510
 800cb64:	20001578 	.word	0x20001578

0800cb68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb6e:	4b0b      	ldr	r3, [pc, #44]	; (800cb9c <xTaskGetSchedulerState+0x34>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d102      	bne.n	800cb7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb76:	2301      	movs	r3, #1
 800cb78:	607b      	str	r3, [r7, #4]
 800cb7a:	e008      	b.n	800cb8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb7c:	4b08      	ldr	r3, [pc, #32]	; (800cba0 <xTaskGetSchedulerState+0x38>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d102      	bne.n	800cb8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb84:	2302      	movs	r3, #2
 800cb86:	607b      	str	r3, [r7, #4]
 800cb88:	e001      	b.n	800cb8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb8e:	687b      	ldr	r3, [r7, #4]
	}
 800cb90:	4618      	mov	r0, r3
 800cb92:	370c      	adds	r7, #12
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr
 800cb9c:	20001564 	.word	0x20001564
 800cba0:	20001580 	.word	0x20001580

0800cba4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d046      	beq.n	800cc48 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cbba:	4b26      	ldr	r3, [pc, #152]	; (800cc54 <xTaskPriorityDisinherit+0xb0>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d002      	beq.n	800cbca <xTaskPriorityDisinherit+0x26>
 800cbc4:	f000 fd30 	bl	800d628 <ulSetInterruptMask>
 800cbc8:	e7fe      	b.n	800cbc8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d102      	bne.n	800cbd8 <xTaskPriorityDisinherit+0x34>
 800cbd2:	f000 fd29 	bl	800d628 <ulSetInterruptMask>
 800cbd6:	e7fe      	b.n	800cbd6 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbdc:	1e5a      	subs	r2, r3, #1
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d02c      	beq.n	800cc48 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d128      	bne.n	800cc48 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe fcca 	bl	800b594 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc18:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <xTaskPriorityDisinherit+0xb4>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d903      	bls.n	800cc28 <xTaskPriorityDisinherit+0x84>
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc24:	4a0c      	ldr	r2, [pc, #48]	; (800cc58 <xTaskPriorityDisinherit+0xb4>)
 800cc26:	6013      	str	r3, [r2, #0]
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4a09      	ldr	r2, [pc, #36]	; (800cc5c <xTaskPriorityDisinherit+0xb8>)
 800cc36:	441a      	add	r2, r3
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	4610      	mov	r0, r2
 800cc40:	f7fe fc4b 	bl	800b4da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc44:	2301      	movs	r3, #1
 800cc46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc48:	68fb      	ldr	r3, [r7, #12]
	}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	20001084 	.word	0x20001084
 800cc58:	20001560 	.word	0x20001560
 800cc5c:	20001088 	.word	0x20001088

0800cc60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc6a:	4b21      	ldr	r3, [pc, #132]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0x90>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc70:	4b20      	ldr	r3, [pc, #128]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3304      	adds	r3, #4
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fe fc8c 	bl	800b594 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc82:	d10a      	bne.n	800cc9a <prvAddCurrentTaskToDelayedList+0x3a>
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d007      	beq.n	800cc9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc8a:	4b1a      	ldr	r3, [pc, #104]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3304      	adds	r3, #4
 800cc90:	4619      	mov	r1, r3
 800cc92:	4819      	ldr	r0, [pc, #100]	; (800ccf8 <prvAddCurrentTaskToDelayedList+0x98>)
 800cc94:	f7fe fc21 	bl	800b4da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc98:	e026      	b.n	800cce8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4413      	add	r3, r2
 800cca0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cca2:	4b14      	ldr	r3, [pc, #80]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68ba      	ldr	r2, [r7, #8]
 800cca8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d209      	bcs.n	800ccc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccb2:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <prvAddCurrentTaskToDelayedList+0x9c>)
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	4b0f      	ldr	r3, [pc, #60]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	3304      	adds	r3, #4
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	f7fe fc2f 	bl	800b522 <vListInsert>
}
 800ccc4:	e010      	b.n	800cce8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccc6:	4b0e      	ldr	r3, [pc, #56]	; (800cd00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3304      	adds	r3, #4
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	4610      	mov	r0, r2
 800ccd4:	f7fe fc25 	bl	800b522 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ccd8:	4b0a      	ldr	r3, [pc, #40]	; (800cd04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d202      	bcs.n	800cce8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cce2:	4a08      	ldr	r2, [pc, #32]	; (800cd04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	6013      	str	r3, [r2, #0]
}
 800cce8:	bf00      	nop
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	2000155c 	.word	0x2000155c
 800ccf4:	20001084 	.word	0x20001084
 800ccf8:	20001544 	.word	0x20001544
 800ccfc:	20001514 	.word	0x20001514
 800cd00:	20001510 	.word	0x20001510
 800cd04:	20001578 	.word	0x20001578

0800cd08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd12:	f000 fac7 	bl	800d2a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd16:	4b18      	ldr	r3, [pc, #96]	; (800cd78 <xTimerCreateTimerTask+0x70>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d020      	beq.n	800cd60 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd22:	2300      	movs	r3, #0
 800cd24:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd26:	463a      	mov	r2, r7
 800cd28:	1d39      	adds	r1, r7, #4
 800cd2a:	f107 0308 	add.w	r3, r7, #8
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fe fb8c 	bl	800b44c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd34:	6839      	ldr	r1, [r7, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	9202      	str	r2, [sp, #8]
 800cd3c:	9301      	str	r3, [sp, #4]
 800cd3e:	2302      	movs	r3, #2
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	2300      	movs	r3, #0
 800cd44:	460a      	mov	r2, r1
 800cd46:	490d      	ldr	r1, [pc, #52]	; (800cd7c <xTimerCreateTimerTask+0x74>)
 800cd48:	480d      	ldr	r0, [pc, #52]	; (800cd80 <xTimerCreateTimerTask+0x78>)
 800cd4a:	f7ff f879 	bl	800be40 <xTaskCreateStatic>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	4a0c      	ldr	r2, [pc, #48]	; (800cd84 <xTimerCreateTimerTask+0x7c>)
 800cd52:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd54:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <xTimerCreateTimerTask+0x7c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d001      	beq.n	800cd60 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d102      	bne.n	800cd6c <xTimerCreateTimerTask+0x64>
 800cd66:	f000 fc5f 	bl	800d628 <ulSetInterruptMask>
 800cd6a:	e7fe      	b.n	800cd6a <xTimerCreateTimerTask+0x62>
	return xReturn;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	200015b4 	.word	0x200015b4
 800cd7c:	0800e748 	.word	0x0800e748
 800cd80:	0800ce9d 	.word	0x0800ce9d
 800cd84:	200015b8 	.word	0x200015b8

0800cd88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08a      	sub	sp, #40	; 0x28
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d102      	bne.n	800cda6 <xTimerGenericCommand+0x1e>
 800cda0:	f000 fc42 	bl	800d628 <ulSetInterruptMask>
 800cda4:	e7fe      	b.n	800cda4 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cda6:	4b1a      	ldr	r3, [pc, #104]	; (800ce10 <xTimerGenericCommand+0x88>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d02a      	beq.n	800ce04 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2b05      	cmp	r3, #5
 800cdbe:	dc18      	bgt.n	800cdf2 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cdc0:	f7ff fed2 	bl	800cb68 <xTaskGetSchedulerState>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d109      	bne.n	800cdde <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cdca:	4b11      	ldr	r3, [pc, #68]	; (800ce10 <xTimerGenericCommand+0x88>)
 800cdcc:	6818      	ldr	r0, [r3, #0]
 800cdce:	f107 0114 	add.w	r1, r7, #20
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdd6:	f7fe fcd2 	bl	800b77e <xQueueGenericSend>
 800cdda:	6278      	str	r0, [r7, #36]	; 0x24
 800cddc:	e012      	b.n	800ce04 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cdde:	4b0c      	ldr	r3, [pc, #48]	; (800ce10 <xTimerGenericCommand+0x88>)
 800cde0:	6818      	ldr	r0, [r3, #0]
 800cde2:	f107 0114 	add.w	r1, r7, #20
 800cde6:	2300      	movs	r3, #0
 800cde8:	2200      	movs	r2, #0
 800cdea:	f7fe fcc8 	bl	800b77e <xQueueGenericSend>
 800cdee:	6278      	str	r0, [r7, #36]	; 0x24
 800cdf0:	e008      	b.n	800ce04 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cdf2:	4b07      	ldr	r3, [pc, #28]	; (800ce10 <xTimerGenericCommand+0x88>)
 800cdf4:	6818      	ldr	r0, [r3, #0]
 800cdf6:	f107 0114 	add.w	r1, r7, #20
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	f7fe fd87 	bl	800b910 <xQueueGenericSendFromISR>
 800ce02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3728      	adds	r7, #40	; 0x28
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	200015b4 	.word	0x200015b4

0800ce14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af02      	add	r7, sp, #8
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce1e:	4b1e      	ldr	r3, [pc, #120]	; (800ce98 <prvProcessExpiredTimer+0x84>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	3304      	adds	r3, #4
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fe fbb1 	bl	800b594 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce38:	f003 0304 	and.w	r3, r3, #4
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d01a      	beq.n	800ce76 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	699a      	ldr	r2, [r3, #24]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	18d1      	adds	r1, r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f000 f8c1 	bl	800cfd4 <prvInsertTimerInActiveList>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d017      	beq.n	800ce88 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce58:	2300      	movs	r3, #0
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	2100      	movs	r1, #0
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7ff ff90 	bl	800cd88 <xTimerGenericCommand>
 800ce68:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10b      	bne.n	800ce88 <prvProcessExpiredTimer+0x74>
 800ce70:	f000 fbda 	bl	800d628 <ulSetInterruptMask>
 800ce74:	e7fe      	b.n	800ce74 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce7c:	f023 0301 	bic.w	r3, r3, #1
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6a1b      	ldr	r3, [r3, #32]
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	4798      	blx	r3
}
 800ce90:	bf00      	nop
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	200015ac 	.word	0x200015ac

0800ce9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cea4:	f107 0308 	add.w	r3, r7, #8
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f000 f84f 	bl	800cf4c <prvGetNextExpireTime>
 800ceae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f000 f803 	bl	800cec0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ceba:	f000 f8cd 	bl	800d058 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cebe:	e7f1      	b.n	800cea4 <prvTimerTask+0x8>

0800cec0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ceca:	f7ff fac5 	bl	800c458 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cece:	f107 0308 	add.w	r3, r7, #8
 800ced2:	4618      	mov	r0, r3
 800ced4:	f000 f85e 	bl	800cf94 <prvSampleTimeNow>
 800ced8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d12a      	bne.n	800cf36 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10a      	bne.n	800cefc <prvProcessTimerOrBlockTask+0x3c>
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d806      	bhi.n	800cefc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ceee:	f7ff fac1 	bl	800c474 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cef2:	68f9      	ldr	r1, [r7, #12]
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7ff ff8d 	bl	800ce14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cefa:	e01e      	b.n	800cf3a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d008      	beq.n	800cf14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf02:	4b10      	ldr	r3, [pc, #64]	; (800cf44 <prvProcessTimerOrBlockTask+0x84>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d101      	bne.n	800cf10 <prvProcessTimerOrBlockTask+0x50>
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e000      	b.n	800cf12 <prvProcessTimerOrBlockTask+0x52>
 800cf10:	2300      	movs	r3, #0
 800cf12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf14:	4b0c      	ldr	r3, [pc, #48]	; (800cf48 <prvProcessTimerOrBlockTask+0x88>)
 800cf16:	6818      	ldr	r0, [r3, #0]
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	683a      	ldr	r2, [r7, #0]
 800cf20:	4619      	mov	r1, r3
 800cf22:	f7fe ff59 	bl	800bdd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf26:	f7ff faa5 	bl	800c474 <xTaskResumeAll>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d104      	bne.n	800cf3a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800cf30:	f000 fa36 	bl	800d3a0 <vPortYield>
}
 800cf34:	e001      	b.n	800cf3a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800cf36:	f7ff fa9d 	bl	800c474 <xTaskResumeAll>
}
 800cf3a:	bf00      	nop
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	200015b0 	.word	0x200015b0
 800cf48:	200015b4 	.word	0x200015b4

0800cf4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cf54:	4b0e      	ldr	r3, [pc, #56]	; (800cf90 <prvGetNextExpireTime+0x44>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d101      	bne.n	800cf62 <prvGetNextExpireTime+0x16>
 800cf5e:	2201      	movs	r2, #1
 800cf60:	e000      	b.n	800cf64 <prvGetNextExpireTime+0x18>
 800cf62:	2200      	movs	r2, #0
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d105      	bne.n	800cf7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf70:	4b07      	ldr	r3, [pc, #28]	; (800cf90 <prvGetNextExpireTime+0x44>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	e001      	b.n	800cf80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cf80:	68fb      	ldr	r3, [r7, #12]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	200015ac 	.word	0x200015ac

0800cf94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cf9c:	f7ff faf8 	bl	800c590 <xTaskGetTickCount>
 800cfa0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cfa2:	4b0b      	ldr	r3, [pc, #44]	; (800cfd0 <prvSampleTimeNow+0x3c>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d205      	bcs.n	800cfb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cfac:	f000 f91e 	bl	800d1ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	601a      	str	r2, [r3, #0]
 800cfb6:	e002      	b.n	800cfbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cfbe:	4a04      	ldr	r2, [pc, #16]	; (800cfd0 <prvSampleTimeNow+0x3c>)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	200015bc 	.word	0x200015bc

0800cfd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b086      	sub	sp, #24
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	68ba      	ldr	r2, [r7, #8]
 800cfea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d812      	bhi.n	800d020 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	1ad2      	subs	r2, r2, r3
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	429a      	cmp	r2, r3
 800d006:	d302      	bcc.n	800d00e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d008:	2301      	movs	r3, #1
 800d00a:	617b      	str	r3, [r7, #20]
 800d00c:	e01b      	b.n	800d046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d00e:	4b10      	ldr	r3, [pc, #64]	; (800d050 <prvInsertTimerInActiveList+0x7c>)
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	3304      	adds	r3, #4
 800d016:	4619      	mov	r1, r3
 800d018:	4610      	mov	r0, r2
 800d01a:	f7fe fa82 	bl	800b522 <vListInsert>
 800d01e:	e012      	b.n	800d046 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	429a      	cmp	r2, r3
 800d026:	d206      	bcs.n	800d036 <prvInsertTimerInActiveList+0x62>
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d302      	bcc.n	800d036 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d030:	2301      	movs	r3, #1
 800d032:	617b      	str	r3, [r7, #20]
 800d034:	e007      	b.n	800d046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d036:	4b07      	ldr	r3, [pc, #28]	; (800d054 <prvInsertTimerInActiveList+0x80>)
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3304      	adds	r3, #4
 800d03e:	4619      	mov	r1, r3
 800d040:	4610      	mov	r0, r2
 800d042:	f7fe fa6e 	bl	800b522 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d046:	697b      	ldr	r3, [r7, #20]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3718      	adds	r7, #24
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	200015b0 	.word	0x200015b0
 800d054:	200015ac 	.word	0x200015ac

0800d058 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b08c      	sub	sp, #48	; 0x30
 800d05c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d05e:	e0b2      	b.n	800d1c6 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	2b00      	cmp	r3, #0
 800d064:	da11      	bge.n	800d08a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d066:	f107 0308 	add.w	r3, r7, #8
 800d06a:	3304      	adds	r3, #4
 800d06c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d070:	2b00      	cmp	r3, #0
 800d072:	d102      	bne.n	800d07a <prvProcessReceivedCommands+0x22>
 800d074:	f000 fad8 	bl	800d628 <ulSetInterruptMask>
 800d078:	e7fe      	b.n	800d078 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d080:	6850      	ldr	r0, [r2, #4]
 800d082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d084:	6892      	ldr	r2, [r2, #8]
 800d086:	4611      	mov	r1, r2
 800d088:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f2c0 809a 	blt.w	800d1c6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d004      	beq.n	800d0a8 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe fa76 	bl	800b594 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0a8:	1d3b      	adds	r3, r7, #4
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff ff72 	bl	800cf94 <prvSampleTimeNow>
 800d0b0:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	f200 8085 	bhi.w	800d1c4 <prvProcessReceivedCommands+0x16c>
 800d0ba:	a201      	add	r2, pc, #4	; (adr r2, 800d0c0 <prvProcessReceivedCommands+0x68>)
 800d0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c0:	0800d0e9 	.word	0x0800d0e9
 800d0c4:	0800d0e9 	.word	0x0800d0e9
 800d0c8:	0800d0e9 	.word	0x0800d0e9
 800d0cc:	0800d14d 	.word	0x0800d14d
 800d0d0:	0800d161 	.word	0x0800d161
 800d0d4:	0800d19b 	.word	0x0800d19b
 800d0d8:	0800d0e9 	.word	0x0800d0e9
 800d0dc:	0800d0e9 	.word	0x0800d0e9
 800d0e0:	0800d14d 	.word	0x0800d14d
 800d0e4:	0800d161 	.word	0x0800d161
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0e8:	6a3b      	ldr	r3, [r7, #32]
 800d0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0ee:	f043 0301 	orr.w	r3, r3, #1
 800d0f2:	b2da      	uxtb	r2, r3
 800d0f4:	6a3b      	ldr	r3, [r7, #32]
 800d0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	6a3b      	ldr	r3, [r7, #32]
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	18d1      	adds	r1, r2, r3
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	69fa      	ldr	r2, [r7, #28]
 800d106:	6a38      	ldr	r0, [r7, #32]
 800d108:	f7ff ff64 	bl	800cfd4 <prvInsertTimerInActiveList>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d059      	beq.n	800d1c6 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d112:	6a3b      	ldr	r3, [r7, #32]
 800d114:	6a1b      	ldr	r3, [r3, #32]
 800d116:	6a38      	ldr	r0, [r7, #32]
 800d118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d120:	f003 0304 	and.w	r3, r3, #4
 800d124:	2b00      	cmp	r3, #0
 800d126:	d04e      	beq.n	800d1c6 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	699b      	ldr	r3, [r3, #24]
 800d12e:	441a      	add	r2, r3
 800d130:	2300      	movs	r3, #0
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	2300      	movs	r3, #0
 800d136:	2100      	movs	r1, #0
 800d138:	6a38      	ldr	r0, [r7, #32]
 800d13a:	f7ff fe25 	bl	800cd88 <xTimerGenericCommand>
 800d13e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d13f      	bne.n	800d1c6 <prvProcessReceivedCommands+0x16e>
 800d146:	f000 fa6f 	bl	800d628 <ulSetInterruptMask>
 800d14a:	e7fe      	b.n	800d14a <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d14c:	6a3b      	ldr	r3, [r7, #32]
 800d14e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d152:	f023 0301 	bic.w	r3, r3, #1
 800d156:	b2da      	uxtb	r2, r3
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d15e:	e032      	b.n	800d1c6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d160:	6a3b      	ldr	r3, [r7, #32]
 800d162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d166:	f043 0301 	orr.w	r3, r3, #1
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	6a3b      	ldr	r3, [r7, #32]
 800d16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d178:	6a3b      	ldr	r3, [r7, #32]
 800d17a:	699b      	ldr	r3, [r3, #24]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d102      	bne.n	800d186 <prvProcessReceivedCommands+0x12e>
 800d180:	f000 fa52 	bl	800d628 <ulSetInterruptMask>
 800d184:	e7fe      	b.n	800d184 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	699a      	ldr	r2, [r3, #24]
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	18d1      	adds	r1, r2, r3
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	69fa      	ldr	r2, [r7, #28]
 800d192:	6a38      	ldr	r0, [r7, #32]
 800d194:	f7ff ff1e 	bl	800cfd4 <prvInsertTimerInActiveList>
					break;
 800d198:	e015      	b.n	800d1c6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1a0:	f003 0302 	and.w	r3, r3, #2
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d103      	bne.n	800d1b0 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800d1a8:	6a38      	ldr	r0, [r7, #32]
 800d1aa:	f000 fb51 	bl	800d850 <vPortFree>
 800d1ae:	e00a      	b.n	800d1c6 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1b0:	6a3b      	ldr	r3, [r7, #32]
 800d1b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1b6:	f023 0301 	bic.w	r3, r3, #1
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d1c2:	e000      	b.n	800d1c6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800d1c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1c6:	4b08      	ldr	r3, [pc, #32]	; (800d1e8 <prvProcessReceivedCommands+0x190>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f107 0108 	add.w	r1, r7, #8
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fe fc0e 	bl	800b9f2 <xQueueReceive>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f47f af41 	bne.w	800d060 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d1de:	bf00      	nop
 800d1e0:	bf00      	nop
 800d1e2:	3728      	adds	r7, #40	; 0x28
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	200015b4 	.word	0x200015b4

0800d1ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b088      	sub	sp, #32
 800d1f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1f2:	e040      	b.n	800d276 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1f4:	4b29      	ldr	r3, [pc, #164]	; (800d29c <prvSwitchTimerLists+0xb0>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1fe:	4b27      	ldr	r3, [pc, #156]	; (800d29c <prvSwitchTimerLists+0xb0>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	3304      	adds	r3, #4
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fe f9c1 	bl	800b594 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6a1b      	ldr	r3, [r3, #32]
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d220:	f003 0304 	and.w	r3, r3, #4
 800d224:	2b00      	cmp	r3, #0
 800d226:	d026      	beq.n	800d276 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	4413      	add	r3, r2
 800d230:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	429a      	cmp	r2, r3
 800d238:	d90e      	bls.n	800d258 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d246:	4b15      	ldr	r3, [pc, #84]	; (800d29c <prvSwitchTimerLists+0xb0>)
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	3304      	adds	r3, #4
 800d24e:	4619      	mov	r1, r3
 800d250:	4610      	mov	r0, r2
 800d252:	f7fe f966 	bl	800b522 <vListInsert>
 800d256:	e00e      	b.n	800d276 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d258:	2300      	movs	r3, #0
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	2300      	movs	r3, #0
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	2100      	movs	r1, #0
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f7ff fd90 	bl	800cd88 <xTimerGenericCommand>
 800d268:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d102      	bne.n	800d276 <prvSwitchTimerLists+0x8a>
 800d270:	f000 f9da 	bl	800d628 <ulSetInterruptMask>
 800d274:	e7fe      	b.n	800d274 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d276:	4b09      	ldr	r3, [pc, #36]	; (800d29c <prvSwitchTimerLists+0xb0>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1b9      	bne.n	800d1f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d280:	4b06      	ldr	r3, [pc, #24]	; (800d29c <prvSwitchTimerLists+0xb0>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d286:	4b06      	ldr	r3, [pc, #24]	; (800d2a0 <prvSwitchTimerLists+0xb4>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a04      	ldr	r2, [pc, #16]	; (800d29c <prvSwitchTimerLists+0xb0>)
 800d28c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d28e:	4a04      	ldr	r2, [pc, #16]	; (800d2a0 <prvSwitchTimerLists+0xb4>)
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	6013      	str	r3, [r2, #0]
}
 800d294:	bf00      	nop
 800d296:	3718      	adds	r7, #24
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	200015ac 	.word	0x200015ac
 800d2a0:	200015b0 	.word	0x200015b0

0800d2a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d2aa:	f000 f88b 	bl	800d3c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d2ae:	4b15      	ldr	r3, [pc, #84]	; (800d304 <prvCheckForValidListAndQueue+0x60>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d120      	bne.n	800d2f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d2b6:	4814      	ldr	r0, [pc, #80]	; (800d308 <prvCheckForValidListAndQueue+0x64>)
 800d2b8:	f7fe f8e2 	bl	800b480 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d2bc:	4813      	ldr	r0, [pc, #76]	; (800d30c <prvCheckForValidListAndQueue+0x68>)
 800d2be:	f7fe f8df 	bl	800b480 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d2c2:	4b13      	ldr	r3, [pc, #76]	; (800d310 <prvCheckForValidListAndQueue+0x6c>)
 800d2c4:	4a10      	ldr	r2, [pc, #64]	; (800d308 <prvCheckForValidListAndQueue+0x64>)
 800d2c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d2c8:	4b12      	ldr	r3, [pc, #72]	; (800d314 <prvCheckForValidListAndQueue+0x70>)
 800d2ca:	4a10      	ldr	r2, [pc, #64]	; (800d30c <prvCheckForValidListAndQueue+0x68>)
 800d2cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	4b11      	ldr	r3, [pc, #68]	; (800d318 <prvCheckForValidListAndQueue+0x74>)
 800d2d4:	4a11      	ldr	r2, [pc, #68]	; (800d31c <prvCheckForValidListAndQueue+0x78>)
 800d2d6:	2110      	movs	r1, #16
 800d2d8:	200a      	movs	r0, #10
 800d2da:	f7fe f9dd 	bl	800b698 <xQueueGenericCreateStatic>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	4a08      	ldr	r2, [pc, #32]	; (800d304 <prvCheckForValidListAndQueue+0x60>)
 800d2e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d2e4:	4b07      	ldr	r3, [pc, #28]	; (800d304 <prvCheckForValidListAndQueue+0x60>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d005      	beq.n	800d2f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d2ec:	4b05      	ldr	r3, [pc, #20]	; (800d304 <prvCheckForValidListAndQueue+0x60>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	490b      	ldr	r1, [pc, #44]	; (800d320 <prvCheckForValidListAndQueue+0x7c>)
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fe fd46 	bl	800bd84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2f8:	f000 f876 	bl	800d3e8 <vPortExitCritical>
}
 800d2fc:	bf00      	nop
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	200015b4 	.word	0x200015b4
 800d308:	20001584 	.word	0x20001584
 800d30c:	20001598 	.word	0x20001598
 800d310:	200015ac 	.word	0x200015ac
 800d314:	200015b0 	.word	0x200015b0
 800d318:	20001660 	.word	0x20001660
 800d31c:	200015c0 	.word	0x200015c0
 800d320:	0800e750 	.word	0x0800e750

0800d324 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800d324:	b480      	push	{r7}
 800d326:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d328:	4b0b      	ldr	r3, [pc, #44]	; (800d358 <vPortSetupTimerInterrupt+0x34>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d32e:	4b0b      	ldr	r3, [pc, #44]	; (800d35c <vPortSetupTimerInterrupt+0x38>)
 800d330:	2200      	movs	r2, #0
 800d332:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d334:	4b0a      	ldr	r3, [pc, #40]	; (800d360 <vPortSetupTimerInterrupt+0x3c>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a0a      	ldr	r2, [pc, #40]	; (800d364 <vPortSetupTimerInterrupt+0x40>)
 800d33a:	fba2 2303 	umull	r2, r3, r2, r3
 800d33e:	099b      	lsrs	r3, r3, #6
 800d340:	4a09      	ldr	r2, [pc, #36]	; (800d368 <vPortSetupTimerInterrupt+0x44>)
 800d342:	3b01      	subs	r3, #1
 800d344:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800d346:	4b04      	ldr	r3, [pc, #16]	; (800d358 <vPortSetupTimerInterrupt+0x34>)
 800d348:	2207      	movs	r2, #7
 800d34a:	601a      	str	r2, [r3, #0]
}
 800d34c:	bf00      	nop
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	e000e010 	.word	0xe000e010
 800d35c:	e000e018 	.word	0xe000e018
 800d360:	20000004 	.word	0x20000004
 800d364:	10624dd3 	.word	0x10624dd3
 800d368:	e000e014 	.word	0xe000e014

0800d36c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d372:	2300      	movs	r3, #0
 800d374:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800d376:	4b09      	ldr	r3, [pc, #36]	; (800d39c <prvTaskExitError+0x30>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37e:	d002      	beq.n	800d386 <prvTaskExitError+0x1a>
 800d380:	f000 f952 	bl	800d628 <ulSetInterruptMask>
 800d384:	e7fe      	b.n	800d384 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800d386:	f000 f94f 	bl	800d628 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800d38a:	bf00      	nop
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0fc      	beq.n	800d38c <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800d392:	bf00      	nop
 800d394:	bf00      	nop
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	20000010 	.word	0x20000010

0800d3a0 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3a4:	4b06      	ldr	r3, [pc, #24]	; (800d3c0 <vPortYield+0x20>)
 800d3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800d3ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800d3b0:	f3bf 8f6f 	isb	sy
}
 800d3b4:	bf00      	nop
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	e000ed04 	.word	0xe000ed04

0800d3c4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800d3c8:	f000 f92e 	bl	800d628 <ulSetInterruptMask>
	ulCriticalNesting++;
 800d3cc:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <vPortEnterCritical+0x20>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	4a04      	ldr	r2, [pc, #16]	; (800d3e4 <vPortEnterCritical+0x20>)
 800d3d4:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800d3d6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800d3da:	f3bf 8f6f 	isb	sy
}
 800d3de:	bf00      	nop
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20000010 	.word	0x20000010

0800d3e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800d3ec:	4b0a      	ldr	r3, [pc, #40]	; (800d418 <vPortExitCritical+0x30>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d102      	bne.n	800d3fa <vPortExitCritical+0x12>
 800d3f4:	f000 f918 	bl	800d628 <ulSetInterruptMask>
 800d3f8:	e7fe      	b.n	800d3f8 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800d3fa:	4b07      	ldr	r3, [pc, #28]	; (800d418 <vPortExitCritical+0x30>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	3b01      	subs	r3, #1
 800d400:	4a05      	ldr	r2, [pc, #20]	; (800d418 <vPortExitCritical+0x30>)
 800d402:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800d404:	4b04      	ldr	r3, [pc, #16]	; (800d418 <vPortExitCritical+0x30>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d102      	bne.n	800d412 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800d40c:	2000      	movs	r0, #0
 800d40e:	f000 f918 	bl	800d642 <vClearInterruptMask>
	}
}
 800d412:	bf00      	nop
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	20000010 	.word	0x20000010

0800d41c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800d422:	f000 f901 	bl	800d628 <ulSetInterruptMask>
 800d426:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d428:	f7ff f8c2 	bl	800c5b0 <xTaskIncrementTick>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d432:	4b05      	ldr	r3, [pc, #20]	; (800d448 <xPortSysTickHandler+0x2c>)
 800d434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d438:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 f901 	bl	800d642 <vClearInterruptMask>
}
 800d440:	bf00      	nop
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	e000ed04 	.word	0xe000ed04

0800d44c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	699b      	ldr	r3, [r3, #24]
 800d458:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	3b02      	subs	r3, #2
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800d462:	7afb      	ldrb	r3, [r7, #11]
 800d464:	2b02      	cmp	r3, #2
 800d466:	d102      	bne.n	800d46e <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800d468:	f000 f8b2 	bl	800d5d0 <vRestoreContextOfFirstTask>
		}
		break;
 800d46c:	e002      	b.n	800d474 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800d46e:	f000 f8db 	bl	800d628 <ulSetInterruptMask>
 800d472:	e7fe      	b.n	800d472 <vPortSVCHandler_C+0x26>
		}
	}
}
 800d474:	bf00      	nop
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
 800d488:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3b04      	subs	r3, #4
 800d48e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d496:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	3b04      	subs	r3, #4
 800d49c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	3b04      	subs	r3, #4
 800d4a8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4aa:	4a38      	ldr	r2, [pc, #224]	; (800d58c <pxPortInitialiseStack+0x110>)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3b04      	subs	r3, #4
 800d4b4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800d4bc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3b04      	subs	r3, #4
 800d4c2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800d4ca:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	3b04      	subs	r3, #4
 800d4d0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800d4d8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	3b04      	subs	r3, #4
 800d4de:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800d4e6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	3b04      	subs	r3, #4
 800d4ec:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	3b04      	subs	r3, #4
 800d4f8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800d500:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	3b04      	subs	r3, #4
 800d506:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800d50e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	3b04      	subs	r3, #4
 800d514:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800d51c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3b04      	subs	r3, #4
 800d522:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800d52a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	3b04      	subs	r3, #4
 800d530:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800d538:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3b04      	subs	r3, #4
 800d53e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800d546:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	3b04      	subs	r3, #4
 800d54c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800d554:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	3b04      	subs	r3, #4
 800d55a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800d562:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	3b04      	subs	r3, #4
 800d568:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800d570:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	3b04      	subs	r3, #4
 800d576:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800d57e:	68fb      	ldr	r3, [r7, #12]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3714      	adds	r7, #20
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr
 800d58c:	0800d36d 	.word	0x0800d36d

0800d590 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800d590:	b580      	push	{r7, lr}
 800d592:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d594:	4b0c      	ldr	r3, [pc, #48]	; (800d5c8 <xPortStartScheduler+0x38>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a0b      	ldr	r2, [pc, #44]	; (800d5c8 <xPortStartScheduler+0x38>)
 800d59a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d59e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5a0:	4b09      	ldr	r3, [pc, #36]	; (800d5c8 <xPortStartScheduler+0x38>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a08      	ldr	r2, [pc, #32]	; (800d5c8 <xPortStartScheduler+0x38>)
 800d5a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5aa:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800d5ac:	f7ff feba 	bl	800d324 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800d5b0:	4b06      	ldr	r3, [pc, #24]	; (800d5cc <xPortStartScheduler+0x3c>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800d5b6:	f000 f823 	bl	800d600 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800d5ba:	f7ff f8ab 	bl	800c714 <vTaskSwitchContext>
	prvTaskExitError();
 800d5be:	f7ff fed5 	bl	800d36c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	e000ed20 	.word	0xe000ed20
 800d5cc:	20000010 	.word	0x20000010

0800d5d0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d5d0:	4a07      	ldr	r2, [pc, #28]	; (800d5f0 <pxCurrentTCBConst2>)
 800d5d2:	6811      	ldr	r1, [r2, #0]
 800d5d4:	6808      	ldr	r0, [r1, #0]
 800d5d6:	c806      	ldmia	r0!, {r1, r2}
 800d5d8:	f381 880b 	msr	PSPLIM, r1
 800d5dc:	2102      	movs	r1, #2
 800d5de:	f381 8814 	msr	CONTROL, r1
 800d5e2:	3020      	adds	r0, #32
 800d5e4:	f380 8809 	msr	PSP, r0
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	4710      	bx	r2
 800d5ee:	bf00      	nop

0800d5f0 <pxCurrentTCBConst2>:
 800d5f0:	20001084 	.word	0x20001084
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop
	...

0800d600 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d600:	4807      	ldr	r0, [pc, #28]	; (800d620 <xVTORConst>)
 800d602:	6800      	ldr	r0, [r0, #0]
 800d604:	6800      	ldr	r0, [r0, #0]
 800d606:	f380 8808 	msr	MSP, r0
 800d60a:	b662      	cpsie	i
 800d60c:	b661      	cpsie	f
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	df02      	svc	2
 800d618:	bf00      	nop
 800d61a:	bf00      	nop
 800d61c:	f3af 8000 	nop.w

0800d620 <xVTORConst>:
 800d620:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800d624:	bf00      	nop
 800d626:	bf00      	nop

0800d628 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d628:	f3ef 8011 	mrs	r0, BASEPRI
 800d62c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 800d630:	f381 8811 	msr	BASEPRI, r1
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d63e:	bf00      	nop
 800d640:	4618      	mov	r0, r3

0800d642 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d642:	f380 8811 	msr	BASEPRI, r0
 800d646:	f3bf 8f4f 	dsb	sy
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800d650:	bf00      	nop
	...

0800d660 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d660:	f3ef 8009 	mrs	r0, PSP
 800d664:	f3ef 820b 	mrs	r2, PSPLIM
 800d668:	4673      	mov	r3, lr
 800d66a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800d66e:	4a10      	ldr	r2, [pc, #64]	; (800d6b0 <pxCurrentTCBConst>)
 800d670:	6811      	ldr	r1, [r2, #0]
 800d672:	6008      	str	r0, [r1, #0]
 800d674:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800d678:	f380 8811 	msr	BASEPRI, r0
 800d67c:	f3bf 8f4f 	dsb	sy
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f7ff f846 	bl	800c714 <vTaskSwitchContext>
 800d688:	f04f 0000 	mov.w	r0, #0
 800d68c:	f380 8811 	msr	BASEPRI, r0
 800d690:	4a07      	ldr	r2, [pc, #28]	; (800d6b0 <pxCurrentTCBConst>)
 800d692:	6811      	ldr	r1, [r2, #0]
 800d694:	6808      	ldr	r0, [r1, #0]
 800d696:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800d69a:	f382 880b 	msr	PSPLIM, r2
 800d69e:	f380 8809 	msr	PSP, r0
 800d6a2:	4718      	bx	r3
 800d6a4:	f3af 8000 	nop.w
 800d6a8:	f3af 8000 	nop.w
 800d6ac:	f3af 8000 	nop.w

0800d6b0 <pxCurrentTCBConst>:
 800d6b0:	20001084 	.word	0x20001084
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800d6b4:	bf00      	nop
 800d6b6:	bf00      	nop
	...

0800d6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d6c0:	f01e 0f04 	tst.w	lr, #4
 800d6c4:	bf0c      	ite	eq
 800d6c6:	f3ef 8008 	mrseq	r0, MSP
 800d6ca:	f3ef 8009 	mrsne	r0, PSP
 800d6ce:	4904      	ldr	r1, [pc, #16]	; (800d6e0 <svchandler_address_const>)
 800d6d0:	4708      	bx	r1
 800d6d2:	bf00      	nop
 800d6d4:	f3af 8000 	nop.w
 800d6d8:	f3af 8000 	nop.w
 800d6dc:	f3af 8000 	nop.w

0800d6e0 <svchandler_address_const>:
 800d6e0:	0800d44d 	.word	0x0800d44d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800d6e4:	bf00      	nop
 800d6e6:	bf00      	nop

0800d6e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800d6f4:	f7fe feb0 	bl	800c458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6f8:	4b4f      	ldr	r3, [pc, #316]	; (800d838 <pvPortMalloc+0x150>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d700:	f000 f8f8 	bl	800d8f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d704:	4b4d      	ldr	r3, [pc, #308]	; (800d83c <pvPortMalloc+0x154>)
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4013      	ands	r3, r2
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f040 8083 	bne.w	800d818 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d015      	beq.n	800d744 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800d718:	2208      	movs	r2, #8
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4413      	add	r3, r2
 800d71e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f003 0307 	and.w	r3, r3, #7
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00c      	beq.n	800d744 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f023 0307 	bic.w	r3, r3, #7
 800d730:	3308      	adds	r3, #8
 800d732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f003 0307 	and.w	r3, r3, #7
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d002      	beq.n	800d744 <pvPortMalloc+0x5c>
 800d73e:	f7ff ff73 	bl	800d628 <ulSetInterruptMask>
 800d742:	e7fe      	b.n	800d742 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d066      	beq.n	800d818 <pvPortMalloc+0x130>
 800d74a:	4b3d      	ldr	r3, [pc, #244]	; (800d840 <pvPortMalloc+0x158>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	429a      	cmp	r2, r3
 800d752:	d861      	bhi.n	800d818 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d754:	4b3b      	ldr	r3, [pc, #236]	; (800d844 <pvPortMalloc+0x15c>)
 800d756:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800d758:	4b3a      	ldr	r3, [pc, #232]	; (800d844 <pvPortMalloc+0x15c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d75e:	e004      	b.n	800d76a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	429a      	cmp	r2, r3
 800d772:	d903      	bls.n	800d77c <pvPortMalloc+0x94>
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1f1      	bne.n	800d760 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d77c:	4b2e      	ldr	r3, [pc, #184]	; (800d838 <pvPortMalloc+0x150>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	429a      	cmp	r2, r3
 800d784:	d048      	beq.n	800d818 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2208      	movs	r2, #8
 800d78c:	4413      	add	r3, r2
 800d78e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	685a      	ldr	r2, [r3, #4]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	1ad2      	subs	r2, r2, r3
 800d7a0:	2308      	movs	r3, #8
 800d7a2:	005b      	lsls	r3, r3, #1
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d917      	bls.n	800d7d8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7a8:	697a      	ldr	r2, [r7, #20]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	f003 0307 	and.w	r3, r3, #7
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <pvPortMalloc+0xd8>
 800d7ba:	f7ff ff35 	bl	800d628 <ulSetInterruptMask>
 800d7be:	e7fe      	b.n	800d7be <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	685a      	ldr	r2, [r3, #4]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	1ad2      	subs	r2, r2, r3
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7d2:	68b8      	ldr	r0, [r7, #8]
 800d7d4:	f000 f8f0 	bl	800d9b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d7d8:	4b19      	ldr	r3, [pc, #100]	; (800d840 <pvPortMalloc+0x158>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	4a17      	ldr	r2, [pc, #92]	; (800d840 <pvPortMalloc+0x158>)
 800d7e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7e6:	4b16      	ldr	r3, [pc, #88]	; (800d840 <pvPortMalloc+0x158>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	4b17      	ldr	r3, [pc, #92]	; (800d848 <pvPortMalloc+0x160>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d203      	bcs.n	800d7fa <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7f2:	4b13      	ldr	r3, [pc, #76]	; (800d840 <pvPortMalloc+0x158>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a14      	ldr	r2, [pc, #80]	; (800d848 <pvPortMalloc+0x160>)
 800d7f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	685a      	ldr	r2, [r3, #4]
 800d7fe:	4b0f      	ldr	r3, [pc, #60]	; (800d83c <pvPortMalloc+0x154>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	431a      	orrs	r2, r3
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	2200      	movs	r2, #0
 800d80c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d80e:	4b0f      	ldr	r3, [pc, #60]	; (800d84c <pvPortMalloc+0x164>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	3301      	adds	r3, #1
 800d814:	4a0d      	ldr	r2, [pc, #52]	; (800d84c <pvPortMalloc+0x164>)
 800d816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d818:	f7fe fe2c 	bl	800c474 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f003 0307 	and.w	r3, r3, #7
 800d822:	2b00      	cmp	r3, #0
 800d824:	d002      	beq.n	800d82c <pvPortMalloc+0x144>
 800d826:	f7ff feff 	bl	800d628 <ulSetInterruptMask>
 800d82a:	e7fe      	b.n	800d82a <pvPortMalloc+0x142>
	return pvReturn;
 800d82c:	68fb      	ldr	r3, [r7, #12]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	200036b8 	.word	0x200036b8
 800d83c:	200036cc 	.word	0x200036cc
 800d840:	200036bc 	.word	0x200036bc
 800d844:	200036b0 	.word	0x200036b0
 800d848:	200036c0 	.word	0x200036c0
 800d84c:	200036c4 	.word	0x200036c4

0800d850 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d03d      	beq.n	800d8de <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d862:	2308      	movs	r3, #8
 800d864:	425b      	negs	r3, r3
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	4413      	add	r3, r2
 800d86a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	685a      	ldr	r2, [r3, #4]
 800d874:	4b1c      	ldr	r3, [pc, #112]	; (800d8e8 <vPortFree+0x98>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4013      	ands	r3, r2
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d102      	bne.n	800d884 <vPortFree+0x34>
 800d87e:	f7ff fed3 	bl	800d628 <ulSetInterruptMask>
 800d882:	e7fe      	b.n	800d882 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <vPortFree+0x42>
 800d88c:	f7ff fecc 	bl	800d628 <ulSetInterruptMask>
 800d890:	e7fe      	b.n	800d890 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	685a      	ldr	r2, [r3, #4]
 800d896:	4b14      	ldr	r3, [pc, #80]	; (800d8e8 <vPortFree+0x98>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4013      	ands	r3, r2
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d01e      	beq.n	800d8de <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d11a      	bne.n	800d8de <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	4b0e      	ldr	r3, [pc, #56]	; (800d8e8 <vPortFree+0x98>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	43db      	mvns	r3, r3
 800d8b2:	401a      	ands	r2, r3
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8b8:	f7fe fdce 	bl	800c458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	4b0a      	ldr	r3, [pc, #40]	; (800d8ec <vPortFree+0x9c>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	4a09      	ldr	r2, [pc, #36]	; (800d8ec <vPortFree+0x9c>)
 800d8c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8ca:	68b8      	ldr	r0, [r7, #8]
 800d8cc:	f000 f874 	bl	800d9b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d8d0:	4b07      	ldr	r3, [pc, #28]	; (800d8f0 <vPortFree+0xa0>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	4a06      	ldr	r2, [pc, #24]	; (800d8f0 <vPortFree+0xa0>)
 800d8d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d8da:	f7fe fdcb 	bl	800c474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8de:	bf00      	nop
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	200036cc 	.word	0x200036cc
 800d8ec:	200036bc 	.word	0x200036bc
 800d8f0:	200036c8 	.word	0x200036c8

0800d8f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d8fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d900:	4b27      	ldr	r3, [pc, #156]	; (800d9a0 <prvHeapInit+0xac>)
 800d902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f003 0307 	and.w	r3, r3, #7
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00c      	beq.n	800d928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	3307      	adds	r3, #7
 800d912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f023 0307 	bic.w	r3, r3, #7
 800d91a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	1ad3      	subs	r3, r2, r3
 800d922:	4a1f      	ldr	r2, [pc, #124]	; (800d9a0 <prvHeapInit+0xac>)
 800d924:	4413      	add	r3, r2
 800d926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d92c:	4a1d      	ldr	r2, [pc, #116]	; (800d9a4 <prvHeapInit+0xb0>)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d932:	4b1c      	ldr	r3, [pc, #112]	; (800d9a4 <prvHeapInit+0xb0>)
 800d934:	2200      	movs	r2, #0
 800d936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	4413      	add	r3, r2
 800d93e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d940:	2208      	movs	r2, #8
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	1a9b      	subs	r3, r3, r2
 800d946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f023 0307 	bic.w	r3, r3, #7
 800d94e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	4a15      	ldr	r2, [pc, #84]	; (800d9a8 <prvHeapInit+0xb4>)
 800d954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d956:	4b14      	ldr	r3, [pc, #80]	; (800d9a8 <prvHeapInit+0xb4>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2200      	movs	r2, #0
 800d95c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d95e:	4b12      	ldr	r3, [pc, #72]	; (800d9a8 <prvHeapInit+0xb4>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2200      	movs	r2, #0
 800d964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	1ad2      	subs	r2, r2, r3
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d974:	4b0c      	ldr	r3, [pc, #48]	; (800d9a8 <prvHeapInit+0xb4>)
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	4a0a      	ldr	r2, [pc, #40]	; (800d9ac <prvHeapInit+0xb8>)
 800d982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	4a09      	ldr	r2, [pc, #36]	; (800d9b0 <prvHeapInit+0xbc>)
 800d98a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d98c:	4b09      	ldr	r3, [pc, #36]	; (800d9b4 <prvHeapInit+0xc0>)
 800d98e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d992:	601a      	str	r2, [r3, #0]
}
 800d994:	bf00      	nop
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	200016b0 	.word	0x200016b0
 800d9a4:	200036b0 	.word	0x200036b0
 800d9a8:	200036b8 	.word	0x200036b8
 800d9ac:	200036c0 	.word	0x200036c0
 800d9b0:	200036bc 	.word	0x200036bc
 800d9b4:	200036cc 	.word	0x200036cc

0800d9b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9c0:	4b28      	ldr	r3, [pc, #160]	; (800da64 <prvInsertBlockIntoFreeList+0xac>)
 800d9c2:	60fb      	str	r3, [r7, #12]
 800d9c4:	e002      	b.n	800d9cc <prvInsertBlockIntoFreeList+0x14>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	60fb      	str	r3, [r7, #12]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d8f7      	bhi.n	800d9c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d108      	bne.n	800d9fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	685a      	ldr	r2, [r3, #4]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	441a      	add	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	68ba      	ldr	r2, [r7, #8]
 800da04:	441a      	add	r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d118      	bne.n	800da40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	4b15      	ldr	r3, [pc, #84]	; (800da68 <prvInsertBlockIntoFreeList+0xb0>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	429a      	cmp	r2, r3
 800da18:	d00d      	beq.n	800da36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	685a      	ldr	r2, [r3, #4]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	441a      	add	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	601a      	str	r2, [r3, #0]
 800da34:	e008      	b.n	800da48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da36:	4b0c      	ldr	r3, [pc, #48]	; (800da68 <prvInsertBlockIntoFreeList+0xb0>)
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	e003      	b.n	800da48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d002      	beq.n	800da56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da56:	bf00      	nop
 800da58:	3714      	adds	r7, #20
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	200036b0 	.word	0x200036b0
 800da68:	200036b8 	.word	0x200036b8

0800da6c <siscanf>:
 800da6c:	b40e      	push	{r1, r2, r3}
 800da6e:	b510      	push	{r4, lr}
 800da70:	b09f      	sub	sp, #124	; 0x7c
 800da72:	f44f 7101 	mov.w	r1, #516	; 0x204
 800da76:	ac21      	add	r4, sp, #132	; 0x84
 800da78:	f8ad 101c 	strh.w	r1, [sp, #28]
 800da7c:	9004      	str	r0, [sp, #16]
 800da7e:	f854 2b04 	ldr.w	r2, [r4], #4
 800da82:	9008      	str	r0, [sp, #32]
 800da84:	9201      	str	r2, [sp, #4]
 800da86:	f7f2 fbe5 	bl	8000254 <strlen>
 800da8a:	4b0c      	ldr	r3, [pc, #48]	; (800dabc <siscanf+0x50>)
 800da8c:	a904      	add	r1, sp, #16
 800da8e:	9005      	str	r0, [sp, #20]
 800da90:	930d      	str	r3, [sp, #52]	; 0x34
 800da92:	2300      	movs	r3, #0
 800da94:	9009      	str	r0, [sp, #36]	; 0x24
 800da96:	9311      	str	r3, [sp, #68]	; 0x44
 800da98:	9316      	str	r3, [sp, #88]	; 0x58
 800da9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da9e:	4808      	ldr	r0, [pc, #32]	; (800dac0 <siscanf+0x54>)
 800daa0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800daa4:	4623      	mov	r3, r4
 800daa6:	9a01      	ldr	r2, [sp, #4]
 800daa8:	6800      	ldr	r0, [r0, #0]
 800daaa:	9403      	str	r4, [sp, #12]
 800daac:	f000 f9a0 	bl	800ddf0 <__ssvfiscanf_r>
 800dab0:	b01f      	add	sp, #124	; 0x7c
 800dab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dab6:	b003      	add	sp, #12
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	0800dac5 	.word	0x0800dac5
 800dac0:	20000060 	.word	0x20000060

0800dac4 <__seofread>:
 800dac4:	2000      	movs	r0, #0
 800dac6:	4770      	bx	lr

0800dac8 <memset>:
 800dac8:	4402      	add	r2, r0
 800daca:	4603      	mov	r3, r0
 800dacc:	4293      	cmp	r3, r2
 800dace:	d100      	bne.n	800dad2 <memset+0xa>
 800dad0:	4770      	bx	lr
 800dad2:	f803 1b01 	strb.w	r1, [r3], #1
 800dad6:	e7f9      	b.n	800dacc <memset+0x4>

0800dad8 <__errno>:
 800dad8:	4b01      	ldr	r3, [pc, #4]	; (800dae0 <__errno+0x8>)
 800dada:	6818      	ldr	r0, [r3, #0]
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop
 800dae0:	20000060 	.word	0x20000060

0800dae4 <__libc_init_array>:
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	4d0d      	ldr	r5, [pc, #52]	; (800db1c <__libc_init_array+0x38>)
 800dae8:	2600      	movs	r6, #0
 800daea:	4c0d      	ldr	r4, [pc, #52]	; (800db20 <__libc_init_array+0x3c>)
 800daec:	1b64      	subs	r4, r4, r5
 800daee:	10a4      	asrs	r4, r4, #2
 800daf0:	42a6      	cmp	r6, r4
 800daf2:	d109      	bne.n	800db08 <__libc_init_array+0x24>
 800daf4:	4d0b      	ldr	r5, [pc, #44]	; (800db24 <__libc_init_array+0x40>)
 800daf6:	2600      	movs	r6, #0
 800daf8:	4c0b      	ldr	r4, [pc, #44]	; (800db28 <__libc_init_array+0x44>)
 800dafa:	f000 fdfb 	bl	800e6f4 <_init>
 800dafe:	1b64      	subs	r4, r4, r5
 800db00:	10a4      	asrs	r4, r4, #2
 800db02:	42a6      	cmp	r6, r4
 800db04:	d105      	bne.n	800db12 <__libc_init_array+0x2e>
 800db06:	bd70      	pop	{r4, r5, r6, pc}
 800db08:	f855 3b04 	ldr.w	r3, [r5], #4
 800db0c:	3601      	adds	r6, #1
 800db0e:	4798      	blx	r3
 800db10:	e7ee      	b.n	800daf0 <__libc_init_array+0xc>
 800db12:	f855 3b04 	ldr.w	r3, [r5], #4
 800db16:	3601      	adds	r6, #1
 800db18:	4798      	blx	r3
 800db1a:	e7f2      	b.n	800db02 <__libc_init_array+0x1e>
 800db1c:	0800e978 	.word	0x0800e978
 800db20:	0800e978 	.word	0x0800e978
 800db24:	0800e978 	.word	0x0800e978
 800db28:	0800e97c 	.word	0x0800e97c

0800db2c <__retarget_lock_acquire_recursive>:
 800db2c:	4770      	bx	lr

0800db2e <__retarget_lock_release_recursive>:
 800db2e:	4770      	bx	lr

0800db30 <memcpy>:
 800db30:	440a      	add	r2, r1
 800db32:	1e43      	subs	r3, r0, #1
 800db34:	4291      	cmp	r1, r2
 800db36:	d100      	bne.n	800db3a <memcpy+0xa>
 800db38:	4770      	bx	lr
 800db3a:	b510      	push	{r4, lr}
 800db3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db40:	4291      	cmp	r1, r2
 800db42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db46:	d1f9      	bne.n	800db3c <memcpy+0xc>
 800db48:	bd10      	pop	{r4, pc}
	...

0800db4c <_free_r>:
 800db4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db4e:	2900      	cmp	r1, #0
 800db50:	d043      	beq.n	800dbda <_free_r+0x8e>
 800db52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db56:	1f0c      	subs	r4, r1, #4
 800db58:	9001      	str	r0, [sp, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	bfb8      	it	lt
 800db5e:	18e4      	addlt	r4, r4, r3
 800db60:	f000 f8e0 	bl	800dd24 <__malloc_lock>
 800db64:	4a1e      	ldr	r2, [pc, #120]	; (800dbe0 <_free_r+0x94>)
 800db66:	9801      	ldr	r0, [sp, #4]
 800db68:	6813      	ldr	r3, [r2, #0]
 800db6a:	b933      	cbnz	r3, 800db7a <_free_r+0x2e>
 800db6c:	6063      	str	r3, [r4, #4]
 800db6e:	6014      	str	r4, [r2, #0]
 800db70:	b003      	add	sp, #12
 800db72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db76:	f000 b8db 	b.w	800dd30 <__malloc_unlock>
 800db7a:	42a3      	cmp	r3, r4
 800db7c:	d908      	bls.n	800db90 <_free_r+0x44>
 800db7e:	6825      	ldr	r5, [r4, #0]
 800db80:	1961      	adds	r1, r4, r5
 800db82:	428b      	cmp	r3, r1
 800db84:	bf01      	itttt	eq
 800db86:	6819      	ldreq	r1, [r3, #0]
 800db88:	685b      	ldreq	r3, [r3, #4]
 800db8a:	1949      	addeq	r1, r1, r5
 800db8c:	6021      	streq	r1, [r4, #0]
 800db8e:	e7ed      	b.n	800db6c <_free_r+0x20>
 800db90:	461a      	mov	r2, r3
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	b10b      	cbz	r3, 800db9a <_free_r+0x4e>
 800db96:	42a3      	cmp	r3, r4
 800db98:	d9fa      	bls.n	800db90 <_free_r+0x44>
 800db9a:	6811      	ldr	r1, [r2, #0]
 800db9c:	1855      	adds	r5, r2, r1
 800db9e:	42a5      	cmp	r5, r4
 800dba0:	d10b      	bne.n	800dbba <_free_r+0x6e>
 800dba2:	6824      	ldr	r4, [r4, #0]
 800dba4:	4421      	add	r1, r4
 800dba6:	1854      	adds	r4, r2, r1
 800dba8:	6011      	str	r1, [r2, #0]
 800dbaa:	42a3      	cmp	r3, r4
 800dbac:	d1e0      	bne.n	800db70 <_free_r+0x24>
 800dbae:	681c      	ldr	r4, [r3, #0]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	440c      	add	r4, r1
 800dbb4:	6053      	str	r3, [r2, #4]
 800dbb6:	6014      	str	r4, [r2, #0]
 800dbb8:	e7da      	b.n	800db70 <_free_r+0x24>
 800dbba:	d902      	bls.n	800dbc2 <_free_r+0x76>
 800dbbc:	230c      	movs	r3, #12
 800dbbe:	6003      	str	r3, [r0, #0]
 800dbc0:	e7d6      	b.n	800db70 <_free_r+0x24>
 800dbc2:	6825      	ldr	r5, [r4, #0]
 800dbc4:	1961      	adds	r1, r4, r5
 800dbc6:	428b      	cmp	r3, r1
 800dbc8:	bf02      	ittt	eq
 800dbca:	6819      	ldreq	r1, [r3, #0]
 800dbcc:	685b      	ldreq	r3, [r3, #4]
 800dbce:	1949      	addeq	r1, r1, r5
 800dbd0:	6063      	str	r3, [r4, #4]
 800dbd2:	bf08      	it	eq
 800dbd4:	6021      	streq	r1, [r4, #0]
 800dbd6:	6054      	str	r4, [r2, #4]
 800dbd8:	e7ca      	b.n	800db70 <_free_r+0x24>
 800dbda:	b003      	add	sp, #12
 800dbdc:	bd30      	pop	{r4, r5, pc}
 800dbde:	bf00      	nop
 800dbe0:	20003810 	.word	0x20003810

0800dbe4 <sbrk_aligned>:
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	4e0e      	ldr	r6, [pc, #56]	; (800dc20 <sbrk_aligned+0x3c>)
 800dbe8:	460c      	mov	r4, r1
 800dbea:	4605      	mov	r5, r0
 800dbec:	6831      	ldr	r1, [r6, #0]
 800dbee:	b911      	cbnz	r1, 800dbf6 <sbrk_aligned+0x12>
 800dbf0:	f000 fc32 	bl	800e458 <_sbrk_r>
 800dbf4:	6030      	str	r0, [r6, #0]
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	f000 fc2d 	bl	800e458 <_sbrk_r>
 800dbfe:	1c43      	adds	r3, r0, #1
 800dc00:	d00a      	beq.n	800dc18 <sbrk_aligned+0x34>
 800dc02:	1cc4      	adds	r4, r0, #3
 800dc04:	f024 0403 	bic.w	r4, r4, #3
 800dc08:	42a0      	cmp	r0, r4
 800dc0a:	d007      	beq.n	800dc1c <sbrk_aligned+0x38>
 800dc0c:	1a21      	subs	r1, r4, r0
 800dc0e:	4628      	mov	r0, r5
 800dc10:	f000 fc22 	bl	800e458 <_sbrk_r>
 800dc14:	3001      	adds	r0, #1
 800dc16:	d101      	bne.n	800dc1c <sbrk_aligned+0x38>
 800dc18:	f04f 34ff 	mov.w	r4, #4294967295
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	bd70      	pop	{r4, r5, r6, pc}
 800dc20:	20003814 	.word	0x20003814

0800dc24 <_malloc_r>:
 800dc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc28:	1ccd      	adds	r5, r1, #3
 800dc2a:	4607      	mov	r7, r0
 800dc2c:	f025 0503 	bic.w	r5, r5, #3
 800dc30:	3508      	adds	r5, #8
 800dc32:	2d0c      	cmp	r5, #12
 800dc34:	bf38      	it	cc
 800dc36:	250c      	movcc	r5, #12
 800dc38:	2d00      	cmp	r5, #0
 800dc3a:	db01      	blt.n	800dc40 <_malloc_r+0x1c>
 800dc3c:	42a9      	cmp	r1, r5
 800dc3e:	d905      	bls.n	800dc4c <_malloc_r+0x28>
 800dc40:	230c      	movs	r3, #12
 800dc42:	2600      	movs	r6, #0
 800dc44:	603b      	str	r3, [r7, #0]
 800dc46:	4630      	mov	r0, r6
 800dc48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dd20 <_malloc_r+0xfc>
 800dc50:	f000 f868 	bl	800dd24 <__malloc_lock>
 800dc54:	f8d8 3000 	ldr.w	r3, [r8]
 800dc58:	461c      	mov	r4, r3
 800dc5a:	bb5c      	cbnz	r4, 800dcb4 <_malloc_r+0x90>
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	4638      	mov	r0, r7
 800dc60:	f7ff ffc0 	bl	800dbe4 <sbrk_aligned>
 800dc64:	1c43      	adds	r3, r0, #1
 800dc66:	4604      	mov	r4, r0
 800dc68:	d155      	bne.n	800dd16 <_malloc_r+0xf2>
 800dc6a:	f8d8 4000 	ldr.w	r4, [r8]
 800dc6e:	4626      	mov	r6, r4
 800dc70:	2e00      	cmp	r6, #0
 800dc72:	d145      	bne.n	800dd00 <_malloc_r+0xdc>
 800dc74:	2c00      	cmp	r4, #0
 800dc76:	d048      	beq.n	800dd0a <_malloc_r+0xe6>
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	4631      	mov	r1, r6
 800dc7c:	4638      	mov	r0, r7
 800dc7e:	eb04 0903 	add.w	r9, r4, r3
 800dc82:	f000 fbe9 	bl	800e458 <_sbrk_r>
 800dc86:	4581      	cmp	r9, r0
 800dc88:	d13f      	bne.n	800dd0a <_malloc_r+0xe6>
 800dc8a:	6821      	ldr	r1, [r4, #0]
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	1a6d      	subs	r5, r5, r1
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7ff ffa7 	bl	800dbe4 <sbrk_aligned>
 800dc96:	3001      	adds	r0, #1
 800dc98:	d037      	beq.n	800dd0a <_malloc_r+0xe6>
 800dc9a:	6823      	ldr	r3, [r4, #0]
 800dc9c:	442b      	add	r3, r5
 800dc9e:	6023      	str	r3, [r4, #0]
 800dca0:	f8d8 3000 	ldr.w	r3, [r8]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d038      	beq.n	800dd1a <_malloc_r+0xf6>
 800dca8:	685a      	ldr	r2, [r3, #4]
 800dcaa:	42a2      	cmp	r2, r4
 800dcac:	d12b      	bne.n	800dd06 <_malloc_r+0xe2>
 800dcae:	2200      	movs	r2, #0
 800dcb0:	605a      	str	r2, [r3, #4]
 800dcb2:	e00f      	b.n	800dcd4 <_malloc_r+0xb0>
 800dcb4:	6822      	ldr	r2, [r4, #0]
 800dcb6:	1b52      	subs	r2, r2, r5
 800dcb8:	d41f      	bmi.n	800dcfa <_malloc_r+0xd6>
 800dcba:	2a0b      	cmp	r2, #11
 800dcbc:	d917      	bls.n	800dcee <_malloc_r+0xca>
 800dcbe:	1961      	adds	r1, r4, r5
 800dcc0:	42a3      	cmp	r3, r4
 800dcc2:	6025      	str	r5, [r4, #0]
 800dcc4:	bf18      	it	ne
 800dcc6:	6059      	strne	r1, [r3, #4]
 800dcc8:	6863      	ldr	r3, [r4, #4]
 800dcca:	bf08      	it	eq
 800dccc:	f8c8 1000 	streq.w	r1, [r8]
 800dcd0:	5162      	str	r2, [r4, r5]
 800dcd2:	604b      	str	r3, [r1, #4]
 800dcd4:	f104 060b 	add.w	r6, r4, #11
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f000 f829 	bl	800dd30 <__malloc_unlock>
 800dcde:	1d23      	adds	r3, r4, #4
 800dce0:	f026 0607 	bic.w	r6, r6, #7
 800dce4:	1af2      	subs	r2, r6, r3
 800dce6:	d0ae      	beq.n	800dc46 <_malloc_r+0x22>
 800dce8:	1b9b      	subs	r3, r3, r6
 800dcea:	50a3      	str	r3, [r4, r2]
 800dcec:	e7ab      	b.n	800dc46 <_malloc_r+0x22>
 800dcee:	42a3      	cmp	r3, r4
 800dcf0:	6862      	ldr	r2, [r4, #4]
 800dcf2:	d1dd      	bne.n	800dcb0 <_malloc_r+0x8c>
 800dcf4:	f8c8 2000 	str.w	r2, [r8]
 800dcf8:	e7ec      	b.n	800dcd4 <_malloc_r+0xb0>
 800dcfa:	4623      	mov	r3, r4
 800dcfc:	6864      	ldr	r4, [r4, #4]
 800dcfe:	e7ac      	b.n	800dc5a <_malloc_r+0x36>
 800dd00:	4634      	mov	r4, r6
 800dd02:	6876      	ldr	r6, [r6, #4]
 800dd04:	e7b4      	b.n	800dc70 <_malloc_r+0x4c>
 800dd06:	4613      	mov	r3, r2
 800dd08:	e7cc      	b.n	800dca4 <_malloc_r+0x80>
 800dd0a:	230c      	movs	r3, #12
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	603b      	str	r3, [r7, #0]
 800dd10:	f000 f80e 	bl	800dd30 <__malloc_unlock>
 800dd14:	e797      	b.n	800dc46 <_malloc_r+0x22>
 800dd16:	6025      	str	r5, [r4, #0]
 800dd18:	e7dc      	b.n	800dcd4 <_malloc_r+0xb0>
 800dd1a:	605b      	str	r3, [r3, #4]
 800dd1c:	deff      	udf	#255	; 0xff
 800dd1e:	bf00      	nop
 800dd20:	20003810 	.word	0x20003810

0800dd24 <__malloc_lock>:
 800dd24:	4801      	ldr	r0, [pc, #4]	; (800dd2c <__malloc_lock+0x8>)
 800dd26:	f7ff bf01 	b.w	800db2c <__retarget_lock_acquire_recursive>
 800dd2a:	bf00      	nop
 800dd2c:	2000380c 	.word	0x2000380c

0800dd30 <__malloc_unlock>:
 800dd30:	4801      	ldr	r0, [pc, #4]	; (800dd38 <__malloc_unlock+0x8>)
 800dd32:	f7ff befc 	b.w	800db2e <__retarget_lock_release_recursive>
 800dd36:	bf00      	nop
 800dd38:	2000380c 	.word	0x2000380c

0800dd3c <_sungetc_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	1c4b      	adds	r3, r1, #1
 800dd40:	4614      	mov	r4, r2
 800dd42:	d103      	bne.n	800dd4c <_sungetc_r+0x10>
 800dd44:	f04f 35ff 	mov.w	r5, #4294967295
 800dd48:	4628      	mov	r0, r5
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	8993      	ldrh	r3, [r2, #12]
 800dd4e:	b2cd      	uxtb	r5, r1
 800dd50:	f023 0320 	bic.w	r3, r3, #32
 800dd54:	8193      	strh	r3, [r2, #12]
 800dd56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd58:	6852      	ldr	r2, [r2, #4]
 800dd5a:	b18b      	cbz	r3, 800dd80 <_sungetc_r+0x44>
 800dd5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	dd08      	ble.n	800dd74 <_sungetc_r+0x38>
 800dd62:	6823      	ldr	r3, [r4, #0]
 800dd64:	1e5a      	subs	r2, r3, #1
 800dd66:	6022      	str	r2, [r4, #0]
 800dd68:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dd6c:	6863      	ldr	r3, [r4, #4]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	6063      	str	r3, [r4, #4]
 800dd72:	e7e9      	b.n	800dd48 <_sungetc_r+0xc>
 800dd74:	4621      	mov	r1, r4
 800dd76:	f000 fb38 	bl	800e3ea <__submore>
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	d0f1      	beq.n	800dd62 <_sungetc_r+0x26>
 800dd7e:	e7e1      	b.n	800dd44 <_sungetc_r+0x8>
 800dd80:	6921      	ldr	r1, [r4, #16]
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	b151      	cbz	r1, 800dd9c <_sungetc_r+0x60>
 800dd86:	4299      	cmp	r1, r3
 800dd88:	d208      	bcs.n	800dd9c <_sungetc_r+0x60>
 800dd8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800dd8e:	42a9      	cmp	r1, r5
 800dd90:	d104      	bne.n	800dd9c <_sungetc_r+0x60>
 800dd92:	3b01      	subs	r3, #1
 800dd94:	3201      	adds	r2, #1
 800dd96:	6023      	str	r3, [r4, #0]
 800dd98:	6062      	str	r2, [r4, #4]
 800dd9a:	e7d5      	b.n	800dd48 <_sungetc_r+0xc>
 800dd9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800dda0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dda4:	6363      	str	r3, [r4, #52]	; 0x34
 800dda6:	2303      	movs	r3, #3
 800dda8:	63a3      	str	r3, [r4, #56]	; 0x38
 800ddaa:	4623      	mov	r3, r4
 800ddac:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e7dc      	b.n	800dd70 <_sungetc_r+0x34>

0800ddb6 <__ssrefill_r>:
 800ddb6:	b510      	push	{r4, lr}
 800ddb8:	460c      	mov	r4, r1
 800ddba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ddbc:	b169      	cbz	r1, 800ddda <__ssrefill_r+0x24>
 800ddbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddc2:	4299      	cmp	r1, r3
 800ddc4:	d001      	beq.n	800ddca <__ssrefill_r+0x14>
 800ddc6:	f7ff fec1 	bl	800db4c <_free_r>
 800ddca:	2000      	movs	r0, #0
 800ddcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddce:	6360      	str	r0, [r4, #52]	; 0x34
 800ddd0:	6063      	str	r3, [r4, #4]
 800ddd2:	b113      	cbz	r3, 800ddda <__ssrefill_r+0x24>
 800ddd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ddd6:	6023      	str	r3, [r4, #0]
 800ddd8:	bd10      	pop	{r4, pc}
 800ddda:	6923      	ldr	r3, [r4, #16]
 800dddc:	f04f 30ff 	mov.w	r0, #4294967295
 800dde0:	6023      	str	r3, [r4, #0]
 800dde2:	2300      	movs	r3, #0
 800dde4:	6063      	str	r3, [r4, #4]
 800dde6:	89a3      	ldrh	r3, [r4, #12]
 800dde8:	f043 0320 	orr.w	r3, r3, #32
 800ddec:	81a3      	strh	r3, [r4, #12]
 800ddee:	e7f3      	b.n	800ddd8 <__ssrefill_r+0x22>

0800ddf0 <__ssvfiscanf_r>:
 800ddf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf4:	460c      	mov	r4, r1
 800ddf6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	4606      	mov	r6, r0
 800ddfe:	f10d 0804 	add.w	r8, sp, #4
 800de02:	4fa6      	ldr	r7, [pc, #664]	; (800e09c <__ssvfiscanf_r+0x2ac>)
 800de04:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 800e0a8 <__ssvfiscanf_r+0x2b8>
 800de08:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800de12:	49a3      	ldr	r1, [pc, #652]	; (800e0a0 <__ssvfiscanf_r+0x2b0>)
 800de14:	91a0      	str	r1, [sp, #640]	; 0x280
 800de16:	49a3      	ldr	r1, [pc, #652]	; (800e0a4 <__ssvfiscanf_r+0x2b4>)
 800de18:	91a1      	str	r1, [sp, #644]	; 0x284
 800de1a:	7813      	ldrb	r3, [r2, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f000 815a 	beq.w	800e0d6 <__ssvfiscanf_r+0x2e6>
 800de22:	5cf9      	ldrb	r1, [r7, r3]
 800de24:	1c55      	adds	r5, r2, #1
 800de26:	f011 0108 	ands.w	r1, r1, #8
 800de2a:	d019      	beq.n	800de60 <__ssvfiscanf_r+0x70>
 800de2c:	6863      	ldr	r3, [r4, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	dd0f      	ble.n	800de52 <__ssvfiscanf_r+0x62>
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	781a      	ldrb	r2, [r3, #0]
 800de36:	5cba      	ldrb	r2, [r7, r2]
 800de38:	0712      	lsls	r2, r2, #28
 800de3a:	d401      	bmi.n	800de40 <__ssvfiscanf_r+0x50>
 800de3c:	462a      	mov	r2, r5
 800de3e:	e7ec      	b.n	800de1a <__ssvfiscanf_r+0x2a>
 800de40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800de42:	3301      	adds	r3, #1
 800de44:	3201      	adds	r2, #1
 800de46:	6023      	str	r3, [r4, #0]
 800de48:	9245      	str	r2, [sp, #276]	; 0x114
 800de4a:	6862      	ldr	r2, [r4, #4]
 800de4c:	3a01      	subs	r2, #1
 800de4e:	6062      	str	r2, [r4, #4]
 800de50:	e7ec      	b.n	800de2c <__ssvfiscanf_r+0x3c>
 800de52:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800de54:	4621      	mov	r1, r4
 800de56:	4630      	mov	r0, r6
 800de58:	4798      	blx	r3
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d0e9      	beq.n	800de32 <__ssvfiscanf_r+0x42>
 800de5e:	e7ed      	b.n	800de3c <__ssvfiscanf_r+0x4c>
 800de60:	2b25      	cmp	r3, #37	; 0x25
 800de62:	d012      	beq.n	800de8a <__ssvfiscanf_r+0x9a>
 800de64:	469a      	mov	sl, r3
 800de66:	6863      	ldr	r3, [r4, #4]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f340 8092 	ble.w	800df92 <__ssvfiscanf_r+0x1a2>
 800de6e:	6822      	ldr	r2, [r4, #0]
 800de70:	7813      	ldrb	r3, [r2, #0]
 800de72:	4553      	cmp	r3, sl
 800de74:	f040 812f 	bne.w	800e0d6 <__ssvfiscanf_r+0x2e6>
 800de78:	6863      	ldr	r3, [r4, #4]
 800de7a:	3201      	adds	r2, #1
 800de7c:	3b01      	subs	r3, #1
 800de7e:	6022      	str	r2, [r4, #0]
 800de80:	6063      	str	r3, [r4, #4]
 800de82:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800de84:	3301      	adds	r3, #1
 800de86:	9345      	str	r3, [sp, #276]	; 0x114
 800de88:	e7d8      	b.n	800de3c <__ssvfiscanf_r+0x4c>
 800de8a:	9141      	str	r1, [sp, #260]	; 0x104
 800de8c:	9143      	str	r1, [sp, #268]	; 0x10c
 800de8e:	7853      	ldrb	r3, [r2, #1]
 800de90:	2b2a      	cmp	r3, #42	; 0x2a
 800de92:	bf04      	itt	eq
 800de94:	2310      	moveq	r3, #16
 800de96:	1c95      	addeq	r5, r2, #2
 800de98:	f04f 020a 	mov.w	r2, #10
 800de9c:	bf08      	it	eq
 800de9e:	9341      	streq	r3, [sp, #260]	; 0x104
 800dea0:	46aa      	mov	sl, r5
 800dea2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800dea6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800deaa:	2b09      	cmp	r3, #9
 800deac:	d91c      	bls.n	800dee8 <__ssvfiscanf_r+0xf8>
 800deae:	2203      	movs	r2, #3
 800deb0:	487d      	ldr	r0, [pc, #500]	; (800e0a8 <__ssvfiscanf_r+0x2b8>)
 800deb2:	f000 fae1 	bl	800e478 <memchr>
 800deb6:	b138      	cbz	r0, 800dec8 <__ssvfiscanf_r+0xd8>
 800deb8:	eba0 0009 	sub.w	r0, r0, r9
 800debc:	2301      	movs	r3, #1
 800debe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dec0:	4655      	mov	r5, sl
 800dec2:	4083      	lsls	r3, r0
 800dec4:	4313      	orrs	r3, r2
 800dec6:	9341      	str	r3, [sp, #260]	; 0x104
 800dec8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800decc:	2b78      	cmp	r3, #120	; 0x78
 800dece:	d806      	bhi.n	800dede <__ssvfiscanf_r+0xee>
 800ded0:	2b57      	cmp	r3, #87	; 0x57
 800ded2:	d810      	bhi.n	800def6 <__ssvfiscanf_r+0x106>
 800ded4:	2b25      	cmp	r3, #37	; 0x25
 800ded6:	d0c5      	beq.n	800de64 <__ssvfiscanf_r+0x74>
 800ded8:	d856      	bhi.n	800df88 <__ssvfiscanf_r+0x198>
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d064      	beq.n	800dfa8 <__ssvfiscanf_r+0x1b8>
 800dede:	2303      	movs	r3, #3
 800dee0:	9347      	str	r3, [sp, #284]	; 0x11c
 800dee2:	230a      	movs	r3, #10
 800dee4:	9342      	str	r3, [sp, #264]	; 0x108
 800dee6:	e075      	b.n	800dfd4 <__ssvfiscanf_r+0x1e4>
 800dee8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800deea:	4655      	mov	r5, sl
 800deec:	fb02 1103 	mla	r1, r2, r3, r1
 800def0:	3930      	subs	r1, #48	; 0x30
 800def2:	9143      	str	r1, [sp, #268]	; 0x10c
 800def4:	e7d4      	b.n	800dea0 <__ssvfiscanf_r+0xb0>
 800def6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800defa:	2a20      	cmp	r2, #32
 800defc:	d8ef      	bhi.n	800dede <__ssvfiscanf_r+0xee>
 800defe:	a101      	add	r1, pc, #4	; (adr r1, 800df04 <__ssvfiscanf_r+0x114>)
 800df00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df04:	0800dfb7 	.word	0x0800dfb7
 800df08:	0800dedf 	.word	0x0800dedf
 800df0c:	0800dedf 	.word	0x0800dedf
 800df10:	0800e015 	.word	0x0800e015
 800df14:	0800dedf 	.word	0x0800dedf
 800df18:	0800dedf 	.word	0x0800dedf
 800df1c:	0800dedf 	.word	0x0800dedf
 800df20:	0800dedf 	.word	0x0800dedf
 800df24:	0800dedf 	.word	0x0800dedf
 800df28:	0800dedf 	.word	0x0800dedf
 800df2c:	0800dedf 	.word	0x0800dedf
 800df30:	0800e02b 	.word	0x0800e02b
 800df34:	0800e011 	.word	0x0800e011
 800df38:	0800df8f 	.word	0x0800df8f
 800df3c:	0800df8f 	.word	0x0800df8f
 800df40:	0800df8f 	.word	0x0800df8f
 800df44:	0800dedf 	.word	0x0800dedf
 800df48:	0800dfcd 	.word	0x0800dfcd
 800df4c:	0800dedf 	.word	0x0800dedf
 800df50:	0800dedf 	.word	0x0800dedf
 800df54:	0800dedf 	.word	0x0800dedf
 800df58:	0800dedf 	.word	0x0800dedf
 800df5c:	0800e03b 	.word	0x0800e03b
 800df60:	0800e009 	.word	0x0800e009
 800df64:	0800dfaf 	.word	0x0800dfaf
 800df68:	0800dedf 	.word	0x0800dedf
 800df6c:	0800dedf 	.word	0x0800dedf
 800df70:	0800e037 	.word	0x0800e037
 800df74:	0800dedf 	.word	0x0800dedf
 800df78:	0800e011 	.word	0x0800e011
 800df7c:	0800dedf 	.word	0x0800dedf
 800df80:	0800dedf 	.word	0x0800dedf
 800df84:	0800dfb7 	.word	0x0800dfb7
 800df88:	3b45      	subs	r3, #69	; 0x45
 800df8a:	2b02      	cmp	r3, #2
 800df8c:	d8a7      	bhi.n	800dede <__ssvfiscanf_r+0xee>
 800df8e:	2305      	movs	r3, #5
 800df90:	e01f      	b.n	800dfd2 <__ssvfiscanf_r+0x1e2>
 800df92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800df94:	4621      	mov	r1, r4
 800df96:	4630      	mov	r0, r6
 800df98:	4798      	blx	r3
 800df9a:	2800      	cmp	r0, #0
 800df9c:	f43f af67 	beq.w	800de6e <__ssvfiscanf_r+0x7e>
 800dfa0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	f040 808d 	bne.w	800e0c2 <__ssvfiscanf_r+0x2d2>
 800dfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfac:	e08f      	b.n	800e0ce <__ssvfiscanf_r+0x2de>
 800dfae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dfb0:	f042 0220 	orr.w	r2, r2, #32
 800dfb4:	9241      	str	r2, [sp, #260]	; 0x104
 800dfb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dfb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dfbc:	9241      	str	r2, [sp, #260]	; 0x104
 800dfbe:	2210      	movs	r2, #16
 800dfc0:	2b6f      	cmp	r3, #111	; 0x6f
 800dfc2:	9242      	str	r2, [sp, #264]	; 0x108
 800dfc4:	bf34      	ite	cc
 800dfc6:	2303      	movcc	r3, #3
 800dfc8:	2304      	movcs	r3, #4
 800dfca:	e002      	b.n	800dfd2 <__ssvfiscanf_r+0x1e2>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	9342      	str	r3, [sp, #264]	; 0x108
 800dfd0:	2303      	movs	r3, #3
 800dfd2:	9347      	str	r3, [sp, #284]	; 0x11c
 800dfd4:	6863      	ldr	r3, [r4, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	dd3e      	ble.n	800e058 <__ssvfiscanf_r+0x268>
 800dfda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dfdc:	0659      	lsls	r1, r3, #25
 800dfde:	d404      	bmi.n	800dfea <__ssvfiscanf_r+0x1fa>
 800dfe0:	6823      	ldr	r3, [r4, #0]
 800dfe2:	781a      	ldrb	r2, [r3, #0]
 800dfe4:	5cba      	ldrb	r2, [r7, r2]
 800dfe6:	0712      	lsls	r2, r2, #28
 800dfe8:	d43d      	bmi.n	800e066 <__ssvfiscanf_r+0x276>
 800dfea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800dfec:	2b02      	cmp	r3, #2
 800dfee:	dc4c      	bgt.n	800e08a <__ssvfiscanf_r+0x29a>
 800dff0:	466b      	mov	r3, sp
 800dff2:	4622      	mov	r2, r4
 800dff4:	a941      	add	r1, sp, #260	; 0x104
 800dff6:	4630      	mov	r0, r6
 800dff8:	f000 f872 	bl	800e0e0 <_scanf_chars>
 800dffc:	2801      	cmp	r0, #1
 800dffe:	d06a      	beq.n	800e0d6 <__ssvfiscanf_r+0x2e6>
 800e000:	2802      	cmp	r0, #2
 800e002:	f47f af1b 	bne.w	800de3c <__ssvfiscanf_r+0x4c>
 800e006:	e7cb      	b.n	800dfa0 <__ssvfiscanf_r+0x1b0>
 800e008:	2308      	movs	r3, #8
 800e00a:	9342      	str	r3, [sp, #264]	; 0x108
 800e00c:	2304      	movs	r3, #4
 800e00e:	e7e0      	b.n	800dfd2 <__ssvfiscanf_r+0x1e2>
 800e010:	220a      	movs	r2, #10
 800e012:	e7d5      	b.n	800dfc0 <__ssvfiscanf_r+0x1d0>
 800e014:	4629      	mov	r1, r5
 800e016:	4640      	mov	r0, r8
 800e018:	f000 f9ae 	bl	800e378 <__sccl>
 800e01c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e01e:	4605      	mov	r5, r0
 800e020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e024:	9341      	str	r3, [sp, #260]	; 0x104
 800e026:	2301      	movs	r3, #1
 800e028:	e7d3      	b.n	800dfd2 <__ssvfiscanf_r+0x1e2>
 800e02a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e02c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e030:	9341      	str	r3, [sp, #260]	; 0x104
 800e032:	2300      	movs	r3, #0
 800e034:	e7cd      	b.n	800dfd2 <__ssvfiscanf_r+0x1e2>
 800e036:	2302      	movs	r3, #2
 800e038:	e7cb      	b.n	800dfd2 <__ssvfiscanf_r+0x1e2>
 800e03a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e03c:	06c3      	lsls	r3, r0, #27
 800e03e:	f53f aefd 	bmi.w	800de3c <__ssvfiscanf_r+0x4c>
 800e042:	9b00      	ldr	r3, [sp, #0]
 800e044:	07c0      	lsls	r0, r0, #31
 800e046:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e048:	f103 0104 	add.w	r1, r3, #4
 800e04c:	9100      	str	r1, [sp, #0]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	bf4c      	ite	mi
 800e052:	801a      	strhmi	r2, [r3, #0]
 800e054:	601a      	strpl	r2, [r3, #0]
 800e056:	e6f1      	b.n	800de3c <__ssvfiscanf_r+0x4c>
 800e058:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e05a:	4621      	mov	r1, r4
 800e05c:	4630      	mov	r0, r6
 800e05e:	4798      	blx	r3
 800e060:	2800      	cmp	r0, #0
 800e062:	d0ba      	beq.n	800dfda <__ssvfiscanf_r+0x1ea>
 800e064:	e79c      	b.n	800dfa0 <__ssvfiscanf_r+0x1b0>
 800e066:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e068:	3201      	adds	r2, #1
 800e06a:	9245      	str	r2, [sp, #276]	; 0x114
 800e06c:	6862      	ldr	r2, [r4, #4]
 800e06e:	3a01      	subs	r2, #1
 800e070:	2a00      	cmp	r2, #0
 800e072:	6062      	str	r2, [r4, #4]
 800e074:	dd02      	ble.n	800e07c <__ssvfiscanf_r+0x28c>
 800e076:	3301      	adds	r3, #1
 800e078:	6023      	str	r3, [r4, #0]
 800e07a:	e7b1      	b.n	800dfe0 <__ssvfiscanf_r+0x1f0>
 800e07c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e07e:	4621      	mov	r1, r4
 800e080:	4630      	mov	r0, r6
 800e082:	4798      	blx	r3
 800e084:	2800      	cmp	r0, #0
 800e086:	d0ab      	beq.n	800dfe0 <__ssvfiscanf_r+0x1f0>
 800e088:	e78a      	b.n	800dfa0 <__ssvfiscanf_r+0x1b0>
 800e08a:	2b04      	cmp	r3, #4
 800e08c:	dc0e      	bgt.n	800e0ac <__ssvfiscanf_r+0x2bc>
 800e08e:	466b      	mov	r3, sp
 800e090:	4622      	mov	r2, r4
 800e092:	a941      	add	r1, sp, #260	; 0x104
 800e094:	4630      	mov	r0, r6
 800e096:	f000 f87d 	bl	800e194 <_scanf_i>
 800e09a:	e7af      	b.n	800dffc <__ssvfiscanf_r+0x20c>
 800e09c:	0800e870 	.word	0x0800e870
 800e0a0:	0800dd3d 	.word	0x0800dd3d
 800e0a4:	0800ddb7 	.word	0x0800ddb7
 800e0a8:	0800e850 	.word	0x0800e850
 800e0ac:	4b0b      	ldr	r3, [pc, #44]	; (800e0dc <__ssvfiscanf_r+0x2ec>)
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f43f aec4 	beq.w	800de3c <__ssvfiscanf_r+0x4c>
 800e0b4:	466b      	mov	r3, sp
 800e0b6:	4622      	mov	r2, r4
 800e0b8:	a941      	add	r1, sp, #260	; 0x104
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	f3af 8000 	nop.w
 800e0c0:	e79c      	b.n	800dffc <__ssvfiscanf_r+0x20c>
 800e0c2:	89a3      	ldrh	r3, [r4, #12]
 800e0c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e0c8:	bf18      	it	ne
 800e0ca:	f04f 30ff 	movne.w	r0, #4294967295
 800e0ce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0d6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e0d8:	e7f9      	b.n	800e0ce <__ssvfiscanf_r+0x2de>
 800e0da:	bf00      	nop
 800e0dc:	00000000 	.word	0x00000000

0800e0e0 <_scanf_chars>:
 800e0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e4:	4615      	mov	r5, r2
 800e0e6:	688a      	ldr	r2, [r1, #8]
 800e0e8:	4680      	mov	r8, r0
 800e0ea:	460c      	mov	r4, r1
 800e0ec:	b932      	cbnz	r2, 800e0fc <_scanf_chars+0x1c>
 800e0ee:	698a      	ldr	r2, [r1, #24]
 800e0f0:	2a00      	cmp	r2, #0
 800e0f2:	bf0c      	ite	eq
 800e0f4:	2201      	moveq	r2, #1
 800e0f6:	f04f 32ff 	movne.w	r2, #4294967295
 800e0fa:	608a      	str	r2, [r1, #8]
 800e0fc:	6822      	ldr	r2, [r4, #0]
 800e0fe:	2700      	movs	r7, #0
 800e100:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e190 <_scanf_chars+0xb0>
 800e104:	06d1      	lsls	r1, r2, #27
 800e106:	bf5f      	itttt	pl
 800e108:	681a      	ldrpl	r2, [r3, #0]
 800e10a:	1d11      	addpl	r1, r2, #4
 800e10c:	6019      	strpl	r1, [r3, #0]
 800e10e:	6816      	ldrpl	r6, [r2, #0]
 800e110:	69a0      	ldr	r0, [r4, #24]
 800e112:	b188      	cbz	r0, 800e138 <_scanf_chars+0x58>
 800e114:	2801      	cmp	r0, #1
 800e116:	d107      	bne.n	800e128 <_scanf_chars+0x48>
 800e118:	682a      	ldr	r2, [r5, #0]
 800e11a:	7811      	ldrb	r1, [r2, #0]
 800e11c:	6962      	ldr	r2, [r4, #20]
 800e11e:	5c52      	ldrb	r2, [r2, r1]
 800e120:	b952      	cbnz	r2, 800e138 <_scanf_chars+0x58>
 800e122:	2f00      	cmp	r7, #0
 800e124:	d031      	beq.n	800e18a <_scanf_chars+0xaa>
 800e126:	e022      	b.n	800e16e <_scanf_chars+0x8e>
 800e128:	2802      	cmp	r0, #2
 800e12a:	d120      	bne.n	800e16e <_scanf_chars+0x8e>
 800e12c:	682b      	ldr	r3, [r5, #0]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e134:	071b      	lsls	r3, r3, #28
 800e136:	d41a      	bmi.n	800e16e <_scanf_chars+0x8e>
 800e138:	6823      	ldr	r3, [r4, #0]
 800e13a:	3701      	adds	r7, #1
 800e13c:	06da      	lsls	r2, r3, #27
 800e13e:	bf5e      	ittt	pl
 800e140:	682b      	ldrpl	r3, [r5, #0]
 800e142:	781b      	ldrbpl	r3, [r3, #0]
 800e144:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e148:	682a      	ldr	r2, [r5, #0]
 800e14a:	686b      	ldr	r3, [r5, #4]
 800e14c:	3201      	adds	r2, #1
 800e14e:	3b01      	subs	r3, #1
 800e150:	602a      	str	r2, [r5, #0]
 800e152:	68a2      	ldr	r2, [r4, #8]
 800e154:	606b      	str	r3, [r5, #4]
 800e156:	3a01      	subs	r2, #1
 800e158:	60a2      	str	r2, [r4, #8]
 800e15a:	b142      	cbz	r2, 800e16e <_scanf_chars+0x8e>
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	dcd7      	bgt.n	800e110 <_scanf_chars+0x30>
 800e160:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e164:	4629      	mov	r1, r5
 800e166:	4640      	mov	r0, r8
 800e168:	4798      	blx	r3
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d0d0      	beq.n	800e110 <_scanf_chars+0x30>
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	f013 0310 	ands.w	r3, r3, #16
 800e174:	d105      	bne.n	800e182 <_scanf_chars+0xa2>
 800e176:	68e2      	ldr	r2, [r4, #12]
 800e178:	3201      	adds	r2, #1
 800e17a:	60e2      	str	r2, [r4, #12]
 800e17c:	69a2      	ldr	r2, [r4, #24]
 800e17e:	b102      	cbz	r2, 800e182 <_scanf_chars+0xa2>
 800e180:	7033      	strb	r3, [r6, #0]
 800e182:	6923      	ldr	r3, [r4, #16]
 800e184:	2000      	movs	r0, #0
 800e186:	443b      	add	r3, r7
 800e188:	6123      	str	r3, [r4, #16]
 800e18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e18e:	bf00      	nop
 800e190:	0800e870 	.word	0x0800e870

0800e194 <_scanf_i>:
 800e194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e198:	4698      	mov	r8, r3
 800e19a:	b087      	sub	sp, #28
 800e19c:	4b72      	ldr	r3, [pc, #456]	; (800e368 <_scanf_i+0x1d4>)
 800e19e:	460c      	mov	r4, r1
 800e1a0:	4682      	mov	sl, r0
 800e1a2:	4616      	mov	r6, r2
 800e1a4:	4627      	mov	r7, r4
 800e1a6:	f04f 0b00 	mov.w	fp, #0
 800e1aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1ae:	ab03      	add	r3, sp, #12
 800e1b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e1b4:	4b6d      	ldr	r3, [pc, #436]	; (800e36c <_scanf_i+0x1d8>)
 800e1b6:	69a1      	ldr	r1, [r4, #24]
 800e1b8:	4a6d      	ldr	r2, [pc, #436]	; (800e370 <_scanf_i+0x1dc>)
 800e1ba:	2903      	cmp	r1, #3
 800e1bc:	bf18      	it	ne
 800e1be:	461a      	movne	r2, r3
 800e1c0:	68a3      	ldr	r3, [r4, #8]
 800e1c2:	9201      	str	r2, [sp, #4]
 800e1c4:	1e5a      	subs	r2, r3, #1
 800e1c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e1ca:	bf89      	itett	hi
 800e1cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e1d0:	f04f 0900 	movls.w	r9, #0
 800e1d4:	eb03 0905 	addhi.w	r9, r3, r5
 800e1d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e1dc:	bf88      	it	hi
 800e1de:	60a3      	strhi	r3, [r4, #8]
 800e1e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e1e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e1e8:	463d      	mov	r5, r7
 800e1ea:	6023      	str	r3, [r4, #0]
 800e1ec:	6831      	ldr	r1, [r6, #0]
 800e1ee:	ab03      	add	r3, sp, #12
 800e1f0:	2202      	movs	r2, #2
 800e1f2:	7809      	ldrb	r1, [r1, #0]
 800e1f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e1f8:	f000 f93e 	bl	800e478 <memchr>
 800e1fc:	b328      	cbz	r0, 800e24a <_scanf_i+0xb6>
 800e1fe:	f1bb 0f01 	cmp.w	fp, #1
 800e202:	d159      	bne.n	800e2b8 <_scanf_i+0x124>
 800e204:	6862      	ldr	r2, [r4, #4]
 800e206:	b92a      	cbnz	r2, 800e214 <_scanf_i+0x80>
 800e208:	6822      	ldr	r2, [r4, #0]
 800e20a:	2308      	movs	r3, #8
 800e20c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e210:	6063      	str	r3, [r4, #4]
 800e212:	6022      	str	r2, [r4, #0]
 800e214:	6822      	ldr	r2, [r4, #0]
 800e216:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e21a:	6022      	str	r2, [r4, #0]
 800e21c:	68a2      	ldr	r2, [r4, #8]
 800e21e:	1e51      	subs	r1, r2, #1
 800e220:	60a1      	str	r1, [r4, #8]
 800e222:	b192      	cbz	r2, 800e24a <_scanf_i+0xb6>
 800e224:	6832      	ldr	r2, [r6, #0]
 800e226:	1c51      	adds	r1, r2, #1
 800e228:	6031      	str	r1, [r6, #0]
 800e22a:	7812      	ldrb	r2, [r2, #0]
 800e22c:	f805 2b01 	strb.w	r2, [r5], #1
 800e230:	6872      	ldr	r2, [r6, #4]
 800e232:	3a01      	subs	r2, #1
 800e234:	2a00      	cmp	r2, #0
 800e236:	6072      	str	r2, [r6, #4]
 800e238:	dc07      	bgt.n	800e24a <_scanf_i+0xb6>
 800e23a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e23e:	4631      	mov	r1, r6
 800e240:	4650      	mov	r0, sl
 800e242:	4790      	blx	r2
 800e244:	2800      	cmp	r0, #0
 800e246:	f040 8085 	bne.w	800e354 <_scanf_i+0x1c0>
 800e24a:	f10b 0b01 	add.w	fp, fp, #1
 800e24e:	f1bb 0f03 	cmp.w	fp, #3
 800e252:	d1cb      	bne.n	800e1ec <_scanf_i+0x58>
 800e254:	6863      	ldr	r3, [r4, #4]
 800e256:	b90b      	cbnz	r3, 800e25c <_scanf_i+0xc8>
 800e258:	230a      	movs	r3, #10
 800e25a:	6063      	str	r3, [r4, #4]
 800e25c:	6863      	ldr	r3, [r4, #4]
 800e25e:	f04f 0b00 	mov.w	fp, #0
 800e262:	4944      	ldr	r1, [pc, #272]	; (800e374 <_scanf_i+0x1e0>)
 800e264:	6960      	ldr	r0, [r4, #20]
 800e266:	1ac9      	subs	r1, r1, r3
 800e268:	f000 f886 	bl	800e378 <__sccl>
 800e26c:	68a3      	ldr	r3, [r4, #8]
 800e26e:	6822      	ldr	r2, [r4, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d03d      	beq.n	800e2f0 <_scanf_i+0x15c>
 800e274:	6831      	ldr	r1, [r6, #0]
 800e276:	6960      	ldr	r0, [r4, #20]
 800e278:	f891 c000 	ldrb.w	ip, [r1]
 800e27c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e280:	2800      	cmp	r0, #0
 800e282:	d035      	beq.n	800e2f0 <_scanf_i+0x15c>
 800e284:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e288:	d124      	bne.n	800e2d4 <_scanf_i+0x140>
 800e28a:	0510      	lsls	r0, r2, #20
 800e28c:	d522      	bpl.n	800e2d4 <_scanf_i+0x140>
 800e28e:	f10b 0b01 	add.w	fp, fp, #1
 800e292:	f1b9 0f00 	cmp.w	r9, #0
 800e296:	d003      	beq.n	800e2a0 <_scanf_i+0x10c>
 800e298:	3301      	adds	r3, #1
 800e29a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e29e:	60a3      	str	r3, [r4, #8]
 800e2a0:	6873      	ldr	r3, [r6, #4]
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	6073      	str	r3, [r6, #4]
 800e2a8:	dd1b      	ble.n	800e2e2 <_scanf_i+0x14e>
 800e2aa:	6833      	ldr	r3, [r6, #0]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	6033      	str	r3, [r6, #0]
 800e2b0:	68a3      	ldr	r3, [r4, #8]
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	60a3      	str	r3, [r4, #8]
 800e2b6:	e7d9      	b.n	800e26c <_scanf_i+0xd8>
 800e2b8:	f1bb 0f02 	cmp.w	fp, #2
 800e2bc:	d1ae      	bne.n	800e21c <_scanf_i+0x88>
 800e2be:	6822      	ldr	r2, [r4, #0]
 800e2c0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e2c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e2c8:	d1bf      	bne.n	800e24a <_scanf_i+0xb6>
 800e2ca:	2310      	movs	r3, #16
 800e2cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2d0:	6063      	str	r3, [r4, #4]
 800e2d2:	e7a2      	b.n	800e21a <_scanf_i+0x86>
 800e2d4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e2d8:	6022      	str	r2, [r4, #0]
 800e2da:	780b      	ldrb	r3, [r1, #0]
 800e2dc:	f805 3b01 	strb.w	r3, [r5], #1
 800e2e0:	e7de      	b.n	800e2a0 <_scanf_i+0x10c>
 800e2e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e2e6:	4631      	mov	r1, r6
 800e2e8:	4650      	mov	r0, sl
 800e2ea:	4798      	blx	r3
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d0df      	beq.n	800e2b0 <_scanf_i+0x11c>
 800e2f0:	6823      	ldr	r3, [r4, #0]
 800e2f2:	05d9      	lsls	r1, r3, #23
 800e2f4:	d50d      	bpl.n	800e312 <_scanf_i+0x17e>
 800e2f6:	42bd      	cmp	r5, r7
 800e2f8:	d909      	bls.n	800e30e <_scanf_i+0x17a>
 800e2fa:	f105 39ff 	add.w	r9, r5, #4294967295
 800e2fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e302:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e306:	4632      	mov	r2, r6
 800e308:	464d      	mov	r5, r9
 800e30a:	4650      	mov	r0, sl
 800e30c:	4798      	blx	r3
 800e30e:	42bd      	cmp	r5, r7
 800e310:	d028      	beq.n	800e364 <_scanf_i+0x1d0>
 800e312:	6822      	ldr	r2, [r4, #0]
 800e314:	f012 0210 	ands.w	r2, r2, #16
 800e318:	d113      	bne.n	800e342 <_scanf_i+0x1ae>
 800e31a:	702a      	strb	r2, [r5, #0]
 800e31c:	4639      	mov	r1, r7
 800e31e:	6863      	ldr	r3, [r4, #4]
 800e320:	4650      	mov	r0, sl
 800e322:	9e01      	ldr	r6, [sp, #4]
 800e324:	47b0      	blx	r6
 800e326:	f8d8 3000 	ldr.w	r3, [r8]
 800e32a:	6821      	ldr	r1, [r4, #0]
 800e32c:	1d1a      	adds	r2, r3, #4
 800e32e:	f011 0f20 	tst.w	r1, #32
 800e332:	f8c8 2000 	str.w	r2, [r8]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	d00f      	beq.n	800e35a <_scanf_i+0x1c6>
 800e33a:	6018      	str	r0, [r3, #0]
 800e33c:	68e3      	ldr	r3, [r4, #12]
 800e33e:	3301      	adds	r3, #1
 800e340:	60e3      	str	r3, [r4, #12]
 800e342:	1bed      	subs	r5, r5, r7
 800e344:	6923      	ldr	r3, [r4, #16]
 800e346:	2000      	movs	r0, #0
 800e348:	445d      	add	r5, fp
 800e34a:	442b      	add	r3, r5
 800e34c:	6123      	str	r3, [r4, #16]
 800e34e:	b007      	add	sp, #28
 800e350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e354:	f04f 0b00 	mov.w	fp, #0
 800e358:	e7ca      	b.n	800e2f0 <_scanf_i+0x15c>
 800e35a:	07ca      	lsls	r2, r1, #31
 800e35c:	bf4c      	ite	mi
 800e35e:	8018      	strhmi	r0, [r3, #0]
 800e360:	6018      	strpl	r0, [r3, #0]
 800e362:	e7eb      	b.n	800e33c <_scanf_i+0x1a8>
 800e364:	2001      	movs	r0, #1
 800e366:	e7f2      	b.n	800e34e <_scanf_i+0x1ba>
 800e368:	0800e758 	.word	0x0800e758
 800e36c:	0800e6e1 	.word	0x0800e6e1
 800e370:	0800e5f9 	.word	0x0800e5f9
 800e374:	0800e864 	.word	0x0800e864

0800e378 <__sccl>:
 800e378:	b570      	push	{r4, r5, r6, lr}
 800e37a:	780b      	ldrb	r3, [r1, #0]
 800e37c:	4604      	mov	r4, r0
 800e37e:	3801      	subs	r0, #1
 800e380:	2b5e      	cmp	r3, #94	; 0x5e
 800e382:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e386:	bf13      	iteet	ne
 800e388:	1c4a      	addne	r2, r1, #1
 800e38a:	1c8a      	addeq	r2, r1, #2
 800e38c:	784b      	ldrbeq	r3, [r1, #1]
 800e38e:	2100      	movne	r1, #0
 800e390:	bf08      	it	eq
 800e392:	2101      	moveq	r1, #1
 800e394:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e398:	42a8      	cmp	r0, r5
 800e39a:	d1fb      	bne.n	800e394 <__sccl+0x1c>
 800e39c:	b90b      	cbnz	r3, 800e3a2 <__sccl+0x2a>
 800e39e:	1e50      	subs	r0, r2, #1
 800e3a0:	bd70      	pop	{r4, r5, r6, pc}
 800e3a2:	f081 0101 	eor.w	r1, r1, #1
 800e3a6:	4610      	mov	r0, r2
 800e3a8:	54e1      	strb	r1, [r4, r3]
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e3b0:	2d2d      	cmp	r5, #45	; 0x2d
 800e3b2:	d005      	beq.n	800e3c0 <__sccl+0x48>
 800e3b4:	2d5d      	cmp	r5, #93	; 0x5d
 800e3b6:	d016      	beq.n	800e3e6 <__sccl+0x6e>
 800e3b8:	2d00      	cmp	r5, #0
 800e3ba:	d0f1      	beq.n	800e3a0 <__sccl+0x28>
 800e3bc:	462b      	mov	r3, r5
 800e3be:	e7f2      	b.n	800e3a6 <__sccl+0x2e>
 800e3c0:	7846      	ldrb	r6, [r0, #1]
 800e3c2:	2e5d      	cmp	r6, #93	; 0x5d
 800e3c4:	d0fa      	beq.n	800e3bc <__sccl+0x44>
 800e3c6:	42b3      	cmp	r3, r6
 800e3c8:	dcf8      	bgt.n	800e3bc <__sccl+0x44>
 800e3ca:	3002      	adds	r0, #2
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	3201      	adds	r2, #1
 800e3d0:	4296      	cmp	r6, r2
 800e3d2:	54a1      	strb	r1, [r4, r2]
 800e3d4:	dcfb      	bgt.n	800e3ce <__sccl+0x56>
 800e3d6:	1af2      	subs	r2, r6, r3
 800e3d8:	1c5d      	adds	r5, r3, #1
 800e3da:	3a01      	subs	r2, #1
 800e3dc:	42b3      	cmp	r3, r6
 800e3de:	bfa8      	it	ge
 800e3e0:	2200      	movge	r2, #0
 800e3e2:	18ab      	adds	r3, r5, r2
 800e3e4:	e7e1      	b.n	800e3aa <__sccl+0x32>
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	e7da      	b.n	800e3a0 <__sccl+0x28>

0800e3ea <__submore>:
 800e3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3f6:	4299      	cmp	r1, r3
 800e3f8:	d11a      	bne.n	800e430 <__submore+0x46>
 800e3fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e3fe:	f7ff fc11 	bl	800dc24 <_malloc_r>
 800e402:	b918      	cbnz	r0, 800e40c <__submore+0x22>
 800e404:	f04f 30ff 	mov.w	r0, #4294967295
 800e408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e40c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e410:	6360      	str	r0, [r4, #52]	; 0x34
 800e412:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e416:	63a3      	str	r3, [r4, #56]	; 0x38
 800e418:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e41c:	7083      	strb	r3, [r0, #2]
 800e41e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e422:	7043      	strb	r3, [r0, #1]
 800e424:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e428:	7003      	strb	r3, [r0, #0]
 800e42a:	6020      	str	r0, [r4, #0]
 800e42c:	2000      	movs	r0, #0
 800e42e:	e7eb      	b.n	800e408 <__submore+0x1e>
 800e430:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e432:	0077      	lsls	r7, r6, #1
 800e434:	463a      	mov	r2, r7
 800e436:	f000 f82d 	bl	800e494 <_realloc_r>
 800e43a:	4605      	mov	r5, r0
 800e43c:	2800      	cmp	r0, #0
 800e43e:	d0e1      	beq.n	800e404 <__submore+0x1a>
 800e440:	eb00 0806 	add.w	r8, r0, r6
 800e444:	4601      	mov	r1, r0
 800e446:	4632      	mov	r2, r6
 800e448:	4640      	mov	r0, r8
 800e44a:	f7ff fb71 	bl	800db30 <memcpy>
 800e44e:	f8c4 8000 	str.w	r8, [r4]
 800e452:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e456:	e7e9      	b.n	800e42c <__submore+0x42>

0800e458 <_sbrk_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	2300      	movs	r3, #0
 800e45c:	4d05      	ldr	r5, [pc, #20]	; (800e474 <_sbrk_r+0x1c>)
 800e45e:	4604      	mov	r4, r0
 800e460:	4608      	mov	r0, r1
 800e462:	602b      	str	r3, [r5, #0]
 800e464:	f7f3 ffbe 	bl	80023e4 <_sbrk>
 800e468:	1c43      	adds	r3, r0, #1
 800e46a:	d102      	bne.n	800e472 <_sbrk_r+0x1a>
 800e46c:	682b      	ldr	r3, [r5, #0]
 800e46e:	b103      	cbz	r3, 800e472 <_sbrk_r+0x1a>
 800e470:	6023      	str	r3, [r4, #0]
 800e472:	bd38      	pop	{r3, r4, r5, pc}
 800e474:	20003808 	.word	0x20003808

0800e478 <memchr>:
 800e478:	b2c9      	uxtb	r1, r1
 800e47a:	4402      	add	r2, r0
 800e47c:	b510      	push	{r4, lr}
 800e47e:	4290      	cmp	r0, r2
 800e480:	4603      	mov	r3, r0
 800e482:	d101      	bne.n	800e488 <memchr+0x10>
 800e484:	2300      	movs	r3, #0
 800e486:	e003      	b.n	800e490 <memchr+0x18>
 800e488:	781c      	ldrb	r4, [r3, #0]
 800e48a:	3001      	adds	r0, #1
 800e48c:	428c      	cmp	r4, r1
 800e48e:	d1f6      	bne.n	800e47e <memchr+0x6>
 800e490:	4618      	mov	r0, r3
 800e492:	bd10      	pop	{r4, pc}

0800e494 <_realloc_r>:
 800e494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e498:	4680      	mov	r8, r0
 800e49a:	4614      	mov	r4, r2
 800e49c:	460e      	mov	r6, r1
 800e49e:	b921      	cbnz	r1, 800e4aa <_realloc_r+0x16>
 800e4a0:	4611      	mov	r1, r2
 800e4a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4a6:	f7ff bbbd 	b.w	800dc24 <_malloc_r>
 800e4aa:	b92a      	cbnz	r2, 800e4b8 <_realloc_r+0x24>
 800e4ac:	4625      	mov	r5, r4
 800e4ae:	f7ff fb4d 	bl	800db4c <_free_r>
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b8:	f000 f914 	bl	800e6e4 <_malloc_usable_size_r>
 800e4bc:	4284      	cmp	r4, r0
 800e4be:	4607      	mov	r7, r0
 800e4c0:	d802      	bhi.n	800e4c8 <_realloc_r+0x34>
 800e4c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4c6:	d812      	bhi.n	800e4ee <_realloc_r+0x5a>
 800e4c8:	4621      	mov	r1, r4
 800e4ca:	4640      	mov	r0, r8
 800e4cc:	f7ff fbaa 	bl	800dc24 <_malloc_r>
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d0ed      	beq.n	800e4b2 <_realloc_r+0x1e>
 800e4d6:	42bc      	cmp	r4, r7
 800e4d8:	4622      	mov	r2, r4
 800e4da:	4631      	mov	r1, r6
 800e4dc:	bf28      	it	cs
 800e4de:	463a      	movcs	r2, r7
 800e4e0:	f7ff fb26 	bl	800db30 <memcpy>
 800e4e4:	4631      	mov	r1, r6
 800e4e6:	4640      	mov	r0, r8
 800e4e8:	f7ff fb30 	bl	800db4c <_free_r>
 800e4ec:	e7e1      	b.n	800e4b2 <_realloc_r+0x1e>
 800e4ee:	4635      	mov	r5, r6
 800e4f0:	e7df      	b.n	800e4b2 <_realloc_r+0x1e>
	...

0800e4f4 <_strtol_l.constprop.0>:
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4fa:	d001      	beq.n	800e500 <_strtol_l.constprop.0+0xc>
 800e4fc:	2b24      	cmp	r3, #36	; 0x24
 800e4fe:	d906      	bls.n	800e50e <_strtol_l.constprop.0+0x1a>
 800e500:	f7ff faea 	bl	800dad8 <__errno>
 800e504:	2316      	movs	r3, #22
 800e506:	6003      	str	r3, [r0, #0]
 800e508:	2000      	movs	r0, #0
 800e50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e50e:	460d      	mov	r5, r1
 800e510:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800e5f4 <_strtol_l.constprop.0+0x100>
 800e514:	462e      	mov	r6, r5
 800e516:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e51a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e51e:	f017 0708 	ands.w	r7, r7, #8
 800e522:	d1f7      	bne.n	800e514 <_strtol_l.constprop.0+0x20>
 800e524:	2c2d      	cmp	r4, #45	; 0x2d
 800e526:	d132      	bne.n	800e58e <_strtol_l.constprop.0+0x9a>
 800e528:	782c      	ldrb	r4, [r5, #0]
 800e52a:	2701      	movs	r7, #1
 800e52c:	1cb5      	adds	r5, r6, #2
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d05b      	beq.n	800e5ea <_strtol_l.constprop.0+0xf6>
 800e532:	2b10      	cmp	r3, #16
 800e534:	d109      	bne.n	800e54a <_strtol_l.constprop.0+0x56>
 800e536:	2c30      	cmp	r4, #48	; 0x30
 800e538:	d107      	bne.n	800e54a <_strtol_l.constprop.0+0x56>
 800e53a:	782c      	ldrb	r4, [r5, #0]
 800e53c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e540:	2c58      	cmp	r4, #88	; 0x58
 800e542:	d14d      	bne.n	800e5e0 <_strtol_l.constprop.0+0xec>
 800e544:	786c      	ldrb	r4, [r5, #1]
 800e546:	2310      	movs	r3, #16
 800e548:	3502      	adds	r5, #2
 800e54a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e54e:	f04f 0e00 	mov.w	lr, #0
 800e552:	f108 38ff 	add.w	r8, r8, #4294967295
 800e556:	4676      	mov	r6, lr
 800e558:	fbb8 f9f3 	udiv	r9, r8, r3
 800e55c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e560:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e564:	f1bc 0f09 	cmp.w	ip, #9
 800e568:	d816      	bhi.n	800e598 <_strtol_l.constprop.0+0xa4>
 800e56a:	4664      	mov	r4, ip
 800e56c:	42a3      	cmp	r3, r4
 800e56e:	dd24      	ble.n	800e5ba <_strtol_l.constprop.0+0xc6>
 800e570:	f1be 3fff 	cmp.w	lr, #4294967295
 800e574:	d008      	beq.n	800e588 <_strtol_l.constprop.0+0x94>
 800e576:	45b1      	cmp	r9, r6
 800e578:	d31c      	bcc.n	800e5b4 <_strtol_l.constprop.0+0xc0>
 800e57a:	d101      	bne.n	800e580 <_strtol_l.constprop.0+0x8c>
 800e57c:	45a2      	cmp	sl, r4
 800e57e:	db19      	blt.n	800e5b4 <_strtol_l.constprop.0+0xc0>
 800e580:	fb06 4603 	mla	r6, r6, r3, r4
 800e584:	f04f 0e01 	mov.w	lr, #1
 800e588:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e58c:	e7e8      	b.n	800e560 <_strtol_l.constprop.0+0x6c>
 800e58e:	2c2b      	cmp	r4, #43	; 0x2b
 800e590:	bf04      	itt	eq
 800e592:	782c      	ldrbeq	r4, [r5, #0]
 800e594:	1cb5      	addeq	r5, r6, #2
 800e596:	e7ca      	b.n	800e52e <_strtol_l.constprop.0+0x3a>
 800e598:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e59c:	f1bc 0f19 	cmp.w	ip, #25
 800e5a0:	d801      	bhi.n	800e5a6 <_strtol_l.constprop.0+0xb2>
 800e5a2:	3c37      	subs	r4, #55	; 0x37
 800e5a4:	e7e2      	b.n	800e56c <_strtol_l.constprop.0+0x78>
 800e5a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e5aa:	f1bc 0f19 	cmp.w	ip, #25
 800e5ae:	d804      	bhi.n	800e5ba <_strtol_l.constprop.0+0xc6>
 800e5b0:	3c57      	subs	r4, #87	; 0x57
 800e5b2:	e7db      	b.n	800e56c <_strtol_l.constprop.0+0x78>
 800e5b4:	f04f 3eff 	mov.w	lr, #4294967295
 800e5b8:	e7e6      	b.n	800e588 <_strtol_l.constprop.0+0x94>
 800e5ba:	f1be 3fff 	cmp.w	lr, #4294967295
 800e5be:	d105      	bne.n	800e5cc <_strtol_l.constprop.0+0xd8>
 800e5c0:	2322      	movs	r3, #34	; 0x22
 800e5c2:	4646      	mov	r6, r8
 800e5c4:	6003      	str	r3, [r0, #0]
 800e5c6:	b942      	cbnz	r2, 800e5da <_strtol_l.constprop.0+0xe6>
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	e79e      	b.n	800e50a <_strtol_l.constprop.0+0x16>
 800e5cc:	b107      	cbz	r7, 800e5d0 <_strtol_l.constprop.0+0xdc>
 800e5ce:	4276      	negs	r6, r6
 800e5d0:	2a00      	cmp	r2, #0
 800e5d2:	d0f9      	beq.n	800e5c8 <_strtol_l.constprop.0+0xd4>
 800e5d4:	f1be 0f00 	cmp.w	lr, #0
 800e5d8:	d000      	beq.n	800e5dc <_strtol_l.constprop.0+0xe8>
 800e5da:	1e69      	subs	r1, r5, #1
 800e5dc:	6011      	str	r1, [r2, #0]
 800e5de:	e7f3      	b.n	800e5c8 <_strtol_l.constprop.0+0xd4>
 800e5e0:	2430      	movs	r4, #48	; 0x30
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d1b1      	bne.n	800e54a <_strtol_l.constprop.0+0x56>
 800e5e6:	2308      	movs	r3, #8
 800e5e8:	e7af      	b.n	800e54a <_strtol_l.constprop.0+0x56>
 800e5ea:	2c30      	cmp	r4, #48	; 0x30
 800e5ec:	d0a5      	beq.n	800e53a <_strtol_l.constprop.0+0x46>
 800e5ee:	230a      	movs	r3, #10
 800e5f0:	e7ab      	b.n	800e54a <_strtol_l.constprop.0+0x56>
 800e5f2:	bf00      	nop
 800e5f4:	0800e870 	.word	0x0800e870

0800e5f8 <_strtol_r>:
 800e5f8:	f7ff bf7c 	b.w	800e4f4 <_strtol_l.constprop.0>

0800e5fc <_strtoul_l.constprop.0>:
 800e5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e600:	4686      	mov	lr, r0
 800e602:	460d      	mov	r5, r1
 800e604:	4f35      	ldr	r7, [pc, #212]	; (800e6dc <_strtoul_l.constprop.0+0xe0>)
 800e606:	4628      	mov	r0, r5
 800e608:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e60c:	5d3e      	ldrb	r6, [r7, r4]
 800e60e:	f016 0608 	ands.w	r6, r6, #8
 800e612:	d1f8      	bne.n	800e606 <_strtoul_l.constprop.0+0xa>
 800e614:	2c2d      	cmp	r4, #45	; 0x2d
 800e616:	d130      	bne.n	800e67a <_strtoul_l.constprop.0+0x7e>
 800e618:	782c      	ldrb	r4, [r5, #0]
 800e61a:	2601      	movs	r6, #1
 800e61c:	1c85      	adds	r5, r0, #2
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d057      	beq.n	800e6d2 <_strtoul_l.constprop.0+0xd6>
 800e622:	2b10      	cmp	r3, #16
 800e624:	d109      	bne.n	800e63a <_strtoul_l.constprop.0+0x3e>
 800e626:	2c30      	cmp	r4, #48	; 0x30
 800e628:	d107      	bne.n	800e63a <_strtoul_l.constprop.0+0x3e>
 800e62a:	7828      	ldrb	r0, [r5, #0]
 800e62c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e630:	2858      	cmp	r0, #88	; 0x58
 800e632:	d149      	bne.n	800e6c8 <_strtoul_l.constprop.0+0xcc>
 800e634:	786c      	ldrb	r4, [r5, #1]
 800e636:	2310      	movs	r3, #16
 800e638:	3502      	adds	r5, #2
 800e63a:	f04f 38ff 	mov.w	r8, #4294967295
 800e63e:	2700      	movs	r7, #0
 800e640:	fbb8 f8f3 	udiv	r8, r8, r3
 800e644:	fb03 f908 	mul.w	r9, r3, r8
 800e648:	4638      	mov	r0, r7
 800e64a:	ea6f 0909 	mvn.w	r9, r9
 800e64e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e652:	f1bc 0f09 	cmp.w	ip, #9
 800e656:	d815      	bhi.n	800e684 <_strtoul_l.constprop.0+0x88>
 800e658:	4664      	mov	r4, ip
 800e65a:	42a3      	cmp	r3, r4
 800e65c:	dd23      	ble.n	800e6a6 <_strtoul_l.constprop.0+0xaa>
 800e65e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800e662:	d007      	beq.n	800e674 <_strtoul_l.constprop.0+0x78>
 800e664:	4580      	cmp	r8, r0
 800e666:	d31b      	bcc.n	800e6a0 <_strtoul_l.constprop.0+0xa4>
 800e668:	d101      	bne.n	800e66e <_strtoul_l.constprop.0+0x72>
 800e66a:	45a1      	cmp	r9, r4
 800e66c:	db18      	blt.n	800e6a0 <_strtoul_l.constprop.0+0xa4>
 800e66e:	fb00 4003 	mla	r0, r0, r3, r4
 800e672:	2701      	movs	r7, #1
 800e674:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e678:	e7e9      	b.n	800e64e <_strtoul_l.constprop.0+0x52>
 800e67a:	2c2b      	cmp	r4, #43	; 0x2b
 800e67c:	bf04      	itt	eq
 800e67e:	782c      	ldrbeq	r4, [r5, #0]
 800e680:	1c85      	addeq	r5, r0, #2
 800e682:	e7cc      	b.n	800e61e <_strtoul_l.constprop.0+0x22>
 800e684:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e688:	f1bc 0f19 	cmp.w	ip, #25
 800e68c:	d801      	bhi.n	800e692 <_strtoul_l.constprop.0+0x96>
 800e68e:	3c37      	subs	r4, #55	; 0x37
 800e690:	e7e3      	b.n	800e65a <_strtoul_l.constprop.0+0x5e>
 800e692:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e696:	f1bc 0f19 	cmp.w	ip, #25
 800e69a:	d804      	bhi.n	800e6a6 <_strtoul_l.constprop.0+0xaa>
 800e69c:	3c57      	subs	r4, #87	; 0x57
 800e69e:	e7dc      	b.n	800e65a <_strtoul_l.constprop.0+0x5e>
 800e6a0:	f04f 37ff 	mov.w	r7, #4294967295
 800e6a4:	e7e6      	b.n	800e674 <_strtoul_l.constprop.0+0x78>
 800e6a6:	1c7b      	adds	r3, r7, #1
 800e6a8:	d106      	bne.n	800e6b8 <_strtoul_l.constprop.0+0xbc>
 800e6aa:	2322      	movs	r3, #34	; 0x22
 800e6ac:	4638      	mov	r0, r7
 800e6ae:	f8ce 3000 	str.w	r3, [lr]
 800e6b2:	b932      	cbnz	r2, 800e6c2 <_strtoul_l.constprop.0+0xc6>
 800e6b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6b8:	b106      	cbz	r6, 800e6bc <_strtoul_l.constprop.0+0xc0>
 800e6ba:	4240      	negs	r0, r0
 800e6bc:	2a00      	cmp	r2, #0
 800e6be:	d0f9      	beq.n	800e6b4 <_strtoul_l.constprop.0+0xb8>
 800e6c0:	b107      	cbz	r7, 800e6c4 <_strtoul_l.constprop.0+0xc8>
 800e6c2:	1e69      	subs	r1, r5, #1
 800e6c4:	6011      	str	r1, [r2, #0]
 800e6c6:	e7f5      	b.n	800e6b4 <_strtoul_l.constprop.0+0xb8>
 800e6c8:	2430      	movs	r4, #48	; 0x30
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1b5      	bne.n	800e63a <_strtoul_l.constprop.0+0x3e>
 800e6ce:	2308      	movs	r3, #8
 800e6d0:	e7b3      	b.n	800e63a <_strtoul_l.constprop.0+0x3e>
 800e6d2:	2c30      	cmp	r4, #48	; 0x30
 800e6d4:	d0a9      	beq.n	800e62a <_strtoul_l.constprop.0+0x2e>
 800e6d6:	230a      	movs	r3, #10
 800e6d8:	e7af      	b.n	800e63a <_strtoul_l.constprop.0+0x3e>
 800e6da:	bf00      	nop
 800e6dc:	0800e870 	.word	0x0800e870

0800e6e0 <_strtoul_r>:
 800e6e0:	f7ff bf8c 	b.w	800e5fc <_strtoul_l.constprop.0>

0800e6e4 <_malloc_usable_size_r>:
 800e6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6e8:	1f18      	subs	r0, r3, #4
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	bfbc      	itt	lt
 800e6ee:	580b      	ldrlt	r3, [r1, r0]
 800e6f0:	18c0      	addlt	r0, r0, r3
 800e6f2:	4770      	bx	lr

0800e6f4 <_init>:
 800e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f6:	bf00      	nop
 800e6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6fa:	bc08      	pop	{r3}
 800e6fc:	469e      	mov	lr, r3
 800e6fe:	4770      	bx	lr

0800e700 <_fini>:
 800e700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e702:	bf00      	nop
 800e704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e706:	bc08      	pop	{r3}
 800e708:	469e      	mov	lr, r3
 800e70a:	4770      	bx	lr
